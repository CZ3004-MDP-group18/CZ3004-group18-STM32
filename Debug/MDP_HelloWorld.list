
MDP_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e334  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f7c  0800e4c8  0800e4c8  0001e4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f444  0800f444  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f444  0800f444  0001f444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f44c  0800f44c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f44c  0800f44c  0001f44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f450  0800f450  0001f450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00005030  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005210  20005210  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002360f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000417e  00000000  00000000  0004381f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b48  00000000  00000000  000479a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019f8  00000000  00000000  000494e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000658a  00000000  00000000  0004aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001edc2  00000000  00000000  0005146a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7e52  00000000  00000000  0007022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015807e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085c4  00000000  00000000  001580d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e4ac 	.word	0x0800e4ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800e4ac 	.word	0x0800e4ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <ICM20948_Init>:
static void     write_single_ak09916_reg(uint8_t reg, uint8_t val);
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);

/* Main Functions */
void ICM20948_Init()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8000ea4:	bf00      	nop
 8000ea6:	f000 f8fb 	bl	80010a0 <icm20948_who_am_i>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f083 0301 	eor.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f7      	bne.n	8000ea6 <ICM20948_Init+0x6>

	icm20948_device_reset();
 8000eb6:	f000 f918 	bl	80010ea <icm20948_device_reset>
	icm20948_wakeup();
 8000eba:	f000 f92d 	bl	8001118 <icm20948_wakeup>

	icm20948_clock_source(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f000 f98e 	bl	80011e0 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000ec4:	f000 f9a5 	bl	8001212 <icm20948_odr_align_enable>
	
//	icm20948_spi_slave_enable();
	
	icm20948_gyro_low_pass_filter(0);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 f9ab 	bl	8001224 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f9c5 	bl	800125e <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f000 f9df 	bl	8001298 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f9eb 	bl	80012b6 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8000ee0:	f000 fa18 	bl	8001314 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8000ee4:	f000 fab4 	bl	8001450 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 fbbf 	bl	800166c <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f000 fc06 	bl	8001700 <icm20948_accel_full_scale_select>
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <AK09916_Init>:

void AK09916_Init()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8000efc:	f000 f926 	bl	800114c <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8000f00:	f000 f93b 	bl	800117a <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8000f04:	2007      	movs	r0, #7
 8000f06:	f000 f952 	bl	80011ae <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8000f0a:	bf00      	nop
 8000f0c:	f000 f8db 	bl	80010c6 <ak09916_who_am_i>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f083 0301 	eor.w	r3, r3, #1
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f7      	bne.n	8000f0c <AK09916_Init+0x14>

	ak09916_soft_reset();
 8000f1c:	f000 f8f1 	bl	8001102 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8000f20:	2008      	movs	r0, #8
 8000f22:	f000 f9e6 	bl	80012f2 <ak09916_operation_mode_setting>
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <ICM20948_Gyro_Read>:

void ICM20948_Gyro_Read(axises* data)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000f32:	2206      	movs	r2, #6
 8000f34:	2133      	movs	r1, #51	; 0x33
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 fc84 	bl	8001844 <read_multiple_icm20948_reg>
 8000f3c:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3302      	adds	r3, #2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3303      	adds	r3, #3
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3304      	adds	r3, #4
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3305      	adds	r3, #5
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <ICM20948_Accel_Read>:

void ICM20948_Accel_Read(axises* data)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000fb8:	2206      	movs	r2, #6
 8000fba:	212d      	movs	r1, #45	; 0x2d
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 fc41 	bl	8001844 <read_multiple_icm20948_reg>
 8000fc2:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3302      	adds	r3, #2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3303      	adds	r3, #3
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3304      	adds	r3, #4
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3305      	adds	r3, #5
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b21b      	sxth	r3, r3
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <ICM20948_Accel_Read+0x90>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	edc3 7a02 	vstr	s15, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000200 	.word	0x20000200

08001044 <ICM20948_Gyro_Read_dps>:

	return true;
}

void ICM20948_Gyro_Read_dps(axises* data)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	ICM20948_Gyro_Read(data);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff6c 	bl	8000f2a <ICM20948_Gyro_Read>

	data->x /= gyro_scale_factor;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	edd3 6a00 	vldr	s13, [r3]
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <ICM20948_Gyro_Read_dps+0x58>)
 800105a:	ed93 7a00 	vldr	s14, [r3]
 800105e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	edc3 7a00 	vstr	s15, [r3]
	data->y /= gyro_scale_factor;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	edd3 6a01 	vldr	s13, [r3, #4]
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <ICM20948_Gyro_Read_dps+0x58>)
 8001070:	ed93 7a00 	vldr	s14, [r3]
 8001074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= gyro_scale_factor;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edd3 6a02 	vldr	s13, [r3, #8]
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <ICM20948_Gyro_Read_dps+0x58>)
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200001fc 	.word	0x200001fc

080010a0 <icm20948_who_am_i>:
}


/* Sub Functions */
bool icm20948_who_am_i()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f000 fb87 	bl	80017bc <read_single_icm20948_reg>
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2bea      	cmp	r3, #234	; 0xea
 80010b6:	d101      	bne.n	80010bc <icm20948_who_am_i+0x1c>
		return true;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <icm20948_who_am_i+0x1e>
	else
		return false;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 fc03 	bl	80018d8 <read_single_ak09916_reg>
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b09      	cmp	r3, #9
 80010da:	d101      	bne.n	80010e0 <ak09916_who_am_i+0x1a>
		return true;
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <ak09916_who_am_i+0x1c>
	else
		return false;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <icm20948_device_reset>:

void icm20948_device_reset()
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 80010ee:	22c1      	movs	r2, #193	; 0xc1
 80010f0:	2106      	movs	r1, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 fb84 	bl	8001800 <write_single_icm20948_reg>
	HAL_Delay(100);
 80010f8:	2064      	movs	r0, #100	; 0x64
 80010fa:	f003 fa3b 	bl	8004574 <HAL_Delay>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}

08001102 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8001106:	2101      	movs	r1, #1
 8001108:	2032      	movs	r0, #50	; 0x32
 800110a:	f000 fc06 	bl	800191a <write_single_ak09916_reg>
	HAL_Delay(100);
 800110e:	2064      	movs	r0, #100	; 0x64
 8001110:	f003 fa30 	bl	8004574 <HAL_Delay>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800111e:	2106      	movs	r1, #6
 8001120:	2000      	movs	r0, #0
 8001122:	f000 fb4b 	bl	80017bc <read_single_icm20948_reg>
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001130:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	461a      	mov	r2, r3
 8001136:	2106      	movs	r1, #6
 8001138:	2000      	movs	r0, #0
 800113a:	f000 fb61 	bl	8001800 <write_single_icm20948_reg>
	HAL_Delay(100);
 800113e:	2064      	movs	r0, #100	; 0x64
 8001140:	f003 fa18 	bl	8004574 <HAL_Delay>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <icm20948_i2c_master_reset>:
//
//	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
//}
//
void icm20948_i2c_master_reset()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8001152:	2103      	movs	r1, #3
 8001154:	2000      	movs	r0, #0
 8001156:	f000 fb31 	bl	80017bc <read_single_icm20948_reg>
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	461a      	mov	r2, r3
 800116a:	2103      	movs	r1, #3
 800116c:	2000      	movs	r0, #0
 800116e:	f000 fb47 	bl	8001800 <write_single_icm20948_reg>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8001180:	2103      	movs	r1, #3
 8001182:	2000      	movs	r0, #0
 8001184:	f000 fb1a 	bl	80017bc <read_single_icm20948_reg>
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	461a      	mov	r2, r3
 8001198:	2103      	movs	r1, #3
 800119a:	2000      	movs	r0, #0
 800119c:	f000 fb30 	bl	8001800 <write_single_icm20948_reg>
	HAL_Delay(100);
 80011a0:	2064      	movs	r0, #100	; 0x64
 80011a2:	f003 f9e7 	bl	8004574 <HAL_Delay>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 80011b8:	2101      	movs	r1, #1
 80011ba:	2030      	movs	r0, #48	; 0x30
 80011bc:	f000 fafe 	bl	80017bc <read_single_icm20948_reg>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	461a      	mov	r2, r3
 80011d0:	2101      	movs	r1, #1
 80011d2:	2030      	movs	r0, #48	; 0x30
 80011d4:	f000 fb14 	bl	8001800 <write_single_icm20948_reg>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80011ea:	2106      	movs	r1, #6
 80011ec:	2000      	movs	r0, #0
 80011ee:	f000 fae5 	bl	80017bc <read_single_icm20948_reg>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	461a      	mov	r2, r3
 8001202:	2106      	movs	r1, #6
 8001204:	2000      	movs	r0, #0
 8001206:	f000 fafb 	bl	8001800 <write_single_icm20948_reg>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8001216:	2201      	movs	r2, #1
 8001218:	2109      	movs	r1, #9
 800121a:	2020      	movs	r0, #32
 800121c:	f000 faf0 	bl	8001800 <write_single_icm20948_reg>
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800122e:	2101      	movs	r1, #1
 8001230:	2020      	movs	r0, #32
 8001232:	f000 fac3 	bl	80017bc <read_single_icm20948_reg>
 8001236:	4603      	mov	r3, r0
 8001238:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	b25a      	sxtb	r2, r3
 8001240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001244:	4313      	orrs	r3, r2
 8001246:	b25b      	sxtb	r3, r3
 8001248:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	461a      	mov	r2, r3
 800124e:	2101      	movs	r1, #1
 8001250:	2020      	movs	r0, #32
 8001252:	f000 fad5 	bl	8001800 <write_single_icm20948_reg>
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001268:	2114      	movs	r1, #20
 800126a:	2020      	movs	r0, #32
 800126c:	f000 faa6 	bl	80017bc <read_single_icm20948_reg>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	b25a      	sxtb	r2, r3
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4313      	orrs	r3, r2
 8001280:	b25b      	sxtb	r3, r3
 8001282:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	461a      	mov	r2, r3
 8001288:	2101      	movs	r1, #1
 800128a:	2020      	movs	r0, #32
 800128c:	f000 fab8 	bl	8001800 <write_single_icm20948_reg>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	461a      	mov	r2, r3
 80012a6:	2100      	movs	r1, #0
 80012a8:	2020      	movs	r0, #32
 80012aa:	f000 faa9 	bl	8001800 <write_single_icm20948_reg>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	461a      	mov	r2, r3
 80012d6:	2110      	movs	r1, #16
 80012d8:	2020      	movs	r0, #32
 80012da:	f000 fa91 	bl	8001800 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 80012de:	7bbb      	ldrb	r3, [r7, #14]
 80012e0:	461a      	mov	r2, r3
 80012e2:	2111      	movs	r1, #17
 80012e4:	2020      	movs	r0, #32
 80012e6:	f000 fa8b 	bl	8001800 <write_single_icm20948_reg>
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4619      	mov	r1, r3
 8001300:	2031      	movs	r0, #49	; 0x31
 8001302:	f000 fb0a 	bl	800191a <write_single_ak09916_reg>
	HAL_Delay(100);
 8001306:	2064      	movs	r0, #100	; 0x64
 8001308:	f003 f934 	bl	8004574 <HAL_Delay>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	2300      	movs	r3, #0
 800132c:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 1000; i++)
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
 8001332:	e031      	b.n	8001398 <icm20948_gyro_calibration+0x84>
	{
		ICM20948_Gyro_Read(&temp);
 8001334:	f107 0318 	add.w	r3, r7, #24
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fdf6 	bl	8000f2a <ICM20948_Gyro_Read>
		gyro_bias[0] += temp.x;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001348:	edd7 7a06 	vldr	s15, [r7, #24]
 800134c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001354:	ee17 3a90 	vmov	r3, s15
 8001358:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001364:	edd7 7a07 	vldr	s15, [r7, #28]
 8001368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001370:	ee17 3a90 	vmov	r3, s15
 8001374:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001380:	edd7 7a08 	vldr	s15, [r7, #32]
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138c:	ee17 3a90 	vmov	r3, s15
 8001390:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 1000; i++)
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3301      	adds	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800139e:	dbc9      	blt.n	8001334 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 1000;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a2a      	ldr	r2, [pc, #168]	; (800144c <icm20948_gyro_calibration+0x138>)
 80013a4:	fb82 1203 	smull	r1, r2, r2, r3
 80013a8:	1192      	asrs	r2, r2, #6
 80013aa:	17db      	asrs	r3, r3, #31
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 1000;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4a26      	ldr	r2, [pc, #152]	; (800144c <icm20948_gyro_calibration+0x138>)
 80013b4:	fb82 1203 	smull	r1, r2, r2, r3
 80013b8:	1192      	asrs	r2, r2, #6
 80013ba:	17db      	asrs	r3, r3, #31
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 1000;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	4a22      	ldr	r2, [pc, #136]	; (800144c <icm20948_gyro_calibration+0x138>)
 80013c4:	fb82 1203 	smull	r1, r2, r2, r3
 80013c8:	1192      	asrs	r2, r2, #6
 80013ca:	17db      	asrs	r3, r3, #31
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	425b      	negs	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	da00      	bge.n	80013da <icm20948_gyro_calibration+0xc6>
 80013d8:	3303      	adds	r3, #3
 80013da:	109b      	asrs	r3, r3, #2
 80013dc:	121b      	asrs	r3, r3, #8
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	425b      	negs	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	da00      	bge.n	80013ec <icm20948_gyro_calibration+0xd8>
 80013ea:	3303      	adds	r3, #3
 80013ec:	109b      	asrs	r3, r3, #2
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	425b      	negs	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	da00      	bge.n	80013fc <icm20948_gyro_calibration+0xe8>
 80013fa:	3303      	adds	r3, #3
 80013fc:	109b      	asrs	r3, r3, #2
 80013fe:	121b      	asrs	r3, r3, #8
 8001400:	b2db      	uxtb	r3, r3
 8001402:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	425b      	negs	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	da00      	bge.n	800140e <icm20948_gyro_calibration+0xfa>
 800140c:	3303      	adds	r3, #3
 800140e:	109b      	asrs	r3, r3, #2
 8001410:	b2db      	uxtb	r3, r3
 8001412:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	425b      	negs	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	da00      	bge.n	800141e <icm20948_gyro_calibration+0x10a>
 800141c:	3303      	adds	r3, #3
 800141e:	109b      	asrs	r3, r3, #2
 8001420:	121b      	asrs	r3, r3, #8
 8001422:	b2db      	uxtb	r3, r3
 8001424:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	425b      	negs	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	da00      	bge.n	8001430 <icm20948_gyro_calibration+0x11c>
 800142e:	3303      	adds	r3, #3
 8001430:	109b      	asrs	r3, r3, #2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8001436:	1d3a      	adds	r2, r7, #4
 8001438:	2306      	movs	r3, #6
 800143a:	2103      	movs	r1, #3
 800143c:	2020      	movs	r0, #32
 800143e:	f000 fa27 	bl	8001890 <write_multiple_icm20948_reg>
}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	10624dd3 	.word	0x10624dd3

08001450 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b090      	sub	sp, #64	; 0x40
 8001454:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	2300      	movs	r3, #0
 8001474:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8001476:	2300      	movs	r3, #0
 8001478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800147a:	e031      	b.n	80014e0 <icm20948_accel_calibration+0x90>
	{
		ICM20948_Accel_Read(&temp);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fd95 	bl	8000fb0 <ICM20948_Accel_Read>
		accel_bias[0] += temp.x;
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001490:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800149c:	ee17 3a90 	vmov	r3, s15
 80014a0:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b8:	ee17 3a90 	vmov	r3, s15
 80014bc:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d4:	ee17 3a90 	vmov	r3, s15
 80014d8:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 80014da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014dc:	3301      	adds	r3, #1
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e2:	2b63      	cmp	r3, #99	; 0x63
 80014e4:	ddca      	ble.n	800147c <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4a5e      	ldr	r2, [pc, #376]	; (8001664 <icm20948_accel_calibration+0x214>)
 80014ea:	fb82 1203 	smull	r1, r2, r2, r3
 80014ee:	1152      	asrs	r2, r2, #5
 80014f0:	17db      	asrs	r3, r3, #31
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4a5a      	ldr	r2, [pc, #360]	; (8001664 <icm20948_accel_calibration+0x214>)
 80014fa:	fb82 1203 	smull	r1, r2, r2, r3
 80014fe:	1152      	asrs	r2, r2, #5
 8001500:	17db      	asrs	r3, r3, #31
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	4a56      	ldr	r2, [pc, #344]	; (8001664 <icm20948_accel_calibration+0x214>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	1152      	asrs	r2, r2, #5
 8001510:	17db      	asrs	r3, r3, #31
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 8001516:	4a54      	ldr	r2, [pc, #336]	; (8001668 <icm20948_accel_calibration+0x218>)
 8001518:	463b      	mov	r3, r7
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	4611      	mov	r1, r2
 800151e:	8019      	strh	r1, [r3, #0]
 8001520:	3302      	adds	r3, #2
 8001522:	0c12      	lsrs	r2, r2, #16
 8001524:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8001526:	2202      	movs	r2, #2
 8001528:	2114      	movs	r1, #20
 800152a:	2010      	movs	r0, #16
 800152c:	f000 f98a 	bl	8001844 <read_multiple_icm20948_reg>
 8001530:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8001532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800153a:	3201      	adds	r2, #1
 800153c:	7812      	ldrb	r2, [r2, #0]
 800153e:	4313      	orrs	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 8001542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001544:	3301      	adds	r3, #1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8001550:	2202      	movs	r2, #2
 8001552:	2117      	movs	r1, #23
 8001554:	2010      	movs	r0, #16
 8001556:	f000 f975 	bl	8001844 <read_multiple_icm20948_reg>
 800155a:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 800155c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001564:	3201      	adds	r2, #1
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 800156c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156e:	3301      	adds	r3, #1
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 800157a:	2202      	movs	r2, #2
 800157c:	211a      	movs	r1, #26
 800157e:	2010      	movs	r0, #16
 8001580:	f000 f960 	bl	8001844 <read_multiple_icm20948_reg>
 8001584:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800158e:	3201      	adds	r2, #1
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 8001596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001598:	3301      	adds	r3, #1
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	da00      	bge.n	80015ae <icm20948_accel_calibration+0x15e>
 80015ac:	3307      	adds	r3, #7
 80015ae:	10db      	asrs	r3, r3, #3
 80015b0:	425b      	negs	r3, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	da00      	bge.n	80015c0 <icm20948_accel_calibration+0x170>
 80015be:	3307      	adds	r3, #7
 80015c0:	10db      	asrs	r3, r3, #3
 80015c2:	425b      	negs	r3, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	da00      	bge.n	80015d2 <icm20948_accel_calibration+0x182>
 80015d0:	3307      	adds	r3, #7
 80015d2:	10db      	asrs	r3, r3, #3
 80015d4:	425b      	negs	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	121b      	asrs	r3, r3, #8
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 80015ee:	797a      	ldrb	r2, [r7, #5]
 80015f0:	783b      	ldrb	r3, [r7, #0]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	121b      	asrs	r3, r3, #8
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 800160c:	79fa      	ldrb	r2, [r7, #7]
 800160e:	787b      	ldrb	r3, [r7, #1]
 8001610:	4313      	orrs	r3, r2
 8001612:	b2db      	uxtb	r3, r3
 8001614:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	121b      	asrs	r3, r3, #8
 800161a:	b2db      	uxtb	r3, r3
 800161c:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 800162a:	7a7a      	ldrb	r2, [r7, #9]
 800162c:	78bb      	ldrb	r3, [r7, #2]
 800162e:	4313      	orrs	r3, r2
 8001630:	b2db      	uxtb	r3, r3
 8001632:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8001634:	1d3a      	adds	r2, r7, #4
 8001636:	2302      	movs	r3, #2
 8001638:	2114      	movs	r1, #20
 800163a:	2010      	movs	r0, #16
 800163c:	f000 f928 	bl	8001890 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	1c9a      	adds	r2, r3, #2
 8001644:	2302      	movs	r3, #2
 8001646:	2117      	movs	r1, #23
 8001648:	2010      	movs	r0, #16
 800164a:	f000 f921 	bl	8001890 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	1d1a      	adds	r2, r3, #4
 8001652:	2302      	movs	r3, #2
 8001654:	211a      	movs	r1, #26
 8001656:	2010      	movs	r0, #16
 8001658:	f000 f91a 	bl	8001890 <write_multiple_icm20948_reg>
}
 800165c:	bf00      	nop
 800165e:	3740      	adds	r7, #64	; 0x40
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	51eb851f 	.word	0x51eb851f
 8001668:	0800e4c8 	.word	0x0800e4c8

0800166c <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001676:	2101      	movs	r1, #1
 8001678:	2020      	movs	r0, #32
 800167a:	f000 f89f 	bl	80017bc <read_single_icm20948_reg>
 800167e:	4603      	mov	r3, r0
 8001680:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d827      	bhi.n	80016d8 <icm20948_gyro_full_scale_select+0x6c>
 8001688:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <icm20948_gyro_full_scale_select+0x24>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016a9 	.word	0x080016a9
 8001698:	080016b9 	.word	0x080016b9
 800169c:	080016c9 	.word	0x080016c9
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <icm20948_gyro_full_scale_select+0x80>)
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <icm20948_gyro_full_scale_select+0x84>)
 80016a4:	601a      	str	r2, [r3, #0]
			break;
 80016a6:	e017      	b.n	80016d8 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <icm20948_gyro_full_scale_select+0x80>)
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <icm20948_gyro_full_scale_select+0x88>)
 80016b4:	601a      	str	r2, [r3, #0]
			break;
 80016b6:	e00f      	b.n	80016d8 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <icm20948_gyro_full_scale_select+0x80>)
 80016c2:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <icm20948_gyro_full_scale_select+0x8c>)
 80016c4:	601a      	str	r2, [r3, #0]
			break;
 80016c6:	e007      	b.n	80016d8 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	f043 0306 	orr.w	r3, r3, #6
 80016ce:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <icm20948_gyro_full_scale_select+0x80>)
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <icm20948_gyro_full_scale_select+0x90>)
 80016d4:	601a      	str	r2, [r3, #0]
			break;
 80016d6:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	461a      	mov	r2, r3
 80016dc:	2101      	movs	r1, #1
 80016de:	2020      	movs	r0, #32
 80016e0:	f000 f88e 	bl	8001800 <write_single_icm20948_reg>
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200001fc 	.word	0x200001fc
 80016f0:	43030000 	.word	0x43030000
 80016f4:	42830000 	.word	0x42830000
 80016f8:	42033333 	.word	0x42033333
 80016fc:	41833333 	.word	0x41833333

08001700 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800170a:	2114      	movs	r1, #20
 800170c:	2020      	movs	r0, #32
 800170e:	f000 f855 	bl	80017bc <read_single_icm20948_reg>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d82b      	bhi.n	8001774 <icm20948_accel_full_scale_select+0x74>
 800171c:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <icm20948_accel_full_scale_select+0x24>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001735 	.word	0x08001735
 8001728:	0800173f 	.word	0x0800173f
 800172c:	08001751 	.word	0x08001751
 8001730:	08001763 	.word	0x08001763
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <icm20948_accel_full_scale_select+0x88>)
 8001736:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800173a:	601a      	str	r2, [r3, #0]
			break;
 800173c:	e01a      	b.n	8001774 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <icm20948_accel_full_scale_select+0x88>)
 8001748:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800174c:	601a      	str	r2, [r3, #0]
			break;
 800174e:	e011      	b.n	8001774 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <icm20948_accel_full_scale_select+0x88>)
 800175a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800175e:	601a      	str	r2, [r3, #0]
			break;
 8001760:	e008      	b.n	8001774 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	f043 0306 	orr.w	r3, r3, #6
 8001768:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <icm20948_accel_full_scale_select+0x88>)
 800176c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001770:	601a      	str	r2, [r3, #0]
			break;
 8001772:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	461a      	mov	r2, r3
 8001778:	2114      	movs	r1, #20
 800177a:	2020      	movs	r0, #32
 800177c:	f000 f840 	bl	8001800 <write_single_icm20948_reg>
}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000200 	.word	0x20000200

0800178c <select_user_bank>:
//{
//	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
//}

static void select_user_bank(userbank ub)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af04      	add	r7, sp, #16
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]

//	cs_low();
//	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
//	cs_high();

	HAL_I2C_Mem_Write(ICM20948_I2C, ICM20948_ADDRESS<<1, REG_BANK_SEL, 1, &ub, 1, 1000);
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	2301      	movs	r3, #1
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	1dfb      	adds	r3, r7, #7
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2301      	movs	r3, #1
 80017a6:	227f      	movs	r2, #127	; 0x7f
 80017a8:	21d0      	movs	r1, #208	; 0xd0
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <select_user_bank+0x2c>)
 80017ac:	f003 ff70 	bl	8005690 <HAL_I2C_Mem_Write>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20004c04 	.word	0x20004c04

080017bc <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af04      	add	r7, sp, #16
 80017c2:	4603      	mov	r3, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71bb      	strb	r3, [r7, #6]
//	uint8_t read_reg = READ | reg;
	uint8_t reg_val;
	select_user_bank(ub);
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ffdc 	bl	800178c <select_user_bank>
//	cs_low();
//	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
//	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
//	cs_high();

	HAL_I2C_Mem_Read(ICM20948_I2C, ICM20948_ADDRESS<<1, reg, 1, &reg_val, 1, 1000);
 80017d4:	79bb      	ldrb	r3, [r7, #6]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017dc:	9302      	str	r3, [sp, #8]
 80017de:	2301      	movs	r3, #1
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	f107 030f 	add.w	r3, r7, #15
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2301      	movs	r3, #1
 80017ea:	21d0      	movs	r1, #208	; 0xd0
 80017ec:	4803      	ldr	r0, [pc, #12]	; (80017fc <read_single_icm20948_reg+0x40>)
 80017ee:	f004 f849 	bl	8005884 <HAL_I2C_Mem_Read>
	return reg_val;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20004c04 	.word	0x20004c04

08001800 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af04      	add	r7, sp, #16
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
 800180a:	460b      	mov	r3, r1
 800180c:	71bb      	strb	r3, [r7, #6]
 800180e:	4613      	mov	r3, r2
 8001810:	717b      	strb	r3, [r7, #5]
//	uint8_t write_reg[2];
//	write_reg[0] = WRITE | reg;
//	write_reg[1] = val;

	select_user_bank(ub);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ffb9 	bl	800178c <select_user_bank>

//	cs_low();
//	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
//	cs_high();

	HAL_I2C_Mem_Write(ICM20948_I2C, ICM20948_ADDRESS<<1, reg, 1, &val, 1, 1000);
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	b29a      	uxth	r2, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	2301      	movs	r3, #1
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	1d7b      	adds	r3, r7, #5
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2301      	movs	r3, #1
 800182e:	21d0      	movs	r1, #208	; 0xd0
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <write_single_icm20948_reg+0x40>)
 8001832:	f003 ff2d 	bl	8005690 <HAL_I2C_Mem_Write>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20004c04 	.word	0x20004c04

08001844 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af04      	add	r7, sp, #16
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
 800184e:	460b      	mov	r3, r1
 8001850:	71bb      	strb	r3, [r7, #6]
 8001852:	4613      	mov	r3, r2
 8001854:	717b      	strb	r3, [r7, #5]
//	uint8_t read_reg = READ | reg;
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff97 	bl	800178c <select_user_bank>
//	cs_low();
//	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
//	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
//	cs_high();

	HAL_I2C_Mem_Read(ICM20948_I2C, ICM20948_ADDRESS<<1, reg, 1, reg_val, len, 1000);
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	b29a      	uxth	r2, r3
 8001862:	797b      	ldrb	r3, [r7, #5]
 8001864:	b29b      	uxth	r3, r3
 8001866:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800186a:	9102      	str	r1, [sp, #8]
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <read_multiple_icm20948_reg+0x44>)
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2301      	movs	r3, #1
 8001874:	21d0      	movs	r1, #208	; 0xd0
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <read_multiple_icm20948_reg+0x48>)
 8001878:	f004 f804 	bl	8005884 <HAL_I2C_Mem_Read>

	return reg_val;
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <read_multiple_icm20948_reg+0x44>)
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000204 	.word	0x20000204
 800188c:	20004c04 	.word	0x20004c04

08001890 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af04      	add	r7, sp, #16
 8001896:	603a      	str	r2, [r7, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
 800189e:	460b      	mov	r3, r1
 80018a0:	71bb      	strb	r3, [r7, #6]
 80018a2:	4613      	mov	r3, r2
 80018a4:	717b      	strb	r3, [r7, #5]
//	uint8_t write_reg = WRITE | reg;
	select_user_bank(ub);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff6f 	bl	800178c <select_user_bank>
//	cs_low();
//	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
//	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
//	cs_high();

	HAL_I2C_Mem_Write(ICM20948_I2C, ICM20948_ADDRESS<<1, reg, 1, val, len, 1000);
 80018ae:	79bb      	ldrb	r3, [r7, #6]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	797b      	ldrb	r3, [r7, #5]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018ba:	9102      	str	r1, [sp, #8]
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	21d0      	movs	r1, #208	; 0xd0
 80018c6:	4803      	ldr	r0, [pc, #12]	; (80018d4 <write_multiple_icm20948_reg+0x44>)
 80018c8:	f003 fee2 	bl	8005690 <HAL_I2C_Mem_Write>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20004c04 	.word	0x20004c04

080018d8 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80018e2:	228c      	movs	r2, #140	; 0x8c
 80018e4:	2103      	movs	r1, #3
 80018e6:	2030      	movs	r0, #48	; 0x30
 80018e8:	f7ff ff8a 	bl	8001800 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	461a      	mov	r2, r3
 80018f0:	2104      	movs	r1, #4
 80018f2:	2030      	movs	r0, #48	; 0x30
 80018f4:	f7ff ff84 	bl	8001800 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80018f8:	2281      	movs	r2, #129	; 0x81
 80018fa:	2105      	movs	r1, #5
 80018fc:	2030      	movs	r0, #48	; 0x30
 80018fe:	f7ff ff7f 	bl	8001800 <write_single_icm20948_reg>

	HAL_Delay(1);
 8001902:	2001      	movs	r0, #1
 8001904:	f002 fe36 	bl	8004574 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8001908:	213b      	movs	r1, #59	; 0x3b
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff ff56 	bl	80017bc <read_single_icm20948_reg>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	460a      	mov	r2, r1
 8001924:	71fb      	strb	r3, [r7, #7]
 8001926:	4613      	mov	r3, r2
 8001928:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 800192a:	220c      	movs	r2, #12
 800192c:	2103      	movs	r1, #3
 800192e:	2030      	movs	r0, #48	; 0x30
 8001930:	f7ff ff66 	bl	8001800 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	461a      	mov	r2, r3
 8001938:	2104      	movs	r1, #4
 800193a:	2030      	movs	r0, #48	; 0x30
 800193c:	f7ff ff60 	bl	8001800 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	461a      	mov	r2, r3
 8001944:	2106      	movs	r1, #6
 8001946:	2030      	movs	r0, #48	; 0x30
 8001948:	f7ff ff5a 	bl	8001800 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 800194c:	2281      	movs	r2, #129	; 0x81
 800194e:	2105      	movs	r1, #5
 8001950:	2030      	movs	r0, #48	; 0x30
 8001952:	f7ff ff55 	bl	8001800 <write_single_icm20948_reg>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001964:	f002 fd94 	bl	8004490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001968:	f000 f85a 	bl	8001a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196c:	f000 fba2 	bl	80020b4 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001970:	f000 facc 	bl	8001f0c <MX_TIM8_Init>
  MX_TIM2_Init();
 8001974:	f000 fa22 	bl	8001dbc <MX_TIM2_Init>
  MX_TIM1_Init();
 8001978:	f000 f982 	bl	8001c80 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800197c:	f000 fb70 	bl	8002060 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001980:	f000 f950 	bl	8001c24 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001984:	f000 f8aa 	bl	8001adc <MX_ADC1_Init>
  MX_TIM3_Init();
 8001988:	f000 fa6c 	bl	8001e64 <MX_TIM3_Init>
  MX_ADC2_Init();
 800198c:	f000 f8f8 	bl	8001b80 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	OLED_Init();
 8001990:	f002 f958 	bl	8003c44 <OLED_Init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 10);
 8001994:	220a      	movs	r2, #10
 8001996:	4914      	ldr	r1, [pc, #80]	; (80019e8 <main+0x88>)
 8001998:	4814      	ldr	r0, [pc, #80]	; (80019ec <main+0x8c>)
 800199a:	f006 fa50 	bl	8007e3e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800199e:	f007 f96b 	bl	8008c78 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80019a2:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <main+0x90>)
 80019a4:	2100      	movs	r1, #0
 80019a6:	4813      	ldr	r0, [pc, #76]	; (80019f4 <main+0x94>)
 80019a8:	f007 f9b0 	bl	8008d0c <osThreadNew>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <main+0x98>)
 80019b0:	6013      	str	r3, [r2, #0]

  /* creation of encoder */
  encoderHandle = osThreadNew(Encoder, NULL, &encoder_attributes);
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <main+0x9c>)
 80019b4:	2100      	movs	r1, #0
 80019b6:	4812      	ldr	r0, [pc, #72]	; (8001a00 <main+0xa0>)
 80019b8:	f007 f9a8 	bl	8008d0c <osThreadNew>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <main+0xa4>)
 80019c0:	6013      	str	r3, [r2, #0]

  /* creation of display */
  displayHandle = osThreadNew(Display, NULL, &display_attributes);
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <main+0xa8>)
 80019c4:	2100      	movs	r1, #0
 80019c6:	4811      	ldr	r0, [pc, #68]	; (8001a0c <main+0xac>)
 80019c8:	f007 f9a0 	bl	8008d0c <osThreadNew>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <main+0xb0>)
 80019d0:	6013      	str	r3, [r2, #0]

  /* creation of gyroscope */
  gyroscopeHandle = osThreadNew(Gyroscope, NULL, &gyroscope_attributes);
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <main+0xb4>)
 80019d4:	2100      	movs	r1, #0
 80019d6:	4810      	ldr	r0, [pc, #64]	; (8001a18 <main+0xb8>)
 80019d8:	f007 f998 	bl	8008d0c <osThreadNew>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <main+0xbc>)
 80019e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019e2:	f007 f96d 	bl	8008cc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80019e6:	e7fe      	b.n	80019e6 <main+0x86>
 80019e8:	20004d44 	.word	0x20004d44
 80019ec:	20004b78 	.word	0x20004b78
 80019f0:	0800e554 	.word	0x0800e554
 80019f4:	08003495 	.word	0x08003495
 80019f8:	20004b2c 	.word	0x20004b2c
 80019fc:	0800e578 	.word	0x0800e578
 8001a00:	08003691 	.word	0x08003691
 8001a04:	20004d34 	.word	0x20004d34
 8001a08:	0800e59c 	.word	0x0800e59c
 8001a0c:	08003795 	.word	0x08003795
 8001a10:	20004dac 	.word	0x20004dac
 8001a14:	0800e5c0 	.word	0x0800e5c0
 8001a18:	08003819 	.word	0x08003819
 8001a1c:	20004ce8 	.word	0x20004ce8

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	; 0x50
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	2230      	movs	r2, #48	; 0x30
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f009 fec6 	bl	800b7c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <SystemClock_Config+0xb4>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <SystemClock_Config+0xb4>)
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a52:	6413      	str	r3, [r2, #64]	; 0x40
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <SystemClock_Config+0xb4>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <SystemClock_Config+0xb8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <SystemClock_Config+0xb8>)
 8001a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <SystemClock_Config+0xb8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a80:	2301      	movs	r3, #1
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a84:	2310      	movs	r3, #16
 8001a86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	4618      	mov	r0, r3
 8001a92:	f004 fca1 	bl	80063d8 <HAL_RCC_OscConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001a9c:	f001 ff26 	bl	80038ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 ff04 	bl	80068c8 <HAL_RCC_ClockConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001ac6:	f001 ff11 	bl	80038ec <Error_Handler>
  }
}
 8001aca:	bf00      	nop
 8001acc:	3750      	adds	r7, #80	; 0x50
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40007000 	.word	0x40007000

08001adc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001af0:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <MX_ADC1_Init+0x9c>)
 8001af2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001b1c:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <MX_ADC1_Init+0xa0>)
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b3a:	480e      	ldr	r0, [pc, #56]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001b3c:	f002 fd3e 	bl	80045bc <HAL_ADC_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b46:	f001 fed1 	bl	80038ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001b4a:	230b      	movs	r3, #11
 8001b4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b56:	463b      	mov	r3, r7
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4806      	ldr	r0, [pc, #24]	; (8001b74 <MX_ADC1_Init+0x98>)
 8001b5c:	f002 fedc 	bl	8004918 <HAL_ADC_ConfigChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b66:	f001 fec1 	bl	80038ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20004ca0 	.word	0x20004ca0
 8001b78:	40012000 	.word	0x40012000
 8001b7c:	0f000001 	.word	0x0f000001

08001b80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b86:	463b      	mov	r3, r7
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001b94:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <MX_ADC2_Init+0x9c>)
 8001b96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001bc0:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <MX_ADC2_Init+0xa0>)
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bde:	480e      	ldr	r0, [pc, #56]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001be0:	f002 fcec 	bl	80045bc <HAL_ADC_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001bea:	f001 fe7f 	bl	80038ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001bee:	230c      	movs	r3, #12
 8001bf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4806      	ldr	r0, [pc, #24]	; (8001c18 <MX_ADC2_Init+0x98>)
 8001c00:	f002 fe8a 	bl	8004918 <HAL_ADC_ConfigChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001c0a:	f001 fe6f 	bl	80038ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20004bbc 	.word	0x20004bbc
 8001c1c:	40012100 	.word	0x40012100
 8001c20:	0f000001 	.word	0x0f000001

08001c24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c2a:	4a13      	ldr	r2, [pc, #76]	; (8001c78 <MX_I2C1_Init+0x54>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c30:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <MX_I2C1_Init+0x58>)
 8001c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c62:	f003 fbd1 	bl	8005408 <HAL_I2C_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c6c:	f001 fe3e 	bl	80038ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20004c04 	.word	0x20004c04
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	000186a0 	.word	0x000186a0

08001c80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b096      	sub	sp, #88	; 0x58
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]
 8001cae:	615a      	str	r2, [r3, #20]
 8001cb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f009 fd81 	bl	800b7c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001cc0:	4a3d      	ldr	r2, [pc, #244]	; (8001db8 <MX_TIM1_Init+0x138>)
 8001cc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001cc6:	22a0      	movs	r2, #160	; 0xa0
 8001cc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cca:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001cd0:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd8:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cde:	4b35      	ldr	r3, [pc, #212]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ce4:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001ce6:	2280      	movs	r2, #128	; 0x80
 8001ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cea:	4832      	ldr	r0, [pc, #200]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001cec:	f004 ffbc 	bl	8006c68 <HAL_TIM_Base_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001cf6:	f001 fdf9 	bl	80038ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d04:	4619      	mov	r1, r3
 8001d06:	482b      	ldr	r0, [pc, #172]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001d08:	f005 fb14 	bl	8007334 <HAL_TIM_ConfigClockSource>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d12:	f001 fdeb 	bl	80038ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d16:	4827      	ldr	r0, [pc, #156]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001d18:	f004 fff5 	bl	8006d06 <HAL_TIM_PWM_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d22:	f001 fde3 	bl	80038ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d32:	4619      	mov	r1, r3
 8001d34:	481f      	ldr	r0, [pc, #124]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001d36:	f005 fed5 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d40:	f001 fdd4 	bl	80038ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d44:	2360      	movs	r3, #96	; 0x60
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d60:	220c      	movs	r2, #12
 8001d62:	4619      	mov	r1, r3
 8001d64:	4813      	ldr	r0, [pc, #76]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001d66:	f005 fa23 	bl	80071b0 <HAL_TIM_PWM_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001d70:	f001 fdbc 	bl	80038ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4807      	ldr	r0, [pc, #28]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001d98:	f005 ff20 	bl	8007bdc <HAL_TIMEx_ConfigBreakDeadTime>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001da2:	f001 fda3 	bl	80038ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <MX_TIM1_Init+0x134>)
 8001da8:	f002 f9b8 	bl	800411c <HAL_TIM_MspPostInit>

}
 8001dac:	bf00      	nop
 8001dae:	3758      	adds	r7, #88	; 0x58
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20004cec 	.word	0x20004cec
 8001db8:	40010000 	.word	0x40010000

08001dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	2224      	movs	r2, #36	; 0x24
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f009 fcf8 	bl	800b7c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001df2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e00:	2303      	movs	r3, #3
 8001e02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480d      	ldr	r0, [pc, #52]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001e2c:	f005 f88c 	bl	8006f48 <HAL_TIM_Encoder_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e36:	f001 fd59 	bl	80038ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001e48:	f005 fe4c 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001e52:	f001 fd4b 	bl	80038ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	3730      	adds	r7, #48	; 0x30
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20004d58 	.word	0x20004d58

08001e64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08c      	sub	sp, #48	; 0x30
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f009 fca4 	bl	800b7c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001e82:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <MX_TIM3_Init+0xa4>)
 8001e84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001ed2:	f005 f839 	bl	8006f48 <HAL_TIM_Encoder_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001edc:	f001 fd06 	bl	80038ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4619      	mov	r1, r3
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001eee:	f005 fdf9 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ef8:	f001 fcf8 	bl	80038ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	3730      	adds	r7, #48	; 0x30
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20004c58 	.word	0x20004c58
 8001f08:	40000400 	.word	0x40000400

08001f0c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b096      	sub	sp, #88	; 0x58
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]
 8001f3a:	615a      	str	r2, [r3, #20]
 8001f3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2220      	movs	r2, #32
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f009 fc3b 	bl	800b7c0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f4a:	4b43      	ldr	r3, [pc, #268]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001f4c:	4a43      	ldr	r2, [pc, #268]	; (800205c <MX_TIM8_Init+0x150>)
 8001f4e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f50:	4b41      	ldr	r3, [pc, #260]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001f5c:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001f5e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001f62:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f64:	4b3c      	ldr	r3, [pc, #240]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f76:	4838      	ldr	r0, [pc, #224]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001f78:	f004 fe76 	bl	8006c68 <HAL_TIM_Base_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001f82:	f001 fcb3 	bl	80038ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f90:	4619      	mov	r1, r3
 8001f92:	4831      	ldr	r0, [pc, #196]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001f94:	f005 f9ce 	bl	8007334 <HAL_TIM_ConfigClockSource>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001f9e:	f001 fca5 	bl	80038ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fa2:	482d      	ldr	r0, [pc, #180]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001fa4:	f004 feaf 	bl	8006d06 <HAL_TIM_PWM_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001fae:	f001 fc9d 	bl	80038ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4825      	ldr	r0, [pc, #148]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001fc2:	f005 fd8f 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001fcc:	f001 fc8e 	bl	80038ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd0:	2360      	movs	r3, #96	; 0x60
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4818      	ldr	r0, [pc, #96]	; (8002058 <MX_TIM8_Init+0x14c>)
 8001ff6:	f005 f8db 	bl	80071b0 <HAL_TIM_PWM_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002000:	f001 fc74 	bl	80038ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	2204      	movs	r2, #4
 800200a:	4619      	mov	r1, r3
 800200c:	4812      	ldr	r0, [pc, #72]	; (8002058 <MX_TIM8_Init+0x14c>)
 800200e:	f005 f8cf 	bl	80071b0 <HAL_TIM_PWM_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002018:	f001 fc68 	bl	80038ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002034:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	4619      	mov	r1, r3
 800203e:	4806      	ldr	r0, [pc, #24]	; (8002058 <MX_TIM8_Init+0x14c>)
 8002040:	f005 fdcc 	bl	8007bdc <HAL_TIMEx_ConfigBreakDeadTime>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800204a:	f001 fc4f 	bl	80038ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	3758      	adds	r7, #88	; 0x58
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20004b30 	.word	0x20004b30
 800205c:	40010400 	.word	0x40010400

08002060 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <MX_USART3_UART_Init+0x4c>)
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <MX_USART3_UART_Init+0x50>)
 8002068:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <MX_USART3_UART_Init+0x4c>)
 800206c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002070:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <MX_USART3_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <MX_USART3_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <MX_USART3_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <MX_USART3_UART_Init+0x4c>)
 8002086:	220c      	movs	r2, #12
 8002088:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <MX_USART3_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <MX_USART3_UART_Init+0x4c>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_USART3_UART_Init+0x4c>)
 8002098:	f005 fdf2 	bl	8007c80 <HAL_UART_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020a2:	f001 fc23 	bl	80038ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20004b78 	.word	0x20004b78
 80020b0:	40004800 	.word	0x40004800

080020b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b31      	ldr	r3, [pc, #196]	; (8002194 <MX_GPIO_Init+0xe0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a30      	ldr	r2, [pc, #192]	; (8002194 <MX_GPIO_Init+0xe0>)
 80020d4:	f043 0310 	orr.w	r3, r3, #16
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <MX_GPIO_Init+0xe0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <MX_GPIO_Init+0xe0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a29      	ldr	r2, [pc, #164]	; (8002194 <MX_GPIO_Init+0xe0>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b27      	ldr	r3, [pc, #156]	; (8002194 <MX_GPIO_Init+0xe0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	4b23      	ldr	r3, [pc, #140]	; (8002194 <MX_GPIO_Init+0xe0>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a22      	ldr	r2, [pc, #136]	; (8002194 <MX_GPIO_Init+0xe0>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <MX_GPIO_Init+0xe0>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <MX_GPIO_Init+0xe0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <MX_GPIO_Init+0xe0>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <MX_GPIO_Init+0xe0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800213a:	2200      	movs	r2, #0
 800213c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002140:	4815      	ldr	r0, [pc, #84]	; (8002198 <MX_GPIO_Init+0xe4>)
 8002142:	f003 f947 	bl	80053d4 <HAL_GPIO_WritePin>
                          |ICM_INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8002146:	2200      	movs	r2, #0
 8002148:	213c      	movs	r1, #60	; 0x3c
 800214a:	4814      	ldr	r0, [pc, #80]	; (800219c <MX_GPIO_Init+0xe8>)
 800214c:	f003 f942 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           ICM_INT_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002150:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8002154:	617b      	str	r3, [r7, #20]
                          |ICM_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002156:	2301      	movs	r3, #1
 8002158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <MX_GPIO_Init+0xe4>)
 800216a:	f002 ff97 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800216e:	233c      	movs	r3, #60	; 0x3c
 8002170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800217a:	2302      	movs	r3, #2
 800217c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <MX_GPIO_Init+0xe8>)
 8002186:	f002 ff89 	bl	800509c <HAL_GPIO_Init>

}
 800218a:	bf00      	nop
 800218c:	3728      	adds	r7, #40	; 0x28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	40021000 	.word	0x40021000
 800219c:	40020000 	.word	0x40020000

080021a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning*/
	UNUSED(huart);

//	HAL_UART_Transmit(&huart3, (uint8_t*) aRxBuffer, 10, 0xFFFF);
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <IR>:
/* USER CODE BEGIN Header_StartDefaultTask */

/*
 * IR sensor function
 */
int IR(ADC_HandleTypeDef adcVal){
 80021b4:	b084      	sub	sp, #16
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	f107 0c18 	add.w	ip, r7, #24
 80021c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t raw = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	81fb      	strh	r3, [r7, #14]

	///////IR Sensor Code////////////
//	Set GPIO pin to high
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);

	for (int i = 0; i < 20; i++) {
 80021c8:	2300      	movs	r3, #0
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	e015      	b.n	80021fa <IR+0x46>
//		Get ADC value
		HAL_ADC_Start(&adcVal);
 80021ce:	f107 0018 	add.w	r0, r7, #24
 80021d2:	f002 fa37 	bl	8004644 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&adcVal, HAL_MAX_DELAY);
 80021d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021da:	f107 0018 	add.w	r0, r7, #24
 80021de:	f002 fb03 	bl	80047e8 <HAL_ADC_PollForConversion>

//		Get voltage reading
		raw += HAL_ADC_GetValue(&adcVal);
 80021e2:	f107 0018 	add.w	r0, r7, #24
 80021e6:	f002 fb8a 	bl	80048fe <HAL_ADC_GetValue>
 80021ea:	4603      	mov	r3, r0
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	89fb      	ldrh	r3, [r7, #14]
 80021f0:	4413      	add	r3, r2
 80021f2:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 20; i++) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3301      	adds	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b13      	cmp	r3, #19
 80021fe:	dde6      	ble.n	80021ce <IR+0x1a>

//		Set GPIO pin to low
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
	}

	voltage = (int)raw/20;
 8002200:	89fb      	ldrh	r3, [r7, #14]
 8002202:	4a43      	ldr	r2, [pc, #268]	; (8002310 <IR+0x15c>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	b29b      	uxth	r3, r3
 800220c:	603b      	str	r3, [r7, #0]

	if (voltage <= 2960 && voltage > 2500)			//10
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8002214:	dc07      	bgt.n	8002226 <IR+0x72>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800221c:	4293      	cmp	r3, r2
 800221e:	dd02      	ble.n	8002226 <IR+0x72>
		distance = 10;
 8002220:	230a      	movs	r3, #10
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	e06b      	b.n	80022fe <IR+0x14a>
	else if (voltage <= 2500 && voltage > 1845)		//15
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800222c:	4293      	cmp	r3, r2
 800222e:	dc07      	bgt.n	8002240 <IR+0x8c>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f240 7235 	movw	r2, #1845	; 0x735
 8002236:	4293      	cmp	r3, r2
 8002238:	dd02      	ble.n	8002240 <IR+0x8c>
		distance = 15;
 800223a:	230f      	movs	r3, #15
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	e05e      	b.n	80022fe <IR+0x14a>
	else if (voltage <= 1845 && voltage > 1460)		//20
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f240 7235 	movw	r2, #1845	; 0x735
 8002246:	4293      	cmp	r3, r2
 8002248:	dc07      	bgt.n	800225a <IR+0xa6>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8002250:	4293      	cmp	r3, r2
 8002252:	dd02      	ble.n	800225a <IR+0xa6>
		distance = 20;
 8002254:	2314      	movs	r3, #20
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	e051      	b.n	80022fe <IR+0x14a>
	else if (voltage <= 1460 && voltage > 1275)		//25
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8002260:	4293      	cmp	r3, r2
 8002262:	dc07      	bgt.n	8002274 <IR+0xc0>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f240 42fb 	movw	r2, #1275	; 0x4fb
 800226a:	4293      	cmp	r3, r2
 800226c:	dd02      	ble.n	8002274 <IR+0xc0>
		distance = 25;
 800226e:	2319      	movs	r3, #25
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	e044      	b.n	80022fe <IR+0x14a>
	else if (voltage <= 1275 && voltage > 1135)		//30
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f240 42fb 	movw	r2, #1275	; 0x4fb
 800227a:	4293      	cmp	r3, r2
 800227c:	dc06      	bgt.n	800228c <IR+0xd8>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8002284:	db02      	blt.n	800228c <IR+0xd8>
		distance = 30;
 8002286:	231e      	movs	r3, #30
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	e038      	b.n	80022fe <IR+0x14a>
	else if (voltage <= 1135 && voltage > 1020)		//35
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8002292:	da06      	bge.n	80022a2 <IR+0xee>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800229a:	dd02      	ble.n	80022a2 <IR+0xee>
		distance = 35;
 800229c:	2323      	movs	r3, #35	; 0x23
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	e02d      	b.n	80022fe <IR+0x14a>
	else if (voltage <= 1020 && voltage > 925)		//40
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80022a8:	dc07      	bgt.n	80022ba <IR+0x106>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f240 329d 	movw	r2, #925	; 0x39d
 80022b0:	4293      	cmp	r3, r2
 80022b2:	dd02      	ble.n	80022ba <IR+0x106>
		distance = 40;
 80022b4:	2328      	movs	r3, #40	; 0x28
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	e021      	b.n	80022fe <IR+0x14a>
	else if (voltage <= 925 && voltage > 815)		//45
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f240 329d 	movw	r2, #925	; 0x39d
 80022c0:	4293      	cmp	r3, r2
 80022c2:	dc06      	bgt.n	80022d2 <IR+0x11e>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f5b3 7f4c 	cmp.w	r3, #816	; 0x330
 80022ca:	db02      	blt.n	80022d2 <IR+0x11e>
		distance = 45;
 80022cc:	232d      	movs	r3, #45	; 0x2d
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	e015      	b.n	80022fe <IR+0x14a>
	else if (voltage <= 815 && voltage > 710)		//50
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f5b3 7f4c 	cmp.w	r3, #816	; 0x330
 80022d8:	da07      	bge.n	80022ea <IR+0x136>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f240 22c6 	movw	r2, #710	; 0x2c6
 80022e0:	4293      	cmp	r3, r2
 80022e2:	dd02      	ble.n	80022ea <IR+0x136>
		distance = 50;
 80022e4:	2332      	movs	r3, #50	; 0x32
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	e009      	b.n	80022fe <IR+0x14a>

	// Nothing within 50cm
	else if (voltage <= 710)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	f240 22c6 	movw	r2, #710	; 0x2c6
 80022f0:	4293      	cmp	r3, r2
 80022f2:	dc02      	bgt.n	80022fa <IR+0x146>
		distance = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	e001      	b.n	80022fe <IR+0x14a>

	// Too close
	else
		distance = 5;
 80022fa:	2305      	movs	r3, #5
 80022fc:	60bb      	str	r3, [r7, #8]

	return distance;
 80022fe:	68bb      	ldr	r3, [r7, #8]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800230a:	b004      	add	sp, #16
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	cccccccd 	.word	0xcccccccd

08002314 <Straight_Move>:

/*
 * Self correction straight moving, slow fixed speed. For week 8
 */
char Straight_Move(bool forward, int steps) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
	uint16_t rightPwmVal = 1400;
 8002320:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8002324:	83fb      	strh	r3, [r7, #30]
	uint16_t leftPwmVal = 1400;
 8002326:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800232a:	83bb      	strh	r3, [r7, #28]

	// right
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800232c:	2100      	movs	r1, #0
 800232e:	48ad      	ldr	r0, [pc, #692]	; (80025e4 <Straight_Move+0x2d0>)
 8002330:	f004 fd42 	bl	8006db8 <HAL_TIM_PWM_Start>

	// left
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002334:	2104      	movs	r1, #4
 8002336:	48ab      	ldr	r0, [pc, #684]	; (80025e4 <Straight_Move+0x2d0>)
 8002338:	f004 fd3e 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800233c:	210c      	movs	r1, #12
 800233e:	48aa      	ldr	r0, [pc, #680]	; (80025e8 <Straight_Move+0x2d4>)
 8002340:	f004 fd3a 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002344:	213c      	movs	r1, #60	; 0x3c
 8002346:	48a9      	ldr	r0, [pc, #676]	; (80025ec <Straight_Move+0x2d8>)
 8002348:	f004 fea4 	bl	8007094 <HAL_TIM_Encoder_Start>

	int16_t cnt1, cnt2;

	int target, reorient;
	int center = 143;
 800234c:	238f      	movs	r3, #143	; 0x8f
 800234e:	61bb      	str	r3, [r7, #24]

	float diff, yaw;

	yaw = YAW;
 8002350:	4ba7      	ldr	r3, [pc, #668]	; (80025f0 <Straight_Move+0x2dc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	617b      	str	r3, [r7, #20]
	htim1.Instance->CCR4 = center;	//center
 8002356:	4ba4      	ldr	r3, [pc, #656]	; (80025e8 <Straight_Move+0x2d4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(500);
 800235e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002362:	f006 fd65 	bl	8008e30 <osDelay>

	cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002366:	4ba1      	ldr	r3, [pc, #644]	; (80025ec <Straight_Move+0x2d8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	827b      	strh	r3, [r7, #18]

	for (;;) {
		// Lounge
		htim1.Instance->CCR4 = center;	//center
 800236e:	4b9e      	ldr	r3, [pc, #632]	; (80025e8 <Straight_Move+0x2d4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
		if (forward == true) {
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d078      	beq.n	800246e <Straight_Move+0x15a>
			// corridor
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800237c:	2201      	movs	r2, #1
 800237e:	2104      	movs	r1, #4
 8002380:	489c      	ldr	r0, [pc, #624]	; (80025f4 <Straight_Move+0x2e0>)
 8002382:	f003 f827 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	2108      	movs	r1, #8
 800238a:	489a      	ldr	r0, [pc, #616]	; (80025f4 <Straight_Move+0x2e0>)
 800238c:	f003 f822 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002390:	2201      	movs	r2, #1
 8002392:	2120      	movs	r1, #32
 8002394:	4897      	ldr	r0, [pc, #604]	; (80025f4 <Straight_Move+0x2e0>)
 8002396:	f003 f81d 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	2110      	movs	r1, #16
 800239e:	4895      	ldr	r0, [pc, #596]	; (80025f4 <Straight_Move+0x2e0>)
 80023a0:	f003 f818 	bl	80053d4 <HAL_GPIO_WritePin>

			diff = abs(abs(YAW) - abs(yaw));
 80023a4:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <Straight_Move+0x2dc>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ae:	ee17 3a90 	vmov	r3, s15
 80023b2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80023b6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80023ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80023be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c2:	ee17 3a90 	vmov	r3, s15
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bfb8      	it	lt
 80023ca:	425b      	neglt	r3, r3
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bfb8      	it	lt
 80023d2:	425b      	neglt	r3, r3
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023dc:	edc7 7a08 	vstr	s15, [r7, #32]
			// if tilt to right
			if (YAW < yaw)
 80023e0:	4b83      	ldr	r3, [pc, #524]	; (80025f0 <Straight_Move+0x2dc>)
 80023e2:	edd3 7a00 	vldr	s15, [r3]
 80023e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80023ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f2:	dd07      	ble.n	8002404 <Straight_Move+0xf0>
				diff = 0 - diff;
 80023f4:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80025f8 <Straight_Move+0x2e4>
 80023f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80023fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002400:	edc7 7a08 	vstr	s15, [r7, #32]
			reorient = 4;
 8002404:	2304      	movs	r3, #4
 8002406:	60fb      	str	r3, [r7, #12]
			if (diff >= 0.5)
 8002408:	edd7 7a08 	vldr	s15, [r7, #32]
 800240c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	db09      	blt.n	800242e <Straight_Move+0x11a>
			{
				// If tilt to right
				// turn right
				htim1.Instance->CCR4 = center + reorient;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	441a      	add	r2, r3
 8002420:	4b71      	ldr	r3, [pc, #452]	; (80025e8 <Straight_Move+0x2d4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8002426:	200a      	movs	r0, #10
 8002428:	f006 fd02 	bl	8008e30 <osDelay>
 800242c:	e097      	b.n	800255e <Straight_Move+0x24a>
			}
			else if (diff <= -0.5) {
 800242e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002432:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	d809      	bhi.n	8002454 <Straight_Move+0x140>
				// If tilt to left
				// turn right
				htim1.Instance->CCR4 = center + reorient;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	441a      	add	r2, r3
 8002446:	4b68      	ldr	r3, [pc, #416]	; (80025e8 <Straight_Move+0x2d4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800244c:	200a      	movs	r0, #10
 800244e:	f006 fcef 	bl	8008e30 <osDelay>
 8002452:	e084      	b.n	800255e <Straight_Move+0x24a>

			} else {
				htim1.Instance->CCR4 = center;
 8002454:	4b64      	ldr	r3, [pc, #400]	; (80025e8 <Straight_Move+0x2d4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,rightPwmVal); // Modify the comparison value for the duty cycle
 800245c:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <Straight_Move+0x2d0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	8bfa      	ldrh	r2, [r7, #30]
 8002462:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,leftPwmVal); // Modify the comparison value for the duty cycle
 8002464:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <Straight_Move+0x2d0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	8bba      	ldrh	r2, [r7, #28]
 800246a:	639a      	str	r2, [r3, #56]	; 0x38
 800246c:	e077      	b.n	800255e <Straight_Move+0x24a>
			}
		} else {
//			// corridor
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800246e:	2201      	movs	r2, #1
 8002470:	2108      	movs	r1, #8
 8002472:	4860      	ldr	r0, [pc, #384]	; (80025f4 <Straight_Move+0x2e0>)
 8002474:	f002 ffae 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2104      	movs	r1, #4
 800247c:	485d      	ldr	r0, [pc, #372]	; (80025f4 <Straight_Move+0x2e0>)
 800247e:	f002 ffa9 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002482:	2201      	movs	r2, #1
 8002484:	2110      	movs	r1, #16
 8002486:	485b      	ldr	r0, [pc, #364]	; (80025f4 <Straight_Move+0x2e0>)
 8002488:	f002 ffa4 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	2120      	movs	r1, #32
 8002490:	4858      	ldr	r0, [pc, #352]	; (80025f4 <Straight_Move+0x2e0>)
 8002492:	f002 ff9f 	bl	80053d4 <HAL_GPIO_WritePin>
			diff = abs(abs(YAW) - abs(yaw));
 8002496:	4b56      	ldr	r3, [pc, #344]	; (80025f0 <Straight_Move+0x2dc>)
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a0:	ee17 3a90 	vmov	r3, s15
 80024a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80024a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80024ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 3a90 	vmov	r3, s15
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bfb8      	it	lt
 80024bc:	425b      	neglt	r3, r3
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bfb8      	it	lt
 80024c4:	425b      	neglt	r3, r3
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ce:	edc7 7a08 	vstr	s15, [r7, #32]
			// if tilt to right
			if (YAW > yaw)
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <Straight_Move+0x2dc>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80024dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	d507      	bpl.n	80024f6 <Straight_Move+0x1e2>
				diff = 0 - diff;
 80024e6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80025f8 <Straight_Move+0x2e4>
 80024ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80024ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f2:	edc7 7a08 	vstr	s15, [r7, #32]
			reorient = 4;
 80024f6:	2304      	movs	r3, #4
 80024f8:	60fb      	str	r3, [r7, #12]
			if (diff <= -0.5)
 80024fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80024fe:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	d809      	bhi.n	8002520 <Straight_Move+0x20c>
			{
				// If tilt to right
				// turn left
				htim1.Instance->CCR4 = center + reorient;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	441a      	add	r2, r3
 8002512:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <Straight_Move+0x2d4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8002518:	200a      	movs	r0, #10
 800251a:	f006 fc89 	bl	8008e30 <osDelay>
 800251e:	e01e      	b.n	800255e <Straight_Move+0x24a>
			}
			else if (diff >= 0.5) {
 8002520:	edd7 7a08 	vldr	s15, [r7, #32]
 8002524:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	db09      	blt.n	8002546 <Straight_Move+0x232>
				// If tilt to left
				// turn right
				htim1.Instance->CCR4 = center + reorient;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	441a      	add	r2, r3
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <Straight_Move+0x2d4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800253e:	200a      	movs	r0, #10
 8002540:	f006 fc76 	bl	8008e30 <osDelay>
 8002544:	e00b      	b.n	800255e <Straight_Move+0x24a>

			} else {
				htim1.Instance->CCR4 = center;
 8002546:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <Straight_Move+0x2d4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,leftPwmVal); // Modify the comparison value for the duty cycle
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <Straight_Move+0x2d0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	8bba      	ldrh	r2, [r7, #28]
 8002554:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,rightPwmVal); // Modify the comparison value for the duty cycle
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <Straight_Move+0x2d0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	8bfa      	ldrh	r2, [r7, #30]
 800255c:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}

		if (forward == true) {
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <Straight_Move+0x262>
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,rightPwmVal); // Modify the comparison value for the duty cycle
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <Straight_Move+0x2d0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	8bfa      	ldrh	r2, [r7, #30]
 800256a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,leftPwmVal); // Modify the comparison value for the duty cycle
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <Straight_Move+0x2d0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	8bba      	ldrh	r2, [r7, #28]
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
 8002574:	e007      	b.n	8002586 <Straight_Move+0x272>
		} else {
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,leftPwmVal); // Modify the comparison value for the duty cycle
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <Straight_Move+0x2d0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	8bba      	ldrh	r2, [r7, #28]
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,rightPwmVal); // Modify the comparison value for the duty cycle
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <Straight_Move+0x2d0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	8bfa      	ldrh	r2, [r7, #30]
 8002584:	639a      	str	r2, [r3, #56]	; 0x38
		}

//		osDelay(10);

		if (forward == true)
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <Straight_Move+0x286>
			target = 663*steps;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f240 2297 	movw	r2, #663	; 0x297
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
 8002598:	e005      	b.n	80025a6 <Straight_Move+0x292>
		else
			target = 675*steps;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f240 22a3 	movw	r2, #675	; 0x2a3
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
		cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <Straight_Move+0x2d8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	817b      	strh	r3, [r7, #10]

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <Straight_Move+0x2d8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d109      	bne.n	80025d0 <Straight_Move+0x2bc>
			if ((cnt1-cnt2) >= target)
 80025bc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c8:	429a      	cmp	r2, r3
 80025ca:	f73f aed0 	bgt.w	800236e <Straight_Move+0x5a>
				break;
 80025ce:	e016      	b.n	80025fe <Straight_Move+0x2ea>
//				rightPwmVal -= 300;
//				leftPwmVal -= 300;
//			}
		}
		else {
			if ((cnt2-cnt1) >= target)
 80025d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80025d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025dc:	429a      	cmp	r2, r3
 80025de:	dd0d      	ble.n	80025fc <Straight_Move+0x2e8>
		htim1.Instance->CCR4 = center;	//center
 80025e0:	e6c5      	b.n	800236e <Straight_Move+0x5a>
 80025e2:	bf00      	nop
 80025e4:	20004b30 	.word	0x20004b30
 80025e8:	20004cec 	.word	0x20004cec
 80025ec:	20004c58 	.word	0x20004c58
 80025f0:	2000020c 	.word	0x2000020c
 80025f4:	40020000 	.word	0x40020000
 80025f8:	00000000 	.word	0x00000000
				break;
 80025fc:	bf00      	nop
//				leftPwmVal -= 300;
//			}
		}
	}

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <Straight_Move+0x314>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2200      	movs	r2, #0
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <Straight_Move+0x314>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2200      	movs	r2, #0
 800260c:	639a      	str	r2, [r3, #56]	; 0x38

	// Reset Timer Val
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <Straight_Move+0x318>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f06f 0201 	mvn.w	r2, #1
 8002616:	611a      	str	r2, [r3, #16]
	TIM3->CNT = 0;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <Straight_Move+0x31c>)
 800261a:	2200      	movs	r2, #0
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
	return 'R';
 800261e:	2352      	movs	r3, #82	; 0x52
}
 8002620:	4618      	mov	r0, r3
 8002622:	3728      	adds	r7, #40	; 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20004b30 	.word	0x20004b30
 800262c:	20004c58 	.word	0x20004c58
 8002630:	40000400 	.word	0x40000400

08002634 <Long_Forward>:

/*
 * Moving straight while measuring the encoder value
 */
int Long_Forward(uint16_t pwmVal, int target){
 8002634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002636:	b097      	sub	sp, #92	; 0x5c
 8002638:	af0e      	add	r7, sp, #56	; 0x38
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	80fb      	strh	r3, [r7, #6]
	int16_t cnt1, cnt2;

	int reorient = 4;
 8002640:	2304      	movs	r3, #4
 8002642:	61bb      	str	r3, [r7, #24]
	int center = 143;
 8002644:	238f      	movs	r3, #143	; 0x8f
 8002646:	617b      	str	r3, [r7, #20]

	float yaw, diff;
	yaw = YAW;
 8002648:	4ba2      	ldr	r3, [pc, #648]	; (80028d4 <Long_Forward+0x2a0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	613b      	str	r3, [r7, #16]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800264e:	2100      	movs	r1, #0
 8002650:	48a1      	ldr	r0, [pc, #644]	; (80028d8 <Long_Forward+0x2a4>)
 8002652:	f004 fbb1 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002656:	2104      	movs	r1, #4
 8002658:	489f      	ldr	r0, [pc, #636]	; (80028d8 <Long_Forward+0x2a4>)
 800265a:	f004 fbad 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800265e:	210c      	movs	r1, #12
 8002660:	489e      	ldr	r0, [pc, #632]	; (80028dc <Long_Forward+0x2a8>)
 8002662:	f004 fba9 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002666:	213c      	movs	r1, #60	; 0x3c
 8002668:	489d      	ldr	r0, [pc, #628]	; (80028e0 <Long_Forward+0x2ac>)
 800266a:	f004 fd13 	bl	8007094 <HAL_TIM_Encoder_Start>

	htim1.Instance->CCR4 = center;	//center
 800266e:	4b9b      	ldr	r3, [pc, #620]	; (80028dc <Long_Forward+0x2a8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40

	cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002676:	4b9b      	ldr	r3, [pc, #620]	; (80028e4 <Long_Forward+0x2b0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	81fb      	strh	r3, [r7, #14]

	if (target != 0) {
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8103 	beq.w	800288c <Long_Forward+0x258>
		for (;;) {
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002686:	2201      	movs	r2, #1
 8002688:	2104      	movs	r1, #4
 800268a:	4897      	ldr	r0, [pc, #604]	; (80028e8 <Long_Forward+0x2b4>)
 800268c:	f002 fea2 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2108      	movs	r1, #8
 8002694:	4894      	ldr	r0, [pc, #592]	; (80028e8 <Long_Forward+0x2b4>)
 8002696:	f002 fe9d 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800269a:	2201      	movs	r2, #1
 800269c:	2120      	movs	r1, #32
 800269e:	4892      	ldr	r0, [pc, #584]	; (80028e8 <Long_Forward+0x2b4>)
 80026a0:	f002 fe98 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2110      	movs	r1, #16
 80026a8:	488f      	ldr	r0, [pc, #572]	; (80028e8 <Long_Forward+0x2b4>)
 80026aa:	f002 fe93 	bl	80053d4 <HAL_GPIO_WritePin>

			diff = abs(abs(YAW) - abs(yaw));
 80026ae:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <Long_Forward+0x2a0>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026b8:	ee17 3a90 	vmov	r3, s15
 80026bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80026c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80026c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026cc:	ee17 3a90 	vmov	r3, s15
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bfb8      	it	lt
 80026d4:	425b      	neglt	r3, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bfb8      	it	lt
 80026dc:	425b      	neglt	r3, r3
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e6:	edc7 7a07 	vstr	s15, [r7, #28]
			// if tilt to right
			if (YAW < yaw)
 80026ea:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <Long_Forward+0x2a0>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80026f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	dd07      	ble.n	800270e <Long_Forward+0xda>
				diff = 0 - diff;
 80026fe:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80028ec <Long_Forward+0x2b8>
 8002702:	edd7 7a07 	vldr	s15, [r7, #28]
 8002706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270a:	edc7 7a07 	vstr	s15, [r7, #28]
			if (diff >= 0.5)
 800270e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002712:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271e:	db09      	blt.n	8002734 <Long_Forward+0x100>
			{
				// If tilt to right
				// turn right
				htim1.Instance->CCR4 = center + reorient;
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	441a      	add	r2, r3
 8002726:	4b6d      	ldr	r3, [pc, #436]	; (80028dc <Long_Forward+0x2a8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800272c:	200a      	movs	r0, #10
 800272e:	f006 fb7f 	bl	8008e30 <osDelay>
 8002732:	e011      	b.n	8002758 <Long_Forward+0x124>
			}
			else if (diff <= -0.5) {
 8002734:	edd7 7a07 	vldr	s15, [r7, #28]
 8002738:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800273c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	d808      	bhi.n	8002758 <Long_Forward+0x124>
				// If tilt to left
				// turn right
				htim1.Instance->CCR4 = center + reorient;
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	441a      	add	r2, r3
 800274c:	4b63      	ldr	r3, [pc, #396]	; (80028dc <Long_Forward+0x2a8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8002752:	200a      	movs	r0, #10
 8002754:	f006 fb6c 	bl	8008e30 <osDelay>
			}

			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8002758:	4b5f      	ldr	r3, [pc, #380]	; (80028d8 <Long_Forward+0x2a4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	88fa      	ldrh	r2, [r7, #6]
 800275e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 8002760:	4b5d      	ldr	r3, [pc, #372]	; (80028d8 <Long_Forward+0x2a4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	639a      	str	r2, [r3, #56]	; 0x38

			cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 8002768:	4b5e      	ldr	r3, [pc, #376]	; (80028e4 <Long_Forward+0x2b0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	81bb      	strh	r3, [r7, #12]

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 8002770:	4b5c      	ldr	r3, [pc, #368]	; (80028e4 <Long_Forward+0x2b0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b10      	cmp	r3, #16
 800277c:	d109      	bne.n	8002792 <Long_Forward+0x15e>
				if ((cnt1-cnt2) >= target)
 800277e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002782:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	f73f af7b 	bgt.w	8002686 <Long_Forward+0x52>
					break;
 8002790:	e009      	b.n	80027a6 <Long_Forward+0x172>
			}
			else {
				if ((cnt2-cnt1) >= target)
 8002792:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002796:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	dd00      	ble.n	80027a4 <Long_Forward+0x170>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80027a2:	e770      	b.n	8002686 <Long_Forward+0x52>
					break;
 80027a4:	bf00      	nop
			}
		}
		return 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e08f      	b.n	80028ca <Long_Forward+0x296>
	} else {
		while(IR(hadc1) != 0){
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80027aa:	2201      	movs	r2, #1
 80027ac:	2104      	movs	r1, #4
 80027ae:	484e      	ldr	r0, [pc, #312]	; (80028e8 <Long_Forward+0x2b4>)
 80027b0:	f002 fe10 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80027b4:	2200      	movs	r2, #0
 80027b6:	2108      	movs	r1, #8
 80027b8:	484b      	ldr	r0, [pc, #300]	; (80028e8 <Long_Forward+0x2b4>)
 80027ba:	f002 fe0b 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80027be:	2201      	movs	r2, #1
 80027c0:	2120      	movs	r1, #32
 80027c2:	4849      	ldr	r0, [pc, #292]	; (80028e8 <Long_Forward+0x2b4>)
 80027c4:	f002 fe06 	bl	80053d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2110      	movs	r1, #16
 80027cc:	4846      	ldr	r0, [pc, #280]	; (80028e8 <Long_Forward+0x2b4>)
 80027ce:	f002 fe01 	bl	80053d4 <HAL_GPIO_WritePin>

			diff = abs(abs(YAW) - abs(yaw));
 80027d2:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <Long_Forward+0x2a0>)
 80027d4:	edd3 7a00 	vldr	s15, [r3]
 80027d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027dc:	ee17 3a90 	vmov	r3, s15
 80027e0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80027e4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80027e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f0:	ee17 3a90 	vmov	r3, s15
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bfb8      	it	lt
 80027f8:	425b      	neglt	r3, r3
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bfb8      	it	lt
 8002800:	425b      	neglt	r3, r3
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280a:	edc7 7a07 	vstr	s15, [r7, #28]
			// if tilt to right
			if (YAW < yaw)
 800280e:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <Long_Forward+0x2a0>)
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	ed97 7a04 	vldr	s14, [r7, #16]
 8002818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800281c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002820:	dd07      	ble.n	8002832 <Long_Forward+0x1fe>
				diff = 0 - diff;
 8002822:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80028ec <Long_Forward+0x2b8>
 8002826:	edd7 7a07 	vldr	s15, [r7, #28]
 800282a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282e:	edc7 7a07 	vstr	s15, [r7, #28]
			if (diff >= 0.5)
 8002832:	edd7 7a07 	vldr	s15, [r7, #28]
 8002836:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800283a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	db09      	blt.n	8002858 <Long_Forward+0x224>
			{
				// If tilt to right
				// turn right
				htim1.Instance->CCR4 = center + reorient;
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	441a      	add	r2, r3
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <Long_Forward+0x2a8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8002850:	200a      	movs	r0, #10
 8002852:	f006 faed 	bl	8008e30 <osDelay>
 8002856:	e011      	b.n	800287c <Long_Forward+0x248>
			}
			else if (diff <= -0.5) {
 8002858:	edd7 7a07 	vldr	s15, [r7, #28]
 800285c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	d808      	bhi.n	800287c <Long_Forward+0x248>
				// If tilt to left
				// turn right
				htim1.Instance->CCR4 = center + reorient;
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	441a      	add	r2, r3
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <Long_Forward+0x2a8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8002876:	200a      	movs	r0, #10
 8002878:	f006 fada 	bl	8008e30 <osDelay>
			}

			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <Long_Forward+0x2a4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <Long_Forward+0x2a4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	639a      	str	r2, [r3, #56]	; 0x38
		while(IR(hadc1) != 0){
 800288c:	4e18      	ldr	r6, [pc, #96]	; (80028f0 <Long_Forward+0x2bc>)
 800288e:	466d      	mov	r5, sp
 8002890:	f106 0410 	add.w	r4, r6, #16
 8002894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800289a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800289c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800289e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80028a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80028ac:	f7ff fc82 	bl	80021b4 <IR>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f47f af79 	bne.w	80027aa <Long_Forward+0x176>
		}

		cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <Long_Forward+0x2b0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	81bb      	strh	r3, [r7, #12]
		return (int)(cnt2-cnt1);
 80028c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80028c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028c8:	1ad3      	subs	r3, r2, r3
	}
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000020c 	.word	0x2000020c
 80028d8:	20004b30 	.word	0x20004b30
 80028dc:	20004cec 	.word	0x20004cec
 80028e0:	20004d58 	.word	0x20004d58
 80028e4:	20004c58 	.word	0x20004c58
 80028e8:	40020000 	.word	0x40020000
 80028ec:	00000000 	.word	0x00000000
 80028f0:	20004ca0 	.word	0x20004ca0

080028f4 <Turning>:

/*
 * Turning function for week 9
 */
char Turning(bool left, uint16_t pwmVal, float target) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	460a      	mov	r2, r1
 80028fe:	ed87 0a00 	vstr	s0, [r7]
 8002902:	71fb      	strb	r3, [r7, #7]
 8002904:	4613      	mov	r3, r2
 8002906:	80bb      	strh	r3, [r7, #4]
	float yaw, diff;

	// Reset Timer Value
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8002908:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <Turning+0x10c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0201 	mvn.w	r2, #1
 8002910:	611a      	str	r2, [r3, #16]
	TIM3->CNT = 0;
 8002912:	4b3c      	ldr	r3, [pc, #240]	; (8002a04 <Turning+0x110>)
 8002914:	2200      	movs	r2, #0
 8002916:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002918:	2100      	movs	r1, #0
 800291a:	483b      	ldr	r0, [pc, #236]	; (8002a08 <Turning+0x114>)
 800291c:	f004 fa4c 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002920:	2104      	movs	r1, #4
 8002922:	4839      	ldr	r0, [pc, #228]	; (8002a08 <Turning+0x114>)
 8002924:	f004 fa48 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002928:	210c      	movs	r1, #12
 800292a:	4838      	ldr	r0, [pc, #224]	; (8002a0c <Turning+0x118>)
 800292c:	f004 fa44 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002930:	213c      	movs	r1, #60	; 0x3c
 8002932:	4833      	ldr	r0, [pc, #204]	; (8002a00 <Turning+0x10c>)
 8002934:	f004 fbae 	bl	8007094 <HAL_TIM_Encoder_Start>

	if (left == true) {
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <Turning+0x54>
		htim1.Instance->CCR4 = 100; // Turning Left
 800293e:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <Turning+0x118>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2264      	movs	r2, #100	; 0x64
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
 8002946:	e003      	b.n	8002950 <Turning+0x5c>
	} else {
		htim1.Instance->CCR4 = 240; // Turning Right
 8002948:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <Turning+0x118>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	22f0      	movs	r2, #240	; 0xf0
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
	}

	yaw = YAW;
 8002950:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <Turning+0x11c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002956:	2201      	movs	r2, #1
 8002958:	2104      	movs	r1, #4
 800295a:	482e      	ldr	r0, [pc, #184]	; (8002a14 <Turning+0x120>)
 800295c:	f002 fd3a 	bl	80053d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002960:	2200      	movs	r2, #0
 8002962:	2108      	movs	r1, #8
 8002964:	482b      	ldr	r0, [pc, #172]	; (8002a14 <Turning+0x120>)
 8002966:	f002 fd35 	bl	80053d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800296a:	2201      	movs	r2, #1
 800296c:	2120      	movs	r1, #32
 800296e:	4829      	ldr	r0, [pc, #164]	; (8002a14 <Turning+0x120>)
 8002970:	f002 fd30 	bl	80053d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002974:	2200      	movs	r2, #0
 8002976:	2110      	movs	r1, #16
 8002978:	4826      	ldr	r0, [pc, #152]	; (8002a14 <Turning+0x120>)
 800297a:	f002 fd2b 	bl	80053d4 <HAL_GPIO_WritePin>


	osDelay(500);
 800297e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002982:	f006 fa55 	bl	8008e30 <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <Turning+0x114>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	88ba      	ldrh	r2, [r7, #4]
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <Turning+0x114>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	88ba      	ldrh	r2, [r7, #4]
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(10); // Move on top
 8002996:	200a      	movs	r0, #10
 8002998:	f006 fa4a 	bl	8008e30 <osDelay>

	for (;;) {
		if (left == true) {
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <Turning+0xc2>
			diff = YAW-yaw;
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <Turning+0x11c>)
 80029a4:	ed93 7a00 	vldr	s14, [r3]
 80029a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b0:	edc7 7a03 	vstr	s15, [r7, #12]
 80029b4:	e008      	b.n	80029c8 <Turning+0xd4>
		} else {
			diff = yaw-YAW;
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <Turning+0x11c>)
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80029c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c4:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if (diff > target)
 80029c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80029cc:	edd7 7a00 	vldr	s15, [r7]
 80029d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d8:	dc00      	bgt.n	80029dc <Turning+0xe8>
		if (left == true) {
 80029da:	e7df      	b.n	800299c <Turning+0xa8>
			break;
 80029dc:	bf00      	nop
	}
//	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
//	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle

	htim1.Instance->CCR4 = 143; // Forward
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <Turning+0x118>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	228f      	movs	r2, #143	; 0x8f
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40

	// Reset Timer Value
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <Turning+0x10c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f06f 0201 	mvn.w	r2, #1
 80029ee:	611a      	str	r2, [r3, #16]
	TIM3->CNT = 0;
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <Turning+0x110>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24
	return 'R';
 80029f6:	2352      	movs	r3, #82	; 0x52
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20004c58 	.word	0x20004c58
 8002a04:	40000400 	.word	0x40000400
 8002a08:	20004b30 	.word	0x20004b30
 8002a0c:	20004cec 	.word	0x20004cec
 8002a10:	2000020c 	.word	0x2000020c
 8002a14:	40020000 	.word	0x40020000

08002a18 <Tight_Turn>:

/*
 * On the spot turning function for week 8
 */
char Tight_Turn(bool forward, bool left) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	460a      	mov	r2, r1
 8002a22:	71fb      	strb	r3, [r7, #7]
 8002a24:	4613      	mov	r3, r2
 8002a26:	71bb      	strb	r3, [r7, #6]
	uint16_t pwmVal = 1800;
 8002a28:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8002a2c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t cnt;
	float yaw = 0;
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	623b      	str	r3, [r7, #32]

//	// Reset Timer Value
//	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
//	TIM3->CNT = 0;

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002a34:	2100      	movs	r1, #0
 8002a36:	48aa      	ldr	r0, [pc, #680]	; (8002ce0 <Tight_Turn+0x2c8>)
 8002a38:	f004 f9be 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002a3c:	2104      	movs	r1, #4
 8002a3e:	48a8      	ldr	r0, [pc, #672]	; (8002ce0 <Tight_Turn+0x2c8>)
 8002a40:	f004 f9ba 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002a44:	210c      	movs	r1, #12
 8002a46:	48a7      	ldr	r0, [pc, #668]	; (8002ce4 <Tight_Turn+0x2cc>)
 8002a48:	f004 f9b6 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002a4c:	213c      	movs	r1, #60	; 0x3c
 8002a4e:	48a6      	ldr	r0, [pc, #664]	; (8002ce8 <Tight_Turn+0x2d0>)
 8002a50:	f004 fb20 	bl	8007094 <HAL_TIM_Encoder_Start>

	yaw = YAW;
 8002a54:	4ba5      	ldr	r3, [pc, #660]	; (8002cec <Tight_Turn+0x2d4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	623b      	str	r3, [r7, #32]

	// For corridor
		if (forward == true){
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01e      	beq.n	8002a9e <Tight_Turn+0x86>
			if (left == true) {
 8002a60:	79bb      	ldrb	r3, [r7, #6]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00d      	beq.n	8002a82 <Tight_Turn+0x6a>
				htim1.Instance->CCR4 = 93; // Turning Left 2940
 8002a66:	4b9f      	ldr	r3, [pc, #636]	; (8002ce4 <Tight_Turn+0x2cc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	225d      	movs	r2, #93	; 0x5d
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
				targetFront1 = 1110;
 8002a6e:	f240 4356 	movw	r3, #1110	; 0x456
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
				targetBack = 1430;
 8002a74:	f240 5396 	movw	r3, #1430	; 0x596
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
				targetFront2 = 850;
 8002a7a:	f240 3352 	movw	r3, #850	; 0x352
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a80:	e02a      	b.n	8002ad8 <Tight_Turn+0xc0>
			} else {
				htim1.Instance->CCR4 = 240; // Turning Right 4210
 8002a82:	4b98      	ldr	r3, [pc, #608]	; (8002ce4 <Tight_Turn+0x2cc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	22f0      	movs	r2, #240	; 0xf0
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
				targetFront1 = 1454;
 8002a8a:	f240 53ae 	movw	r3, #1454	; 0x5ae
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
				targetBack = 934;
 8002a90:	f240 33a6 	movw	r3, #934	; 0x3a6
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
				targetFront2 = 1090;
 8002a96:	f240 4342 	movw	r3, #1090	; 0x442
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9c:	e01c      	b.n	8002ad8 <Tight_Turn+0xc0>
			}
		} else {
			if (left == true) {
 8002a9e:	79bb      	ldrb	r3, [r7, #6]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00c      	beq.n	8002abe <Tight_Turn+0xa6>
				htim1.Instance->CCR4 = 93; // A Turning Left 2940
 8002aa4:	4b8f      	ldr	r3, [pc, #572]	; (8002ce4 <Tight_Turn+0x2cc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	225d      	movs	r2, #93	; 0x5d
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
				targetFront1 = 200;
 8002aac:	23c8      	movs	r3, #200	; 0xc8
 8002aae:	633b      	str	r3, [r7, #48]	; 0x30
				targetBack = 1600;
 8002ab0:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
				targetFront2 = 810;
 8002ab6:	f240 332a 	movw	r3, #810	; 0x32a
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002abc:	e00c      	b.n	8002ad8 <Tight_Turn+0xc0>
			} else {
				htim1.Instance->CCR4 = 240; // D Turning Right 4210
 8002abe:	4b89      	ldr	r3, [pc, #548]	; (8002ce4 <Tight_Turn+0x2cc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	22f0      	movs	r2, #240	; 0xf0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
				targetFront1 = 700;
 8002ac6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
				targetBack = 950;
 8002acc:	f240 33b6 	movw	r3, #950	; 0x3b6
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
				targetFront2 = 910;
 8002ad2:	f240 338e 	movw	r3, #910	; 0x38e
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
			}
		}
	if (forward == true) {
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d014      	beq.n	8002b08 <Tight_Turn+0xf0>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002ade:	2201      	movs	r2, #1
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	4883      	ldr	r0, [pc, #524]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002ae4:	f002 fc76 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2108      	movs	r1, #8
 8002aec:	4880      	ldr	r0, [pc, #512]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002aee:	f002 fc71 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002af2:	2201      	movs	r2, #1
 8002af4:	2120      	movs	r1, #32
 8002af6:	487e      	ldr	r0, [pc, #504]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002af8:	f002 fc6c 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2110      	movs	r1, #16
 8002b00:	487b      	ldr	r0, [pc, #492]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002b02:	f002 fc67 	bl	80053d4 <HAL_GPIO_WritePin>
 8002b06:	e013      	b.n	8002b30 <Tight_Turn+0x118>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2108      	movs	r1, #8
 8002b0c:	4878      	ldr	r0, [pc, #480]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002b0e:	f002 fc61 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2104      	movs	r1, #4
 8002b16:	4876      	ldr	r0, [pc, #472]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002b18:	f002 fc5c 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	2110      	movs	r1, #16
 8002b20:	4873      	ldr	r0, [pc, #460]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002b22:	f002 fc57 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2120      	movs	r1, #32
 8002b2a:	4871      	ldr	r0, [pc, #452]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002b2c:	f002 fc52 	bl	80053d4 <HAL_GPIO_WritePin>
	}


	osDelay(500);
 8002b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b34:	f006 f97c 	bl	8008e30 <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8002b38:	4b69      	ldr	r3, [pc, #420]	; (8002ce0 <Tight_Turn+0x2c8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b3e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 8002b40:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <Tight_Turn+0x2c8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(10); // Move on top
 8002b48:	200a      	movs	r0, #10
 8002b4a:	f006 f971 	bl	8008e30 <osDelay>

	// Reset Timer Value
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8002b4e:	4b66      	ldr	r3, [pc, #408]	; (8002ce8 <Tight_Turn+0x2d0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f06f 0201 	mvn.w	r2, #1
 8002b56:	611a      	str	r2, [r3, #16]
	TIM3->CNT = 0;
 8002b58:	4b66      	ldr	r3, [pc, #408]	; (8002cf4 <Tight_Turn+0x2dc>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24

	for (;;) {
		// for 90deg left turn
		cnt = __HAL_TIM_GET_COUNTER(&htim3);
 8002b5e:	4b62      	ldr	r3, [pc, #392]	; (8002ce8 <Tight_Turn+0x2d0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	83fb      	strh	r3, [r7, #30]

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 8002b66:	4b60      	ldr	r3, [pc, #384]	; (8002ce8 <Tight_Turn+0x2d0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d10a      	bne.n	8002b8a <Tight_Turn+0x172>
			if (65535-cnt >= targetFront1 && cnt!=0) {
 8002b74:	8bfb      	ldrh	r3, [r7, #30]
 8002b76:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002b7a:	33ff      	adds	r3, #255	; 0xff
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	dced      	bgt.n	8002b5e <Tight_Turn+0x146>
 8002b82:	8bfb      	ldrh	r3, [r7, #30]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ea      	beq.n	8002b5e <Tight_Turn+0x146>
				break;
 8002b88:	e005      	b.n	8002b96 <Tight_Turn+0x17e>
			}
		}
		else {
			if (cnt >= targetFront1) {
 8002b8a:	8bfb      	ldrh	r3, [r7, #30]
 8002b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dd00      	ble.n	8002b94 <Tight_Turn+0x17c>
		cnt = __HAL_TIM_GET_COUNTER(&htim3);
 8002b92:	e7e4      	b.n	8002b5e <Tight_Turn+0x146>
				break;
 8002b94:	bf00      	nop
		}

	}

	// Stop
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 8002b96:	4b52      	ldr	r3, [pc, #328]	; (8002ce0 <Tight_Turn+0x2c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 8002b9e:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <Tight_Turn+0x2c8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38


	osDelay(100);
 8002ba6:	2064      	movs	r0, #100	; 0x64
 8002ba8:	f006 f942 	bl	8008e30 <osDelay>

	// Back

	if (left == true) {
 8002bac:	79bb      	ldrb	r3, [r7, #6]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <Tight_Turn+0x1a4>
		htim1.Instance->CCR4 = 240; // Turning Left 2940
 8002bb2:	4b4c      	ldr	r3, [pc, #304]	; (8002ce4 <Tight_Turn+0x2cc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	22f0      	movs	r2, #240	; 0xf0
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8002bba:	e003      	b.n	8002bc4 <Tight_Turn+0x1ac>
	} else {
		htim1.Instance->CCR4 = 93; // Turning Right 4210
 8002bbc:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <Tight_Turn+0x2cc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	225d      	movs	r2, #93	; 0x5d
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (forward == true) {
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d014      	beq.n	8002bf4 <Tight_Turn+0x1dc>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2108      	movs	r1, #8
 8002bce:	4848      	ldr	r0, [pc, #288]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002bd0:	f002 fc00 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	4845      	ldr	r0, [pc, #276]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002bda:	f002 fbfb 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002bde:	2201      	movs	r2, #1
 8002be0:	2110      	movs	r1, #16
 8002be2:	4843      	ldr	r0, [pc, #268]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002be4:	f002 fbf6 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2120      	movs	r1, #32
 8002bec:	4840      	ldr	r0, [pc, #256]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002bee:	f002 fbf1 	bl	80053d4 <HAL_GPIO_WritePin>
 8002bf2:	e013      	b.n	8002c1c <Tight_Turn+0x204>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	483d      	ldr	r0, [pc, #244]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002bfa:	f002 fbeb 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2108      	movs	r1, #8
 8002c02:	483b      	ldr	r0, [pc, #236]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002c04:	f002 fbe6 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	2120      	movs	r1, #32
 8002c0c:	4838      	ldr	r0, [pc, #224]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002c0e:	f002 fbe1 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2110      	movs	r1, #16
 8002c16:	4836      	ldr	r0, [pc, #216]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002c18:	f002 fbdc 	bl	80053d4 <HAL_GPIO_WritePin>
	}
	osDelay(500);
 8002c1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c20:	f006 f906 	bl	8008e30 <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8002c24:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <Tight_Turn+0x2c8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c2a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 8002c2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <Tight_Turn+0x2c8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(10); // Move on top
 8002c34:	200a      	movs	r0, #10
 8002c36:	f006 f8fb 	bl	8008e30 <osDelay>

	// Reset Timer Value
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <Tight_Turn+0x2d0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0201 	mvn.w	r2, #1
 8002c42:	611a      	str	r2, [r3, #16]
	TIM3->CNT = 0;
 8002c44:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <Tight_Turn+0x2dc>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

	for (;;) {
		// for 90deg left turn
		cnt = __HAL_TIM_GET_COUNTER(&htim3);
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <Tight_Turn+0x2d0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	83fb      	strh	r3, [r7, #30]

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 8002c52:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <Tight_Turn+0x2d0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d10a      	bne.n	8002c76 <Tight_Turn+0x25e>
			if (65535-cnt >= targetBack && cnt!=0) {
 8002c60:	8bfb      	ldrh	r3, [r7, #30]
 8002c62:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002c66:	33ff      	adds	r3, #255	; 0xff
 8002c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	dced      	bgt.n	8002c4a <Tight_Turn+0x232>
 8002c6e:	8bfb      	ldrh	r3, [r7, #30]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ea      	beq.n	8002c4a <Tight_Turn+0x232>
				break;
 8002c74:	e005      	b.n	8002c82 <Tight_Turn+0x26a>
			}
		}
		else {
			if (cnt >= targetBack) {
 8002c76:	8bfb      	ldrh	r3, [r7, #30]
 8002c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	dd00      	ble.n	8002c80 <Tight_Turn+0x268>
		cnt = __HAL_TIM_GET_COUNTER(&htim3);
 8002c7e:	e7e4      	b.n	8002c4a <Tight_Turn+0x232>
				break;
 8002c80:	bf00      	nop
		}

	}

	// Front2
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <Tight_Turn+0x2c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <Tight_Turn+0x2c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38

	osDelay(100);
 8002c92:	2064      	movs	r0, #100	; 0x64
 8002c94:	f006 f8cc 	bl	8008e30 <osDelay>

	if (left == true) {
 8002c98:	79bb      	ldrb	r3, [r7, #6]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d004      	beq.n	8002ca8 <Tight_Turn+0x290>
		htim1.Instance->CCR4 = 93; // Turning Left 2940
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <Tight_Turn+0x2cc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	225d      	movs	r2, #93	; 0x5d
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ca6:	e003      	b.n	8002cb0 <Tight_Turn+0x298>
	} else {
		htim1.Instance->CCR4 = 240; // Turning Right 4210
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <Tight_Turn+0x2cc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	22f0      	movs	r2, #240	; 0xf0
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (forward == true) {
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d020      	beq.n	8002cf8 <Tight_Turn+0x2e0>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	2104      	movs	r1, #4
 8002cba:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002cbc:	f002 fb8a 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2108      	movs	r1, #8
 8002cc4:	480a      	ldr	r0, [pc, #40]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002cc6:	f002 fb85 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002cca:	2201      	movs	r2, #1
 8002ccc:	2120      	movs	r1, #32
 8002cce:	4808      	ldr	r0, [pc, #32]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002cd0:	f002 fb80 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2110      	movs	r1, #16
 8002cd8:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <Tight_Turn+0x2d8>)
 8002cda:	f002 fb7b 	bl	80053d4 <HAL_GPIO_WritePin>
 8002cde:	e01f      	b.n	8002d20 <Tight_Turn+0x308>
 8002ce0:	20004b30 	.word	0x20004b30
 8002ce4:	20004cec 	.word	0x20004cec
 8002ce8:	20004c58 	.word	0x20004c58
 8002cec:	2000020c 	.word	0x2000020c
 8002cf0:	40020000 	.word	0x40020000
 8002cf4:	40000400 	.word	0x40000400
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	2108      	movs	r1, #8
 8002cfc:	48b1      	ldr	r0, [pc, #708]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002cfe:	f002 fb69 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2104      	movs	r1, #4
 8002d06:	48af      	ldr	r0, [pc, #700]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002d08:	f002 fb64 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	2110      	movs	r1, #16
 8002d10:	48ac      	ldr	r0, [pc, #688]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002d12:	f002 fb5f 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2120      	movs	r1, #32
 8002d1a:	48aa      	ldr	r0, [pc, #680]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002d1c:	f002 fb5a 	bl	80053d4 <HAL_GPIO_WritePin>
	}
	osDelay(500);
 8002d20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d24:	f006 f884 	bl	8008e30 <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8002d28:	4ba7      	ldr	r3, [pc, #668]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d2e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 8002d30:	4ba5      	ldr	r3, [pc, #660]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(10); // Move on top
 8002d38:	200a      	movs	r0, #10
 8002d3a:	f006 f879 	bl	8008e30 <osDelay>

	// Reset Timer Val
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8002d3e:	4ba3      	ldr	r3, [pc, #652]	; (8002fcc <Tight_Turn+0x5b4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f06f 0201 	mvn.w	r2, #1
 8002d46:	611a      	str	r2, [r3, #16]
	TIM3->CNT = 0;
 8002d48:	4ba1      	ldr	r3, [pc, #644]	; (8002fd0 <Tight_Turn+0x5b8>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

	for (;;) {
		// for 90deg left turn
		cnt = __HAL_TIM_GET_COUNTER(&htim3);
 8002d4e:	4b9f      	ldr	r3, [pc, #636]	; (8002fcc <Tight_Turn+0x5b4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	83fb      	strh	r3, [r7, #30]

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 8002d56:	4b9d      	ldr	r3, [pc, #628]	; (8002fcc <Tight_Turn+0x5b4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d10a      	bne.n	8002d7a <Tight_Turn+0x362>
			if (65535-cnt >= targetFront2 && cnt!=0) {
 8002d64:	8bfb      	ldrh	r3, [r7, #30]
 8002d66:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002d6a:	33ff      	adds	r3, #255	; 0xff
 8002d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	dced      	bgt.n	8002d4e <Tight_Turn+0x336>
 8002d72:	8bfb      	ldrh	r3, [r7, #30]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ea      	beq.n	8002d4e <Tight_Turn+0x336>
				break;
 8002d78:	e005      	b.n	8002d86 <Tight_Turn+0x36e>
			}
		}
		else {
			if (cnt >= targetFront2) {
 8002d7a:	8bfb      	ldrh	r3, [r7, #30]
 8002d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	dd00      	ble.n	8002d84 <Tight_Turn+0x36c>
		cnt = __HAL_TIM_GET_COUNTER(&htim3);
 8002d82:	e7e4      	b.n	8002d4e <Tight_Turn+0x336>
				break;
 8002d84:	bf00      	nop
		}

	}


	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 8002d86:	4b90      	ldr	r3, [pc, #576]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 8002d8e:	4b8e      	ldr	r3, [pc, #568]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(10);
 8002d96:	200a      	movs	r0, #10
 8002d98:	f006 f84a 	bl	8008e30 <osDelay>
	htim1.Instance->CCR4 = 143; // Forward
 8002d9c:	4b8d      	ldr	r3, [pc, #564]	; (8002fd4 <Tight_Turn+0x5bc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	228f      	movs	r2, #143	; 0x8f
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40

	// count declaration
	int16_t cnt1, cnt2;

	// Reset Timer Value
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8002da4:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <Tight_Turn+0x5b4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0201 	mvn.w	r2, #1
 8002dac:	611a      	str	r2, [r3, #16]
	TIM3->CNT = 0;
 8002dae:	4b88      	ldr	r3, [pc, #544]	; (8002fd0 <Tight_Turn+0x5b8>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

	cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002db4:	4b85      	ldr	r3, [pc, #532]	; (8002fcc <Tight_Turn+0x5b4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	83bb      	strh	r3, [r7, #28]

	// Backwards correction
	for (;;) {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	2108      	movs	r1, #8
 8002dc0:	4880      	ldr	r0, [pc, #512]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002dc2:	f002 fb07 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2104      	movs	r1, #4
 8002dca:	487e      	ldr	r0, [pc, #504]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002dcc:	f002 fb02 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	2110      	movs	r1, #16
 8002dd4:	487b      	ldr	r0, [pc, #492]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002dd6:	f002 fafd 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2120      	movs	r1, #32
 8002dde:	4879      	ldr	r0, [pc, #484]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002de0:	f002 faf8 	bl	80053d4 <HAL_GPIO_WritePin>
		osDelay(10);
 8002de4:	200a      	movs	r0, #10
 8002de6:	f006 f823 	bl	8008e30 <osDelay>
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8002dea:	4b77      	ldr	r3, [pc, #476]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002df0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 8002df2:	4b75      	ldr	r3, [pc, #468]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38
		if (forward == true){
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <Tight_Turn+0x3fe>
			if (left == true)
 8002e00:	79bb      	ldrb	r3, [r7, #6]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <Tight_Turn+0x3f6>
				target = 917;
 8002e06:	f240 3395 	movw	r3, #917	; 0x395
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e0c:	e00d      	b.n	8002e2a <Tight_Turn+0x412>
			else
				target = 900;
 8002e0e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
 8002e14:	e009      	b.n	8002e2a <Tight_Turn+0x412>
		} else {
			if (left == true)
 8002e16:	79bb      	ldrb	r3, [r7, #6]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <Tight_Turn+0x40c>
				target = 400;
 8002e1c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
 8002e22:	e002      	b.n	8002e2a <Tight_Turn+0x412>
			else
				target = 1000;
 8002e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
		}
		cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 8002e2a:	4b68      	ldr	r3, [pc, #416]	; (8002fcc <Tight_Turn+0x5b4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	837b      	strh	r3, [r7, #26]

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 8002e32:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <Tight_Turn+0x5b4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d108      	bne.n	8002e52 <Tight_Turn+0x43a>
			if ((cnt1-cnt2) >= target) {
 8002e40:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002e44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	dcb5      	bgt.n	8002dbc <Tight_Turn+0x3a4>
				break;
 8002e50:	e009      	b.n	8002e66 <Tight_Turn+0x44e>
			}
		}
		else {
			if ((cnt2-cnt1) >= target) {
 8002e52:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002e56:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	dd00      	ble.n	8002e64 <Tight_Turn+0x44c>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002e62:	e7ab      	b.n	8002dbc <Tight_Turn+0x3a4>
				break;
 8002e64:	bf00      	nop
			}
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 8002e66:	4b58      	ldr	r3, [pc, #352]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 8002e6e:	4b56      	ldr	r3, [pc, #344]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38

		osDelay(500);
 8002e76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e7a:	f005 ffd9 	bl	8008e30 <osDelay>

		// angle correction
		float diff;
		float left_target = 89;
 8002e7e:	4b56      	ldr	r3, [pc, #344]	; (8002fd8 <Tight_Turn+0x5c0>)
 8002e80:	617b      	str	r3, [r7, #20]
		float right_target = 88;
 8002e82:	4b56      	ldr	r3, [pc, #344]	; (8002fdc <Tight_Turn+0x5c4>)
 8002e84:	613b      	str	r3, [r7, #16]
		float threshold = 1;
 8002e86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e8a:	60fb      	str	r3, [r7, #12]
		if (left == true) {
 8002e8c:	79bb      	ldrb	r3, [r7, #6]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8136 	beq.w	8003100 <Tight_Turn+0x6e8>
			diff = YAW-yaw;
 8002e94:	4b52      	ldr	r3, [pc, #328]	; (8002fe0 <Tight_Turn+0x5c8>)
 8002e96:	ed93 7a00 	vldr	s14, [r3]
 8002e9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea2:	edc7 7a02 	vstr	s15, [r7, #8]
			if (diff > left_target+threshold) {
 8002ea6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb2:	ed97 7a02 	vldr	s14, [r7, #8]
 8002eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	f340 8091 	ble.w	8002fe4 <Tight_Turn+0x5cc>
				for (;;) {

					htim1.Instance->CCR4 = 152; // Turning Right 4210
 8002ec2:	4b44      	ldr	r3, [pc, #272]	; (8002fd4 <Tight_Turn+0x5bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2298      	movs	r2, #152	; 0x98
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(200);
 8002eca:	20c8      	movs	r0, #200	; 0xc8
 8002ecc:	f005 ffb0 	bl	8008e30 <osDelay>

					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	483b      	ldr	r0, [pc, #236]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002ed6:	f002 fa7d 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2108      	movs	r1, #8
 8002ede:	4839      	ldr	r0, [pc, #228]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002ee0:	f002 fa78 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2120      	movs	r1, #32
 8002ee8:	4836      	ldr	r0, [pc, #216]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002eea:	f002 fa73 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2110      	movs	r1, #16
 8002ef2:	4834      	ldr	r0, [pc, #208]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002ef4:	f002 fa6e 	bl	80053d4 <HAL_GPIO_WritePin>
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8002ef8:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002efe:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(200);
 8002f08:	20c8      	movs	r0, #200	; 0xc8
 8002f0a:	f005 ff91 	bl	8008e30 <osDelay>

					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2200      	movs	r2, #0
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 8002f16:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38

					htim1.Instance->CCR4 = 140;
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <Tight_Turn+0x5bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	228c      	movs	r2, #140	; 0x8c
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(200);
 8002f26:	20c8      	movs	r0, #200	; 0xc8
 8002f28:	f005 ff82 	bl	8008e30 <osDelay>

					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2108      	movs	r1, #8
 8002f30:	4824      	ldr	r0, [pc, #144]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002f32:	f002 fa4f 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2104      	movs	r1, #4
 8002f3a:	4822      	ldr	r0, [pc, #136]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002f3c:	f002 fa4a 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002f40:	2201      	movs	r2, #1
 8002f42:	2110      	movs	r1, #16
 8002f44:	481f      	ldr	r0, [pc, #124]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002f46:	f002 fa45 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2120      	movs	r1, #32
 8002f4e:	481d      	ldr	r0, [pc, #116]	; (8002fc4 <Tight_Turn+0x5ac>)
 8002f50:	f002 fa40 	bl	80053d4 <HAL_GPIO_WritePin>
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f5a:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(200);
 8002f64:	20c8      	movs	r0, #200	; 0xc8
 8002f66:	f005 ff63 	bl	8008e30 <osDelay>

					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <Tight_Turn+0x5b0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2200      	movs	r2, #0
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38

					diff = YAW-yaw;
 8002f7a:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <Tight_Turn+0x5c8>)
 8002f7c:	ed93 7a00 	vldr	s14, [r3]
 8002f80:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f88:	edc7 7a02 	vstr	s15, [r7, #8]
					if (diff <= left_target+threshold)
 8002f8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f98:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa4:	f240 81d8 	bls.w	8003358 <Tight_Turn+0x940>
						break;
					if (YAW == 0.00)
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <Tight_Turn+0x5c8>)
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb6:	f000 81d1 	beq.w	800335c <Tight_Turn+0x944>
						break;
					osDelay(100);
 8002fba:	2064      	movs	r0, #100	; 0x64
 8002fbc:	f005 ff38 	bl	8008e30 <osDelay>
					htim1.Instance->CCR4 = 152; // Turning Right 4210
 8002fc0:	e77f      	b.n	8002ec2 <Tight_Turn+0x4aa>
 8002fc2:	bf00      	nop
 8002fc4:	40020000 	.word	0x40020000
 8002fc8:	20004b30 	.word	0x20004b30
 8002fcc:	20004c58 	.word	0x20004c58
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	20004cec 	.word	0x20004cec
 8002fd8:	42b20000 	.word	0x42b20000
 8002fdc:	42b00000 	.word	0x42b00000
 8002fe0:	2000020c 	.word	0x2000020c
				}

			}
			else if (diff < left_target-threshold) {
 8002fe4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fe8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff0:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	f140 81bb 	bpl.w	8003376 <Tight_Turn+0x95e>
				for (;;) {

					htim1.Instance->CCR4 = 140;
 8003000:	4b8b      	ldr	r3, [pc, #556]	; (8003230 <Tight_Turn+0x818>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	228c      	movs	r2, #140	; 0x8c
 8003006:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(200);
 8003008:	20c8      	movs	r0, #200	; 0xc8
 800300a:	f005 ff11 	bl	8008e30 <osDelay>

					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800300e:	2201      	movs	r2, #1
 8003010:	2104      	movs	r1, #4
 8003012:	4888      	ldr	r0, [pc, #544]	; (8003234 <Tight_Turn+0x81c>)
 8003014:	f002 f9de 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8003018:	2200      	movs	r2, #0
 800301a:	2108      	movs	r1, #8
 800301c:	4885      	ldr	r0, [pc, #532]	; (8003234 <Tight_Turn+0x81c>)
 800301e:	f002 f9d9 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8003022:	2201      	movs	r2, #1
 8003024:	2120      	movs	r1, #32
 8003026:	4883      	ldr	r0, [pc, #524]	; (8003234 <Tight_Turn+0x81c>)
 8003028:	f002 f9d4 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800302c:	2200      	movs	r2, #0
 800302e:	2110      	movs	r1, #16
 8003030:	4880      	ldr	r0, [pc, #512]	; (8003234 <Tight_Turn+0x81c>)
 8003032:	f002 f9cf 	bl	80053d4 <HAL_GPIO_WritePin>
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8003036:	4b80      	ldr	r3, [pc, #512]	; (8003238 <Tight_Turn+0x820>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800303c:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 800303e:	4b7e      	ldr	r3, [pc, #504]	; (8003238 <Tight_Turn+0x820>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003044:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(200);
 8003046:	20c8      	movs	r0, #200	; 0xc8
 8003048:	f005 fef2 	bl	8008e30 <osDelay>

					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 800304c:	4b7a      	ldr	r3, [pc, #488]	; (8003238 <Tight_Turn+0x820>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2200      	movs	r2, #0
 8003052:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 8003054:	4b78      	ldr	r3, [pc, #480]	; (8003238 <Tight_Turn+0x820>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2200      	movs	r2, #0
 800305a:	639a      	str	r2, [r3, #56]	; 0x38

					htim1.Instance->CCR4 = 152; // Turning Right 4210
 800305c:	4b74      	ldr	r3, [pc, #464]	; (8003230 <Tight_Turn+0x818>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2298      	movs	r2, #152	; 0x98
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(200);
 8003064:	20c8      	movs	r0, #200	; 0xc8
 8003066:	f005 fee3 	bl	8008e30 <osDelay>

					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800306a:	2201      	movs	r2, #1
 800306c:	2108      	movs	r1, #8
 800306e:	4871      	ldr	r0, [pc, #452]	; (8003234 <Tight_Turn+0x81c>)
 8003070:	f002 f9b0 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003074:	2200      	movs	r2, #0
 8003076:	2104      	movs	r1, #4
 8003078:	486e      	ldr	r0, [pc, #440]	; (8003234 <Tight_Turn+0x81c>)
 800307a:	f002 f9ab 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800307e:	2201      	movs	r2, #1
 8003080:	2110      	movs	r1, #16
 8003082:	486c      	ldr	r0, [pc, #432]	; (8003234 <Tight_Turn+0x81c>)
 8003084:	f002 f9a6 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8003088:	2200      	movs	r2, #0
 800308a:	2120      	movs	r1, #32
 800308c:	4869      	ldr	r0, [pc, #420]	; (8003234 <Tight_Turn+0x81c>)
 800308e:	f002 f9a1 	bl	80053d4 <HAL_GPIO_WritePin>
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8003092:	4b69      	ldr	r3, [pc, #420]	; (8003238 <Tight_Turn+0x820>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003098:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 800309a:	4b67      	ldr	r3, [pc, #412]	; (8003238 <Tight_Turn+0x820>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(200);
 80030a2:	20c8      	movs	r0, #200	; 0xc8
 80030a4:	f005 fec4 	bl	8008e30 <osDelay>

					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 80030a8:	4b63      	ldr	r3, [pc, #396]	; (8003238 <Tight_Turn+0x820>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2200      	movs	r2, #0
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 80030b0:	4b61      	ldr	r3, [pc, #388]	; (8003238 <Tight_Turn+0x820>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2200      	movs	r2, #0
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38

					diff = YAW-yaw;
 80030b8:	4b60      	ldr	r3, [pc, #384]	; (800323c <Tight_Turn+0x824>)
 80030ba:	ed93 7a00 	vldr	s14, [r3]
 80030be:	edd7 7a08 	vldr	s15, [r7, #32]
 80030c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c6:	edc7 7a02 	vstr	s15, [r7, #8]
					if (diff >= left_target-threshold)
 80030ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80030ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80030d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80030da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e2:	f280 813d 	bge.w	8003360 <Tight_Turn+0x948>
						break;
					if (YAW == 0.00)
 80030e6:	4b55      	ldr	r3, [pc, #340]	; (800323c <Tight_Turn+0x824>)
 80030e8:	edd3 7a00 	vldr	s15, [r3]
 80030ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	f000 8136 	beq.w	8003364 <Tight_Turn+0x94c>
						break;
					osDelay(100);
 80030f8:	2064      	movs	r0, #100	; 0x64
 80030fa:	f005 fe99 	bl	8008e30 <osDelay>
					htim1.Instance->CCR4 = 140;
 80030fe:	e77f      	b.n	8003000 <Tight_Turn+0x5e8>

			}
		}
		// If right turn
		else {
			diff = yaw-YAW;
 8003100:	4b4e      	ldr	r3, [pc, #312]	; (800323c <Tight_Turn+0x824>)
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	ed97 7a08 	vldr	s14, [r7, #32]
 800310a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310e:	edc7 7a02 	vstr	s15, [r7, #8]
			if (diff < right_target-threshold) {
 8003112:	ed97 7a04 	vldr	s14, [r7, #16]
 8003116:	edd7 7a03 	vldr	s15, [r7, #12]
 800311a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	f140 8089 	bpl.w	8003240 <Tight_Turn+0x828>
				for (;;) {

					htim1.Instance->CCR4 = 155; // Turning Right 4210
 800312e:	4b40      	ldr	r3, [pc, #256]	; (8003230 <Tight_Turn+0x818>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	229b      	movs	r2, #155	; 0x9b
 8003134:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(200);
 8003136:	20c8      	movs	r0, #200	; 0xc8
 8003138:	f005 fe7a 	bl	8008e30 <osDelay>

					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800313c:	2201      	movs	r2, #1
 800313e:	2104      	movs	r1, #4
 8003140:	483c      	ldr	r0, [pc, #240]	; (8003234 <Tight_Turn+0x81c>)
 8003142:	f002 f947 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8003146:	2200      	movs	r2, #0
 8003148:	2108      	movs	r1, #8
 800314a:	483a      	ldr	r0, [pc, #232]	; (8003234 <Tight_Turn+0x81c>)
 800314c:	f002 f942 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8003150:	2201      	movs	r2, #1
 8003152:	2120      	movs	r1, #32
 8003154:	4837      	ldr	r0, [pc, #220]	; (8003234 <Tight_Turn+0x81c>)
 8003156:	f002 f93d 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800315a:	2200      	movs	r2, #0
 800315c:	2110      	movs	r1, #16
 800315e:	4835      	ldr	r0, [pc, #212]	; (8003234 <Tight_Turn+0x81c>)
 8003160:	f002 f938 	bl	80053d4 <HAL_GPIO_WritePin>
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8003164:	4b34      	ldr	r3, [pc, #208]	; (8003238 <Tight_Turn+0x820>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800316a:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 800316c:	4b32      	ldr	r3, [pc, #200]	; (8003238 <Tight_Turn+0x820>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003172:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(200);
 8003174:	20c8      	movs	r0, #200	; 0xc8
 8003176:	f005 fe5b 	bl	8008e30 <osDelay>

					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 800317a:	4b2f      	ldr	r3, [pc, #188]	; (8003238 <Tight_Turn+0x820>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 8003182:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <Tight_Turn+0x820>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	639a      	str	r2, [r3, #56]	; 0x38

					htim1.Instance->CCR4 = 138;
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <Tight_Turn+0x818>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	228a      	movs	r2, #138	; 0x8a
 8003190:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(200);
 8003192:	20c8      	movs	r0, #200	; 0xc8
 8003194:	f005 fe4c 	bl	8008e30 <osDelay>

					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003198:	2201      	movs	r2, #1
 800319a:	2108      	movs	r1, #8
 800319c:	4825      	ldr	r0, [pc, #148]	; (8003234 <Tight_Turn+0x81c>)
 800319e:	f002 f919 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2104      	movs	r1, #4
 80031a6:	4823      	ldr	r0, [pc, #140]	; (8003234 <Tight_Turn+0x81c>)
 80031a8:	f002 f914 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80031ac:	2201      	movs	r2, #1
 80031ae:	2110      	movs	r1, #16
 80031b0:	4820      	ldr	r0, [pc, #128]	; (8003234 <Tight_Turn+0x81c>)
 80031b2:	f002 f90f 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2120      	movs	r1, #32
 80031ba:	481e      	ldr	r0, [pc, #120]	; (8003234 <Tight_Turn+0x81c>)
 80031bc:	f002 f90a 	bl	80053d4 <HAL_GPIO_WritePin>
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <Tight_Turn+0x820>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80031c6:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <Tight_Turn+0x820>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(200);
 80031d0:	20c8      	movs	r0, #200	; 0xc8
 80031d2:	f005 fe2d 	bl	8008e30 <osDelay>

					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 80031d6:	4b18      	ldr	r3, [pc, #96]	; (8003238 <Tight_Turn+0x820>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <Tight_Turn+0x820>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38

					diff = yaw-YAW;
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <Tight_Turn+0x824>)
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80031f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f4:	edc7 7a02 	vstr	s15, [r7, #8]
					if (diff >= right_target-threshold)
 80031f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80031fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003204:	ed97 7a02 	vldr	s14, [r7, #8]
 8003208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800320c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003210:	f280 80aa 	bge.w	8003368 <Tight_Turn+0x950>
						break;
					if (YAW == 0.00)
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <Tight_Turn+0x824>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	f000 80a3 	beq.w	800336c <Tight_Turn+0x954>
						break;
					osDelay(100);
 8003226:	2064      	movs	r0, #100	; 0x64
 8003228:	f005 fe02 	bl	8008e30 <osDelay>
					htim1.Instance->CCR4 = 155; // Turning Right 4210
 800322c:	e77f      	b.n	800312e <Tight_Turn+0x716>
 800322e:	bf00      	nop
 8003230:	20004cec 	.word	0x20004cec
 8003234:	40020000 	.word	0x40020000
 8003238:	20004b30 	.word	0x20004b30
 800323c:	2000020c 	.word	0x2000020c
				}

			}
			else if (diff > right_target+threshold) {
 8003240:	ed97 7a04 	vldr	s14, [r7, #16]
 8003244:	edd7 7a03 	vldr	s15, [r7, #12]
 8003248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003258:	f340 808d 	ble.w	8003376 <Tight_Turn+0x95e>
				for (;;) {

					htim1.Instance->CCR4 = 138;
 800325c:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <Tight_Turn+0x980>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	228a      	movs	r2, #138	; 0x8a
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(200);
 8003264:	20c8      	movs	r0, #200	; 0xc8
 8003266:	f005 fde3 	bl	8008e30 <osDelay>

					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800326a:	2201      	movs	r2, #1
 800326c:	2104      	movs	r1, #4
 800326e:	484b      	ldr	r0, [pc, #300]	; (800339c <Tight_Turn+0x984>)
 8003270:	f002 f8b0 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8003274:	2200      	movs	r2, #0
 8003276:	2108      	movs	r1, #8
 8003278:	4848      	ldr	r0, [pc, #288]	; (800339c <Tight_Turn+0x984>)
 800327a:	f002 f8ab 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800327e:	2201      	movs	r2, #1
 8003280:	2120      	movs	r1, #32
 8003282:	4846      	ldr	r0, [pc, #280]	; (800339c <Tight_Turn+0x984>)
 8003284:	f002 f8a6 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8003288:	2200      	movs	r2, #0
 800328a:	2110      	movs	r1, #16
 800328c:	4843      	ldr	r0, [pc, #268]	; (800339c <Tight_Turn+0x984>)
 800328e:	f002 f8a1 	bl	80053d4 <HAL_GPIO_WritePin>
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <Tight_Turn+0x988>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <Tight_Turn+0x988>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(200);
 80032a2:	20c8      	movs	r0, #200	; 0xc8
 80032a4:	f005 fdc4 	bl	8008e30 <osDelay>

					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 80032a8:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <Tight_Turn+0x988>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2200      	movs	r2, #0
 80032ae:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 80032b0:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <Tight_Turn+0x988>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38

					htim1.Instance->CCR4 = 155; // Turning Right 4210
 80032b8:	4b37      	ldr	r3, [pc, #220]	; (8003398 <Tight_Turn+0x980>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	229b      	movs	r2, #155	; 0x9b
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(200);
 80032c0:	20c8      	movs	r0, #200	; 0xc8
 80032c2:	f005 fdb5 	bl	8008e30 <osDelay>

					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80032c6:	2201      	movs	r2, #1
 80032c8:	2108      	movs	r1, #8
 80032ca:	4834      	ldr	r0, [pc, #208]	; (800339c <Tight_Turn+0x984>)
 80032cc:	f002 f882 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2104      	movs	r1, #4
 80032d4:	4831      	ldr	r0, [pc, #196]	; (800339c <Tight_Turn+0x984>)
 80032d6:	f002 f87d 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80032da:	2201      	movs	r2, #1
 80032dc:	2110      	movs	r1, #16
 80032de:	482f      	ldr	r0, [pc, #188]	; (800339c <Tight_Turn+0x984>)
 80032e0:	f002 f878 	bl	80053d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2120      	movs	r1, #32
 80032e8:	482c      	ldr	r0, [pc, #176]	; (800339c <Tight_Turn+0x984>)
 80032ea:	f002 f873 	bl	80053d4 <HAL_GPIO_WritePin>
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 80032ee:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <Tight_Turn+0x988>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 80032f6:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <Tight_Turn+0x988>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80032fc:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(200);
 80032fe:	20c8      	movs	r0, #200	; 0xc8
 8003300:	f005 fd96 	bl	8008e30 <osDelay>

					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 8003304:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <Tight_Turn+0x988>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2200      	movs	r2, #0
 800330a:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 800330c:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <Tight_Turn+0x988>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2200      	movs	r2, #0
 8003312:	639a      	str	r2, [r3, #56]	; 0x38

					diff = yaw-YAW;
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <Tight_Turn+0x98c>)
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	ed97 7a08 	vldr	s14, [r7, #32]
 800331e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003322:	edc7 7a02 	vstr	s15, [r7, #8]
					if (diff <= right_target+threshold)
 8003326:	ed97 7a04 	vldr	s14, [r7, #16]
 800332a:	edd7 7a03 	vldr	s15, [r7, #12]
 800332e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003332:	ed97 7a02 	vldr	s14, [r7, #8]
 8003336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333e:	d917      	bls.n	8003370 <Tight_Turn+0x958>
						break;
					if (YAW == 0.00)
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <Tight_Turn+0x98c>)
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	eef5 7a40 	vcmp.f32	s15, #0.0
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	d011      	beq.n	8003374 <Tight_Turn+0x95c>
						break;
					osDelay(100);
 8003350:	2064      	movs	r0, #100	; 0x64
 8003352:	f005 fd6d 	bl	8008e30 <osDelay>
					htim1.Instance->CCR4 = 138;
 8003356:	e781      	b.n	800325c <Tight_Turn+0x844>
						break;
 8003358:	bf00      	nop
 800335a:	e00c      	b.n	8003376 <Tight_Turn+0x95e>
						break;
 800335c:	bf00      	nop
 800335e:	e00a      	b.n	8003376 <Tight_Turn+0x95e>
						break;
 8003360:	bf00      	nop
 8003362:	e008      	b.n	8003376 <Tight_Turn+0x95e>
						break;
 8003364:	bf00      	nop
 8003366:	e006      	b.n	8003376 <Tight_Turn+0x95e>
						break;
 8003368:	bf00      	nop
 800336a:	e004      	b.n	8003376 <Tight_Turn+0x95e>
						break;
 800336c:	bf00      	nop
 800336e:	e002      	b.n	8003376 <Tight_Turn+0x95e>
						break;
 8003370:	bf00      	nop
 8003372:	e000      	b.n	8003376 <Tight_Turn+0x95e>
						break;
 8003374:	bf00      	nop

			}
//		}
	}

	htim1.Instance->CCR4 = 146;
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <Tight_Turn+0x980>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2292      	movs	r2, #146	; 0x92
 800337c:	641a      	str	r2, [r3, #64]	; 0x40
	// Reset Timer Value
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <Tight_Turn+0x990>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f06f 0201 	mvn.w	r2, #1
 8003386:	611a      	str	r2, [r3, #16]
	TIM3->CNT = 0;
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <Tight_Turn+0x994>)
 800338a:	2200      	movs	r2, #0
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
	return 'R';
 800338e:	2352      	movs	r3, #82	; 0x52
}
 8003390:	4618      	mov	r0, r3
 8003392:	3738      	adds	r7, #56	; 0x38
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20004cec 	.word	0x20004cec
 800339c:	40020000 	.word	0x40020000
 80033a0:	20004b30 	.word	0x20004b30
 80033a4:	2000020c 	.word	0x2000020c
 80033a8:	20004c58 	.word	0x20004c58
 80033ac:	40000400 	.word	0x40000400

080033b0 <Fast_Run>:

/*
 * Procedure for week 9 task
 */
char Fast_Run(uint8_t dist) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
	uint16_t pwmVal = 3000;
 80033ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80033be:	82fb      	strh	r3, [r7, #22]

	int obsDist;
	int steps = dist-'0';
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	3b30      	subs	r3, #48	; 0x30
 80033c4:	613b      	str	r3, [r7, #16]
	int d_turning = 1500; // diameter for turning
 80033c6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80033ca:	60fb      	str	r3, [r7, #12]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80033cc:	2100      	movs	r1, #0
 80033ce:	482c      	ldr	r0, [pc, #176]	; (8003480 <Fast_Run+0xd0>)
 80033d0:	f003 fcf2 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80033d4:	2104      	movs	r1, #4
 80033d6:	482a      	ldr	r0, [pc, #168]	; (8003480 <Fast_Run+0xd0>)
 80033d8:	f003 fcee 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80033dc:	210c      	movs	r1, #12
 80033de:	4829      	ldr	r0, [pc, #164]	; (8003484 <Fast_Run+0xd4>)
 80033e0:	f003 fcea 	bl	8006db8 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80033e4:	213c      	movs	r1, #60	; 0x3c
 80033e6:	4828      	ldr	r0, [pc, #160]	; (8003488 <Fast_Run+0xd8>)
 80033e8:	f003 fe54 	bl	8007094 <HAL_TIM_Encoder_Start>

	Long_Forward(pwmVal, 663*steps); // Move forward according to value from r-pi
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f240 2297 	movw	r2, #663	; 0x297
 80033f2:	fb02 f203 	mul.w	r2, r2, r3
 80033f6:	8afb      	ldrh	r3, [r7, #22]
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff f91a 	bl	8002634 <Long_Forward>

	Turning(false, pwmVal, 88.0); // Turn right 90 degree
 8003400:	8afb      	ldrh	r3, [r7, #22]
 8003402:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800348c <Fast_Run+0xdc>
 8003406:	4619      	mov	r1, r3
 8003408:	2000      	movs	r0, #0
 800340a:	f7ff fa73 	bl	80028f4 <Turning>

	obsDist = Long_Forward(pwmVal, 0); // Move forward till cannot detect obstacle
 800340e:	8afb      	ldrh	r3, [r7, #22]
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff f90e 	bl	8002634 <Long_Forward>
 8003418:	60b8      	str	r0, [r7, #8]

	Turning(true, pwmVal, 176.0); // Turn left 180 degree
 800341a:	8afb      	ldrh	r3, [r7, #22]
 800341c:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8003490 <Fast_Run+0xe0>
 8003420:	4619      	mov	r1, r3
 8003422:	2001      	movs	r0, #1
 8003424:	f7ff fa66 	bl	80028f4 <Turning>

	Long_Forward(pwmVal, 663*6); // Move forward 60cm
 8003428:	8afb      	ldrh	r3, [r7, #22]
 800342a:	f640 718a 	movw	r1, #3978	; 0xf8a
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff f900 	bl	8002634 <Long_Forward>

	Turning(true, pwmVal, 176.0); // Turn left 180 degree
 8003434:	8afb      	ldrh	r3, [r7, #22]
 8003436:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8003490 <Fast_Run+0xe0>
 800343a:	4619      	mov	r1, r3
 800343c:	2001      	movs	r0, #1
 800343e:	f7ff fa59 	bl	80028f4 <Turning>

	Long_Forward(pwmVal, 663*6-obsDist-d_turning); // Move forward till ready for parking
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f5c3 6378 	rsb	r3, r3, #3968	; 0xf80
 8003448:	330a      	adds	r3, #10
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	1a9a      	subs	r2, r3, r2
 800344e:	8afb      	ldrh	r3, [r7, #22]
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff f8ee 	bl	8002634 <Long_Forward>

	Turning(false, pwmVal, 88.0); // Turn right 90 degree
 8003458:	8afb      	ldrh	r3, [r7, #22]
 800345a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800348c <Fast_Run+0xdc>
 800345e:	4619      	mov	r1, r3
 8003460:	2000      	movs	r0, #0
 8003462:	f7ff fa47 	bl	80028f4 <Turning>

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <Fast_Run+0xd0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <Fast_Run+0xd0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	639a      	str	r2, [r3, #56]	; 0x38

	return 'R';
 8003476:	2352      	movs	r3, #82	; 0x52
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20004b30 	.word	0x20004b30
 8003484:	20004cec 	.word	0x20004cec
 8003488:	20004d58 	.word	0x20004d58
 800348c:	42b00000 	.word	0x42b00000
 8003490:	43300000 	.word	0x43300000

08003494 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003496:	b099      	sub	sp, #100	; 0x64
 8003498:	af0e      	add	r7, sp, #56	; 0x38
 800349a:	6078      	str	r0, [r7, #4]
//	int var2;

	/* Infinite loop */
	for (;;) {

		int irSide = IR(hadc1);
 800349c:	4e77      	ldr	r6, [pc, #476]	; (800367c <StartDefaultTask+0x1e8>)
 800349e:	466d      	mov	r5, sp
 80034a0:	f106 0410 	add.w	r4, r6, #16
 80034a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80034b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80034bc:	f7fe fe7a 	bl	80021b4 <IR>
 80034c0:	6278      	str	r0, [r7, #36]	; 0x24
//		int irFront = IR(hadc2);
		sprintf(display_buf, "IR: %5d", irSide);
 80034c2:	f107 0308 	add.w	r3, r7, #8
 80034c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c8:	496d      	ldr	r1, [pc, #436]	; (8003680 <StartDefaultTask+0x1ec>)
 80034ca:	4618      	mov	r0, r3
 80034cc:	f008 fdea 	bl	800c0a4 <siprintf>
		OLED_ShowString(10, 20, display_buf);
 80034d0:	f107 0308 	add.w	r3, r7, #8
 80034d4:	461a      	mov	r2, r3
 80034d6:	2114      	movs	r1, #20
 80034d8:	200a      	movs	r0, #10
 80034da:	f000 fb81 	bl	8003be0 <OLED_ShowString>

		HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 1);
 80034de:	2201      	movs	r2, #1
 80034e0:	4968      	ldr	r1, [pc, #416]	; (8003684 <StartDefaultTask+0x1f0>)
 80034e2:	4869      	ldr	r0, [pc, #420]	; (8003688 <StartDefaultTask+0x1f4>)
 80034e4:	f004 fcab 	bl	8007e3e <HAL_UART_Receive_IT>
 80034e8:	4b66      	ldr	r3, [pc, #408]	; (8003684 <StartDefaultTask+0x1f0>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
		memcpy(receiveBuffer, aRxBuffer, sizeof(char));
 80034ec:	f887 3020 	strb.w	r3, [r7, #32]
		switch (receiveBuffer[0]) {
 80034f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034f4:	3b30      	subs	r3, #48	; 0x30
 80034f6:	2b27      	cmp	r3, #39	; 0x27
 80034f8:	f200 80b4 	bhi.w	8003664 <StartDefaultTask+0x1d0>
 80034fc:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <StartDefaultTask+0x70>)
 80034fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003502:	bf00      	nop
 8003504:	08003659 	.word	0x08003659
 8003508:	08003659 	.word	0x08003659
 800350c:	08003659 	.word	0x08003659
 8003510:	08003659 	.word	0x08003659
 8003514:	08003659 	.word	0x08003659
 8003518:	08003659 	.word	0x08003659
 800351c:	08003659 	.word	0x08003659
 8003520:	08003659 	.word	0x08003659
 8003524:	08003659 	.word	0x08003659
 8003528:	08003659 	.word	0x08003659
 800352c:	08003665 	.word	0x08003665
 8003530:	08003665 	.word	0x08003665
 8003534:	08003665 	.word	0x08003665
 8003538:	08003665 	.word	0x08003665
 800353c:	08003665 	.word	0x08003665
 8003540:	08003665 	.word	0x08003665
 8003544:	08003665 	.word	0x08003665
 8003548:	0800361d 	.word	0x0800361d
 800354c:	08003665 	.word	0x08003665
 8003550:	08003665 	.word	0x08003665
 8003554:	0800363b 	.word	0x0800363b
 8003558:	080035ff 	.word	0x080035ff
 800355c:	08003665 	.word	0x08003665
 8003560:	08003665 	.word	0x08003665
 8003564:	08003665 	.word	0x08003665
 8003568:	08003665 	.word	0x08003665
 800356c:	08003665 	.word	0x08003665
 8003570:	08003665 	.word	0x08003665
 8003574:	08003665 	.word	0x08003665
 8003578:	08003665 	.word	0x08003665
 800357c:	08003665 	.word	0x08003665
 8003580:	08003665 	.word	0x08003665
 8003584:	08003665 	.word	0x08003665
 8003588:	080035e1 	.word	0x080035e1
 800358c:	08003665 	.word	0x08003665
 8003590:	080035c3 	.word	0x080035c3
 8003594:	08003665 	.word	0x08003665
 8003598:	08003665 	.word	0x08003665
 800359c:	08003665 	.word	0x08003665
 80035a0:	080035a5 	.word	0x080035a5
//					var = (var * 10) + var2;
//				}
//				ch = Straight_Move(true, var);
//				have_var = false;
//			} else {
			ch = Straight_Move(true, 1);
 80035a4:	2101      	movs	r1, #1
 80035a6:	2001      	movs	r0, #1
 80035a8:	f7fe feb4 	bl	8002314 <Straight_Move>
 80035ac:	4603      	mov	r3, r0
 80035ae:	77fb      	strb	r3, [r7, #31]
//			}
//			// reset var
//			two_digits = false;
//			count = 1;
//			ch = 'R';
			HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80035b0:	f107 011f 	add.w	r1, r7, #31
 80035b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035b8:	2201      	movs	r2, #1
 80035ba:	4833      	ldr	r0, [pc, #204]	; (8003688 <StartDefaultTask+0x1f4>)
 80035bc:	f004 fbad 	bl	8007d1a <HAL_UART_Transmit>
			break;
 80035c0:	e051      	b.n	8003666 <StartDefaultTask+0x1d2>
//					var = (var * 10) + var2;
//				}
//				ch = Straight_Move(false, var);
//				have_var = false;
//			} else {
			ch = Straight_Move(false, 1);
 80035c2:	2101      	movs	r1, #1
 80035c4:	2000      	movs	r0, #0
 80035c6:	f7fe fea5 	bl	8002314 <Straight_Move>
 80035ca:	4603      	mov	r3, r0
 80035cc:	77fb      	strb	r3, [r7, #31]
//			}
//			// reset var
//			two_digits = false;
//			count = 1;
//			ch = 'R';
			HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80035ce:	f107 011f 	add.w	r1, r7, #31
 80035d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035d6:	2201      	movs	r2, #1
 80035d8:	482b      	ldr	r0, [pc, #172]	; (8003688 <StartDefaultTask+0x1f4>)
 80035da:	f004 fb9e 	bl	8007d1a <HAL_UART_Transmit>
			break;
 80035de:	e042      	b.n	8003666 <StartDefaultTask+0x1d2>
//					var = (var * 10) + var2;
//				}
//				ch = Tight_Turn(true, true);
//				have_var = false;
//			} else {
			ch = Tight_Turn(true, true);
 80035e0:	2101      	movs	r1, #1
 80035e2:	2001      	movs	r0, #1
 80035e4:	f7ff fa18 	bl	8002a18 <Tight_Turn>
 80035e8:	4603      	mov	r3, r0
 80035ea:	77fb      	strb	r3, [r7, #31]
//			}
//			// reset var
//			two_digits = false;
//			count = 1;
//			ch = 'R';
			HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80035ec:	f107 011f 	add.w	r1, r7, #31
 80035f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035f4:	2201      	movs	r2, #1
 80035f6:	4824      	ldr	r0, [pc, #144]	; (8003688 <StartDefaultTask+0x1f4>)
 80035f8:	f004 fb8f 	bl	8007d1a <HAL_UART_Transmit>
			break;
 80035fc:	e033      	b.n	8003666 <StartDefaultTask+0x1d2>
//					var = (var * 10) + var2;
//				}
//				ch = Tight_Turn(true, false);
//				have_var = false;
//			} else {
			ch = Tight_Turn(true, false);
 80035fe:	2100      	movs	r1, #0
 8003600:	2001      	movs	r0, #1
 8003602:	f7ff fa09 	bl	8002a18 <Tight_Turn>
 8003606:	4603      	mov	r3, r0
 8003608:	77fb      	strb	r3, [r7, #31]
//			}
//			// reset var
//			two_digits = false;
//			count = 1;
//			ch = 'R';
			HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 800360a:	f107 011f 	add.w	r1, r7, #31
 800360e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003612:	2201      	movs	r2, #1
 8003614:	481c      	ldr	r0, [pc, #112]	; (8003688 <StartDefaultTask+0x1f4>)
 8003616:	f004 fb80 	bl	8007d1a <HAL_UART_Transmit>
			break;
 800361a:	e024      	b.n	8003666 <StartDefaultTask+0x1d2>
		case 'A':
			ch = Tight_Turn(false, true);
 800361c:	2101      	movs	r1, #1
 800361e:	2000      	movs	r0, #0
 8003620:	f7ff f9fa 	bl	8002a18 <Tight_Turn>
 8003624:	4603      	mov	r3, r0
 8003626:	77fb      	strb	r3, [r7, #31]
			HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8003628:	f107 011f 	add.w	r1, r7, #31
 800362c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003630:	2201      	movs	r2, #1
 8003632:	4815      	ldr	r0, [pc, #84]	; (8003688 <StartDefaultTask+0x1f4>)
 8003634:	f004 fb71 	bl	8007d1a <HAL_UART_Transmit>
			break;
 8003638:	e015      	b.n	8003666 <StartDefaultTask+0x1d2>
		case 'D':
			ch = Tight_Turn(false, false);
 800363a:	2100      	movs	r1, #0
 800363c:	2000      	movs	r0, #0
 800363e:	f7ff f9eb 	bl	8002a18 <Tight_Turn>
 8003642:	4603      	mov	r3, r0
 8003644:	77fb      	strb	r3, [r7, #31]
			HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8003646:	f107 011f 	add.w	r1, r7, #31
 800364a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800364e:	2201      	movs	r2, #1
 8003650:	480d      	ldr	r0, [pc, #52]	; (8003688 <StartDefaultTask+0x1f4>)
 8003652:	f004 fb62 	bl	8007d1a <HAL_UART_Transmit>
			break;
 8003656:	e006      	b.n	8003666 <StartDefaultTask+0x1d2>
//			// if first digit
//			else {
//				var = receiveBuffer[0]-'0';
//				count++;
//			}
			Fast_Run(receiveBuffer[0]);
 8003658:	f897 3020 	ldrb.w	r3, [r7, #32]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fea7 	bl	80033b0 <Fast_Run>
			break;
 8003662:	e000      	b.n	8003666 <StartDefaultTask+0x1d2>
		default:
			break;
 8003664:	bf00      	nop
		}
		memmove(aRxBuffer, aRxBuffer+1, sizeof(aRxBuffer)-1);
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <StartDefaultTask+0x1f8>)
 8003668:	2213      	movs	r2, #19
 800366a:	4619      	mov	r1, r3
 800366c:	4805      	ldr	r0, [pc, #20]	; (8003684 <StartDefaultTask+0x1f0>)
 800366e:	f008 f88d 	bl	800b78c <memmove>
		osDelay(100);
 8003672:	2064      	movs	r0, #100	; 0x64
 8003674:	f005 fbdc 	bl	8008e30 <osDelay>
	for (;;) {
 8003678:	e710      	b.n	800349c <StartDefaultTask+0x8>
 800367a:	bf00      	nop
 800367c:	20004ca0 	.word	0x20004ca0
 8003680:	0800e4f4 	.word	0x0800e4f4
 8003684:	20004d44 	.word	0x20004d44
 8003688:	20004b78 	.word	0x20004b78
 800368c:	20004d45 	.word	0x20004d45

08003690 <Encoder>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Encoder */
void Encoder(void *argument)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08e      	sub	sp, #56	; 0x38
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Encoder */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003698:	213c      	movs	r1, #60	; 0x3c
 800369a:	483a      	ldr	r0, [pc, #232]	; (8003784 <Encoder+0xf4>)
 800369c:	f003 fcfa 	bl	8007094 <HAL_TIM_Encoder_Start>

	int cnt, cnt1, cnt2, diff;
	uint32_t tick;

	cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 80036a0:	4b38      	ldr	r3, [pc, #224]	; (8003784 <Encoder+0xf4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
	tick = HAL_GetTick();
 80036a8:	f000 ff58 	bl	800455c <HAL_GetTick>
 80036ac:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint8_t hello[20];
	uint16_t dir;
	/* Infinite loop */

	for (;;) {
		if (HAL_GetTick() - tick > 1000L) {
 80036ae:	f000 ff55 	bl	800455c <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036bc:	d95d      	bls.n	800377a <Encoder+0xea>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 80036be:	4b31      	ldr	r3, [pc, #196]	; (8003784 <Encoder+0xf4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 80036c6:	4b2f      	ldr	r3, [pc, #188]	; (8003784 <Encoder+0xf4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d110      	bne.n	80036f6 <Encoder+0x66>
				if (cnt2 < cnt1)
 80036d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d8:	429a      	cmp	r2, r3
 80036da:	da04      	bge.n	80036e6 <Encoder+0x56>
					diff = cnt1 - cnt2;
 80036dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	633b      	str	r3, [r7, #48]	; 0x30
 80036e4:	e017      	b.n	8003716 <Encoder+0x86>
				else
					diff = (65535 - cnt2) + cnt1;
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80036ec:	33ff      	adds	r3, #255	; 0xff
 80036ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f0:	4413      	add	r3, r2
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
 80036f4:	e00f      	b.n	8003716 <Encoder+0x86>
			} else {
				if (cnt2 > cnt1)
 80036f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fa:	429a      	cmp	r2, r3
 80036fc:	dd04      	ble.n	8003708 <Encoder+0x78>
					diff = cnt2 - cnt1;
 80036fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	633b      	str	r3, [r7, #48]	; 0x30
 8003706:	e006      	b.n	8003716 <Encoder+0x86>
				else
					diff = (65535 - cnt1) + cnt2;
 8003708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800370e:	33ff      	adds	r3, #255	; 0xff
 8003710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003712:	4413      	add	r3, r2
 8003714:	633b      	str	r3, [r7, #48]	; 0x30
			}

			sprintf(hello, "Speed:%5d\0", diff);
 8003716:	f107 030c 	add.w	r3, r7, #12
 800371a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371c:	491a      	ldr	r1, [pc, #104]	; (8003788 <Encoder+0xf8>)
 800371e:	4618      	mov	r0, r3
 8003720:	f008 fcc0 	bl	800c0a4 <siprintf>
//			OLED_ShowString(10, 20, hello);
			dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8003724:	4b17      	ldr	r3, [pc, #92]	; (8003784 <Encoder+0xf4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b10      	cmp	r3, #16
 8003730:	bf0c      	ite	eq
 8003732:	2301      	moveq	r3, #1
 8003734:	2300      	movne	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	84fb      	strh	r3, [r7, #38]	; 0x26
			sprintf(hello, "Dir:%5d\0", dir);
 800373a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800373c:	f107 030c 	add.w	r3, r7, #12
 8003740:	4912      	ldr	r1, [pc, #72]	; (800378c <Encoder+0xfc>)
 8003742:	4618      	mov	r0, r3
 8003744:	f008 fcae 	bl	800c0a4 <siprintf>
//			OLED_ShowString(10, 30, hello);
			cnt = __HAL_TIM_GET_COUNTER(&htim3);
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <Encoder+0xf4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	623b      	str	r3, [r7, #32]
			sprintf(hello, "%5d\0", cnt);
 8003750:	f107 030c 	add.w	r3, r7, #12
 8003754:	6a3a      	ldr	r2, [r7, #32]
 8003756:	490e      	ldr	r1, [pc, #56]	; (8003790 <Encoder+0x100>)
 8003758:	4618      	mov	r0, r3
 800375a:	f008 fca3 	bl	800c0a4 <siprintf>
			OLED_ShowString(10, 30, hello);
 800375e:	f107 030c 	add.w	r3, r7, #12
 8003762:	461a      	mov	r2, r3
 8003764:	211e      	movs	r1, #30
 8003766:	200a      	movs	r0, #10
 8003768:	f000 fa3a 	bl	8003be0 <OLED_ShowString>
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <Encoder+0xf4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	637b      	str	r3, [r7, #52]	; 0x34
			tick = HAL_GetTick();
 8003774:	f000 fef2 	bl	800455c <HAL_GetTick>
 8003778:	62f8      	str	r0, [r7, #44]	; 0x2c
		}
		osDelay(1);
 800377a:	2001      	movs	r0, #1
 800377c:	f005 fb58 	bl	8008e30 <osDelay>
		if (HAL_GetTick() - tick > 1000L) {
 8003780:	e795      	b.n	80036ae <Encoder+0x1e>
 8003782:	bf00      	nop
 8003784:	20004c58 	.word	0x20004c58
 8003788:	0800e4fc 	.word	0x0800e4fc
 800378c:	0800e508 	.word	0x0800e508
 8003790:	0800e514 	.word	0x0800e514

08003794 <Display>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display */
	uint8_t display_buf[20] = "Hello World!\0";
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <Display+0x70>)
 800379e:	f107 040c 	add.w	r4, r7, #12
 80037a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037a4:	c407      	stmia	r4!, {r0, r1, r2}
 80037a6:	8023      	strh	r3, [r4, #0]
 80037a8:	f107 031a 	add.w	r3, r7, #26
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	809a      	strh	r2, [r3, #4]
	/* Infinite loop */
	for (;;) {
		sprintf(display_buf, "%s\0", aRxBuffer);
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	4a14      	ldr	r2, [pc, #80]	; (8003808 <Display+0x74>)
 80037b8:	4914      	ldr	r1, [pc, #80]	; (800380c <Display+0x78>)
 80037ba:	4618      	mov	r0, r3
 80037bc:	f008 fc72 	bl	800c0a4 <siprintf>
		OLED_ShowString(10, 10, display_buf);
 80037c0:	f107 030c 	add.w	r3, r7, #12
 80037c4:	461a      	mov	r2, r3
 80037c6:	210a      	movs	r1, #10
 80037c8:	200a      	movs	r0, #10
 80037ca:	f000 fa09 	bl	8003be0 <OLED_ShowString>

		sprintf(display_buf, "%5.2f", YAW);
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <Display+0x7c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fc feb8 	bl	8000548 <__aeabi_f2d>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	f107 000c 	add.w	r0, r7, #12
 80037e0:	490c      	ldr	r1, [pc, #48]	; (8003814 <Display+0x80>)
 80037e2:	f008 fc5f 	bl	800c0a4 <siprintf>
		OLED_ShowString(10, 40, display_buf);
 80037e6:	f107 030c 	add.w	r3, r7, #12
 80037ea:	461a      	mov	r2, r3
 80037ec:	2128      	movs	r1, #40	; 0x28
 80037ee:	200a      	movs	r0, #10
 80037f0:	f000 f9f6 	bl	8003be0 <OLED_ShowString>

		OLED_Refresh_Gram();
 80037f4:	f000 f880 	bl	80038f8 <OLED_Refresh_Gram>
		osDelay(1000);
 80037f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037fc:	f005 fb18 	bl	8008e30 <osDelay>
		sprintf(display_buf, "%s\0", aRxBuffer);
 8003800:	e7d7      	b.n	80037b2 <Display+0x1e>
 8003802:	bf00      	nop
 8003804:	0800e528 	.word	0x0800e528
 8003808:	20004d44 	.word	0x20004d44
 800380c:	0800e51c 	.word	0x0800e51c
 8003810:	2000020c 	.word	0x2000020c
 8003814:	0800e520 	.word	0x0800e520

08003818 <Gyroscope>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Gyroscope */
void Gyroscope(void *argument)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Gyroscope */
	float offset;
	ICM20948_Init();
 8003820:	f7fd fb3e 	bl	8000ea0 <ICM20948_Init>
	AK09916_Init();
 8003824:	f7fd fb68 	bl	8000ef8 <AK09916_Init>

	// gyroscope calibration
	uint32_t tick;
	for (int i = 1; i <= 100; i++){
 8003828:	2301      	movs	r3, #1
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	e023      	b.n	8003876 <Gyroscope+0x5e>
		tick = HAL_GetTick();
 800382e:	f000 fe95 	bl	800455c <HAL_GetTick>
 8003832:	60f8      	str	r0, [r7, #12]
		ICM20948_Gyro_Read_dps(&my_gyro);
 8003834:	4829      	ldr	r0, [pc, #164]	; (80038dc <Gyroscope+0xc4>)
 8003836:	f7fd fc05 	bl	8001044 <ICM20948_Gyro_Read_dps>
		osDelay(10);
 800383a:	200a      	movs	r0, #10
 800383c:	f005 faf8 	bl	8008e30 <osDelay>
		offset += ((HAL_GetTick()-tick)*(my_gyro.z))/1000;
 8003840:	f000 fe8c 	bl	800455c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <Gyroscope+0xc4>)
 8003854:	edd3 7a02 	vldr	s15, [r3, #8]
 8003858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800385c:	eddf 6a20 	vldr	s13, [pc, #128]	; 80038e0 <Gyroscope+0xc8>
 8003860:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003864:	ed97 7a05 	vldr	s14, [r7, #20]
 8003868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800386c:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 1; i <= 100; i++){
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	3301      	adds	r3, #1
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b64      	cmp	r3, #100	; 0x64
 800387a:	ddd8      	ble.n	800382e <Gyroscope+0x16>
	}
	offset /= 100;
 800387c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003880:	eddf 6a18 	vldr	s13, [pc, #96]	; 80038e4 <Gyroscope+0xcc>
 8003884:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003888:	edc7 7a05 	vstr	s15, [r7, #20]

	for (;;) {
		tick = HAL_GetTick();
 800388c:	f000 fe66 	bl	800455c <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

		ICM20948_Gyro_Read_dps(&my_gyro);
 8003892:	4812      	ldr	r0, [pc, #72]	; (80038dc <Gyroscope+0xc4>)
 8003894:	f7fd fbd6 	bl	8001044 <ICM20948_Gyro_Read_dps>
		osDelay(10);
 8003898:	200a      	movs	r0, #10
 800389a:	f005 fac9 	bl	8008e30 <osDelay>
		YAW += ((HAL_GetTick()-tick)*(my_gyro.z))/1000-offset;
 800389e:	f000 fe5d 	bl	800455c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	ee07 3a90 	vmov	s15, r3
 80038ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <Gyroscope+0xc4>)
 80038b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80038b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ba:	eddf 6a09 	vldr	s13, [pc, #36]	; 80038e0 <Gyroscope+0xc8>
 80038be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80038c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <Gyroscope+0xd0>)
 80038cc:	edd3 7a00 	vldr	s15, [r3]
 80038d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <Gyroscope+0xd0>)
 80038d6:	edc3 7a00 	vstr	s15, [r3]
		tick = HAL_GetTick();
 80038da:	e7d7      	b.n	800388c <Gyroscope+0x74>
 80038dc:	20004db0 	.word	0x20004db0
 80038e0:	447a0000 	.word	0x447a0000
 80038e4:	42c80000 	.word	0x42c80000
 80038e8:	2000020c 	.word	0x2000020c

080038ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038f0:	b672      	cpsid	i
}
 80038f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80038f4:	e7fe      	b.n	80038f4 <Error_Handler+0x8>
	...

080038f8 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80038fe:	2300      	movs	r3, #0
 8003900:	71fb      	strb	r3, [r7, #7]
 8003902:	e026      	b.n	8003952 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	3b50      	subs	r3, #80	; 0x50
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f82b 	bl	8003968 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8003912:	2100      	movs	r1, #0
 8003914:	2000      	movs	r0, #0
 8003916:	f000 f827 	bl	8003968 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800391a:	2100      	movs	r1, #0
 800391c:	2010      	movs	r0, #16
 800391e:	f000 f823 	bl	8003968 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8003922:	2300      	movs	r3, #0
 8003924:	71bb      	strb	r3, [r7, #6]
 8003926:	e00d      	b.n	8003944 <OLED_Refresh_Gram+0x4c>
 8003928:	79ba      	ldrb	r2, [r7, #6]
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	490d      	ldr	r1, [pc, #52]	; (8003964 <OLED_Refresh_Gram+0x6c>)
 800392e:	00d2      	lsls	r2, r2, #3
 8003930:	440a      	add	r2, r1
 8003932:	4413      	add	r3, r2
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2101      	movs	r1, #1
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f815 	bl	8003968 <OLED_WR_Byte>
 800393e:	79bb      	ldrb	r3, [r7, #6]
 8003940:	3301      	adds	r3, #1
 8003942:	71bb      	strb	r3, [r7, #6]
 8003944:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003948:	2b00      	cmp	r3, #0
 800394a:	daed      	bge.n	8003928 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	3301      	adds	r3, #1
 8003950:	71fb      	strb	r3, [r7, #7]
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2b07      	cmp	r3, #7
 8003956:	d9d5      	bls.n	8003904 <OLED_Refresh_Gram+0xc>
	}   
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20004dbc 	.word	0x20004dbc

08003968 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	460a      	mov	r2, r1
 8003972:	71fb      	strb	r3, [r7, #7]
 8003974:	4613      	mov	r3, r2
 8003976:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8003978:	79bb      	ldrb	r3, [r7, #6]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800397e:	2201      	movs	r2, #1
 8003980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003984:	481c      	ldr	r0, [pc, #112]	; (80039f8 <OLED_WR_Byte+0x90>)
 8003986:	f001 fd25 	bl	80053d4 <HAL_GPIO_WritePin>
 800398a:	e005      	b.n	8003998 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003992:	4819      	ldr	r0, [pc, #100]	; (80039f8 <OLED_WR_Byte+0x90>)
 8003994:	f001 fd1e 	bl	80053d4 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]
 800399c:	e01e      	b.n	80039dc <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800399e:	2200      	movs	r2, #0
 80039a0:	2120      	movs	r1, #32
 80039a2:	4815      	ldr	r0, [pc, #84]	; (80039f8 <OLED_WR_Byte+0x90>)
 80039a4:	f001 fd16 	bl	80053d4 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	da05      	bge.n	80039bc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80039b0:	2201      	movs	r2, #1
 80039b2:	2140      	movs	r1, #64	; 0x40
 80039b4:	4810      	ldr	r0, [pc, #64]	; (80039f8 <OLED_WR_Byte+0x90>)
 80039b6:	f001 fd0d 	bl	80053d4 <HAL_GPIO_WritePin>
 80039ba:	e004      	b.n	80039c6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80039bc:	2200      	movs	r2, #0
 80039be:	2140      	movs	r1, #64	; 0x40
 80039c0:	480d      	ldr	r0, [pc, #52]	; (80039f8 <OLED_WR_Byte+0x90>)
 80039c2:	f001 fd07 	bl	80053d4 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80039c6:	2201      	movs	r2, #1
 80039c8:	2120      	movs	r1, #32
 80039ca:	480b      	ldr	r0, [pc, #44]	; (80039f8 <OLED_WR_Byte+0x90>)
 80039cc:	f001 fd02 	bl	80053d4 <HAL_GPIO_WritePin>
		dat<<=1;   
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	3301      	adds	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b07      	cmp	r3, #7
 80039e0:	d9dd      	bls.n	800399e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80039e2:	2201      	movs	r2, #1
 80039e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039e8:	4803      	ldr	r0, [pc, #12]	; (80039f8 <OLED_WR_Byte+0x90>)
 80039ea:	f001 fcf3 	bl	80053d4 <HAL_GPIO_WritePin>
} 
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000

080039fc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8003a02:	2300      	movs	r3, #0
 8003a04:	71fb      	strb	r3, [r7, #7]
 8003a06:	e014      	b.n	8003a32 <OLED_Clear+0x36>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	71bb      	strb	r3, [r7, #6]
 8003a0c:	e00a      	b.n	8003a24 <OLED_Clear+0x28>
 8003a0e:	79ba      	ldrb	r2, [r7, #6]
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	490c      	ldr	r1, [pc, #48]	; (8003a44 <OLED_Clear+0x48>)
 8003a14:	00d2      	lsls	r2, r2, #3
 8003a16:	440a      	add	r2, r1
 8003a18:	4413      	add	r3, r2
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	79bb      	ldrb	r3, [r7, #6]
 8003a20:	3301      	adds	r3, #1
 8003a22:	71bb      	strb	r3, [r7, #6]
 8003a24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	daf0      	bge.n	8003a0e <OLED_Clear+0x12>
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	71fb      	strb	r3, [r7, #7]
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	2b07      	cmp	r3, #7
 8003a36:	d9e7      	bls.n	8003a08 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003a38:	f7ff ff5e 	bl	80038f8 <OLED_Refresh_Gram>
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20004dbc 	.word	0x20004dbc

08003a48 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
 8003a52:	460b      	mov	r3, r1
 8003a54:	71bb      	strb	r3, [r7, #6]
 8003a56:	4613      	mov	r3, r2
 8003a58:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	db41      	blt.n	8003aea <OLED_DrawPoint+0xa2>
 8003a66:	79bb      	ldrb	r3, [r7, #6]
 8003a68:	2b3f      	cmp	r3, #63	; 0x3f
 8003a6a:	d83e      	bhi.n	8003aea <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003a6c:	79bb      	ldrb	r3, [r7, #6]
 8003a6e:	08db      	lsrs	r3, r3, #3
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f1c3 0307 	rsb	r3, r3, #7
 8003a76:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003a78:	79bb      	ldrb	r3, [r7, #6]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003a80:	7b7b      	ldrb	r3, [r7, #13]
 8003a82:	f1c3 0307 	rsb	r3, r3, #7
 8003a86:	2201      	movs	r2, #1
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8003a8e:	797b      	ldrb	r3, [r7, #5]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <OLED_DrawPoint+0x72>
 8003a94:	79fa      	ldrb	r2, [r7, #7]
 8003a96:	7bbb      	ldrb	r3, [r7, #14]
 8003a98:	4917      	ldr	r1, [pc, #92]	; (8003af8 <OLED_DrawPoint+0xb0>)
 8003a9a:	00d2      	lsls	r2, r2, #3
 8003a9c:	440a      	add	r2, r1
 8003a9e:	4413      	add	r3, r2
 8003aa0:	7818      	ldrb	r0, [r3, #0]
 8003aa2:	79fa      	ldrb	r2, [r7, #7]
 8003aa4:	7bbb      	ldrb	r3, [r7, #14]
 8003aa6:	7bf9      	ldrb	r1, [r7, #15]
 8003aa8:	4301      	orrs	r1, r0
 8003aaa:	b2c8      	uxtb	r0, r1
 8003aac:	4912      	ldr	r1, [pc, #72]	; (8003af8 <OLED_DrawPoint+0xb0>)
 8003aae:	00d2      	lsls	r2, r2, #3
 8003ab0:	440a      	add	r2, r1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	e018      	b.n	8003aec <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003aba:	79fa      	ldrb	r2, [r7, #7]
 8003abc:	7bbb      	ldrb	r3, [r7, #14]
 8003abe:	490e      	ldr	r1, [pc, #56]	; (8003af8 <OLED_DrawPoint+0xb0>)
 8003ac0:	00d2      	lsls	r2, r2, #3
 8003ac2:	440a      	add	r2, r1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	b25a      	sxtb	r2, r3
 8003aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	b25b      	sxtb	r3, r3
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	b259      	sxtb	r1, r3
 8003ad6:	79fa      	ldrb	r2, [r7, #7]
 8003ad8:	7bbb      	ldrb	r3, [r7, #14]
 8003ada:	b2c8      	uxtb	r0, r1
 8003adc:	4906      	ldr	r1, [pc, #24]	; (8003af8 <OLED_DrawPoint+0xb0>)
 8003ade:	00d2      	lsls	r2, r2, #3
 8003ae0:	440a      	add	r2, r1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	701a      	strb	r2, [r3, #0]
 8003ae8:	e000      	b.n	8003aec <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003aea:	bf00      	nop
}
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20004dbc 	.word	0x20004dbc

08003afc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4604      	mov	r4, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4623      	mov	r3, r4
 8003b0c:	71fb      	strb	r3, [r7, #7]
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71bb      	strb	r3, [r7, #6]
 8003b12:	460b      	mov	r3, r1
 8003b14:	717b      	strb	r3, [r7, #5]
 8003b16:	4613      	mov	r3, r2
 8003b18:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8003b1a:	79bb      	ldrb	r3, [r7, #6]
 8003b1c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8003b1e:	797b      	ldrb	r3, [r7, #5]
 8003b20:	3b20      	subs	r3, #32
 8003b22:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	73bb      	strb	r3, [r7, #14]
 8003b28:	e04d      	b.n	8003bc6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8003b2a:	793b      	ldrb	r3, [r7, #4]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	d10b      	bne.n	8003b48 <OLED_ShowChar+0x4c>
 8003b30:	797a      	ldrb	r2, [r7, #5]
 8003b32:	7bb9      	ldrb	r1, [r7, #14]
 8003b34:	4828      	ldr	r0, [pc, #160]	; (8003bd8 <OLED_ShowChar+0xdc>)
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4403      	add	r3, r0
 8003b40:	440b      	add	r3, r1
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	e007      	b.n	8003b58 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003b48:	797a      	ldrb	r2, [r7, #5]
 8003b4a:	7bbb      	ldrb	r3, [r7, #14]
 8003b4c:	4923      	ldr	r1, [pc, #140]	; (8003bdc <OLED_ShowChar+0xe0>)
 8003b4e:	0112      	lsls	r2, r2, #4
 8003b50:	440a      	add	r2, r1
 8003b52:	4413      	add	r3, r2
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	737b      	strb	r3, [r7, #13]
 8003b5c:	e02d      	b.n	8003bba <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	da07      	bge.n	8003b76 <OLED_ShowChar+0x7a>
 8003b66:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003b6a:	79b9      	ldrb	r1, [r7, #6]
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff ff6a 	bl	8003a48 <OLED_DrawPoint>
 8003b74:	e00c      	b.n	8003b90 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8003b76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	79b9      	ldrb	r1, [r7, #6]
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ff5c 	bl	8003a48 <OLED_DrawPoint>
			temp<<=1;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
			y++;
 8003b96:	79bb      	ldrb	r3, [r7, #6]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003b9c:	79ba      	ldrb	r2, [r7, #6]
 8003b9e:	7b3b      	ldrb	r3, [r7, #12]
 8003ba0:	1ad2      	subs	r2, r2, r3
 8003ba2:	793b      	ldrb	r3, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d105      	bne.n	8003bb4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003ba8:	7b3b      	ldrb	r3, [r7, #12]
 8003baa:	71bb      	strb	r3, [r7, #6]
				x++;
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	71fb      	strb	r3, [r7, #7]
				break;
 8003bb2:	e005      	b.n	8003bc0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8003bb4:	7b7b      	ldrb	r3, [r7, #13]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	737b      	strb	r3, [r7, #13]
 8003bba:	7b7b      	ldrb	r3, [r7, #13]
 8003bbc:	2b07      	cmp	r3, #7
 8003bbe:	d9ce      	bls.n	8003b5e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8003bc0:	7bbb      	ldrb	r3, [r7, #14]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	73bb      	strb	r3, [r7, #14]
 8003bc6:	7bba      	ldrb	r2, [r7, #14]
 8003bc8:	793b      	ldrb	r3, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d3ad      	bcc.n	8003b2a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8003bce:	bf00      	nop
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd90      	pop	{r4, r7, pc}
 8003bd8:	0800e5e4 	.word	0x0800e5e4
 8003bdc:	0800ea58 	.word	0x0800ea58

08003be0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	4603      	mov	r3, r0
 8003be8:	603a      	str	r2, [r7, #0]
 8003bea:	71fb      	strb	r3, [r7, #7]
 8003bec:	460b      	mov	r3, r1
 8003bee:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003bf0:	e01f      	b.n	8003c32 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	2b7a      	cmp	r3, #122	; 0x7a
 8003bf6:	d904      	bls.n	8003c02 <OLED_ShowString+0x22>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	71fb      	strb	r3, [r7, #7]
 8003bfc:	79bb      	ldrb	r3, [r7, #6]
 8003bfe:	3310      	adds	r3, #16
 8003c00:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8003c02:	79bb      	ldrb	r3, [r7, #6]
 8003c04:	2b3a      	cmp	r3, #58	; 0x3a
 8003c06:	d905      	bls.n	8003c14 <OLED_ShowString+0x34>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	71fb      	strb	r3, [r7, #7]
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	71bb      	strb	r3, [r7, #6]
 8003c10:	f7ff fef4 	bl	80039fc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	79b9      	ldrb	r1, [r7, #6]
 8003c1a:	79f8      	ldrb	r0, [r7, #7]
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	230c      	movs	r3, #12
 8003c22:	f7ff ff6b 	bl	8003afc <OLED_ShowChar>
        x+=8;
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	3308      	adds	r3, #8
 8003c2a:	71fb      	strb	r3, [r7, #7]
        p++;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1db      	bne.n	8003bf2 <OLED_ShowString+0x12>
    }  
}	 
 8003c3a:	bf00      	nop
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <OLED_Init>:

void OLED_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003c48:	f002 fb9e 	bl	8006388 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003c4c:	4b41      	ldr	r3, [pc, #260]	; (8003d54 <OLED_Init+0x110>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a40      	ldr	r2, [pc, #256]	; (8003d54 <OLED_Init+0x110>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <OLED_Init+0x110>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a3d      	ldr	r2, [pc, #244]	; (8003d54 <OLED_Init+0x110>)
 8003c5e:	f023 0304 	bic.w	r3, r3, #4
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8003c64:	f002 fba4 	bl	80063b0 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2180      	movs	r1, #128	; 0x80
 8003c6c:	483a      	ldr	r0, [pc, #232]	; (8003d58 <OLED_Init+0x114>)
 8003c6e:	f001 fbb1 	bl	80053d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003c72:	2064      	movs	r0, #100	; 0x64
 8003c74:	f000 fc7e 	bl	8004574 <HAL_Delay>
	OLED_RST_Set();
 8003c78:	2201      	movs	r2, #1
 8003c7a:	2180      	movs	r1, #128	; 0x80
 8003c7c:	4836      	ldr	r0, [pc, #216]	; (8003d58 <OLED_Init+0x114>)
 8003c7e:	f001 fba9 	bl	80053d4 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8003c82:	2100      	movs	r1, #0
 8003c84:	20ae      	movs	r0, #174	; 0xae
 8003c86:	f7ff fe6f 	bl	8003968 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	20d5      	movs	r0, #213	; 0xd5
 8003c8e:	f7ff fe6b 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8003c92:	2100      	movs	r1, #0
 8003c94:	2050      	movs	r0, #80	; 0x50
 8003c96:	f7ff fe67 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	20a8      	movs	r0, #168	; 0xa8
 8003c9e:	f7ff fe63 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	203f      	movs	r0, #63	; 0x3f
 8003ca6:	f7ff fe5f 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003caa:	2100      	movs	r1, #0
 8003cac:	20d3      	movs	r0, #211	; 0xd3
 8003cae:	f7ff fe5b 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f7ff fe57 	bl	8003968 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003cba:	2100      	movs	r1, #0
 8003cbc:	2040      	movs	r0, #64	; 0x40
 8003cbe:	f7ff fe53 	bl	8003968 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	208d      	movs	r0, #141	; 0x8d
 8003cc6:	f7ff fe4f 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003cca:	2100      	movs	r1, #0
 8003ccc:	2014      	movs	r0, #20
 8003cce:	f7ff fe4b 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	2020      	movs	r0, #32
 8003cd6:	f7ff fe47 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003cda:	2100      	movs	r1, #0
 8003cdc:	2002      	movs	r0, #2
 8003cde:	f7ff fe43 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	20a1      	movs	r0, #161	; 0xa1
 8003ce6:	f7ff fe3f 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003cea:	2100      	movs	r1, #0
 8003cec:	20c0      	movs	r0, #192	; 0xc0
 8003cee:	f7ff fe3b 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	20da      	movs	r0, #218	; 0xda
 8003cf6:	f7ff fe37 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	2012      	movs	r0, #18
 8003cfe:	f7ff fe33 	bl	8003968 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8003d02:	2100      	movs	r1, #0
 8003d04:	2081      	movs	r0, #129	; 0x81
 8003d06:	f7ff fe2f 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	20ef      	movs	r0, #239	; 0xef
 8003d0e:	f7ff fe2b 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8003d12:	2100      	movs	r1, #0
 8003d14:	20d9      	movs	r0, #217	; 0xd9
 8003d16:	f7ff fe27 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	20f1      	movs	r0, #241	; 0xf1
 8003d1e:	f7ff fe23 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8003d22:	2100      	movs	r1, #0
 8003d24:	20db      	movs	r0, #219	; 0xdb
 8003d26:	f7ff fe1f 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	2030      	movs	r0, #48	; 0x30
 8003d2e:	f7ff fe1b 	bl	8003968 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8003d32:	2100      	movs	r1, #0
 8003d34:	20a4      	movs	r0, #164	; 0xa4
 8003d36:	f7ff fe17 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	20a6      	movs	r0, #166	; 0xa6
 8003d3e:	f7ff fe13 	bl	8003968 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8003d42:	2100      	movs	r1, #0
 8003d44:	20af      	movs	r0, #175	; 0xaf
 8003d46:	f7ff fe0f 	bl	8003968 <OLED_WR_Byte>
	OLED_Clear(); 
 8003d4a:	f7ff fe57 	bl	80039fc <OLED_Clear>
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40021000 	.word	0x40021000

08003d5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_MspInit+0x54>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	4a11      	ldr	r2, [pc, #68]	; (8003db0 <HAL_MspInit+0x54>)
 8003d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d70:	6453      	str	r3, [r2, #68]	; 0x44
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_MspInit+0x54>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_MspInit+0x54>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <HAL_MspInit+0x54>)
 8003d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_MspInit+0x54>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	210f      	movs	r1, #15
 8003d9e:	f06f 0001 	mvn.w	r0, #1
 8003da2:	f001 f8b2 	bl	8004f0a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800

08003db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08c      	sub	sp, #48	; 0x30
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dbc:	f107 031c 	add.w	r3, r7, #28
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	60da      	str	r2, [r3, #12]
 8003dca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2e      	ldr	r2, [pc, #184]	; (8003e8c <HAL_ADC_MspInit+0xd8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d128      	bne.n	8003e28 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de4:	6453      	str	r3, [r2, #68]	; 0x44
 8003de6:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	4a25      	ldr	r2, [pc, #148]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003dfc:	f043 0304 	orr.w	r3, r3, #4
 8003e00:	6313      	str	r3, [r2, #48]	; 0x30
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e12:	2303      	movs	r3, #3
 8003e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e1a:	f107 031c 	add.w	r3, r7, #28
 8003e1e:	4619      	mov	r1, r3
 8003e20:	481c      	ldr	r0, [pc, #112]	; (8003e94 <HAL_ADC_MspInit+0xe0>)
 8003e22:	f001 f93b 	bl	800509c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003e26:	e02c      	b.n	8003e82 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1a      	ldr	r2, [pc, #104]	; (8003e98 <HAL_ADC_MspInit+0xe4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d127      	bne.n	8003e82 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e40:	6453      	str	r3, [r2, #68]	; 0x44
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	4a0e      	ldr	r2, [pc, #56]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003e58:	f043 0304 	orr.w	r3, r3, #4
 8003e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <HAL_ADC_MspInit+0xdc>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e76:	f107 031c 	add.w	r3, r7, #28
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4805      	ldr	r0, [pc, #20]	; (8003e94 <HAL_ADC_MspInit+0xe0>)
 8003e7e:	f001 f90d 	bl	800509c <HAL_GPIO_Init>
}
 8003e82:	bf00      	nop
 8003e84:	3730      	adds	r7, #48	; 0x30
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40012000 	.word	0x40012000
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40020800 	.word	0x40020800
 8003e98:	40012100 	.word	0x40012100

08003e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08a      	sub	sp, #40	; 0x28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea4:	f107 0314 	add.w	r3, r7, #20
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a19      	ldr	r2, [pc, #100]	; (8003f20 <HAL_I2C_MspInit+0x84>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d12c      	bne.n	8003f18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <HAL_I2C_MspInit+0x88>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <HAL_I2C_MspInit+0x88>)
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ece:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <HAL_I2C_MspInit+0x88>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ee0:	2312      	movs	r3, #18
 8003ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003eec:	2304      	movs	r3, #4
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	480c      	ldr	r0, [pc, #48]	; (8003f28 <HAL_I2C_MspInit+0x8c>)
 8003ef8:	f001 f8d0 	bl	800509c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <HAL_I2C_MspInit+0x88>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <HAL_I2C_MspInit+0x88>)
 8003f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_I2C_MspInit+0x88>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003f18:	bf00      	nop
 8003f1a:	3728      	adds	r7, #40	; 0x28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40005400 	.word	0x40005400
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40020400 	.word	0x40020400

08003f2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <HAL_TIM_Base_MspInit+0xac>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10e      	bne.n	8003f6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	4b22      	ldr	r3, [pc, #136]	; (8003fdc <HAL_TIM_Base_MspInit+0xb0>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <HAL_TIM_Base_MspInit+0xb0>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f5e:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <HAL_TIM_Base_MspInit+0xb0>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003f6a:	e030      	b.n	8003fce <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_TIM_Base_MspInit+0xb4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d12b      	bne.n	8003fce <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <HAL_TIM_Base_MspInit+0xb0>)
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	4a17      	ldr	r2, [pc, #92]	; (8003fdc <HAL_TIM_Base_MspInit+0xb0>)
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	6453      	str	r3, [r2, #68]	; 0x44
 8003f86:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <HAL_TIM_Base_MspInit+0xb0>)
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_TIM_Base_MspInit+0xb0>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <HAL_TIM_Base_MspInit+0xb0>)
 8003f9c:	f043 0304 	orr.w	r3, r3, #4
 8003fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_TIM_Base_MspInit+0xb0>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003fae:	23c0      	movs	r3, #192	; 0xc0
 8003fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fc2:	f107 0314 	add.w	r3, r7, #20
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4806      	ldr	r0, [pc, #24]	; (8003fe4 <HAL_TIM_Base_MspInit+0xb8>)
 8003fca:	f001 f867 	bl	800509c <HAL_GPIO_Init>
}
 8003fce:	bf00      	nop
 8003fd0:	3728      	adds	r7, #40	; 0x28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40010400 	.word	0x40010400
 8003fe4:	40020800 	.word	0x40020800

08003fe8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08c      	sub	sp, #48	; 0x30
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff0:	f107 031c 	add.w	r3, r7, #28
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004008:	d14b      	bne.n	80040a2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	4b3f      	ldr	r3, [pc, #252]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	4a3e      	ldr	r2, [pc, #248]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6413      	str	r3, [r2, #64]	; 0x40
 800401a:	4b3c      	ldr	r3, [pc, #240]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	4b38      	ldr	r3, [pc, #224]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	4a37      	ldr	r2, [pc, #220]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6313      	str	r3, [r2, #48]	; 0x30
 8004036:	4b35      	ldr	r3, [pc, #212]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	4b31      	ldr	r3, [pc, #196]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a30      	ldr	r2, [pc, #192]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 800404c:	f043 0302 	orr.w	r3, r3, #2
 8004050:	6313      	str	r3, [r2, #48]	; 0x30
 8004052:	4b2e      	ldr	r3, [pc, #184]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800405e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004064:	2302      	movs	r3, #2
 8004066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	2300      	movs	r3, #0
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406c:	2300      	movs	r3, #0
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004070:	2301      	movs	r3, #1
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004074:	f107 031c 	add.w	r3, r7, #28
 8004078:	4619      	mov	r1, r3
 800407a:	4825      	ldr	r0, [pc, #148]	; (8004110 <HAL_TIM_Encoder_MspInit+0x128>)
 800407c:	f001 f80e 	bl	800509c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004080:	2308      	movs	r3, #8
 8004082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004084:	2302      	movs	r3, #2
 8004086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408c:	2300      	movs	r3, #0
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004090:	2301      	movs	r3, #1
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004094:	f107 031c 	add.w	r3, r7, #28
 8004098:	4619      	mov	r1, r3
 800409a:	481e      	ldr	r0, [pc, #120]	; (8004114 <HAL_TIM_Encoder_MspInit+0x12c>)
 800409c:	f000 fffe 	bl	800509c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80040a0:	e030      	b.n	8004104 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <HAL_TIM_Encoder_MspInit+0x130>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d12b      	bne.n	8004104 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	4b16      	ldr	r3, [pc, #88]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	4a15      	ldr	r2, [pc, #84]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 80040b6:	f043 0302 	orr.w	r3, r3, #2
 80040ba:	6413      	str	r3, [r2, #64]	; 0x40
 80040bc:	4b13      	ldr	r3, [pc, #76]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c8:	2300      	movs	r3, #0
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	4a0e      	ldr	r2, [pc, #56]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6313      	str	r3, [r2, #48]	; 0x30
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <HAL_TIM_Encoder_MspInit+0x124>)
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040e4:	23c0      	movs	r3, #192	; 0xc0
 80040e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e8:	2302      	movs	r3, #2
 80040ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f0:	2300      	movs	r3, #0
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040f4:	2302      	movs	r3, #2
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f8:	f107 031c 	add.w	r3, r7, #28
 80040fc:	4619      	mov	r1, r3
 80040fe:	4804      	ldr	r0, [pc, #16]	; (8004110 <HAL_TIM_Encoder_MspInit+0x128>)
 8004100:	f000 ffcc 	bl	800509c <HAL_GPIO_Init>
}
 8004104:	bf00      	nop
 8004106:	3730      	adds	r7, #48	; 0x30
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40023800 	.word	0x40023800
 8004110:	40020000 	.word	0x40020000
 8004114:	40020400 	.word	0x40020400
 8004118:	40000400 	.word	0x40000400

0800411c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004124:	f107 030c 	add.w	r3, r7, #12
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a12      	ldr	r2, [pc, #72]	; (8004184 <HAL_TIM_MspPostInit+0x68>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d11e      	bne.n	800417c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_TIM_MspPostInit+0x6c>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	4a10      	ldr	r2, [pc, #64]	; (8004188 <HAL_TIM_MspPostInit+0x6c>)
 8004148:	f043 0310 	orr.w	r3, r3, #16
 800414c:	6313      	str	r3, [r2, #48]	; 0x30
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <HAL_TIM_MspPostInit+0x6c>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800415a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800415e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004160:	2302      	movs	r3, #2
 8004162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800416c:	2301      	movs	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004170:	f107 030c 	add.w	r3, r7, #12
 8004174:	4619      	mov	r1, r3
 8004176:	4805      	ldr	r0, [pc, #20]	; (800418c <HAL_TIM_MspPostInit+0x70>)
 8004178:	f000 ff90 	bl	800509c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800417c:	bf00      	nop
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40010000 	.word	0x40010000
 8004188:	40023800 	.word	0x40023800
 800418c:	40021000 	.word	0x40021000

08004190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <HAL_UART_MspInit+0x94>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d134      	bne.n	800421c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <HAL_UART_MspInit+0x98>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <HAL_UART_MspInit+0x98>)
 80041bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c0:	6413      	str	r3, [r2, #64]	; 0x40
 80041c2:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_UART_MspInit+0x98>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_UART_MspInit+0x98>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	4a14      	ldr	r2, [pc, #80]	; (8004228 <HAL_UART_MspInit+0x98>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	6313      	str	r3, [r2, #48]	; 0x30
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_UART_MspInit+0x98>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80041ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f0:	2302      	movs	r3, #2
 80041f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f8:	2303      	movs	r3, #3
 80041fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041fc:	2307      	movs	r3, #7
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	4619      	mov	r1, r3
 8004206:	4809      	ldr	r0, [pc, #36]	; (800422c <HAL_UART_MspInit+0x9c>)
 8004208:	f000 ff48 	bl	800509c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800420c:	2200      	movs	r2, #0
 800420e:	2105      	movs	r1, #5
 8004210:	2027      	movs	r0, #39	; 0x27
 8004212:	f000 fe7a 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004216:	2027      	movs	r0, #39	; 0x27
 8004218:	f000 fe93 	bl	8004f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800421c:	bf00      	nop
 800421e:	3728      	adds	r7, #40	; 0x28
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40004800 	.word	0x40004800
 8004228:	40023800 	.word	0x40023800
 800422c:	40020800 	.word	0x40020800

08004230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004234:	e7fe      	b.n	8004234 <NMI_Handler+0x4>

08004236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004236:	b480      	push	{r7}
 8004238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800423a:	e7fe      	b.n	800423a <HardFault_Handler+0x4>

0800423c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004240:	e7fe      	b.n	8004240 <MemManage_Handler+0x4>

08004242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004242:	b480      	push	{r7}
 8004244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004246:	e7fe      	b.n	8004246 <BusFault_Handler+0x4>

08004248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800424c:	e7fe      	b.n	800424c <UsageFault_Handler+0x4>

0800424e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800424e:	b480      	push	{r7}
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004260:	f000 f968 	bl	8004534 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004264:	f006 f9f2 	bl	800a64c <xTaskGetSchedulerState>
 8004268:	4603      	mov	r3, r0
 800426a:	2b01      	cmp	r3, #1
 800426c:	d001      	beq.n	8004272 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800426e:	f006 ffdb 	bl	800b228 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800427c:	4802      	ldr	r0, [pc, #8]	; (8004288 <USART3_IRQHandler+0x10>)
 800427e:	f003 fe0f 	bl	8007ea0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20004b78 	.word	0x20004b78

0800428c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
	return 1;
 8004290:	2301      	movs	r3, #1
}
 8004292:	4618      	mov	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <_kill>:

int _kill(int pid, int sig)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042a6:	f007 fa39 	bl	800b71c <__errno>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2216      	movs	r2, #22
 80042ae:	601a      	str	r2, [r3, #0]
	return -1;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <_exit>:

void _exit (int status)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff ffe7 	bl	800429c <_kill>
	while (1) {}		/* Make sure we hang here */
 80042ce:	e7fe      	b.n	80042ce <_exit+0x12>

080042d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	e00a      	b.n	80042f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042e2:	f3af 8000 	nop.w
 80042e6:	4601      	mov	r1, r0
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	60ba      	str	r2, [r7, #8]
 80042ee:	b2ca      	uxtb	r2, r1
 80042f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	3301      	adds	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	dbf0      	blt.n	80042e2 <_read+0x12>
	}

return len;
 8004300:	687b      	ldr	r3, [r7, #4]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b086      	sub	sp, #24
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e009      	b.n	8004330 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	60ba      	str	r2, [r7, #8]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	3301      	adds	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	dbf1      	blt.n	800431c <_write+0x12>
	}
	return len;
 8004338:	687b      	ldr	r3, [r7, #4]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <_close>:

int _close(int file)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
	return -1;
 800434a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800436a:	605a      	str	r2, [r3, #4]
	return 0;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <_isatty>:

int _isatty(int file)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
	return 1;
 8004382:	2301      	movs	r3, #1
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
	return 0;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043b4:	4a14      	ldr	r2, [pc, #80]	; (8004408 <_sbrk+0x5c>)
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <_sbrk+0x60>)
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <_sbrk+0x64>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043c8:	4b11      	ldr	r3, [pc, #68]	; (8004410 <_sbrk+0x64>)
 80043ca:	4a12      	ldr	r2, [pc, #72]	; (8004414 <_sbrk+0x68>)
 80043cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <_sbrk+0x64>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4413      	add	r3, r2
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d207      	bcs.n	80043ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043dc:	f007 f99e 	bl	800b71c <__errno>
 80043e0:	4603      	mov	r3, r0
 80043e2:	220c      	movs	r2, #12
 80043e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ea:	e009      	b.n	8004400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043ec:	4b08      	ldr	r3, [pc, #32]	; (8004410 <_sbrk+0x64>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <_sbrk+0x64>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4413      	add	r3, r2
 80043fa:	4a05      	ldr	r2, [pc, #20]	; (8004410 <_sbrk+0x64>)
 80043fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043fe:	68fb      	ldr	r3, [r7, #12]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20020000 	.word	0x20020000
 800440c:	00000400 	.word	0x00000400
 8004410:	20000210 	.word	0x20000210
 8004414:	20005210 	.word	0x20005210

08004418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <SystemInit+0x20>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	4a05      	ldr	r2, [pc, #20]	; (8004438 <SystemInit+0x20>)
 8004424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	e000ed00 	.word	0xe000ed00

0800443c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800443c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004474 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004440:	480d      	ldr	r0, [pc, #52]	; (8004478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004442:	490e      	ldr	r1, [pc, #56]	; (800447c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004444:	4a0e      	ldr	r2, [pc, #56]	; (8004480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004448:	e002      	b.n	8004450 <LoopCopyDataInit>

0800444a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800444a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800444c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800444e:	3304      	adds	r3, #4

08004450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004454:	d3f9      	bcc.n	800444a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004456:	4a0b      	ldr	r2, [pc, #44]	; (8004484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004458:	4c0b      	ldr	r4, [pc, #44]	; (8004488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800445a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800445c:	e001      	b.n	8004462 <LoopFillZerobss>

0800445e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800445e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004460:	3204      	adds	r2, #4

08004462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004464:	d3fb      	bcc.n	800445e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004466:	f7ff ffd7 	bl	8004418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800446a:	f007 f95d 	bl	800b728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800446e:	f7fd fa77 	bl	8001960 <main>
  bx  lr    
 8004472:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800447c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004480:	0800f454 	.word	0x0800f454
  ldr r2, =_sbss
 8004484:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004488:	20005210 	.word	0x20005210

0800448c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800448c:	e7fe      	b.n	800448c <ADC_IRQHandler>
	...

08004490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <HAL_Init+0x40>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a0d      	ldr	r2, [pc, #52]	; (80044d0 <HAL_Init+0x40>)
 800449a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800449e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_Init+0x40>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <HAL_Init+0x40>)
 80044a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HAL_Init+0x40>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a07      	ldr	r2, [pc, #28]	; (80044d0 <HAL_Init+0x40>)
 80044b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044b8:	2003      	movs	r0, #3
 80044ba:	f000 fd1b 	bl	8004ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044be:	200f      	movs	r0, #15
 80044c0:	f000 f808 	bl	80044d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044c4:	f7ff fc4a 	bl	8003d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40023c00 	.word	0x40023c00

080044d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_InitTick+0x54>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_InitTick+0x58>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	4619      	mov	r1, r3
 80044e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80044ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fd33 	bl	8004f5e <HAL_SYSTICK_Config>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e00e      	b.n	8004520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b0f      	cmp	r3, #15
 8004506:	d80a      	bhi.n	800451e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004508:	2200      	movs	r2, #0
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004510:	f000 fcfb 	bl	8004f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004514:	4a06      	ldr	r2, [pc, #24]	; (8004530 <HAL_InitTick+0x5c>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e000      	b.n	8004520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000000 	.word	0x20000000
 800452c:	20000008 	.word	0x20000008
 8004530:	20000004 	.word	0x20000004

08004534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_IncTick+0x20>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_IncTick+0x24>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4413      	add	r3, r2
 8004544:	4a04      	ldr	r2, [pc, #16]	; (8004558 <HAL_IncTick+0x24>)
 8004546:	6013      	str	r3, [r2, #0]
}
 8004548:	bf00      	nop
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000008 	.word	0x20000008
 8004558:	200051bc 	.word	0x200051bc

0800455c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return uwTick;
 8004560:	4b03      	ldr	r3, [pc, #12]	; (8004570 <HAL_GetTick+0x14>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	200051bc 	.word	0x200051bc

08004574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800457c:	f7ff ffee 	bl	800455c <HAL_GetTick>
 8004580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800458c:	d005      	beq.n	800459a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_Delay+0x44>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800459a:	bf00      	nop
 800459c:	f7ff ffde 	bl	800455c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d8f7      	bhi.n	800459c <HAL_Delay+0x28>
  {
  }
}
 80045ac:	bf00      	nop
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000008 	.word	0x20000008

080045bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e033      	b.n	800463a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff fbea 	bl	8003db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d118      	bne.n	800462c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004602:	f023 0302 	bic.w	r3, r3, #2
 8004606:	f043 0202 	orr.w	r2, r3, #2
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 faa4 	bl	8004b5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
 800462a:	e001      	b.n	8004630 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004638:	7bfb      	ldrb	r3, [r7, #15]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_ADC_Start+0x1a>
 800465a:	2302      	movs	r3, #2
 800465c:	e0b2      	b.n	80047c4 <HAL_ADC_Start+0x180>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d018      	beq.n	80046a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004684:	4b52      	ldr	r3, [pc, #328]	; (80047d0 <HAL_ADC_Start+0x18c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_ADC_Start+0x190>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	0c9a      	lsrs	r2, r3, #18
 8004690:	4613      	mov	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4413      	add	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004698:	e002      	b.n	80046a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	3b01      	subs	r3, #1
 800469e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f9      	bne.n	800469a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d17a      	bne.n	80047aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f2:	d106      	bne.n	8004702 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f8:	f023 0206 	bic.w	r2, r3, #6
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	645a      	str	r2, [r3, #68]	; 0x44
 8004700:	e002      	b.n	8004708 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004710:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <HAL_ADC_Start+0x194>)
 8004712:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800471c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2b00      	cmp	r3, #0
 8004728:	d12a      	bne.n	8004780 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a2b      	ldr	r2, [pc, #172]	; (80047dc <HAL_ADC_Start+0x198>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d015      	beq.n	8004760 <HAL_ADC_Start+0x11c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a29      	ldr	r2, [pc, #164]	; (80047e0 <HAL_ADC_Start+0x19c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d105      	bne.n	800474a <HAL_ADC_Start+0x106>
 800473e:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <HAL_ADC_Start+0x194>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a25      	ldr	r2, [pc, #148]	; (80047e4 <HAL_ADC_Start+0x1a0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d136      	bne.n	80047c2 <HAL_ADC_Start+0x17e>
 8004754:	4b20      	ldr	r3, [pc, #128]	; (80047d8 <HAL_ADC_Start+0x194>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d130      	bne.n	80047c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d129      	bne.n	80047c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800477c:	609a      	str	r2, [r3, #8]
 800477e:	e020      	b.n	80047c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a15      	ldr	r2, [pc, #84]	; (80047dc <HAL_ADC_Start+0x198>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d11b      	bne.n	80047c2 <HAL_ADC_Start+0x17e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d114      	bne.n	80047c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	e00b      	b.n	80047c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f043 0210 	orr.w	r2, r3, #16
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	f043 0201 	orr.w	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	20000000 	.word	0x20000000
 80047d4:	431bde83 	.word	0x431bde83
 80047d8:	40012300 	.word	0x40012300
 80047dc:	40012000 	.word	0x40012000
 80047e0:	40012100 	.word	0x40012100
 80047e4:	40012200 	.word	0x40012200

080047e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004804:	d113      	bne.n	800482e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004814:	d10b      	bne.n	800482e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e063      	b.n	80048f6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800482e:	f7ff fe95 	bl	800455c <HAL_GetTick>
 8004832:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004834:	e021      	b.n	800487a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483c:	d01d      	beq.n	800487a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <HAL_ADC_PollForConversion+0x6c>
 8004844:	f7ff fe8a 	bl	800455c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d212      	bcs.n	800487a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b02      	cmp	r3, #2
 8004860:	d00b      	beq.n	800487a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f043 0204 	orr.w	r2, r3, #4
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e03d      	b.n	80048f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b02      	cmp	r3, #2
 8004886:	d1d6      	bne.n	8004836 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0212 	mvn.w	r2, #18
 8004890:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d123      	bne.n	80048f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11f      	bne.n	80048f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d111      	bne.n	80048f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d105      	bne.n	80048f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	f043 0201 	orr.w	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x1c>
 8004930:	2302      	movs	r3, #2
 8004932:	e105      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x228>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b09      	cmp	r3, #9
 8004942:	d925      	bls.n	8004990 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68d9      	ldr	r1, [r3, #12]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	4613      	mov	r3, r2
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	3b1e      	subs	r3, #30
 800495a:	2207      	movs	r2, #7
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	43da      	mvns	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	400a      	ands	r2, r1
 8004968:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68d9      	ldr	r1, [r3, #12]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	4618      	mov	r0, r3
 800497c:	4603      	mov	r3, r0
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	4403      	add	r3, r0
 8004982:	3b1e      	subs	r3, #30
 8004984:	409a      	lsls	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	60da      	str	r2, [r3, #12]
 800498e:	e022      	b.n	80049d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6919      	ldr	r1, [r3, #16]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	4613      	mov	r3, r2
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4413      	add	r3, r2
 80049a4:	2207      	movs	r2, #7
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43da      	mvns	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	400a      	ands	r2, r1
 80049b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6919      	ldr	r1, [r3, #16]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	4618      	mov	r0, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	4403      	add	r3, r0
 80049cc:	409a      	lsls	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b06      	cmp	r3, #6
 80049dc:	d824      	bhi.n	8004a28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	3b05      	subs	r3, #5
 80049f0:	221f      	movs	r2, #31
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43da      	mvns	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	400a      	ands	r2, r1
 80049fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	3b05      	subs	r3, #5
 8004a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	635a      	str	r2, [r3, #52]	; 0x34
 8004a26:	e04c      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b0c      	cmp	r3, #12
 8004a2e:	d824      	bhi.n	8004a7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	3b23      	subs	r3, #35	; 0x23
 8004a42:	221f      	movs	r2, #31
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	43da      	mvns	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	400a      	ands	r2, r1
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	4618      	mov	r0, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	3b23      	subs	r3, #35	; 0x23
 8004a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
 8004a78:	e023      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	3b41      	subs	r3, #65	; 0x41
 8004a8c:	221f      	movs	r2, #31
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43da      	mvns	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	400a      	ands	r2, r1
 8004a9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3b41      	subs	r3, #65	; 0x41
 8004ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ac2:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_ADC_ConfigChannel+0x234>)
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a21      	ldr	r2, [pc, #132]	; (8004b50 <HAL_ADC_ConfigChannel+0x238>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d109      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x1cc>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b12      	cmp	r3, #18
 8004ad6:	d105      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <HAL_ADC_ConfigChannel+0x238>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d123      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x21e>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d003      	beq.n	8004afe <HAL_ADC_ConfigChannel+0x1e6>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b11      	cmp	r3, #17
 8004afc:	d11b      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	d111      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <HAL_ADC_ConfigChannel+0x23c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a10      	ldr	r2, [pc, #64]	; (8004b58 <HAL_ADC_ConfigChannel+0x240>)
 8004b18:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1c:	0c9a      	lsrs	r2, r3, #18
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b28:	e002      	b.n	8004b30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f9      	bne.n	8004b2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40012300 	.word	0x40012300
 8004b50:	40012000 	.word	0x40012000
 8004b54:	20000000 	.word	0x20000000
 8004b58:	431bde83 	.word	0x431bde83

08004b5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b64:	4b79      	ldr	r3, [pc, #484]	; (8004d4c <ADC_Init+0x1f0>)
 8004b66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6859      	ldr	r1, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	021a      	lsls	r2, r3, #8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004bb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6859      	ldr	r1, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6899      	ldr	r1, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	4a58      	ldr	r2, [pc, #352]	; (8004d50 <ADC_Init+0x1f4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d022      	beq.n	8004c3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6899      	ldr	r1, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6899      	ldr	r1, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	e00f      	b.n	8004c5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0202 	bic.w	r2, r2, #2
 8004c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6899      	ldr	r1, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	7e1b      	ldrb	r3, [r3, #24]
 8004c74:	005a      	lsls	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01b      	beq.n	8004cc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ca6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	035a      	lsls	r2, r3, #13
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	e007      	b.n	8004cd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	051a      	lsls	r2, r3, #20
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6899      	ldr	r1, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d12:	025a      	lsls	r2, r3, #9
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6899      	ldr	r1, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	029a      	lsls	r2, r3, #10
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	40012300 	.word	0x40012300
 8004d50:	0f000001 	.word	0x0f000001

08004d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <__NVIC_SetPriorityGrouping+0x44>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d70:	4013      	ands	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d86:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <__NVIC_SetPriorityGrouping+0x44>)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	60d3      	str	r3, [r2, #12]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	e000ed00 	.word	0xe000ed00

08004d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <__NVIC_GetPriorityGrouping+0x18>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	0a1b      	lsrs	r3, r3, #8
 8004da6:	f003 0307 	and.w	r3, r3, #7
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	e000ed00 	.word	0xe000ed00

08004db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	db0b      	blt.n	8004de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	f003 021f 	and.w	r2, r3, #31
 8004dd0:	4907      	ldr	r1, [pc, #28]	; (8004df0 <__NVIC_EnableIRQ+0x38>)
 8004dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	2001      	movs	r0, #1
 8004dda:	fa00 f202 	lsl.w	r2, r0, r2
 8004dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	e000e100 	.word	0xe000e100

08004df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	6039      	str	r1, [r7, #0]
 8004dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	db0a      	blt.n	8004e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	490c      	ldr	r1, [pc, #48]	; (8004e40 <__NVIC_SetPriority+0x4c>)
 8004e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e12:	0112      	lsls	r2, r2, #4
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	440b      	add	r3, r1
 8004e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e1c:	e00a      	b.n	8004e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	4908      	ldr	r1, [pc, #32]	; (8004e44 <__NVIC_SetPriority+0x50>)
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	3b04      	subs	r3, #4
 8004e2c:	0112      	lsls	r2, r2, #4
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	440b      	add	r3, r1
 8004e32:	761a      	strb	r2, [r3, #24]
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	e000e100 	.word	0xe000e100
 8004e44:	e000ed00 	.word	0xe000ed00

08004e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b089      	sub	sp, #36	; 0x24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f1c3 0307 	rsb	r3, r3, #7
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	bf28      	it	cs
 8004e66:	2304      	movcs	r3, #4
 8004e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	2b06      	cmp	r3, #6
 8004e70:	d902      	bls.n	8004e78 <NVIC_EncodePriority+0x30>
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	3b03      	subs	r3, #3
 8004e76:	e000      	b.n	8004e7a <NVIC_EncodePriority+0x32>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43da      	mvns	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9a:	43d9      	mvns	r1, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea0:	4313      	orrs	r3, r2
         );
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3724      	adds	r7, #36	; 0x24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ec0:	d301      	bcc.n	8004ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e00f      	b.n	8004ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ec6:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <SysTick_Config+0x40>)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ece:	210f      	movs	r1, #15
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed4:	f7ff ff8e 	bl	8004df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <SysTick_Config+0x40>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ede:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <SysTick_Config+0x40>)
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	e000e010 	.word	0xe000e010

08004ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff ff29 	bl	8004d54 <__NVIC_SetPriorityGrouping>
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b086      	sub	sp, #24
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	4603      	mov	r3, r0
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f1c:	f7ff ff3e 	bl	8004d9c <__NVIC_GetPriorityGrouping>
 8004f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	6978      	ldr	r0, [r7, #20]
 8004f28:	f7ff ff8e 	bl	8004e48 <NVIC_EncodePriority>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff5d 	bl	8004df4 <__NVIC_SetPriority>
}
 8004f3a:	bf00      	nop
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	4603      	mov	r3, r0
 8004f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff ff31 	bl	8004db8 <__NVIC_EnableIRQ>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff ffa2 	bl	8004eb0 <SysTick_Config>
 8004f6c:	4603      	mov	r3, r0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f84:	f7ff faea 	bl	800455c <HAL_GetTick>
 8004f88:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d008      	beq.n	8004fa8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2280      	movs	r2, #128	; 0x80
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e052      	b.n	800504e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0216 	bic.w	r2, r2, #22
 8004fb6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695a      	ldr	r2, [r3, #20]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fc6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <HAL_DMA_Abort+0x62>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0208 	bic.w	r2, r2, #8
 8004fe6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ff8:	e013      	b.n	8005022 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ffa:	f7ff faaf 	bl	800455c <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b05      	cmp	r3, #5
 8005006:	d90c      	bls.n	8005022 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2203      	movs	r2, #3
 8005012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e015      	b.n	800504e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e4      	bne.n	8004ffa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005034:	223f      	movs	r2, #63	; 0x3f
 8005036:	409a      	lsls	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d004      	beq.n	8005074 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2280      	movs	r2, #128	; 0x80
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e00c      	b.n	800508e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2205      	movs	r2, #5
 8005078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800509c:	b480      	push	{r7}
 800509e:	b089      	sub	sp, #36	; 0x24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	e16b      	b.n	8005390 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050b8:	2201      	movs	r2, #1
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4013      	ands	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	f040 815a 	bne.w	800538a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d005      	beq.n	80050ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d130      	bne.n	8005150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	2203      	movs	r2, #3
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43db      	mvns	r3, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4013      	ands	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4313      	orrs	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005124:	2201      	movs	r2, #1
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	091b      	lsrs	r3, r3, #4
 800513a:	f003 0201 	and.w	r2, r3, #1
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	2b03      	cmp	r3, #3
 800515a:	d017      	beq.n	800518c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	2203      	movs	r2, #3
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d123      	bne.n	80051e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	08da      	lsrs	r2, r3, #3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3208      	adds	r2, #8
 80051a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	220f      	movs	r2, #15
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	08da      	lsrs	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3208      	adds	r2, #8
 80051da:	69b9      	ldr	r1, [r7, #24]
 80051dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	2203      	movs	r2, #3
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4013      	ands	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0203 	and.w	r2, r3, #3
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80b4 	beq.w	800538a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	4b60      	ldr	r3, [pc, #384]	; (80053a8 <HAL_GPIO_Init+0x30c>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	4a5f      	ldr	r2, [pc, #380]	; (80053a8 <HAL_GPIO_Init+0x30c>)
 800522c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005230:	6453      	str	r3, [r2, #68]	; 0x44
 8005232:	4b5d      	ldr	r3, [pc, #372]	; (80053a8 <HAL_GPIO_Init+0x30c>)
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800523e:	4a5b      	ldr	r2, [pc, #364]	; (80053ac <HAL_GPIO_Init+0x310>)
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	089b      	lsrs	r3, r3, #2
 8005244:	3302      	adds	r3, #2
 8005246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	220f      	movs	r2, #15
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43db      	mvns	r3, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4013      	ands	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a52      	ldr	r2, [pc, #328]	; (80053b0 <HAL_GPIO_Init+0x314>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d02b      	beq.n	80052c2 <HAL_GPIO_Init+0x226>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a51      	ldr	r2, [pc, #324]	; (80053b4 <HAL_GPIO_Init+0x318>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d025      	beq.n	80052be <HAL_GPIO_Init+0x222>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a50      	ldr	r2, [pc, #320]	; (80053b8 <HAL_GPIO_Init+0x31c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d01f      	beq.n	80052ba <HAL_GPIO_Init+0x21e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a4f      	ldr	r2, [pc, #316]	; (80053bc <HAL_GPIO_Init+0x320>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d019      	beq.n	80052b6 <HAL_GPIO_Init+0x21a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a4e      	ldr	r2, [pc, #312]	; (80053c0 <HAL_GPIO_Init+0x324>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <HAL_GPIO_Init+0x216>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a4d      	ldr	r2, [pc, #308]	; (80053c4 <HAL_GPIO_Init+0x328>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00d      	beq.n	80052ae <HAL_GPIO_Init+0x212>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a4c      	ldr	r2, [pc, #304]	; (80053c8 <HAL_GPIO_Init+0x32c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d007      	beq.n	80052aa <HAL_GPIO_Init+0x20e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a4b      	ldr	r2, [pc, #300]	; (80053cc <HAL_GPIO_Init+0x330>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d101      	bne.n	80052a6 <HAL_GPIO_Init+0x20a>
 80052a2:	2307      	movs	r3, #7
 80052a4:	e00e      	b.n	80052c4 <HAL_GPIO_Init+0x228>
 80052a6:	2308      	movs	r3, #8
 80052a8:	e00c      	b.n	80052c4 <HAL_GPIO_Init+0x228>
 80052aa:	2306      	movs	r3, #6
 80052ac:	e00a      	b.n	80052c4 <HAL_GPIO_Init+0x228>
 80052ae:	2305      	movs	r3, #5
 80052b0:	e008      	b.n	80052c4 <HAL_GPIO_Init+0x228>
 80052b2:	2304      	movs	r3, #4
 80052b4:	e006      	b.n	80052c4 <HAL_GPIO_Init+0x228>
 80052b6:	2303      	movs	r3, #3
 80052b8:	e004      	b.n	80052c4 <HAL_GPIO_Init+0x228>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e002      	b.n	80052c4 <HAL_GPIO_Init+0x228>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <HAL_GPIO_Init+0x228>
 80052c2:	2300      	movs	r3, #0
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	f002 0203 	and.w	r2, r2, #3
 80052ca:	0092      	lsls	r2, r2, #2
 80052cc:	4093      	lsls	r3, r2
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052d4:	4935      	ldr	r1, [pc, #212]	; (80053ac <HAL_GPIO_Init+0x310>)
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	089b      	lsrs	r3, r3, #2
 80052da:	3302      	adds	r3, #2
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052e2:	4b3b      	ldr	r3, [pc, #236]	; (80053d0 <HAL_GPIO_Init+0x334>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	43db      	mvns	r3, r3
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	4013      	ands	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005306:	4a32      	ldr	r2, [pc, #200]	; (80053d0 <HAL_GPIO_Init+0x334>)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800530c:	4b30      	ldr	r3, [pc, #192]	; (80053d0 <HAL_GPIO_Init+0x334>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	43db      	mvns	r3, r3
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4013      	ands	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005330:	4a27      	ldr	r2, [pc, #156]	; (80053d0 <HAL_GPIO_Init+0x334>)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005336:	4b26      	ldr	r3, [pc, #152]	; (80053d0 <HAL_GPIO_Init+0x334>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	43db      	mvns	r3, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4013      	ands	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800535a:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <HAL_GPIO_Init+0x334>)
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005360:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <HAL_GPIO_Init+0x334>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	43db      	mvns	r3, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4013      	ands	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005384:	4a12      	ldr	r2, [pc, #72]	; (80053d0 <HAL_GPIO_Init+0x334>)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	3301      	adds	r3, #1
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	2b0f      	cmp	r3, #15
 8005394:	f67f ae90 	bls.w	80050b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	3724      	adds	r7, #36	; 0x24
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40013800 	.word	0x40013800
 80053b0:	40020000 	.word	0x40020000
 80053b4:	40020400 	.word	0x40020400
 80053b8:	40020800 	.word	0x40020800
 80053bc:	40020c00 	.word	0x40020c00
 80053c0:	40021000 	.word	0x40021000
 80053c4:	40021400 	.word	0x40021400
 80053c8:	40021800 	.word	0x40021800
 80053cc:	40021c00 	.word	0x40021c00
 80053d0:	40013c00 	.word	0x40013c00

080053d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	807b      	strh	r3, [r7, #2]
 80053e0:	4613      	mov	r3, r2
 80053e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053e4:	787b      	ldrb	r3, [r7, #1]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ea:	887a      	ldrh	r2, [r7, #2]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053f0:	e003      	b.n	80053fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053f2:	887b      	ldrh	r3, [r7, #2]
 80053f4:	041a      	lsls	r2, r3, #16
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	619a      	str	r2, [r3, #24]
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e12b      	b.n	8005672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fe fd34 	bl	8003e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800545a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800546a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800546c:	f001 fbd4 	bl	8006c18 <HAL_RCC_GetPCLK1Freq>
 8005470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	4a81      	ldr	r2, [pc, #516]	; (800567c <HAL_I2C_Init+0x274>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d807      	bhi.n	800548c <HAL_I2C_Init+0x84>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a80      	ldr	r2, [pc, #512]	; (8005680 <HAL_I2C_Init+0x278>)
 8005480:	4293      	cmp	r3, r2
 8005482:	bf94      	ite	ls
 8005484:	2301      	movls	r3, #1
 8005486:	2300      	movhi	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e006      	b.n	800549a <HAL_I2C_Init+0x92>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a7d      	ldr	r2, [pc, #500]	; (8005684 <HAL_I2C_Init+0x27c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	bf94      	ite	ls
 8005494:	2301      	movls	r3, #1
 8005496:	2300      	movhi	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e0e7      	b.n	8005672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a78      	ldr	r2, [pc, #480]	; (8005688 <HAL_I2C_Init+0x280>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	0c9b      	lsrs	r3, r3, #18
 80054ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4a6a      	ldr	r2, [pc, #424]	; (800567c <HAL_I2C_Init+0x274>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d802      	bhi.n	80054dc <HAL_I2C_Init+0xd4>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	3301      	adds	r3, #1
 80054da:	e009      	b.n	80054f0 <HAL_I2C_Init+0xe8>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
 80054e6:	4a69      	ldr	r2, [pc, #420]	; (800568c <HAL_I2C_Init+0x284>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	099b      	lsrs	r3, r3, #6
 80054ee:	3301      	adds	r3, #1
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	495c      	ldr	r1, [pc, #368]	; (800567c <HAL_I2C_Init+0x274>)
 800550c:	428b      	cmp	r3, r1
 800550e:	d819      	bhi.n	8005544 <HAL_I2C_Init+0x13c>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1e59      	subs	r1, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	fbb1 f3f3 	udiv	r3, r1, r3
 800551e:	1c59      	adds	r1, r3, #1
 8005520:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005524:	400b      	ands	r3, r1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_I2C_Init+0x138>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1e59      	subs	r1, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fbb1 f3f3 	udiv	r3, r1, r3
 8005538:	3301      	adds	r3, #1
 800553a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553e:	e051      	b.n	80055e4 <HAL_I2C_Init+0x1dc>
 8005540:	2304      	movs	r3, #4
 8005542:	e04f      	b.n	80055e4 <HAL_I2C_Init+0x1dc>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d111      	bne.n	8005570 <HAL_I2C_Init+0x168>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	1e58      	subs	r0, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6859      	ldr	r1, [r3, #4]
 8005554:	460b      	mov	r3, r1
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	440b      	add	r3, r1
 800555a:	fbb0 f3f3 	udiv	r3, r0, r3
 800555e:	3301      	adds	r3, #1
 8005560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005564:	2b00      	cmp	r3, #0
 8005566:	bf0c      	ite	eq
 8005568:	2301      	moveq	r3, #1
 800556a:	2300      	movne	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e012      	b.n	8005596 <HAL_I2C_Init+0x18e>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1e58      	subs	r0, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6859      	ldr	r1, [r3, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	0099      	lsls	r1, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	fbb0 f3f3 	udiv	r3, r0, r3
 8005586:	3301      	adds	r3, #1
 8005588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf0c      	ite	eq
 8005590:	2301      	moveq	r3, #1
 8005592:	2300      	movne	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_I2C_Init+0x196>
 800559a:	2301      	movs	r3, #1
 800559c:	e022      	b.n	80055e4 <HAL_I2C_Init+0x1dc>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10e      	bne.n	80055c4 <HAL_I2C_Init+0x1bc>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	1e58      	subs	r0, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6859      	ldr	r1, [r3, #4]
 80055ae:	460b      	mov	r3, r1
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	440b      	add	r3, r1
 80055b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80055b8:	3301      	adds	r3, #1
 80055ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	e00f      	b.n	80055e4 <HAL_I2C_Init+0x1dc>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1e58      	subs	r0, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6859      	ldr	r1, [r3, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	0099      	lsls	r1, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055da:	3301      	adds	r3, #1
 80055dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	6809      	ldr	r1, [r1, #0]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6911      	ldr	r1, [r2, #16]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	68d2      	ldr	r2, [r2, #12]
 800561e:	4311      	orrs	r1, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	430b      	orrs	r3, r1
 8005626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	000186a0 	.word	0x000186a0
 8005680:	001e847f 	.word	0x001e847f
 8005684:	003d08ff 	.word	0x003d08ff
 8005688:	431bde83 	.word	0x431bde83
 800568c:	10624dd3 	.word	0x10624dd3

08005690 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	4608      	mov	r0, r1
 800569a:	4611      	mov	r1, r2
 800569c:	461a      	mov	r2, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	817b      	strh	r3, [r7, #10]
 80056a2:	460b      	mov	r3, r1
 80056a4:	813b      	strh	r3, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056aa:	f7fe ff57 	bl	800455c <HAL_GetTick>
 80056ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	f040 80d9 	bne.w	8005870 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	2319      	movs	r3, #25
 80056c4:	2201      	movs	r2, #1
 80056c6:	496d      	ldr	r1, [pc, #436]	; (800587c <HAL_I2C_Mem_Write+0x1ec>)
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fc7f 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
 80056d6:	e0cc      	b.n	8005872 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_I2C_Mem_Write+0x56>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e0c5      	b.n	8005872 <HAL_I2C_Mem_Write+0x1e2>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d007      	beq.n	800570c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800571a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2221      	movs	r2, #33	; 0x21
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2240      	movs	r2, #64	; 0x40
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800573c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4a4d      	ldr	r2, [pc, #308]	; (8005880 <HAL_I2C_Mem_Write+0x1f0>)
 800574c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800574e:	88f8      	ldrh	r0, [r7, #6]
 8005750:	893a      	ldrh	r2, [r7, #8]
 8005752:	8979      	ldrh	r1, [r7, #10]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	4603      	mov	r3, r0
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 fab6 	bl	8005cd0 <I2C_RequestMemoryWrite>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d052      	beq.n	8005810 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e081      	b.n	8005872 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fd00 	bl	8006178 <I2C_WaitOnTXEFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	2b04      	cmp	r3, #4
 8005784:	d107      	bne.n	8005796 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005794:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e06b      	b.n	8005872 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	781a      	ldrb	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d11b      	bne.n	8005810 <HAL_I2C_Mem_Write+0x180>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d017      	beq.n	8005810 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	781a      	ldrb	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1aa      	bne.n	800576e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 fcec 	bl	80061fa <I2C_WaitOnBTFFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00d      	beq.n	8005844 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	2b04      	cmp	r3, #4
 800582e:	d107      	bne.n	8005840 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800583e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e016      	b.n	8005872 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	e000      	b.n	8005872 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	00100002 	.word	0x00100002
 8005880:	ffff0000 	.word	0xffff0000

08005884 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08c      	sub	sp, #48	; 0x30
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	4608      	mov	r0, r1
 800588e:	4611      	mov	r1, r2
 8005890:	461a      	mov	r2, r3
 8005892:	4603      	mov	r3, r0
 8005894:	817b      	strh	r3, [r7, #10]
 8005896:	460b      	mov	r3, r1
 8005898:	813b      	strh	r3, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800589e:	f7fe fe5d 	bl	800455c <HAL_GetTick>
 80058a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	f040 8208 	bne.w	8005cc2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	2319      	movs	r3, #25
 80058b8:	2201      	movs	r2, #1
 80058ba:	497b      	ldr	r1, [pc, #492]	; (8005aa8 <HAL_I2C_Mem_Read+0x224>)
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 fb85 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80058c8:	2302      	movs	r3, #2
 80058ca:	e1fb      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_I2C_Mem_Read+0x56>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e1f4      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x440>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d007      	beq.n	8005900 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800590e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2222      	movs	r2, #34	; 0x22
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2240      	movs	r2, #64	; 0x40
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005930:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4a5b      	ldr	r2, [pc, #364]	; (8005aac <HAL_I2C_Mem_Read+0x228>)
 8005940:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005942:	88f8      	ldrh	r0, [r7, #6]
 8005944:	893a      	ldrh	r2, [r7, #8]
 8005946:	8979      	ldrh	r1, [r7, #10]
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	4603      	mov	r3, r0
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 fa52 	bl	8005dfc <I2C_RequestMemoryRead>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e1b0      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	d113      	bne.n	8005992 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596a:	2300      	movs	r3, #0
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	623b      	str	r3, [r7, #32]
 800597e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e184      	b.n	8005c9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005996:	2b01      	cmp	r3, #1
 8005998:	d11b      	bne.n	80059d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059aa:	2300      	movs	r3, #0
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	e164      	b.n	8005c9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d11b      	bne.n	8005a12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	e144      	b.n	8005c9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a28:	e138      	b.n	8005c9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	f200 80f1 	bhi.w	8005c16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d123      	bne.n	8005a84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 fc1b 	bl	800627c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e139      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a82:	e10b      	b.n	8005c9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d14e      	bne.n	8005b2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a92:	2200      	movs	r2, #0
 8005a94:	4906      	ldr	r1, [pc, #24]	; (8005ab0 <HAL_I2C_Mem_Read+0x22c>)
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fa98 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e10e      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x440>
 8005aa6:	bf00      	nop
 8005aa8:	00100002 	.word	0x00100002
 8005aac:	ffff0000 	.word	0xffff0000
 8005ab0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b28:	e0b8      	b.n	8005c9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	2200      	movs	r2, #0
 8005b32:	4966      	ldr	r1, [pc, #408]	; (8005ccc <HAL_I2C_Mem_Read+0x448>)
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fa49 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0bf      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	494f      	ldr	r1, [pc, #316]	; (8005ccc <HAL_I2C_Mem_Read+0x448>)
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 fa1b 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e091      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c14:	e042      	b.n	8005c9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fb2e 	bl	800627c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e04c      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d118      	bne.n	8005c9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f47f aec2 	bne.w	8005a2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e000      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3728      	adds	r7, #40	; 0x28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	00010004 	.word	0x00010004

08005cd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	4608      	mov	r0, r1
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	817b      	strh	r3, [r7, #10]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	813b      	strh	r3, [r7, #8]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f960 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00d      	beq.n	8005d2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d20:	d103      	bne.n	8005d2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e05f      	b.n	8005dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d2e:	897b      	ldrh	r3, [r7, #10]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	492d      	ldr	r1, [pc, #180]	; (8005df8 <I2C_RequestMemoryWrite+0x128>)
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f998 	bl	800607a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e04c      	b.n	8005dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6c:	6a39      	ldr	r1, [r7, #32]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fa02 	bl	8006178 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00d      	beq.n	8005d96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d107      	bne.n	8005d92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e02b      	b.n	8005dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d105      	bne.n	8005da8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	611a      	str	r2, [r3, #16]
 8005da6:	e021      	b.n	8005dec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005da8:	893b      	ldrh	r3, [r7, #8]
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db8:	6a39      	ldr	r1, [r7, #32]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f9dc 	bl	8006178 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00d      	beq.n	8005de2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d107      	bne.n	8005dde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e005      	b.n	8005dee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005de2:	893b      	ldrh	r3, [r7, #8]
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	00010002 	.word	0x00010002

08005dfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	4608      	mov	r0, r1
 8005e06:	4611      	mov	r1, r2
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	817b      	strh	r3, [r7, #10]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	813b      	strh	r3, [r7, #8]
 8005e12:	4613      	mov	r3, r2
 8005e14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f8c2 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00d      	beq.n	8005e6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5c:	d103      	bne.n	8005e66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e0aa      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e6a:	897b      	ldrh	r3, [r7, #10]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	6a3a      	ldr	r2, [r7, #32]
 8005e7e:	4952      	ldr	r1, [pc, #328]	; (8005fc8 <I2C_RequestMemoryRead+0x1cc>)
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f8fa 	bl	800607a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e097      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea8:	6a39      	ldr	r1, [r7, #32]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 f964 	bl	8006178 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00d      	beq.n	8005ed2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d107      	bne.n	8005ece <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ecc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e076      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d105      	bne.n	8005ee4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ed8:	893b      	ldrh	r3, [r7, #8]
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	611a      	str	r2, [r3, #16]
 8005ee2:	e021      	b.n	8005f28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ee4:	893b      	ldrh	r3, [r7, #8]
 8005ee6:	0a1b      	lsrs	r3, r3, #8
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef4:	6a39      	ldr	r1, [r7, #32]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f93e 	bl	8006178 <I2C_WaitOnTXEFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00d      	beq.n	8005f1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d107      	bne.n	8005f1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e050      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f1e:	893b      	ldrh	r3, [r7, #8]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2a:	6a39      	ldr	r1, [r7, #32]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f923 	bl	8006178 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00d      	beq.n	8005f54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d107      	bne.n	8005f50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e035      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f82b 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f8a:	d103      	bne.n	8005f94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e013      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f98:	897b      	ldrh	r3, [r7, #10]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	6a3a      	ldr	r2, [r7, #32]
 8005fac:	4906      	ldr	r1, [pc, #24]	; (8005fc8 <I2C_RequestMemoryRead+0x1cc>)
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 f863 	bl	800607a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	00010002 	.word	0x00010002

08005fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fdc:	e025      	b.n	800602a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe4:	d021      	beq.n	800602a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe6:	f7fe fab9 	bl	800455c <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d302      	bcc.n	8005ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d116      	bne.n	800602a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f043 0220 	orr.w	r2, r3, #32
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e023      	b.n	8006072 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	0c1b      	lsrs	r3, r3, #16
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d10d      	bne.n	8006050 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	43da      	mvns	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4013      	ands	r3, r2
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	bf0c      	ite	eq
 8006046:	2301      	moveq	r3, #1
 8006048:	2300      	movne	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	e00c      	b.n	800606a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	43da      	mvns	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4013      	ands	r3, r2
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	bf0c      	ite	eq
 8006062:	2301      	moveq	r3, #1
 8006064:	2300      	movne	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	429a      	cmp	r2, r3
 800606e:	d0b6      	beq.n	8005fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006088:	e051      	b.n	800612e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006098:	d123      	bne.n	80060e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f043 0204 	orr.w	r2, r3, #4
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e046      	b.n	8006170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e8:	d021      	beq.n	800612e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ea:	f7fe fa37 	bl	800455c <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d116      	bne.n	800612e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f043 0220 	orr.w	r2, r3, #32
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e020      	b.n	8006170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b01      	cmp	r3, #1
 8006136:	d10c      	bne.n	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	43da      	mvns	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4013      	ands	r3, r2
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	bf14      	ite	ne
 800614a:	2301      	movne	r3, #1
 800614c:	2300      	moveq	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	e00b      	b.n	800616a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	43da      	mvns	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	4013      	ands	r3, r2
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	bf14      	ite	ne
 8006164:	2301      	movne	r3, #1
 8006166:	2300      	moveq	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d18d      	bne.n	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006184:	e02d      	b.n	80061e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f8ce 	bl	8006328 <I2C_IsAcknowledgeFailed>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e02d      	b.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800619c:	d021      	beq.n	80061e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619e:	f7fe f9dd 	bl	800455c <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d116      	bne.n	80061e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f043 0220 	orr.w	r2, r3, #32
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e007      	b.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ec:	2b80      	cmp	r3, #128	; 0x80
 80061ee:	d1ca      	bne.n	8006186 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006206:	e02d      	b.n	8006264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f88d 	bl	8006328 <I2C_IsAcknowledgeFailed>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e02d      	b.n	8006274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800621e:	d021      	beq.n	8006264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006220:	f7fe f99c 	bl	800455c <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	429a      	cmp	r2, r3
 800622e:	d302      	bcc.n	8006236 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d116      	bne.n	8006264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e007      	b.n	8006274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b04      	cmp	r3, #4
 8006270:	d1ca      	bne.n	8006208 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006288:	e042      	b.n	8006310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b10      	cmp	r3, #16
 8006296:	d119      	bne.n	80062cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0210 	mvn.w	r2, #16
 80062a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e029      	b.n	8006320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062cc:	f7fe f946 	bl	800455c <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d302      	bcc.n	80062e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d116      	bne.n	8006310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e007      	b.n	8006320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d1b5      	bne.n	800628a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800633a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633e:	d11b      	bne.n	8006378 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006348:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	f043 0204 	orr.w	r2, r3, #4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
	...

08006388 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800638e:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006390:	2201      	movs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006394:	4b05      	ldr	r3, [pc, #20]	; (80063ac <HAL_PWR_EnableBkUpAccess+0x24>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800639a:	687b      	ldr	r3, [r7, #4]
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	420e0020 	.word	0x420e0020
 80063ac:	40007000 	.word	0x40007000

080063b0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80063b6:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <HAL_PWR_DisableBkUpAccess+0x20>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80063bc:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <HAL_PWR_DisableBkUpAccess+0x24>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80063c2:	687b      	ldr	r3, [r7, #4]
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	420e0020 	.word	0x420e0020
 80063d4:	40007000 	.word	0x40007000

080063d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e264      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d075      	beq.n	80064e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063f6:	4ba3      	ldr	r3, [pc, #652]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 030c 	and.w	r3, r3, #12
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d00c      	beq.n	800641c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006402:	4ba0      	ldr	r3, [pc, #640]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800640a:	2b08      	cmp	r3, #8
 800640c:	d112      	bne.n	8006434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800640e:	4b9d      	ldr	r3, [pc, #628]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641a:	d10b      	bne.n	8006434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800641c:	4b99      	ldr	r3, [pc, #612]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d05b      	beq.n	80064e0 <HAL_RCC_OscConfig+0x108>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d157      	bne.n	80064e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e23f      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800643c:	d106      	bne.n	800644c <HAL_RCC_OscConfig+0x74>
 800643e:	4b91      	ldr	r3, [pc, #580]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a90      	ldr	r2, [pc, #576]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e01d      	b.n	8006488 <HAL_RCC_OscConfig+0xb0>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006454:	d10c      	bne.n	8006470 <HAL_RCC_OscConfig+0x98>
 8006456:	4b8b      	ldr	r3, [pc, #556]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a8a      	ldr	r2, [pc, #552]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800645c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	4b88      	ldr	r3, [pc, #544]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a87      	ldr	r2, [pc, #540]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	e00b      	b.n	8006488 <HAL_RCC_OscConfig+0xb0>
 8006470:	4b84      	ldr	r3, [pc, #528]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a83      	ldr	r2, [pc, #524]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	4b81      	ldr	r3, [pc, #516]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a80      	ldr	r2, [pc, #512]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d013      	beq.n	80064b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006490:	f7fe f864 	bl	800455c <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006498:	f7fe f860 	bl	800455c <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b64      	cmp	r3, #100	; 0x64
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e204      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064aa:	4b76      	ldr	r3, [pc, #472]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f0      	beq.n	8006498 <HAL_RCC_OscConfig+0xc0>
 80064b6:	e014      	b.n	80064e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b8:	f7fe f850 	bl	800455c <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064c0:	f7fe f84c 	bl	800455c <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	; 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e1f0      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d2:	4b6c      	ldr	r3, [pc, #432]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f0      	bne.n	80064c0 <HAL_RCC_OscConfig+0xe8>
 80064de:	e000      	b.n	80064e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d063      	beq.n	80065b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064ee:	4b65      	ldr	r3, [pc, #404]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064fa:	4b62      	ldr	r3, [pc, #392]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006502:	2b08      	cmp	r3, #8
 8006504:	d11c      	bne.n	8006540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006506:	4b5f      	ldr	r3, [pc, #380]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d116      	bne.n	8006540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006512:	4b5c      	ldr	r3, [pc, #368]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_RCC_OscConfig+0x152>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d001      	beq.n	800652a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e1c4      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652a:	4b56      	ldr	r3, [pc, #344]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4952      	ldr	r1, [pc, #328]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800653a:	4313      	orrs	r3, r2
 800653c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653e:	e03a      	b.n	80065b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d020      	beq.n	800658a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006548:	4b4f      	ldr	r3, [pc, #316]	; (8006688 <HAL_RCC_OscConfig+0x2b0>)
 800654a:	2201      	movs	r2, #1
 800654c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654e:	f7fe f805 	bl	800455c <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006556:	f7fe f801 	bl	800455c <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e1a5      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006568:	4b46      	ldr	r3, [pc, #280]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0f0      	beq.n	8006556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006574:	4b43      	ldr	r3, [pc, #268]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4940      	ldr	r1, [pc, #256]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006584:	4313      	orrs	r3, r2
 8006586:	600b      	str	r3, [r1, #0]
 8006588:	e015      	b.n	80065b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800658a:	4b3f      	ldr	r3, [pc, #252]	; (8006688 <HAL_RCC_OscConfig+0x2b0>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fd ffe4 	bl	800455c <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006598:	f7fd ffe0 	bl	800455c <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e184      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065aa:	4b36      	ldr	r3, [pc, #216]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d030      	beq.n	8006624 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d016      	beq.n	80065f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ca:	4b30      	ldr	r3, [pc, #192]	; (800668c <HAL_RCC_OscConfig+0x2b4>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d0:	f7fd ffc4 	bl	800455c <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065d8:	f7fd ffc0 	bl	800455c <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e164      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ea:	4b26      	ldr	r3, [pc, #152]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80065ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HAL_RCC_OscConfig+0x200>
 80065f6:	e015      	b.n	8006624 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065f8:	4b24      	ldr	r3, [pc, #144]	; (800668c <HAL_RCC_OscConfig+0x2b4>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065fe:	f7fd ffad 	bl	800455c <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006606:	f7fd ffa9 	bl	800455c <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e14d      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006618:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800661a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f0      	bne.n	8006606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80a0 	beq.w	8006772 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006632:	2300      	movs	r3, #0
 8006634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006636:	4b13      	ldr	r3, [pc, #76]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10f      	bne.n	8006662 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006642:	2300      	movs	r3, #0
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	4a0e      	ldr	r2, [pc, #56]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800664c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006650:	6413      	str	r3, [r2, #64]	; 0x40
 8006652:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665a:	60bb      	str	r3, [r7, #8]
 800665c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006662:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <HAL_RCC_OscConfig+0x2b8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d121      	bne.n	80066b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800666e:	4b08      	ldr	r3, [pc, #32]	; (8006690 <HAL_RCC_OscConfig+0x2b8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a07      	ldr	r2, [pc, #28]	; (8006690 <HAL_RCC_OscConfig+0x2b8>)
 8006674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800667a:	f7fd ff6f 	bl	800455c <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006680:	e011      	b.n	80066a6 <HAL_RCC_OscConfig+0x2ce>
 8006682:	bf00      	nop
 8006684:	40023800 	.word	0x40023800
 8006688:	42470000 	.word	0x42470000
 800668c:	42470e80 	.word	0x42470e80
 8006690:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006694:	f7fd ff62 	bl	800455c <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e106      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a6:	4b85      	ldr	r3, [pc, #532]	; (80068bc <HAL_RCC_OscConfig+0x4e4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f0      	beq.n	8006694 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d106      	bne.n	80066c8 <HAL_RCC_OscConfig+0x2f0>
 80066ba:	4b81      	ldr	r3, [pc, #516]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066be:	4a80      	ldr	r2, [pc, #512]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	6713      	str	r3, [r2, #112]	; 0x70
 80066c6:	e01c      	b.n	8006702 <HAL_RCC_OscConfig+0x32a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b05      	cmp	r3, #5
 80066ce:	d10c      	bne.n	80066ea <HAL_RCC_OscConfig+0x312>
 80066d0:	4b7b      	ldr	r3, [pc, #492]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	4a7a      	ldr	r2, [pc, #488]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066d6:	f043 0304 	orr.w	r3, r3, #4
 80066da:	6713      	str	r3, [r2, #112]	; 0x70
 80066dc:	4b78      	ldr	r3, [pc, #480]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e0:	4a77      	ldr	r2, [pc, #476]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	6713      	str	r3, [r2, #112]	; 0x70
 80066e8:	e00b      	b.n	8006702 <HAL_RCC_OscConfig+0x32a>
 80066ea:	4b75      	ldr	r3, [pc, #468]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	4a74      	ldr	r2, [pc, #464]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066f0:	f023 0301 	bic.w	r3, r3, #1
 80066f4:	6713      	str	r3, [r2, #112]	; 0x70
 80066f6:	4b72      	ldr	r3, [pc, #456]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	4a71      	ldr	r2, [pc, #452]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066fc:	f023 0304 	bic.w	r3, r3, #4
 8006700:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d015      	beq.n	8006736 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670a:	f7fd ff27 	bl	800455c <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006710:	e00a      	b.n	8006728 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006712:	f7fd ff23 	bl	800455c <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006720:	4293      	cmp	r3, r2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e0c5      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006728:	4b65      	ldr	r3, [pc, #404]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0ee      	beq.n	8006712 <HAL_RCC_OscConfig+0x33a>
 8006734:	e014      	b.n	8006760 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006736:	f7fd ff11 	bl	800455c <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673c:	e00a      	b.n	8006754 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673e:	f7fd ff0d 	bl	800455c <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	f241 3288 	movw	r2, #5000	; 0x1388
 800674c:	4293      	cmp	r3, r2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e0af      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006754:	4b5a      	ldr	r3, [pc, #360]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 8006756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1ee      	bne.n	800673e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006760:	7dfb      	ldrb	r3, [r7, #23]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d105      	bne.n	8006772 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006766:	4b56      	ldr	r3, [pc, #344]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	4a55      	ldr	r2, [pc, #340]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 800676c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006770:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 809b 	beq.w	80068b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800677c:	4b50      	ldr	r3, [pc, #320]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 030c 	and.w	r3, r3, #12
 8006784:	2b08      	cmp	r3, #8
 8006786:	d05c      	beq.n	8006842 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d141      	bne.n	8006814 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006790:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <HAL_RCC_OscConfig+0x4ec>)
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006796:	f7fd fee1 	bl	800455c <HAL_GetTick>
 800679a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679e:	f7fd fedd 	bl	800455c <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e081      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b0:	4b43      	ldr	r3, [pc, #268]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f0      	bne.n	800679e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	019b      	lsls	r3, r3, #6
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	3b01      	subs	r3, #1
 80067d6:	041b      	lsls	r3, r3, #16
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	061b      	lsls	r3, r3, #24
 80067e0:	4937      	ldr	r1, [pc, #220]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e6:	4b37      	ldr	r3, [pc, #220]	; (80068c4 <HAL_RCC_OscConfig+0x4ec>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ec:	f7fd feb6 	bl	800455c <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f4:	f7fd feb2 	bl	800455c <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e056      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006806:	4b2e      	ldr	r3, [pc, #184]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x41c>
 8006812:	e04e      	b.n	80068b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006814:	4b2b      	ldr	r3, [pc, #172]	; (80068c4 <HAL_RCC_OscConfig+0x4ec>)
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800681a:	f7fd fe9f 	bl	800455c <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006822:	f7fd fe9b 	bl	800455c <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e03f      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006834:	4b22      	ldr	r3, [pc, #136]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f0      	bne.n	8006822 <HAL_RCC_OscConfig+0x44a>
 8006840:	e037      	b.n	80068b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e032      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d028      	beq.n	80068ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006866:	429a      	cmp	r2, r3
 8006868:	d121      	bne.n	80068ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006874:	429a      	cmp	r2, r3
 8006876:	d11a      	bne.n	80068ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800687e:	4013      	ands	r3, r2
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006884:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006886:	4293      	cmp	r3, r2
 8006888:	d111      	bne.n	80068ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	085b      	lsrs	r3, r3, #1
 8006896:	3b01      	subs	r3, #1
 8006898:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800689a:	429a      	cmp	r2, r3
 800689c:	d107      	bne.n	80068ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d001      	beq.n	80068b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40007000 	.word	0x40007000
 80068c0:	40023800 	.word	0x40023800
 80068c4:	42470060 	.word	0x42470060

080068c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e0cc      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068dc:	4b68      	ldr	r3, [pc, #416]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d90c      	bls.n	8006904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ea:	4b65      	ldr	r3, [pc, #404]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f2:	4b63      	ldr	r3, [pc, #396]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0b8      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800691c:	4b59      	ldr	r3, [pc, #356]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	4a58      	ldr	r2, [pc, #352]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006934:	4b53      	ldr	r3, [pc, #332]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	4a52      	ldr	r2, [pc, #328]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800693e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006940:	4b50      	ldr	r3, [pc, #320]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	494d      	ldr	r1, [pc, #308]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	4313      	orrs	r3, r2
 8006950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d044      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d107      	bne.n	8006976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006966:	4b47      	ldr	r3, [pc, #284]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d119      	bne.n	80069a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e07f      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d003      	beq.n	8006986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006982:	2b03      	cmp	r3, #3
 8006984:	d107      	bne.n	8006996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006986:	4b3f      	ldr	r3, [pc, #252]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e06f      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006996:	4b3b      	ldr	r3, [pc, #236]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e067      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069a6:	4b37      	ldr	r3, [pc, #220]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f023 0203 	bic.w	r2, r3, #3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	4934      	ldr	r1, [pc, #208]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069b8:	f7fd fdd0 	bl	800455c <HAL_GetTick>
 80069bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069be:	e00a      	b.n	80069d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069c0:	f7fd fdcc 	bl	800455c <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e04f      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d6:	4b2b      	ldr	r3, [pc, #172]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 020c 	and.w	r2, r3, #12
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d1eb      	bne.n	80069c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069e8:	4b25      	ldr	r3, [pc, #148]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d20c      	bcs.n	8006a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069f6:	4b22      	ldr	r3, [pc, #136]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fe:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d001      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e032      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a1c:	4b19      	ldr	r3, [pc, #100]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	4916      	ldr	r1, [pc, #88]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	490e      	ldr	r1, [pc, #56]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a4e:	f000 f821 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8006a52:	4602      	mov	r2, r0
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	490a      	ldr	r1, [pc, #40]	; (8006a88 <HAL_RCC_ClockConfig+0x1c0>)
 8006a60:	5ccb      	ldrb	r3, [r1, r3]
 8006a62:	fa22 f303 	lsr.w	r3, r2, r3
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <HAL_RCC_ClockConfig+0x1c4>)
 8006a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a6a:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <HAL_RCC_ClockConfig+0x1c8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fd fd30 	bl	80044d4 <HAL_InitTick>

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40023c00 	.word	0x40023c00
 8006a84:	40023800 	.word	0x40023800
 8006a88:	0800f048 	.word	0x0800f048
 8006a8c:	20000000 	.word	0x20000000
 8006a90:	20000004 	.word	0x20000004

08006a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a94:	b5b0      	push	{r4, r5, r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	6079      	str	r1, [r7, #4]
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	60f9      	str	r1, [r7, #12]
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aaa:	4952      	ldr	r1, [pc, #328]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006aac:	6889      	ldr	r1, [r1, #8]
 8006aae:	f001 010c 	and.w	r1, r1, #12
 8006ab2:	2908      	cmp	r1, #8
 8006ab4:	d00d      	beq.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x3e>
 8006ab6:	2908      	cmp	r1, #8
 8006ab8:	f200 8094 	bhi.w	8006be4 <HAL_RCC_GetSysClockFreq+0x150>
 8006abc:	2900      	cmp	r1, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x32>
 8006ac0:	2904      	cmp	r1, #4
 8006ac2:	d003      	beq.n	8006acc <HAL_RCC_GetSysClockFreq+0x38>
 8006ac4:	e08e      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ac6:	4b4c      	ldr	r3, [pc, #304]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x164>)
 8006ac8:	60bb      	str	r3, [r7, #8]
       break;
 8006aca:	e08e      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006acc:	4b4b      	ldr	r3, [pc, #300]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x168>)
 8006ace:	60bb      	str	r3, [r7, #8]
      break;
 8006ad0:	e08b      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ad2:	4948      	ldr	r1, [pc, #288]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ad4:	6849      	ldr	r1, [r1, #4]
 8006ad6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006ada:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006adc:	4945      	ldr	r1, [pc, #276]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ade:	6849      	ldr	r1, [r1, #4]
 8006ae0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006ae4:	2900      	cmp	r1, #0
 8006ae6:	d024      	beq.n	8006b32 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ae8:	4942      	ldr	r1, [pc, #264]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006aea:	6849      	ldr	r1, [r1, #4]
 8006aec:	0989      	lsrs	r1, r1, #6
 8006aee:	4608      	mov	r0, r1
 8006af0:	f04f 0100 	mov.w	r1, #0
 8006af4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006af8:	f04f 0500 	mov.w	r5, #0
 8006afc:	ea00 0204 	and.w	r2, r0, r4
 8006b00:	ea01 0305 	and.w	r3, r1, r5
 8006b04:	493d      	ldr	r1, [pc, #244]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x168>)
 8006b06:	fb01 f003 	mul.w	r0, r1, r3
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	fb01 f102 	mul.w	r1, r1, r2
 8006b10:	1844      	adds	r4, r0, r1
 8006b12:	493a      	ldr	r1, [pc, #232]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x168>)
 8006b14:	fba2 0101 	umull	r0, r1, r2, r1
 8006b18:	1863      	adds	r3, r4, r1
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	f7fa f840 	bl	8000ba8 <__aeabi_uldivmod>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e04a      	b.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b32:	4b30      	ldr	r3, [pc, #192]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	099b      	lsrs	r3, r3, #6
 8006b38:	461a      	mov	r2, r3
 8006b3a:	f04f 0300 	mov.w	r3, #0
 8006b3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b42:	f04f 0100 	mov.w	r1, #0
 8006b46:	ea02 0400 	and.w	r4, r2, r0
 8006b4a:	ea03 0501 	and.w	r5, r3, r1
 8006b4e:	4620      	mov	r0, r4
 8006b50:	4629      	mov	r1, r5
 8006b52:	f04f 0200 	mov.w	r2, #0
 8006b56:	f04f 0300 	mov.w	r3, #0
 8006b5a:	014b      	lsls	r3, r1, #5
 8006b5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b60:	0142      	lsls	r2, r0, #5
 8006b62:	4610      	mov	r0, r2
 8006b64:	4619      	mov	r1, r3
 8006b66:	1b00      	subs	r0, r0, r4
 8006b68:	eb61 0105 	sbc.w	r1, r1, r5
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	018b      	lsls	r3, r1, #6
 8006b76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b7a:	0182      	lsls	r2, r0, #6
 8006b7c:	1a12      	subs	r2, r2, r0
 8006b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8006b82:	f04f 0000 	mov.w	r0, #0
 8006b86:	f04f 0100 	mov.w	r1, #0
 8006b8a:	00d9      	lsls	r1, r3, #3
 8006b8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b90:	00d0      	lsls	r0, r2, #3
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	1912      	adds	r2, r2, r4
 8006b98:	eb45 0303 	adc.w	r3, r5, r3
 8006b9c:	f04f 0000 	mov.w	r0, #0
 8006ba0:	f04f 0100 	mov.w	r1, #0
 8006ba4:	0299      	lsls	r1, r3, #10
 8006ba6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006baa:	0290      	lsls	r0, r2, #10
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f04f 0300 	mov.w	r3, #0
 8006bbc:	f7f9 fff4 	bl	8000ba8 <__aeabi_uldivmod>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	0c1b      	lsrs	r3, r3, #16
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be0:	60bb      	str	r3, [r7, #8]
      break;
 8006be2:	e002      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006be4:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x164>)
 8006be6:	60bb      	str	r3, [r7, #8]
      break;
 8006be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bea:	68bb      	ldr	r3, [r7, #8]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	00f42400 	.word	0x00f42400
 8006bfc:	017d7840 	.word	0x017d7840

08006c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c04:	4b03      	ldr	r3, [pc, #12]	; (8006c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c06:	681b      	ldr	r3, [r3, #0]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	20000000 	.word	0x20000000

08006c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c1c:	f7ff fff0 	bl	8006c00 <HAL_RCC_GetHCLKFreq>
 8006c20:	4602      	mov	r2, r0
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	0a9b      	lsrs	r3, r3, #10
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	4903      	ldr	r1, [pc, #12]	; (8006c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c2e:	5ccb      	ldrb	r3, [r1, r3]
 8006c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	0800f058 	.word	0x0800f058

08006c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c44:	f7ff ffdc 	bl	8006c00 <HAL_RCC_GetHCLKFreq>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	0b5b      	lsrs	r3, r3, #13
 8006c50:	f003 0307 	and.w	r3, r3, #7
 8006c54:	4903      	ldr	r1, [pc, #12]	; (8006c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c56:	5ccb      	ldrb	r3, [r1, r3]
 8006c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	40023800 	.word	0x40023800
 8006c64:	0800f058 	.word	0x0800f058

08006c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e041      	b.n	8006cfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fd f94c 	bl	8003f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	f000 fc0c 	bl	80074c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e041      	b.n	8006d9c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f839 	bl	8006da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4619      	mov	r1, r3
 8006d44:	4610      	mov	r0, r2
 8006d46:	f000 fbbd 	bl	80074c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d109      	bne.n	8006ddc <HAL_TIM_PWM_Start+0x24>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	bf14      	ite	ne
 8006dd4:	2301      	movne	r3, #1
 8006dd6:	2300      	moveq	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	e022      	b.n	8006e22 <HAL_TIM_PWM_Start+0x6a>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d109      	bne.n	8006df6 <HAL_TIM_PWM_Start+0x3e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	bf14      	ite	ne
 8006dee:	2301      	movne	r3, #1
 8006df0:	2300      	moveq	r3, #0
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	e015      	b.n	8006e22 <HAL_TIM_PWM_Start+0x6a>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d109      	bne.n	8006e10 <HAL_TIM_PWM_Start+0x58>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	bf14      	ite	ne
 8006e08:	2301      	movne	r3, #1
 8006e0a:	2300      	moveq	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	e008      	b.n	8006e22 <HAL_TIM_PWM_Start+0x6a>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	bf14      	ite	ne
 8006e1c:	2301      	movne	r3, #1
 8006e1e:	2300      	moveq	r3, #0
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e07c      	b.n	8006f24 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d104      	bne.n	8006e3a <HAL_TIM_PWM_Start+0x82>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e38:	e013      	b.n	8006e62 <HAL_TIM_PWM_Start+0xaa>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d104      	bne.n	8006e4a <HAL_TIM_PWM_Start+0x92>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e48:	e00b      	b.n	8006e62 <HAL_TIM_PWM_Start+0xaa>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d104      	bne.n	8006e5a <HAL_TIM_PWM_Start+0xa2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e58:	e003      	b.n	8006e62 <HAL_TIM_PWM_Start+0xaa>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2201      	movs	r2, #1
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fe14 	bl	8007a98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a2d      	ldr	r2, [pc, #180]	; (8006f2c <HAL_TIM_PWM_Start+0x174>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d004      	beq.n	8006e84 <HAL_TIM_PWM_Start+0xcc>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a2c      	ldr	r2, [pc, #176]	; (8006f30 <HAL_TIM_PWM_Start+0x178>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d101      	bne.n	8006e88 <HAL_TIM_PWM_Start+0xd0>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <HAL_TIM_PWM_Start+0xd2>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a22      	ldr	r2, [pc, #136]	; (8006f2c <HAL_TIM_PWM_Start+0x174>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d022      	beq.n	8006eee <HAL_TIM_PWM_Start+0x136>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb0:	d01d      	beq.n	8006eee <HAL_TIM_PWM_Start+0x136>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1f      	ldr	r2, [pc, #124]	; (8006f34 <HAL_TIM_PWM_Start+0x17c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d018      	beq.n	8006eee <HAL_TIM_PWM_Start+0x136>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a1d      	ldr	r2, [pc, #116]	; (8006f38 <HAL_TIM_PWM_Start+0x180>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <HAL_TIM_PWM_Start+0x136>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a1c      	ldr	r2, [pc, #112]	; (8006f3c <HAL_TIM_PWM_Start+0x184>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00e      	beq.n	8006eee <HAL_TIM_PWM_Start+0x136>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a16      	ldr	r2, [pc, #88]	; (8006f30 <HAL_TIM_PWM_Start+0x178>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <HAL_TIM_PWM_Start+0x136>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a18      	ldr	r2, [pc, #96]	; (8006f40 <HAL_TIM_PWM_Start+0x188>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d004      	beq.n	8006eee <HAL_TIM_PWM_Start+0x136>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a16      	ldr	r2, [pc, #88]	; (8006f44 <HAL_TIM_PWM_Start+0x18c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d111      	bne.n	8006f12 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b06      	cmp	r3, #6
 8006efe:	d010      	beq.n	8006f22 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0201 	orr.w	r2, r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f10:	e007      	b.n	8006f22 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0201 	orr.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40010400 	.word	0x40010400
 8006f34:	40000400 	.word	0x40000400
 8006f38:	40000800 	.word	0x40000800
 8006f3c:	40000c00 	.word	0x40000c00
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40001800 	.word	0x40001800

08006f48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e097      	b.n	800708c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d106      	bne.n	8006f76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7fd f839 	bl	8003fe8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f8c:	f023 0307 	bic.w	r3, r3, #7
 8006f90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	f000 fa91 	bl	80074c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006fe8:	f023 030c 	bic.w	r3, r3, #12
 8006fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	4313      	orrs	r3, r2
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	4313      	orrs	r3, r2
 800700a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	011a      	lsls	r2, r3, #4
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	031b      	lsls	r3, r3, #12
 8007018:	4313      	orrs	r3, r2
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800702e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	4313      	orrs	r3, r2
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d110      	bne.n	80070e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d102      	bne.n	80070d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80070ca:	7b7b      	ldrb	r3, [r7, #13]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d001      	beq.n	80070d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e069      	b.n	80071a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070e4:	e031      	b.n	800714a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d110      	bne.n	800710e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d102      	bne.n	80070f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80070f2:	7b3b      	ldrb	r3, [r7, #12]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d001      	beq.n	80070fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e055      	b.n	80071a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800710c:	e01d      	b.n	800714a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d108      	bne.n	8007126 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d105      	bne.n	8007126 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800711a:	7b7b      	ldrb	r3, [r7, #13]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d102      	bne.n	8007126 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007120:	7b3b      	ldrb	r3, [r7, #12]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d001      	beq.n	800712a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e03e      	b.n	80071a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2202      	movs	r2, #2
 800713e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2202      	movs	r2, #2
 8007146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_TIM_Encoder_Start+0xc4>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b04      	cmp	r3, #4
 8007154:	d008      	beq.n	8007168 <HAL_TIM_Encoder_Start+0xd4>
 8007156:	e00f      	b.n	8007178 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2201      	movs	r2, #1
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fc99 	bl	8007a98 <TIM_CCxChannelCmd>
      break;
 8007166:	e016      	b.n	8007196 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2201      	movs	r2, #1
 800716e:	2104      	movs	r1, #4
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fc91 	bl	8007a98 <TIM_CCxChannelCmd>
      break;
 8007176:	e00e      	b.n	8007196 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2201      	movs	r2, #1
 800717e:	2100      	movs	r1, #0
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fc89 	bl	8007a98 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2201      	movs	r2, #1
 800718c:	2104      	movs	r1, #4
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fc82 	bl	8007a98 <TIM_CCxChannelCmd>
      break;
 8007194:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f042 0201 	orr.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d101      	bne.n	80071ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071ca:	2302      	movs	r3, #2
 80071cc:	e0ae      	b.n	800732c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b0c      	cmp	r3, #12
 80071da:	f200 809f 	bhi.w	800731c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007219 	.word	0x08007219
 80071e8:	0800731d 	.word	0x0800731d
 80071ec:	0800731d 	.word	0x0800731d
 80071f0:	0800731d 	.word	0x0800731d
 80071f4:	08007259 	.word	0x08007259
 80071f8:	0800731d 	.word	0x0800731d
 80071fc:	0800731d 	.word	0x0800731d
 8007200:	0800731d 	.word	0x0800731d
 8007204:	0800729b 	.word	0x0800729b
 8007208:	0800731d 	.word	0x0800731d
 800720c:	0800731d 	.word	0x0800731d
 8007210:	0800731d 	.word	0x0800731d
 8007214:	080072db 	.word	0x080072db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f9f0 	bl	8007604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0208 	orr.w	r2, r2, #8
 8007232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0204 	bic.w	r2, r2, #4
 8007242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6999      	ldr	r1, [r3, #24]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	691a      	ldr	r2, [r3, #16]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	619a      	str	r2, [r3, #24]
      break;
 8007256:	e064      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fa40 	bl	80076e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6999      	ldr	r1, [r3, #24]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	021a      	lsls	r2, r3, #8
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	619a      	str	r2, [r3, #24]
      break;
 8007298:	e043      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fa95 	bl	80077d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f042 0208 	orr.w	r2, r2, #8
 80072b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69da      	ldr	r2, [r3, #28]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0204 	bic.w	r2, r2, #4
 80072c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69d9      	ldr	r1, [r3, #28]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	61da      	str	r2, [r3, #28]
      break;
 80072d8:	e023      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fae9 	bl	80078b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69da      	ldr	r2, [r3, #28]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69d9      	ldr	r1, [r3, #28]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	021a      	lsls	r2, r3, #8
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	61da      	str	r2, [r3, #28]
      break;
 800731a:	e002      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	75fb      	strb	r3, [r7, #23]
      break;
 8007320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800732a:	7dfb      	ldrb	r3, [r7, #23]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <HAL_TIM_ConfigClockSource+0x1c>
 800734c:	2302      	movs	r3, #2
 800734e:	e0b4      	b.n	80074ba <HAL_TIM_ConfigClockSource+0x186>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800736e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007388:	d03e      	beq.n	8007408 <HAL_TIM_ConfigClockSource+0xd4>
 800738a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738e:	f200 8087 	bhi.w	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007396:	f000 8086 	beq.w	80074a6 <HAL_TIM_ConfigClockSource+0x172>
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739e:	d87f      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073a0:	2b70      	cmp	r3, #112	; 0x70
 80073a2:	d01a      	beq.n	80073da <HAL_TIM_ConfigClockSource+0xa6>
 80073a4:	2b70      	cmp	r3, #112	; 0x70
 80073a6:	d87b      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073a8:	2b60      	cmp	r3, #96	; 0x60
 80073aa:	d050      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x11a>
 80073ac:	2b60      	cmp	r3, #96	; 0x60
 80073ae:	d877      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073b0:	2b50      	cmp	r3, #80	; 0x50
 80073b2:	d03c      	beq.n	800742e <HAL_TIM_ConfigClockSource+0xfa>
 80073b4:	2b50      	cmp	r3, #80	; 0x50
 80073b6:	d873      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	d058      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x13a>
 80073bc:	2b40      	cmp	r3, #64	; 0x40
 80073be:	d86f      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c0:	2b30      	cmp	r3, #48	; 0x30
 80073c2:	d064      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073c4:	2b30      	cmp	r3, #48	; 0x30
 80073c6:	d86b      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d060      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d867      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d05c      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073d4:	2b10      	cmp	r3, #16
 80073d6:	d05a      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073d8:	e062      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6899      	ldr	r1, [r3, #8]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f000 fb35 	bl	8007a58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	609a      	str	r2, [r3, #8]
      break;
 8007406:	e04f      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6818      	ldr	r0, [r3, #0]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	6899      	ldr	r1, [r3, #8]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f000 fb1e 	bl	8007a58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800742a:	609a      	str	r2, [r3, #8]
      break;
 800742c:	e03c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	461a      	mov	r2, r3
 800743c:	f000 fa92 	bl	8007964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2150      	movs	r1, #80	; 0x50
 8007446:	4618      	mov	r0, r3
 8007448:	f000 faeb 	bl	8007a22 <TIM_ITRx_SetConfig>
      break;
 800744c:	e02c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	461a      	mov	r2, r3
 800745c:	f000 fab1 	bl	80079c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2160      	movs	r1, #96	; 0x60
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fadb 	bl	8007a22 <TIM_ITRx_SetConfig>
      break;
 800746c:	e01c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6859      	ldr	r1, [r3, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	461a      	mov	r2, r3
 800747c:	f000 fa72 	bl	8007964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2140      	movs	r1, #64	; 0x40
 8007486:	4618      	mov	r0, r3
 8007488:	f000 facb 	bl	8007a22 <TIM_ITRx_SetConfig>
      break;
 800748c:	e00c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f000 fac2 	bl	8007a22 <TIM_ITRx_SetConfig>
      break;
 800749e:	e003      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
      break;
 80074a4:	e000      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a40      	ldr	r2, [pc, #256]	; (80075d8 <TIM_Base_SetConfig+0x114>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d013      	beq.n	8007504 <TIM_Base_SetConfig+0x40>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e2:	d00f      	beq.n	8007504 <TIM_Base_SetConfig+0x40>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a3d      	ldr	r2, [pc, #244]	; (80075dc <TIM_Base_SetConfig+0x118>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00b      	beq.n	8007504 <TIM_Base_SetConfig+0x40>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a3c      	ldr	r2, [pc, #240]	; (80075e0 <TIM_Base_SetConfig+0x11c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d007      	beq.n	8007504 <TIM_Base_SetConfig+0x40>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a3b      	ldr	r2, [pc, #236]	; (80075e4 <TIM_Base_SetConfig+0x120>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d003      	beq.n	8007504 <TIM_Base_SetConfig+0x40>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a3a      	ldr	r2, [pc, #232]	; (80075e8 <TIM_Base_SetConfig+0x124>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d108      	bne.n	8007516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a2f      	ldr	r2, [pc, #188]	; (80075d8 <TIM_Base_SetConfig+0x114>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d02b      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007524:	d027      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a2c      	ldr	r2, [pc, #176]	; (80075dc <TIM_Base_SetConfig+0x118>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d023      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a2b      	ldr	r2, [pc, #172]	; (80075e0 <TIM_Base_SetConfig+0x11c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d01f      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a2a      	ldr	r2, [pc, #168]	; (80075e4 <TIM_Base_SetConfig+0x120>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d01b      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a29      	ldr	r2, [pc, #164]	; (80075e8 <TIM_Base_SetConfig+0x124>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d017      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a28      	ldr	r2, [pc, #160]	; (80075ec <TIM_Base_SetConfig+0x128>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d013      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a27      	ldr	r2, [pc, #156]	; (80075f0 <TIM_Base_SetConfig+0x12c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00f      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a26      	ldr	r2, [pc, #152]	; (80075f4 <TIM_Base_SetConfig+0x130>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00b      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a25      	ldr	r2, [pc, #148]	; (80075f8 <TIM_Base_SetConfig+0x134>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d007      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a24      	ldr	r2, [pc, #144]	; (80075fc <TIM_Base_SetConfig+0x138>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a23      	ldr	r2, [pc, #140]	; (8007600 <TIM_Base_SetConfig+0x13c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d108      	bne.n	8007588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800757c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a0a      	ldr	r2, [pc, #40]	; (80075d8 <TIM_Base_SetConfig+0x114>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_Base_SetConfig+0xf8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a0c      	ldr	r2, [pc, #48]	; (80075e8 <TIM_Base_SetConfig+0x124>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d103      	bne.n	80075c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	615a      	str	r2, [r3, #20]
}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	40010000 	.word	0x40010000
 80075dc:	40000400 	.word	0x40000400
 80075e0:	40000800 	.word	0x40000800
 80075e4:	40000c00 	.word	0x40000c00
 80075e8:	40010400 	.word	0x40010400
 80075ec:	40014000 	.word	0x40014000
 80075f0:	40014400 	.word	0x40014400
 80075f4:	40014800 	.word	0x40014800
 80075f8:	40001800 	.word	0x40001800
 80075fc:	40001c00 	.word	0x40001c00
 8007600:	40002000 	.word	0x40002000

08007604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	f023 0201 	bic.w	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0303 	bic.w	r3, r3, #3
 800763a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f023 0302 	bic.w	r3, r3, #2
 800764c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	4313      	orrs	r3, r2
 8007656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a20      	ldr	r2, [pc, #128]	; (80076dc <TIM_OC1_SetConfig+0xd8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d003      	beq.n	8007668 <TIM_OC1_SetConfig+0x64>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a1f      	ldr	r2, [pc, #124]	; (80076e0 <TIM_OC1_SetConfig+0xdc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d10c      	bne.n	8007682 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f023 0308 	bic.w	r3, r3, #8
 800766e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f023 0304 	bic.w	r3, r3, #4
 8007680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a15      	ldr	r2, [pc, #84]	; (80076dc <TIM_OC1_SetConfig+0xd8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d003      	beq.n	8007692 <TIM_OC1_SetConfig+0x8e>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a14      	ldr	r2, [pc, #80]	; (80076e0 <TIM_OC1_SetConfig+0xdc>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d111      	bne.n	80076b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	621a      	str	r2, [r3, #32]
}
 80076d0:	bf00      	nop
 80076d2:	371c      	adds	r7, #28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	40010000 	.word	0x40010000
 80076e0:	40010400 	.word	0x40010400

080076e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f023 0210 	bic.w	r2, r3, #16
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800771a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	021b      	lsls	r3, r3, #8
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	4313      	orrs	r3, r2
 8007726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f023 0320 	bic.w	r3, r3, #32
 800772e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	011b      	lsls	r3, r3, #4
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	4313      	orrs	r3, r2
 800773a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a22      	ldr	r2, [pc, #136]	; (80077c8 <TIM_OC2_SetConfig+0xe4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_OC2_SetConfig+0x68>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a21      	ldr	r2, [pc, #132]	; (80077cc <TIM_OC2_SetConfig+0xe8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d10d      	bne.n	8007768 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007766:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <TIM_OC2_SetConfig+0xe4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d003      	beq.n	8007778 <TIM_OC2_SetConfig+0x94>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a16      	ldr	r2, [pc, #88]	; (80077cc <TIM_OC2_SetConfig+0xe8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d113      	bne.n	80077a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800777e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	4313      	orrs	r3, r2
 800779e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	621a      	str	r2, [r3, #32]
}
 80077ba:	bf00      	nop
 80077bc:	371c      	adds	r7, #28
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40010400 	.word	0x40010400

080077d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 0303 	bic.w	r3, r3, #3
 8007806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	021b      	lsls	r3, r3, #8
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	4313      	orrs	r3, r2
 8007824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a21      	ldr	r2, [pc, #132]	; (80078b0 <TIM_OC3_SetConfig+0xe0>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d003      	beq.n	8007836 <TIM_OC3_SetConfig+0x66>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a20      	ldr	r2, [pc, #128]	; (80078b4 <TIM_OC3_SetConfig+0xe4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d10d      	bne.n	8007852 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800783c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	4313      	orrs	r3, r2
 8007848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a16      	ldr	r2, [pc, #88]	; (80078b0 <TIM_OC3_SetConfig+0xe0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d003      	beq.n	8007862 <TIM_OC3_SetConfig+0x92>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a15      	ldr	r2, [pc, #84]	; (80078b4 <TIM_OC3_SetConfig+0xe4>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d113      	bne.n	800788a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	4313      	orrs	r3, r2
 800787c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4313      	orrs	r3, r2
 8007888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	621a      	str	r2, [r3, #32]
}
 80078a4:	bf00      	nop
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	40010000 	.word	0x40010000
 80078b4:	40010400 	.word	0x40010400

080078b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	031b      	lsls	r3, r3, #12
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a12      	ldr	r2, [pc, #72]	; (800795c <TIM_OC4_SetConfig+0xa4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d003      	beq.n	8007920 <TIM_OC4_SetConfig+0x68>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a11      	ldr	r2, [pc, #68]	; (8007960 <TIM_OC4_SetConfig+0xa8>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d109      	bne.n	8007934 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	019b      	lsls	r3, r3, #6
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40010000 	.word	0x40010000
 8007960:	40010400 	.word	0x40010400

08007964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	f023 0201 	bic.w	r2, r3, #1
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800798e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	4313      	orrs	r3, r2
 8007998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f023 030a 	bic.w	r3, r3, #10
 80079a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	621a      	str	r2, [r3, #32]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b087      	sub	sp, #28
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	f023 0210 	bic.w	r2, r3, #16
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	031b      	lsls	r3, r3, #12
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	621a      	str	r2, [r3, #32]
}
 8007a16:	bf00      	nop
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b085      	sub	sp, #20
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f043 0307 	orr.w	r3, r3, #7
 8007a44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	609a      	str	r2, [r3, #8]
}
 8007a4c:	bf00      	nop
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	021a      	lsls	r2, r3, #8
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	609a      	str	r2, [r3, #8]
}
 8007a8c:	bf00      	nop
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f003 031f 	and.w	r3, r3, #31
 8007aaa:	2201      	movs	r2, #1
 8007aac:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a1a      	ldr	r2, [r3, #32]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	401a      	ands	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6a1a      	ldr	r2, [r3, #32]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f003 031f 	and.w	r3, r3, #31
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	621a      	str	r2, [r3, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
	...

08007ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e05a      	b.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a21      	ldr	r2, [pc, #132]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d022      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b48:	d01d      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d018      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a1b      	ldr	r2, [pc, #108]	; (8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d013      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a1a      	ldr	r2, [pc, #104]	; (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00e      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a18      	ldr	r2, [pc, #96]	; (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d009      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a17      	ldr	r2, [pc, #92]	; (8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d004      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a15      	ldr	r2, [pc, #84]	; (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d10c      	bne.n	8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40010000 	.word	0x40010000
 8007bc4:	40000400 	.word	0x40000400
 8007bc8:	40000800 	.word	0x40000800
 8007bcc:	40000c00 	.word	0x40000c00
 8007bd0:	40010400 	.word	0x40010400
 8007bd4:	40014000 	.word	0x40014000
 8007bd8:	40001800 	.word	0x40001800

08007bdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e03d      	b.n	8007c74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e03f      	b.n	8007d12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7fc fa72 	bl	8004190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2224      	movs	r2, #36	; 0x24
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fddb 	bl	8008880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691a      	ldr	r2, [r3, #16]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	695a      	ldr	r2, [r3, #20]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b08a      	sub	sp, #40	; 0x28
 8007d1e:	af02      	add	r7, sp, #8
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	603b      	str	r3, [r7, #0]
 8007d26:	4613      	mov	r3, r2
 8007d28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	d17c      	bne.n	8007e34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <HAL_UART_Transmit+0x2c>
 8007d40:	88fb      	ldrh	r3, [r7, #6]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e075      	b.n	8007e36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_UART_Transmit+0x3e>
 8007d54:	2302      	movs	r3, #2
 8007d56:	e06e      	b.n	8007e36 <HAL_UART_Transmit+0x11c>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2221      	movs	r2, #33	; 0x21
 8007d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d6e:	f7fc fbf5 	bl	800455c <HAL_GetTick>
 8007d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	88fa      	ldrh	r2, [r7, #6]
 8007d7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d88:	d108      	bne.n	8007d9c <HAL_UART_Transmit+0x82>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	61bb      	str	r3, [r7, #24]
 8007d9a:	e003      	b.n	8007da4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007da0:	2300      	movs	r3, #0
 8007da2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007dac:	e02a      	b.n	8007e04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2200      	movs	r2, #0
 8007db6:	2180      	movs	r1, #128	; 0x80
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 fb1f 	bl	80083fc <UART_WaitOnFlagUntilTimeout>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e036      	b.n	8007e36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10b      	bne.n	8007de6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ddc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	3302      	adds	r3, #2
 8007de2:	61bb      	str	r3, [r7, #24]
 8007de4:	e007      	b.n	8007df6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	781a      	ldrb	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	3301      	adds	r3, #1
 8007df4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1cf      	bne.n	8007dae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2200      	movs	r2, #0
 8007e16:	2140      	movs	r1, #64	; 0x40
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 faef 	bl	80083fc <UART_WaitOnFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e006      	b.n	8007e36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	e000      	b.n	8007e36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007e34:	2302      	movs	r3, #2
  }
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3720      	adds	r7, #32
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b20      	cmp	r3, #32
 8007e56:	d11d      	bne.n	8007e94 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <HAL_UART_Receive_IT+0x26>
 8007e5e:	88fb      	ldrh	r3, [r7, #6]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e016      	b.n	8007e96 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d101      	bne.n	8007e76 <HAL_UART_Receive_IT+0x38>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e00f      	b.n	8007e96 <HAL_UART_Receive_IT+0x58>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e84:	88fb      	ldrh	r3, [r7, #6]
 8007e86:	461a      	mov	r2, r3
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 fb24 	bl	80084d8 <UART_Start_Receive_IT>
 8007e90:	4603      	mov	r3, r0
 8007e92:	e000      	b.n	8007e96 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e94:	2302      	movs	r3, #2
  }
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b0ba      	sub	sp, #232	; 0xe8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10f      	bne.n	8007f06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <HAL_UART_IRQHandler+0x66>
 8007ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fc03 	bl	800870a <UART_Receive_IT>
      return;
 8007f04:	e256      	b.n	80083b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 80de 	beq.w	80080cc <HAL_UART_IRQHandler+0x22c>
 8007f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d106      	bne.n	8007f2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 80d1 	beq.w	80080cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00b      	beq.n	8007f4e <HAL_UART_IRQHandler+0xae>
 8007f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d005      	beq.n	8007f4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f46:	f043 0201 	orr.w	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f52:	f003 0304 	and.w	r3, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00b      	beq.n	8007f72 <HAL_UART_IRQHandler+0xd2>
 8007f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	f043 0202 	orr.w	r2, r3, #2
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00b      	beq.n	8007f96 <HAL_UART_IRQHandler+0xf6>
 8007f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	f043 0204 	orr.w	r2, r3, #4
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f9a:	f003 0308 	and.w	r3, r3, #8
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d011      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x126>
 8007fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d105      	bne.n	8007fba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d005      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	f043 0208 	orr.w	r2, r3, #8
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 81ed 	beq.w	80083aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d008      	beq.n	8007fee <HAL_UART_IRQHandler+0x14e>
 8007fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe0:	f003 0320 	and.w	r3, r3, #32
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fb8e 	bl	800870a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff8:	2b40      	cmp	r3, #64	; 0x40
 8007ffa:	bf0c      	ite	eq
 8007ffc:	2301      	moveq	r3, #1
 8007ffe:	2300      	movne	r3, #0
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	f003 0308 	and.w	r3, r3, #8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d103      	bne.n	800801a <HAL_UART_IRQHandler+0x17a>
 8008012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008016:	2b00      	cmp	r3, #0
 8008018:	d04f      	beq.n	80080ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa96 	bl	800854c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802a:	2b40      	cmp	r3, #64	; 0x40
 800802c:	d141      	bne.n	80080b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3314      	adds	r3, #20
 8008034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800804c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3314      	adds	r3, #20
 8008056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800805a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800805e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1d9      	bne.n	800802e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	2b00      	cmp	r3, #0
 8008080:	d013      	beq.n	80080aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008086:	4a7d      	ldr	r2, [pc, #500]	; (800827c <HAL_UART_IRQHandler+0x3dc>)
 8008088:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808e:	4618      	mov	r0, r3
 8008090:	f7fc ffe1 	bl	8005056 <HAL_DMA_Abort_IT>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d016      	beq.n	80080c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080a4:	4610      	mov	r0, r2
 80080a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a8:	e00e      	b.n	80080c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f990 	bl	80083d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b0:	e00a      	b.n	80080c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f98c 	bl	80083d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b8:	e006      	b.n	80080c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f988 	bl	80083d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80080c6:	e170      	b.n	80083aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c8:	bf00      	nop
    return;
 80080ca:	e16e      	b.n	80083aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	f040 814a 	bne.w	800836a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80080d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080da:	f003 0310 	and.w	r3, r3, #16
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 8143 	beq.w	800836a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e8:	f003 0310 	and.w	r3, r3, #16
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 813c 	beq.w	800836a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080f2:	2300      	movs	r3, #0
 80080f4:	60bb      	str	r3, [r7, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60bb      	str	r3, [r7, #8]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	60bb      	str	r3, [r7, #8]
 8008106:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008112:	2b40      	cmp	r3, #64	; 0x40
 8008114:	f040 80b4 	bne.w	8008280 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008124:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 8140 	beq.w	80083ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008136:	429a      	cmp	r2, r3
 8008138:	f080 8139 	bcs.w	80083ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008142:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800814e:	f000 8088 	beq.w	8008262 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	330c      	adds	r3, #12
 8008158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008160:	e853 3f00 	ldrex	r3, [r3]
 8008164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800816c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	330c      	adds	r3, #12
 800817a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800817e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800818a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1d9      	bne.n	8008152 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3314      	adds	r3, #20
 80081a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081b0:	f023 0301 	bic.w	r3, r3, #1
 80081b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3314      	adds	r3, #20
 80081be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e1      	bne.n	800819e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3314      	adds	r3, #20
 80081e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3314      	adds	r3, #20
 80081fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008200:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008204:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800820c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e3      	bne.n	80081da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	330c      	adds	r3, #12
 8008226:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800822a:	e853 3f00 	ldrex	r3, [r3]
 800822e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008232:	f023 0310 	bic.w	r3, r3, #16
 8008236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	330c      	adds	r3, #12
 8008240:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008244:	65ba      	str	r2, [r7, #88]	; 0x58
 8008246:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008248:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800824a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e3      	bne.n	8008220 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	4618      	mov	r0, r3
 800825e:	f7fc fe8a 	bl	8004f76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800826a:	b29b      	uxth	r3, r3
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	b29b      	uxth	r3, r3
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f8b6 	bl	80083e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008278:	e099      	b.n	80083ae <HAL_UART_IRQHandler+0x50e>
 800827a:	bf00      	nop
 800827c:	08008613 	.word	0x08008613
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008288:	b29b      	uxth	r3, r3
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008294:	b29b      	uxth	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 808b 	beq.w	80083b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800829c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8086 	beq.w	80083b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	330c      	adds	r3, #12
 80082ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b0:	e853 3f00 	ldrex	r3, [r3]
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	330c      	adds	r3, #12
 80082c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80082ca:	647a      	str	r2, [r7, #68]	; 0x44
 80082cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e3      	bne.n	80082a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3314      	adds	r3, #20
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	623b      	str	r3, [r7, #32]
   return(result);
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	f023 0301 	bic.w	r3, r3, #1
 80082f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3314      	adds	r3, #20
 80082fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008302:	633a      	str	r2, [r7, #48]	; 0x30
 8008304:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e3      	bne.n	80082de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	330c      	adds	r3, #12
 800832a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	e853 3f00 	ldrex	r3, [r3]
 8008332:	60fb      	str	r3, [r7, #12]
   return(result);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0310 	bic.w	r3, r3, #16
 800833a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	330c      	adds	r3, #12
 8008344:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008348:	61fa      	str	r2, [r7, #28]
 800834a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834c:	69b9      	ldr	r1, [r7, #24]
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	e841 2300 	strex	r3, r2, [r1]
 8008354:	617b      	str	r3, [r7, #20]
   return(result);
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1e3      	bne.n	8008324 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800835c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f83e 	bl	80083e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008368:	e023      	b.n	80083b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800836a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008372:	2b00      	cmp	r3, #0
 8008374:	d009      	beq.n	800838a <HAL_UART_IRQHandler+0x4ea>
 8008376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800837a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f959 	bl	800863a <UART_Transmit_IT>
    return;
 8008388:	e014      	b.n	80083b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800838a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00e      	beq.n	80083b4 <HAL_UART_IRQHandler+0x514>
 8008396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800839a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d008      	beq.n	80083b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f999 	bl	80086da <UART_EndTransmit_IT>
    return;
 80083a8:	e004      	b.n	80083b4 <HAL_UART_IRQHandler+0x514>
    return;
 80083aa:	bf00      	nop
 80083ac:	e002      	b.n	80083b4 <HAL_UART_IRQHandler+0x514>
      return;
 80083ae:	bf00      	nop
 80083b0:	e000      	b.n	80083b4 <HAL_UART_IRQHandler+0x514>
      return;
 80083b2:	bf00      	nop
  }
}
 80083b4:	37e8      	adds	r7, #232	; 0xe8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop

080083bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b090      	sub	sp, #64	; 0x40
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	4613      	mov	r3, r2
 800840a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800840c:	e050      	b.n	80084b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800840e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008414:	d04c      	beq.n	80084b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <UART_WaitOnFlagUntilTimeout+0x30>
 800841c:	f7fc f89e 	bl	800455c <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008428:	429a      	cmp	r2, r3
 800842a:	d241      	bcs.n	80084b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	330c      	adds	r3, #12
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	e853 3f00 	ldrex	r3, [r3]
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	330c      	adds	r3, #12
 800844a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800844c:	637a      	str	r2, [r7, #52]	; 0x34
 800844e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008450:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008454:	e841 2300 	strex	r3, r2, [r1]
 8008458:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800845a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1e5      	bne.n	800842c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3314      	adds	r3, #20
 8008466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	613b      	str	r3, [r7, #16]
   return(result);
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f023 0301 	bic.w	r3, r3, #1
 8008476:	63bb      	str	r3, [r7, #56]	; 0x38
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3314      	adds	r3, #20
 800847e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008480:	623a      	str	r2, [r7, #32]
 8008482:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	69f9      	ldr	r1, [r7, #28]
 8008486:	6a3a      	ldr	r2, [r7, #32]
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	61bb      	str	r3, [r7, #24]
   return(result);
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e5      	bne.n	8008460 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2220      	movs	r2, #32
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e00f      	b.n	80084d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	4013      	ands	r3, r2
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	429a      	cmp	r2, r3
 80084be:	bf0c      	ite	eq
 80084c0:	2301      	moveq	r3, #1
 80084c2:	2300      	movne	r3, #0
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	461a      	mov	r2, r3
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d09f      	beq.n	800840e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3740      	adds	r7, #64	; 0x40
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	88fa      	ldrh	r2, [r7, #6]
 80084f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	88fa      	ldrh	r2, [r7, #6]
 80084f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2222      	movs	r2, #34	; 0x22
 8008502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800851c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	695a      	ldr	r2, [r3, #20]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0201 	orr.w	r2, r2, #1
 800852c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68da      	ldr	r2, [r3, #12]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0220 	orr.w	r2, r2, #32
 800853c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800854c:	b480      	push	{r7}
 800854e:	b095      	sub	sp, #84	; 0x54
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	330c      	adds	r3, #12
 800855a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800856a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	330c      	adds	r3, #12
 8008572:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008574:	643a      	str	r2, [r7, #64]	; 0x40
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800857a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e5      	bne.n	8008554 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3314      	adds	r3, #20
 800858e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	61fb      	str	r3, [r7, #28]
   return(result);
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f023 0301 	bic.w	r3, r3, #1
 800859e:	64bb      	str	r3, [r7, #72]	; 0x48
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3314      	adds	r3, #20
 80085a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e5      	bne.n	8008588 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d119      	bne.n	80085f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	330c      	adds	r3, #12
 80085ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	f023 0310 	bic.w	r3, r3, #16
 80085da:	647b      	str	r3, [r7, #68]	; 0x44
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	330c      	adds	r3, #12
 80085e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085e4:	61ba      	str	r2, [r7, #24]
 80085e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e8:	6979      	ldr	r1, [r7, #20]
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	e841 2300 	strex	r3, r2, [r1]
 80085f0:	613b      	str	r3, [r7, #16]
   return(result);
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1e5      	bne.n	80085c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008606:	bf00      	nop
 8008608:	3754      	adds	r7, #84	; 0x54
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff fecf 	bl	80083d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008632:	bf00      	nop
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800863a:	b480      	push	{r7}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b21      	cmp	r3, #33	; 0x21
 800864c:	d13e      	bne.n	80086cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008656:	d114      	bne.n	8008682 <UART_Transmit_IT+0x48>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d110      	bne.n	8008682 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008674:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	1c9a      	adds	r2, r3, #2
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	621a      	str	r2, [r3, #32]
 8008680:	e008      	b.n	8008694 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	1c59      	adds	r1, r3, #1
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	6211      	str	r1, [r2, #32]
 800868c:	781a      	ldrb	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008698:	b29b      	uxth	r3, r3
 800869a:	3b01      	subs	r3, #1
 800869c:	b29b      	uxth	r3, r3
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	4619      	mov	r1, r3
 80086a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10f      	bne.n	80086c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68da      	ldr	r2, [r3, #12]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68da      	ldr	r2, [r3, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	e000      	b.n	80086ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086cc:	2302      	movs	r3, #2
  }
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68da      	ldr	r2, [r3, #12]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff fe5e 	bl	80083bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b08c      	sub	sp, #48	; 0x30
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b22      	cmp	r3, #34	; 0x22
 800871c:	f040 80ab 	bne.w	8008876 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008728:	d117      	bne.n	800875a <UART_Receive_IT+0x50>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d113      	bne.n	800875a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	b29b      	uxth	r3, r3
 8008744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008748:	b29a      	uxth	r2, r3
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	1c9a      	adds	r2, r3, #2
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	629a      	str	r2, [r3, #40]	; 0x28
 8008758:	e026      	b.n	80087a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008760:	2300      	movs	r3, #0
 8008762:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800876c:	d007      	beq.n	800877e <UART_Receive_IT+0x74>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10a      	bne.n	800878c <UART_Receive_IT+0x82>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d106      	bne.n	800878c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	b2da      	uxtb	r2, r3
 8008786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008788:	701a      	strb	r2, [r3, #0]
 800878a:	e008      	b.n	800879e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008798:	b2da      	uxtb	r2, r3
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b01      	subs	r3, #1
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	4619      	mov	r1, r3
 80087b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d15a      	bne.n	8008872 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0220 	bic.w	r2, r2, #32
 80087ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68da      	ldr	r2, [r3, #12]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	695a      	ldr	r2, [r3, #20]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0201 	bic.w	r2, r2, #1
 80087ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d135      	bne.n	8008868 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	330c      	adds	r3, #12
 8008808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	613b      	str	r3, [r7, #16]
   return(result);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f023 0310 	bic.w	r3, r3, #16
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	330c      	adds	r3, #12
 8008820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008822:	623a      	str	r2, [r7, #32]
 8008824:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	69f9      	ldr	r1, [r7, #28]
 8008828:	6a3a      	ldr	r2, [r7, #32]
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e5      	bne.n	8008802 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0310 	and.w	r3, r3, #16
 8008840:	2b10      	cmp	r3, #16
 8008842:	d10a      	bne.n	800885a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	60fb      	str	r3, [r7, #12]
 8008858:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff fdbf 	bl	80083e4 <HAL_UARTEx_RxEventCallback>
 8008866:	e002      	b.n	800886e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7f9 fc99 	bl	80021a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	e002      	b.n	8008878 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	e000      	b.n	8008878 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008876:	2302      	movs	r3, #2
  }
}
 8008878:	4618      	mov	r0, r3
 800887a:	3730      	adds	r7, #48	; 0x30
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	b09f      	sub	sp, #124	; 0x7c
 8008886:	af00      	add	r7, sp, #0
 8008888:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800888a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008896:	68d9      	ldr	r1, [r3, #12]
 8008898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	ea40 0301 	orr.w	r3, r0, r1
 80088a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a4:	689a      	ldr	r2, [r3, #8]
 80088a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	431a      	orrs	r2, r3
 80088ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	431a      	orrs	r2, r3
 80088b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80088ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80088c4:	f021 010c 	bic.w	r1, r1, #12
 80088c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088ce:	430b      	orrs	r3, r1
 80088d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80088dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088de:	6999      	ldr	r1, [r3, #24]
 80088e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	ea40 0301 	orr.w	r3, r0, r1
 80088e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4bc5      	ldr	r3, [pc, #788]	; (8008c04 <UART_SetConfig+0x384>)
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d004      	beq.n	80088fe <UART_SetConfig+0x7e>
 80088f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	4bc3      	ldr	r3, [pc, #780]	; (8008c08 <UART_SetConfig+0x388>)
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d103      	bne.n	8008906 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088fe:	f7fe f99f 	bl	8006c40 <HAL_RCC_GetPCLK2Freq>
 8008902:	6778      	str	r0, [r7, #116]	; 0x74
 8008904:	e002      	b.n	800890c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008906:	f7fe f987 	bl	8006c18 <HAL_RCC_GetPCLK1Freq>
 800890a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800890c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008914:	f040 80b6 	bne.w	8008a84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800891a:	461c      	mov	r4, r3
 800891c:	f04f 0500 	mov.w	r5, #0
 8008920:	4622      	mov	r2, r4
 8008922:	462b      	mov	r3, r5
 8008924:	1891      	adds	r1, r2, r2
 8008926:	6439      	str	r1, [r7, #64]	; 0x40
 8008928:	415b      	adcs	r3, r3
 800892a:	647b      	str	r3, [r7, #68]	; 0x44
 800892c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008930:	1912      	adds	r2, r2, r4
 8008932:	eb45 0303 	adc.w	r3, r5, r3
 8008936:	f04f 0000 	mov.w	r0, #0
 800893a:	f04f 0100 	mov.w	r1, #0
 800893e:	00d9      	lsls	r1, r3, #3
 8008940:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008944:	00d0      	lsls	r0, r2, #3
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	1911      	adds	r1, r2, r4
 800894c:	6639      	str	r1, [r7, #96]	; 0x60
 800894e:	416b      	adcs	r3, r5
 8008950:	667b      	str	r3, [r7, #100]	; 0x64
 8008952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	461a      	mov	r2, r3
 8008958:	f04f 0300 	mov.w	r3, #0
 800895c:	1891      	adds	r1, r2, r2
 800895e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008960:	415b      	adcs	r3, r3
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008968:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800896c:	f7f8 f91c 	bl	8000ba8 <__aeabi_uldivmod>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4ba5      	ldr	r3, [pc, #660]	; (8008c0c <UART_SetConfig+0x38c>)
 8008976:	fba3 2302 	umull	r2, r3, r3, r2
 800897a:	095b      	lsrs	r3, r3, #5
 800897c:	011e      	lsls	r6, r3, #4
 800897e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008980:	461c      	mov	r4, r3
 8008982:	f04f 0500 	mov.w	r5, #0
 8008986:	4622      	mov	r2, r4
 8008988:	462b      	mov	r3, r5
 800898a:	1891      	adds	r1, r2, r2
 800898c:	6339      	str	r1, [r7, #48]	; 0x30
 800898e:	415b      	adcs	r3, r3
 8008990:	637b      	str	r3, [r7, #52]	; 0x34
 8008992:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008996:	1912      	adds	r2, r2, r4
 8008998:	eb45 0303 	adc.w	r3, r5, r3
 800899c:	f04f 0000 	mov.w	r0, #0
 80089a0:	f04f 0100 	mov.w	r1, #0
 80089a4:	00d9      	lsls	r1, r3, #3
 80089a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089aa:	00d0      	lsls	r0, r2, #3
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	1911      	adds	r1, r2, r4
 80089b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80089b4:	416b      	adcs	r3, r5
 80089b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	461a      	mov	r2, r3
 80089be:	f04f 0300 	mov.w	r3, #0
 80089c2:	1891      	adds	r1, r2, r2
 80089c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80089c6:	415b      	adcs	r3, r3
 80089c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80089d2:	f7f8 f8e9 	bl	8000ba8 <__aeabi_uldivmod>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4b8c      	ldr	r3, [pc, #560]	; (8008c0c <UART_SetConfig+0x38c>)
 80089dc:	fba3 1302 	umull	r1, r3, r3, r2
 80089e0:	095b      	lsrs	r3, r3, #5
 80089e2:	2164      	movs	r1, #100	; 0x64
 80089e4:	fb01 f303 	mul.w	r3, r1, r3
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	3332      	adds	r3, #50	; 0x32
 80089ee:	4a87      	ldr	r2, [pc, #540]	; (8008c0c <UART_SetConfig+0x38c>)
 80089f0:	fba2 2303 	umull	r2, r3, r2, r3
 80089f4:	095b      	lsrs	r3, r3, #5
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089fc:	441e      	add	r6, r3
 80089fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a00:	4618      	mov	r0, r3
 8008a02:	f04f 0100 	mov.w	r1, #0
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	1894      	adds	r4, r2, r2
 8008a0c:	623c      	str	r4, [r7, #32]
 8008a0e:	415b      	adcs	r3, r3
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
 8008a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a16:	1812      	adds	r2, r2, r0
 8008a18:	eb41 0303 	adc.w	r3, r1, r3
 8008a1c:	f04f 0400 	mov.w	r4, #0
 8008a20:	f04f 0500 	mov.w	r5, #0
 8008a24:	00dd      	lsls	r5, r3, #3
 8008a26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a2a:	00d4      	lsls	r4, r2, #3
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	462b      	mov	r3, r5
 8008a30:	1814      	adds	r4, r2, r0
 8008a32:	653c      	str	r4, [r7, #80]	; 0x50
 8008a34:	414b      	adcs	r3, r1
 8008a36:	657b      	str	r3, [r7, #84]	; 0x54
 8008a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f04f 0300 	mov.w	r3, #0
 8008a42:	1891      	adds	r1, r2, r2
 8008a44:	61b9      	str	r1, [r7, #24]
 8008a46:	415b      	adcs	r3, r3
 8008a48:	61fb      	str	r3, [r7, #28]
 8008a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008a52:	f7f8 f8a9 	bl	8000ba8 <__aeabi_uldivmod>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4b6c      	ldr	r3, [pc, #432]	; (8008c0c <UART_SetConfig+0x38c>)
 8008a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	2164      	movs	r1, #100	; 0x64
 8008a64:	fb01 f303 	mul.w	r3, r1, r3
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	3332      	adds	r3, #50	; 0x32
 8008a6e:	4a67      	ldr	r2, [pc, #412]	; (8008c0c <UART_SetConfig+0x38c>)
 8008a70:	fba2 2303 	umull	r2, r3, r2, r3
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	f003 0207 	and.w	r2, r3, #7
 8008a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4432      	add	r2, r6
 8008a80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a82:	e0b9      	b.n	8008bf8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a86:	461c      	mov	r4, r3
 8008a88:	f04f 0500 	mov.w	r5, #0
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	462b      	mov	r3, r5
 8008a90:	1891      	adds	r1, r2, r2
 8008a92:	6139      	str	r1, [r7, #16]
 8008a94:	415b      	adcs	r3, r3
 8008a96:	617b      	str	r3, [r7, #20]
 8008a98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008a9c:	1912      	adds	r2, r2, r4
 8008a9e:	eb45 0303 	adc.w	r3, r5, r3
 8008aa2:	f04f 0000 	mov.w	r0, #0
 8008aa6:	f04f 0100 	mov.w	r1, #0
 8008aaa:	00d9      	lsls	r1, r3, #3
 8008aac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ab0:	00d0      	lsls	r0, r2, #3
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	eb12 0804 	adds.w	r8, r2, r4
 8008aba:	eb43 0905 	adc.w	r9, r3, r5
 8008abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f04f 0100 	mov.w	r1, #0
 8008ac8:	f04f 0200 	mov.w	r2, #0
 8008acc:	f04f 0300 	mov.w	r3, #0
 8008ad0:	008b      	lsls	r3, r1, #2
 8008ad2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ad6:	0082      	lsls	r2, r0, #2
 8008ad8:	4640      	mov	r0, r8
 8008ada:	4649      	mov	r1, r9
 8008adc:	f7f8 f864 	bl	8000ba8 <__aeabi_uldivmod>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4b49      	ldr	r3, [pc, #292]	; (8008c0c <UART_SetConfig+0x38c>)
 8008ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8008aea:	095b      	lsrs	r3, r3, #5
 8008aec:	011e      	lsls	r6, r3, #4
 8008aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008af0:	4618      	mov	r0, r3
 8008af2:	f04f 0100 	mov.w	r1, #0
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	1894      	adds	r4, r2, r2
 8008afc:	60bc      	str	r4, [r7, #8]
 8008afe:	415b      	adcs	r3, r3
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b06:	1812      	adds	r2, r2, r0
 8008b08:	eb41 0303 	adc.w	r3, r1, r3
 8008b0c:	f04f 0400 	mov.w	r4, #0
 8008b10:	f04f 0500 	mov.w	r5, #0
 8008b14:	00dd      	lsls	r5, r3, #3
 8008b16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b1a:	00d4      	lsls	r4, r2, #3
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	462b      	mov	r3, r5
 8008b20:	1814      	adds	r4, r2, r0
 8008b22:	64bc      	str	r4, [r7, #72]	; 0x48
 8008b24:	414b      	adcs	r3, r1
 8008b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f04f 0100 	mov.w	r1, #0
 8008b32:	f04f 0200 	mov.w	r2, #0
 8008b36:	f04f 0300 	mov.w	r3, #0
 8008b3a:	008b      	lsls	r3, r1, #2
 8008b3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b40:	0082      	lsls	r2, r0, #2
 8008b42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b46:	f7f8 f82f 	bl	8000ba8 <__aeabi_uldivmod>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4b2f      	ldr	r3, [pc, #188]	; (8008c0c <UART_SetConfig+0x38c>)
 8008b50:	fba3 1302 	umull	r1, r3, r3, r2
 8008b54:	095b      	lsrs	r3, r3, #5
 8008b56:	2164      	movs	r1, #100	; 0x64
 8008b58:	fb01 f303 	mul.w	r3, r1, r3
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	3332      	adds	r3, #50	; 0x32
 8008b62:	4a2a      	ldr	r2, [pc, #168]	; (8008c0c <UART_SetConfig+0x38c>)
 8008b64:	fba2 2303 	umull	r2, r3, r2, r3
 8008b68:	095b      	lsrs	r3, r3, #5
 8008b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b6e:	441e      	add	r6, r3
 8008b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b72:	4618      	mov	r0, r3
 8008b74:	f04f 0100 	mov.w	r1, #0
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	1894      	adds	r4, r2, r2
 8008b7e:	603c      	str	r4, [r7, #0]
 8008b80:	415b      	adcs	r3, r3
 8008b82:	607b      	str	r3, [r7, #4]
 8008b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b88:	1812      	adds	r2, r2, r0
 8008b8a:	eb41 0303 	adc.w	r3, r1, r3
 8008b8e:	f04f 0400 	mov.w	r4, #0
 8008b92:	f04f 0500 	mov.w	r5, #0
 8008b96:	00dd      	lsls	r5, r3, #3
 8008b98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b9c:	00d4      	lsls	r4, r2, #3
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	eb12 0a00 	adds.w	sl, r2, r0
 8008ba6:	eb43 0b01 	adc.w	fp, r3, r1
 8008baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f04f 0100 	mov.w	r1, #0
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	f04f 0300 	mov.w	r3, #0
 8008bbc:	008b      	lsls	r3, r1, #2
 8008bbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008bc2:	0082      	lsls	r2, r0, #2
 8008bc4:	4650      	mov	r0, sl
 8008bc6:	4659      	mov	r1, fp
 8008bc8:	f7f7 ffee 	bl	8000ba8 <__aeabi_uldivmod>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <UART_SetConfig+0x38c>)
 8008bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8008bd6:	095b      	lsrs	r3, r3, #5
 8008bd8:	2164      	movs	r1, #100	; 0x64
 8008bda:	fb01 f303 	mul.w	r3, r1, r3
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	011b      	lsls	r3, r3, #4
 8008be2:	3332      	adds	r3, #50	; 0x32
 8008be4:	4a09      	ldr	r2, [pc, #36]	; (8008c0c <UART_SetConfig+0x38c>)
 8008be6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bea:	095b      	lsrs	r3, r3, #5
 8008bec:	f003 020f 	and.w	r2, r3, #15
 8008bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4432      	add	r2, r6
 8008bf6:	609a      	str	r2, [r3, #8]
}
 8008bf8:	bf00      	nop
 8008bfa:	377c      	adds	r7, #124	; 0x7c
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c02:	bf00      	nop
 8008c04:	40011000 	.word	0x40011000
 8008c08:	40011400 	.word	0x40011400
 8008c0c:	51eb851f 	.word	0x51eb851f

08008c10 <__NVIC_SetPriority>:
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	6039      	str	r1, [r7, #0]
 8008c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	db0a      	blt.n	8008c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	490c      	ldr	r1, [pc, #48]	; (8008c5c <__NVIC_SetPriority+0x4c>)
 8008c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c2e:	0112      	lsls	r2, r2, #4
 8008c30:	b2d2      	uxtb	r2, r2
 8008c32:	440b      	add	r3, r1
 8008c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c38:	e00a      	b.n	8008c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	4908      	ldr	r1, [pc, #32]	; (8008c60 <__NVIC_SetPriority+0x50>)
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	f003 030f 	and.w	r3, r3, #15
 8008c46:	3b04      	subs	r3, #4
 8008c48:	0112      	lsls	r2, r2, #4
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	761a      	strb	r2, [r3, #24]
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	e000e100 	.word	0xe000e100
 8008c60:	e000ed00 	.word	0xe000ed00

08008c64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c68:	2100      	movs	r1, #0
 8008c6a:	f06f 0004 	mvn.w	r0, #4
 8008c6e:	f7ff ffcf 	bl	8008c10 <__NVIC_SetPriority>
#endif
}
 8008c72:	bf00      	nop
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c7e:	f3ef 8305 	mrs	r3, IPSR
 8008c82:	603b      	str	r3, [r7, #0]
  return(result);
 8008c84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c8a:	f06f 0305 	mvn.w	r3, #5
 8008c8e:	607b      	str	r3, [r7, #4]
 8008c90:	e00c      	b.n	8008cac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c92:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <osKernelInitialize+0x44>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d105      	bne.n	8008ca6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c9a:	4b08      	ldr	r3, [pc, #32]	; (8008cbc <osKernelInitialize+0x44>)
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	607b      	str	r3, [r7, #4]
 8008ca4:	e002      	b.n	8008cac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008caa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008cac:	687b      	ldr	r3, [r7, #4]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	20000214 	.word	0x20000214

08008cc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cc6:	f3ef 8305 	mrs	r3, IPSR
 8008cca:	603b      	str	r3, [r7, #0]
  return(result);
 8008ccc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <osKernelStart+0x1a>
    stat = osErrorISR;
 8008cd2:	f06f 0305 	mvn.w	r3, #5
 8008cd6:	607b      	str	r3, [r7, #4]
 8008cd8:	e010      	b.n	8008cfc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cda:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <osKernelStart+0x48>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d109      	bne.n	8008cf6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ce2:	f7ff ffbf 	bl	8008c64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008ce6:	4b08      	ldr	r3, [pc, #32]	; (8008d08 <osKernelStart+0x48>)
 8008ce8:	2202      	movs	r2, #2
 8008cea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008cec:	f001 f866 	bl	8009dbc <vTaskStartScheduler>
      stat = osOK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	607b      	str	r3, [r7, #4]
 8008cf4:	e002      	b.n	8008cfc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008cfc:	687b      	ldr	r3, [r7, #4]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20000214 	.word	0x20000214

08008d0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08e      	sub	sp, #56	; 0x38
 8008d10:	af04      	add	r7, sp, #16
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d1c:	f3ef 8305 	mrs	r3, IPSR
 8008d20:	617b      	str	r3, [r7, #20]
  return(result);
 8008d22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d17e      	bne.n	8008e26 <osThreadNew+0x11a>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d07b      	beq.n	8008e26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008d2e:	2380      	movs	r3, #128	; 0x80
 8008d30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008d32:	2318      	movs	r3, #24
 8008d34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d045      	beq.n	8008dd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <osThreadNew+0x48>
        name = attr->name;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d008      	beq.n	8008d7a <osThreadNew+0x6e>
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	2b38      	cmp	r3, #56	; 0x38
 8008d6c:	d805      	bhi.n	8008d7a <osThreadNew+0x6e>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <osThreadNew+0x72>
        return (NULL);
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e054      	b.n	8008e28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	089b      	lsrs	r3, r3, #2
 8008d8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00e      	beq.n	8008db4 <osThreadNew+0xa8>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	2b5b      	cmp	r3, #91	; 0x5b
 8008d9c:	d90a      	bls.n	8008db4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d006      	beq.n	8008db4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <osThreadNew+0xa8>
        mem = 1;
 8008dae:	2301      	movs	r3, #1
 8008db0:	61bb      	str	r3, [r7, #24]
 8008db2:	e010      	b.n	8008dd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10c      	bne.n	8008dd6 <osThreadNew+0xca>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d108      	bne.n	8008dd6 <osThreadNew+0xca>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d104      	bne.n	8008dd6 <osThreadNew+0xca>
          mem = 0;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	61bb      	str	r3, [r7, #24]
 8008dd0:	e001      	b.n	8008dd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d110      	bne.n	8008dfe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008de4:	9202      	str	r2, [sp, #8]
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	6a3a      	ldr	r2, [r7, #32]
 8008df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f000 fe0c 	bl	8009a10 <xTaskCreateStatic>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	e013      	b.n	8008e26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d110      	bne.n	8008e26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	f107 0310 	add.w	r3, r7, #16
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 fe57 	bl	8009aca <xTaskCreate>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d001      	beq.n	8008e26 <osThreadNew+0x11a>
            hTask = NULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e26:	693b      	ldr	r3, [r7, #16]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3728      	adds	r7, #40	; 0x28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e38:	f3ef 8305 	mrs	r3, IPSR
 8008e3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d003      	beq.n	8008e4c <osDelay+0x1c>
    stat = osErrorISR;
 8008e44:	f06f 0305 	mvn.w	r3, #5
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	e007      	b.n	8008e5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d002      	beq.n	8008e5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 ff7c 	bl	8009d54 <vTaskDelay>
    }
  }

  return (stat);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4a07      	ldr	r2, [pc, #28]	; (8008e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4a06      	ldr	r2, [pc, #24]	; (8008e98 <vApplicationGetIdleTaskMemory+0x30>)
 8008e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2280      	movs	r2, #128	; 0x80
 8008e84:	601a      	str	r2, [r3, #0]
}
 8008e86:	bf00      	nop
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	20000218 	.word	0x20000218
 8008e98:	20000274 	.word	0x20000274

08008e9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4a07      	ldr	r2, [pc, #28]	; (8008ec8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008eac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4a06      	ldr	r2, [pc, #24]	; (8008ecc <vApplicationGetTimerTaskMemory+0x30>)
 8008eb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008eba:	601a      	str	r2, [r3, #0]
}
 8008ebc:	bf00      	nop
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr
 8008ec8:	20000474 	.word	0x20000474
 8008ecc:	200004d0 	.word	0x200004d0

08008ed0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f103 0208 	add.w	r2, r3, #8
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f103 0208 	add.w	r2, r3, #8
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f103 0208 	add.w	r2, r3, #8
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b085      	sub	sp, #20
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	689a      	ldr	r2, [r3, #8]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	601a      	str	r2, [r3, #0]
}
 8008f66:	bf00      	nop
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f72:	b480      	push	{r7}
 8008f74:	b085      	sub	sp, #20
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f88:	d103      	bne.n	8008f92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	e00c      	b.n	8008fac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3308      	adds	r3, #8
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	e002      	b.n	8008fa0 <vListInsert+0x2e>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d2f6      	bcs.n	8008f9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	601a      	str	r2, [r3, #0]
}
 8008fd8:	bf00      	nop
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6892      	ldr	r2, [r2, #8]
 8008ffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	6852      	ldr	r2, [r2, #4]
 8009004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	429a      	cmp	r2, r3
 800900e:	d103      	bne.n	8009018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	689a      	ldr	r2, [r3, #8]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	1e5a      	subs	r2, r3, #1
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009062:	f002 f84f 	bl	800b104 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906e:	68f9      	ldr	r1, [r7, #12]
 8009070:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009072:	fb01 f303 	mul.w	r3, r1, r3
 8009076:	441a      	add	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009092:	3b01      	subs	r3, #1
 8009094:	68f9      	ldr	r1, [r7, #12]
 8009096:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009098:	fb01 f303 	mul.w	r3, r1, r3
 800909c:	441a      	add	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	22ff      	movs	r2, #255	; 0xff
 80090a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	22ff      	movs	r2, #255	; 0xff
 80090ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d114      	bne.n	80090e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01a      	beq.n	80090f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3310      	adds	r3, #16
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 f903 	bl	800a2d0 <xTaskRemoveFromEventList>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d012      	beq.n	80090f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090d0:	4b0c      	ldr	r3, [pc, #48]	; (8009104 <xQueueGenericReset+0xcc>)
 80090d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	e009      	b.n	80090f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3310      	adds	r3, #16
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff fef2 	bl	8008ed0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	3324      	adds	r3, #36	; 0x24
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff feed 	bl	8008ed0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090f6:	f002 f835 	bl	800b164 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090fa:	2301      	movs	r3, #1
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	e000ed04 	.word	0xe000ed04

08009108 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08e      	sub	sp, #56	; 0x38
 800910c:	af02      	add	r7, sp, #8
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10a      	bne.n	8009132 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10a      	bne.n	800914e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	627b      	str	r3, [r7, #36]	; 0x24
}
 800914a:	bf00      	nop
 800914c:	e7fe      	b.n	800914c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <xQueueGenericCreateStatic+0x52>
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <xQueueGenericCreateStatic+0x56>
 800915a:	2301      	movs	r3, #1
 800915c:	e000      	b.n	8009160 <xQueueGenericCreateStatic+0x58>
 800915e:	2300      	movs	r3, #0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	623b      	str	r3, [r7, #32]
}
 8009176:	bf00      	nop
 8009178:	e7fe      	b.n	8009178 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d102      	bne.n	8009186 <xQueueGenericCreateStatic+0x7e>
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <xQueueGenericCreateStatic+0x82>
 8009186:	2301      	movs	r3, #1
 8009188:	e000      	b.n	800918c <xQueueGenericCreateStatic+0x84>
 800918a:	2300      	movs	r3, #0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10a      	bne.n	80091a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	61fb      	str	r3, [r7, #28]
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80091a6:	2350      	movs	r3, #80	; 0x50
 80091a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b50      	cmp	r3, #80	; 0x50
 80091ae:	d00a      	beq.n	80091c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	61bb      	str	r3, [r7, #24]
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00d      	beq.n	80091ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	4613      	mov	r3, r2
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	68b9      	ldr	r1, [r7, #8]
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 f805 	bl	80091f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3730      	adds	r7, #48	; 0x30
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d103      	bne.n	8009214 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	e002      	b.n	800921a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009226:	2101      	movs	r1, #1
 8009228:	69b8      	ldr	r0, [r7, #24]
 800922a:	f7ff ff05 	bl	8009038 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	78fa      	ldrb	r2, [r7, #3]
 8009232:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009236:	bf00      	nop
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08e      	sub	sp, #56	; 0x38
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800924e:	2300      	movs	r3, #0
 8009250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <xQueueGenericSend+0x32>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800926e:	bf00      	nop
 8009270:	e7fe      	b.n	8009270 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d103      	bne.n	8009280 <xQueueGenericSend+0x40>
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <xQueueGenericSend+0x44>
 8009280:	2301      	movs	r3, #1
 8009282:	e000      	b.n	8009286 <xQueueGenericSend+0x46>
 8009284:	2300      	movs	r3, #0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10a      	bne.n	80092a0 <xQueueGenericSend+0x60>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800929c:	bf00      	nop
 800929e:	e7fe      	b.n	800929e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d103      	bne.n	80092ae <xQueueGenericSend+0x6e>
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d101      	bne.n	80092b2 <xQueueGenericSend+0x72>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e000      	b.n	80092b4 <xQueueGenericSend+0x74>
 80092b2:	2300      	movs	r3, #0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10a      	bne.n	80092ce <xQueueGenericSend+0x8e>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	623b      	str	r3, [r7, #32]
}
 80092ca:	bf00      	nop
 80092cc:	e7fe      	b.n	80092cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ce:	f001 f9bd 	bl	800a64c <xTaskGetSchedulerState>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d102      	bne.n	80092de <xQueueGenericSend+0x9e>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <xQueueGenericSend+0xa2>
 80092de:	2301      	movs	r3, #1
 80092e0:	e000      	b.n	80092e4 <xQueueGenericSend+0xa4>
 80092e2:	2300      	movs	r3, #0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <xQueueGenericSend+0xbe>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	61fb      	str	r3, [r7, #28]
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092fe:	f001 ff01 	bl	800b104 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800930a:	429a      	cmp	r2, r3
 800930c:	d302      	bcc.n	8009314 <xQueueGenericSend+0xd4>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b02      	cmp	r3, #2
 8009312:	d129      	bne.n	8009368 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	68b9      	ldr	r1, [r7, #8]
 8009318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800931a:	f000 fa0b 	bl	8009734 <prvCopyDataToQueue>
 800931e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	d010      	beq.n	800934a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	3324      	adds	r3, #36	; 0x24
 800932c:	4618      	mov	r0, r3
 800932e:	f000 ffcf 	bl	800a2d0 <xTaskRemoveFromEventList>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d013      	beq.n	8009360 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009338:	4b3f      	ldr	r3, [pc, #252]	; (8009438 <xQueueGenericSend+0x1f8>)
 800933a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	e00a      	b.n	8009360 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	2b00      	cmp	r3, #0
 800934e:	d007      	beq.n	8009360 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009350:	4b39      	ldr	r3, [pc, #228]	; (8009438 <xQueueGenericSend+0x1f8>)
 8009352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009360:	f001 ff00 	bl	800b164 <vPortExitCritical>
				return pdPASS;
 8009364:	2301      	movs	r3, #1
 8009366:	e063      	b.n	8009430 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d103      	bne.n	8009376 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800936e:	f001 fef9 	bl	800b164 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009372:	2300      	movs	r3, #0
 8009374:	e05c      	b.n	8009430 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009378:	2b00      	cmp	r3, #0
 800937a:	d106      	bne.n	800938a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800937c:	f107 0314 	add.w	r3, r7, #20
 8009380:	4618      	mov	r0, r3
 8009382:	f001 f809 	bl	800a398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009386:	2301      	movs	r3, #1
 8009388:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800938a:	f001 feeb 	bl	800b164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800938e:	f000 fd7b 	bl	8009e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009392:	f001 feb7 	bl	800b104 <vPortEnterCritical>
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800939c:	b25b      	sxtb	r3, r3
 800939e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093a2:	d103      	bne.n	80093ac <xQueueGenericSend+0x16c>
 80093a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093b2:	b25b      	sxtb	r3, r3
 80093b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b8:	d103      	bne.n	80093c2 <xQueueGenericSend+0x182>
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093c2:	f001 fecf 	bl	800b164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093c6:	1d3a      	adds	r2, r7, #4
 80093c8:	f107 0314 	add.w	r3, r7, #20
 80093cc:	4611      	mov	r1, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 fff8 	bl	800a3c4 <xTaskCheckForTimeOut>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d124      	bne.n	8009424 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093dc:	f000 faa2 	bl	8009924 <prvIsQueueFull>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d018      	beq.n	8009418 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e8:	3310      	adds	r3, #16
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	4611      	mov	r1, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 ff1e 	bl	800a230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093f6:	f000 fa2d 	bl	8009854 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093fa:	f000 fd53 	bl	8009ea4 <xTaskResumeAll>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	f47f af7c 	bne.w	80092fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009406:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <xQueueGenericSend+0x1f8>)
 8009408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	e772      	b.n	80092fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800941a:	f000 fa1b 	bl	8009854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800941e:	f000 fd41 	bl	8009ea4 <xTaskResumeAll>
 8009422:	e76c      	b.n	80092fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009426:	f000 fa15 	bl	8009854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800942a:	f000 fd3b 	bl	8009ea4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800942e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009430:	4618      	mov	r0, r3
 8009432:	3738      	adds	r7, #56	; 0x38
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	e000ed04 	.word	0xe000ed04

0800943c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b090      	sub	sp, #64	; 0x40
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10a      	bne.n	800946a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009466:	bf00      	nop
 8009468:	e7fe      	b.n	8009468 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d103      	bne.n	8009478 <xQueueGenericSendFromISR+0x3c>
 8009470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <xQueueGenericSendFromISR+0x40>
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <xQueueGenericSendFromISR+0x42>
 800947c:	2300      	movs	r3, #0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10a      	bne.n	8009498 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009494:	bf00      	nop
 8009496:	e7fe      	b.n	8009496 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2b02      	cmp	r3, #2
 800949c:	d103      	bne.n	80094a6 <xQueueGenericSendFromISR+0x6a>
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <xQueueGenericSendFromISR+0x6e>
 80094a6:	2301      	movs	r3, #1
 80094a8:	e000      	b.n	80094ac <xQueueGenericSendFromISR+0x70>
 80094aa:	2300      	movs	r3, #0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10a      	bne.n	80094c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	623b      	str	r3, [r7, #32]
}
 80094c2:	bf00      	nop
 80094c4:	e7fe      	b.n	80094c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094c6:	f001 feff 	bl	800b2c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094ca:	f3ef 8211 	mrs	r2, BASEPRI
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	61fa      	str	r2, [r7, #28]
 80094e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d302      	bcc.n	80094f8 <xQueueGenericSendFromISR+0xbc>
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d12f      	bne.n	8009558 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009506:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	68b9      	ldr	r1, [r7, #8]
 800950c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800950e:	f000 f911 	bl	8009734 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009512:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800951a:	d112      	bne.n	8009542 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	2b00      	cmp	r3, #0
 8009522:	d016      	beq.n	8009552 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	3324      	adds	r3, #36	; 0x24
 8009528:	4618      	mov	r0, r3
 800952a:	f000 fed1 	bl	800a2d0 <xTaskRemoveFromEventList>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00e      	beq.n	8009552 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00b      	beq.n	8009552 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	e007      	b.n	8009552 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009546:	3301      	adds	r3, #1
 8009548:	b2db      	uxtb	r3, r3
 800954a:	b25a      	sxtb	r2, r3
 800954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009552:	2301      	movs	r3, #1
 8009554:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009556:	e001      	b.n	800955c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009558:	2300      	movs	r3, #0
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800955c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009566:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800956a:	4618      	mov	r0, r3
 800956c:	3740      	adds	r7, #64	; 0x40
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08c      	sub	sp, #48	; 0x30
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009580:	2300      	movs	r3, #0
 8009582:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10a      	bne.n	80095a4 <xQueueReceive+0x30>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	623b      	str	r3, [r7, #32]
}
 80095a0:	bf00      	nop
 80095a2:	e7fe      	b.n	80095a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d103      	bne.n	80095b2 <xQueueReceive+0x3e>
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <xQueueReceive+0x42>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e000      	b.n	80095b8 <xQueueReceive+0x44>
 80095b6:	2300      	movs	r3, #0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <xQueueReceive+0x5e>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	61fb      	str	r3, [r7, #28]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095d2:	f001 f83b 	bl	800a64c <xTaskGetSchedulerState>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d102      	bne.n	80095e2 <xQueueReceive+0x6e>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <xQueueReceive+0x72>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e000      	b.n	80095e8 <xQueueReceive+0x74>
 80095e6:	2300      	movs	r3, #0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <xQueueReceive+0x8e>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	61bb      	str	r3, [r7, #24]
}
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009602:	f001 fd7f 	bl	800b104 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01f      	beq.n	8009652 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009612:	68b9      	ldr	r1, [r7, #8]
 8009614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009616:	f000 f8f7 	bl	8009808 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	1e5a      	subs	r2, r3, #1
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00f      	beq.n	800964a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962c:	3310      	adds	r3, #16
 800962e:	4618      	mov	r0, r3
 8009630:	f000 fe4e 	bl	800a2d0 <xTaskRemoveFromEventList>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d007      	beq.n	800964a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800963a:	4b3d      	ldr	r3, [pc, #244]	; (8009730 <xQueueReceive+0x1bc>)
 800963c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800964a:	f001 fd8b 	bl	800b164 <vPortExitCritical>
				return pdPASS;
 800964e:	2301      	movs	r3, #1
 8009650:	e069      	b.n	8009726 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d103      	bne.n	8009660 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009658:	f001 fd84 	bl	800b164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800965c:	2300      	movs	r3, #0
 800965e:	e062      	b.n	8009726 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009662:	2b00      	cmp	r3, #0
 8009664:	d106      	bne.n	8009674 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009666:	f107 0310 	add.w	r3, r7, #16
 800966a:	4618      	mov	r0, r3
 800966c:	f000 fe94 	bl	800a398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009670:	2301      	movs	r3, #1
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009674:	f001 fd76 	bl	800b164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009678:	f000 fc06 	bl	8009e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800967c:	f001 fd42 	bl	800b104 <vPortEnterCritical>
 8009680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009686:	b25b      	sxtb	r3, r3
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800968c:	d103      	bne.n	8009696 <xQueueReceive+0x122>
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800969c:	b25b      	sxtb	r3, r3
 800969e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096a2:	d103      	bne.n	80096ac <xQueueReceive+0x138>
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096ac:	f001 fd5a 	bl	800b164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096b0:	1d3a      	adds	r2, r7, #4
 80096b2:	f107 0310 	add.w	r3, r7, #16
 80096b6:	4611      	mov	r1, r2
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 fe83 	bl	800a3c4 <xTaskCheckForTimeOut>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d123      	bne.n	800970c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096c6:	f000 f917 	bl	80098f8 <prvIsQueueEmpty>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d017      	beq.n	8009700 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	3324      	adds	r3, #36	; 0x24
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fda9 	bl	800a230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e0:	f000 f8b8 	bl	8009854 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096e4:	f000 fbde 	bl	8009ea4 <xTaskResumeAll>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d189      	bne.n	8009602 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80096ee:	4b10      	ldr	r3, [pc, #64]	; (8009730 <xQueueReceive+0x1bc>)
 80096f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	e780      	b.n	8009602 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009702:	f000 f8a7 	bl	8009854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009706:	f000 fbcd 	bl	8009ea4 <xTaskResumeAll>
 800970a:	e77a      	b.n	8009602 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800970c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800970e:	f000 f8a1 	bl	8009854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009712:	f000 fbc7 	bl	8009ea4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009718:	f000 f8ee 	bl	80098f8 <prvIsQueueEmpty>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	f43f af6f 	beq.w	8009602 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009724:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009726:	4618      	mov	r0, r3
 8009728:	3730      	adds	r7, #48	; 0x30
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009748:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10d      	bne.n	800976e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d14d      	bne.n	80097f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 ff92 	bl	800a688 <xTaskPriorityDisinherit>
 8009764:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	609a      	str	r2, [r3, #8]
 800976c:	e043      	b.n	80097f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d119      	bne.n	80097a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6858      	ldr	r0, [r3, #4]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	461a      	mov	r2, r3
 800977e:	68b9      	ldr	r1, [r7, #8]
 8009780:	f001 fff6 	bl	800b770 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978c:	441a      	add	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	429a      	cmp	r2, r3
 800979c:	d32b      	bcc.n	80097f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	605a      	str	r2, [r3, #4]
 80097a6:	e026      	b.n	80097f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	68d8      	ldr	r0, [r3, #12]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b0:	461a      	mov	r2, r3
 80097b2:	68b9      	ldr	r1, [r7, #8]
 80097b4:	f001 ffdc 	bl	800b770 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	68da      	ldr	r2, [r3, #12]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c0:	425b      	negs	r3, r3
 80097c2:	441a      	add	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	68da      	ldr	r2, [r3, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d207      	bcs.n	80097e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	689a      	ldr	r2, [r3, #8]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097dc:	425b      	negs	r3, r3
 80097de:	441a      	add	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d105      	bne.n	80097f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	3b01      	subs	r3, #1
 80097f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80097fe:	697b      	ldr	r3, [r7, #20]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	d018      	beq.n	800984c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68da      	ldr	r2, [r3, #12]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	441a      	add	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	429a      	cmp	r2, r3
 8009832:	d303      	bcc.n	800983c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68d9      	ldr	r1, [r3, #12]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009844:	461a      	mov	r2, r3
 8009846:	6838      	ldr	r0, [r7, #0]
 8009848:	f001 ff92 	bl	800b770 <memcpy>
	}
}
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800985c:	f001 fc52 	bl	800b104 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009866:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009868:	e011      	b.n	800988e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	2b00      	cmp	r3, #0
 8009870:	d012      	beq.n	8009898 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	3324      	adds	r3, #36	; 0x24
 8009876:	4618      	mov	r0, r3
 8009878:	f000 fd2a 	bl	800a2d0 <xTaskRemoveFromEventList>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009882:	f000 fe01 	bl	800a488 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	3b01      	subs	r3, #1
 800988a:	b2db      	uxtb	r3, r3
 800988c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800988e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009892:	2b00      	cmp	r3, #0
 8009894:	dce9      	bgt.n	800986a <prvUnlockQueue+0x16>
 8009896:	e000      	b.n	800989a <prvUnlockQueue+0x46>
					break;
 8009898:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	22ff      	movs	r2, #255	; 0xff
 800989e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80098a2:	f001 fc5f 	bl	800b164 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098a6:	f001 fc2d 	bl	800b104 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098b2:	e011      	b.n	80098d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d012      	beq.n	80098e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3310      	adds	r3, #16
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fd05 	bl	800a2d0 <xTaskRemoveFromEventList>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098cc:	f000 fddc 	bl	800a488 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	dce9      	bgt.n	80098b4 <prvUnlockQueue+0x60>
 80098e0:	e000      	b.n	80098e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	22ff      	movs	r2, #255	; 0xff
 80098e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80098ec:	f001 fc3a 	bl	800b164 <vPortExitCritical>
}
 80098f0:	bf00      	nop
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009900:	f001 fc00 	bl	800b104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800990c:	2301      	movs	r3, #1
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	e001      	b.n	8009916 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009916:	f001 fc25 	bl	800b164 <vPortExitCritical>

	return xReturn;
 800991a:	68fb      	ldr	r3, [r7, #12]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800992c:	f001 fbea 	bl	800b104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009938:	429a      	cmp	r2, r3
 800993a:	d102      	bne.n	8009942 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	e001      	b.n	8009946 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009946:	f001 fc0d 	bl	800b164 <vPortExitCritical>

	return xReturn;
 800994a:	68fb      	ldr	r3, [r7, #12]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800995e:	2300      	movs	r3, #0
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	e014      	b.n	800998e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009964:	4a0f      	ldr	r2, [pc, #60]	; (80099a4 <vQueueAddToRegistry+0x50>)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10b      	bne.n	8009988 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009970:	490c      	ldr	r1, [pc, #48]	; (80099a4 <vQueueAddToRegistry+0x50>)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800997a:	4a0a      	ldr	r2, [pc, #40]	; (80099a4 <vQueueAddToRegistry+0x50>)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	4413      	add	r3, r2
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009986:	e006      	b.n	8009996 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3301      	adds	r3, #1
 800998c:	60fb      	str	r3, [r7, #12]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b07      	cmp	r3, #7
 8009992:	d9e7      	bls.n	8009964 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009994:	bf00      	nop
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	200051c0 	.word	0x200051c0

080099a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80099b8:	f001 fba4 	bl	800b104 <vPortEnterCritical>
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099c2:	b25b      	sxtb	r3, r3
 80099c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099c8:	d103      	bne.n	80099d2 <vQueueWaitForMessageRestricted+0x2a>
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099d8:	b25b      	sxtb	r3, r3
 80099da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099de:	d103      	bne.n	80099e8 <vQueueWaitForMessageRestricted+0x40>
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099e8:	f001 fbbc 	bl	800b164 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d106      	bne.n	8009a02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	3324      	adds	r3, #36	; 0x24
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fc3b 	bl	800a278 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a02:	6978      	ldr	r0, [r7, #20]
 8009a04:	f7ff ff26 	bl	8009854 <prvUnlockQueue>
	}
 8009a08:	bf00      	nop
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b08e      	sub	sp, #56	; 0x38
 8009a14:	af04      	add	r7, sp, #16
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	623b      	str	r3, [r7, #32]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10a      	bne.n	8009a56 <xTaskCreateStatic+0x46>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	61fb      	str	r3, [r7, #28]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a56:	235c      	movs	r3, #92	; 0x5c
 8009a58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	2b5c      	cmp	r3, #92	; 0x5c
 8009a5e:	d00a      	beq.n	8009a76 <xTaskCreateStatic+0x66>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	61bb      	str	r3, [r7, #24]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d01e      	beq.n	8009abc <xTaskCreateStatic+0xac>
 8009a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d01b      	beq.n	8009abc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a90:	2202      	movs	r2, #2
 8009a92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a96:	2300      	movs	r3, #0
 8009a98:	9303      	str	r3, [sp, #12]
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	9302      	str	r3, [sp, #8]
 8009a9e:	f107 0314 	add.w	r3, r7, #20
 8009aa2:	9301      	str	r3, [sp, #4]
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	68b9      	ldr	r1, [r7, #8]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 f850 	bl	8009b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ab6:	f000 f8dd 	bl	8009c74 <prvAddNewTaskToReadyList>
 8009aba:	e001      	b.n	8009ac0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009abc:	2300      	movs	r3, #0
 8009abe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ac0:	697b      	ldr	r3, [r7, #20]
	}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3728      	adds	r7, #40	; 0x28
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b08c      	sub	sp, #48	; 0x30
 8009ace:	af04      	add	r7, sp, #16
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	603b      	str	r3, [r7, #0]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ada:	88fb      	ldrh	r3, [r7, #6]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f001 fc32 	bl	800b348 <pvPortMalloc>
 8009ae4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00e      	beq.n	8009b0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009aec:	205c      	movs	r0, #92	; 0x5c
 8009aee:	f001 fc2b 	bl	800b348 <pvPortMalloc>
 8009af2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	631a      	str	r2, [r3, #48]	; 0x30
 8009b00:	e005      	b.n	8009b0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b02:	6978      	ldr	r0, [r7, #20]
 8009b04:	f001 fcec 	bl	800b4e0 <vPortFree>
 8009b08:	e001      	b.n	8009b0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d017      	beq.n	8009b44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b1c:	88fa      	ldrh	r2, [r7, #6]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	9303      	str	r3, [sp, #12]
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	9302      	str	r3, [sp, #8]
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b28:	9301      	str	r3, [sp, #4]
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	68b9      	ldr	r1, [r7, #8]
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 f80e 	bl	8009b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b38:	69f8      	ldr	r0, [r7, #28]
 8009b3a:	f000 f89b 	bl	8009c74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	61bb      	str	r3, [r7, #24]
 8009b42:	e002      	b.n	8009b4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3720      	adds	r7, #32
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	21a5      	movs	r1, #165	; 0xa5
 8009b6e:	f001 fe27 	bl	800b7c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	f023 0307 	bic.w	r3, r3, #7
 8009b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	f003 0307 	and.w	r3, r3, #7
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <prvInitialiseNewTask+0x58>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	617b      	str	r3, [r7, #20]
}
 8009ba8:	bf00      	nop
 8009baa:	e7fe      	b.n	8009baa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d01f      	beq.n	8009bf2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	61fb      	str	r3, [r7, #28]
 8009bb6:	e012      	b.n	8009bde <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	7819      	ldrb	r1, [r3, #0]
 8009bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	3334      	adds	r3, #52	; 0x34
 8009bc8:	460a      	mov	r2, r1
 8009bca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d006      	beq.n	8009be6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	61fb      	str	r3, [r7, #28]
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	2b0f      	cmp	r3, #15
 8009be2:	d9e9      	bls.n	8009bb8 <prvInitialiseNewTask+0x64>
 8009be4:	e000      	b.n	8009be8 <prvInitialiseNewTask+0x94>
			{
				break;
 8009be6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bf0:	e003      	b.n	8009bfa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfc:	2b37      	cmp	r3, #55	; 0x37
 8009bfe:	d901      	bls.n	8009c04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c00:	2337      	movs	r3, #55	; 0x37
 8009c02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c12:	2200      	movs	r2, #0
 8009c14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff f978 	bl	8008f10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	3318      	adds	r3, #24
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff f973 	bl	8008f10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	2200      	movs	r2, #0
 8009c44:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	68f9      	ldr	r1, [r7, #12]
 8009c52:	69b8      	ldr	r0, [r7, #24]
 8009c54:	f001 f928 	bl	800aea8 <pxPortInitialiseStack>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d002      	beq.n	8009c6a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c6a:	bf00      	nop
 8009c6c:	3720      	adds	r7, #32
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
	...

08009c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c7c:	f001 fa42 	bl	800b104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c80:	4b2d      	ldr	r3, [pc, #180]	; (8009d38 <prvAddNewTaskToReadyList+0xc4>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3301      	adds	r3, #1
 8009c86:	4a2c      	ldr	r2, [pc, #176]	; (8009d38 <prvAddNewTaskToReadyList+0xc4>)
 8009c88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c8a:	4b2c      	ldr	r3, [pc, #176]	; (8009d3c <prvAddNewTaskToReadyList+0xc8>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d109      	bne.n	8009ca6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c92:	4a2a      	ldr	r2, [pc, #168]	; (8009d3c <prvAddNewTaskToReadyList+0xc8>)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c98:	4b27      	ldr	r3, [pc, #156]	; (8009d38 <prvAddNewTaskToReadyList+0xc4>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d110      	bne.n	8009cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ca0:	f000 fc16 	bl	800a4d0 <prvInitialiseTaskLists>
 8009ca4:	e00d      	b.n	8009cc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ca6:	4b26      	ldr	r3, [pc, #152]	; (8009d40 <prvAddNewTaskToReadyList+0xcc>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d109      	bne.n	8009cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cae:	4b23      	ldr	r3, [pc, #140]	; (8009d3c <prvAddNewTaskToReadyList+0xc8>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d802      	bhi.n	8009cc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009cbc:	4a1f      	ldr	r2, [pc, #124]	; (8009d3c <prvAddNewTaskToReadyList+0xc8>)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009cc2:	4b20      	ldr	r3, [pc, #128]	; (8009d44 <prvAddNewTaskToReadyList+0xd0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	4a1e      	ldr	r2, [pc, #120]	; (8009d44 <prvAddNewTaskToReadyList+0xd0>)
 8009cca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ccc:	4b1d      	ldr	r3, [pc, #116]	; (8009d44 <prvAddNewTaskToReadyList+0xd0>)
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd8:	4b1b      	ldr	r3, [pc, #108]	; (8009d48 <prvAddNewTaskToReadyList+0xd4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d903      	bls.n	8009ce8 <prvAddNewTaskToReadyList+0x74>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce4:	4a18      	ldr	r2, [pc, #96]	; (8009d48 <prvAddNewTaskToReadyList+0xd4>)
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cec:	4613      	mov	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4a15      	ldr	r2, [pc, #84]	; (8009d4c <prvAddNewTaskToReadyList+0xd8>)
 8009cf6:	441a      	add	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	4610      	mov	r0, r2
 8009d00:	f7ff f913 	bl	8008f2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d04:	f001 fa2e 	bl	800b164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d08:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <prvAddNewTaskToReadyList+0xcc>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00e      	beq.n	8009d2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d10:	4b0a      	ldr	r3, [pc, #40]	; (8009d3c <prvAddNewTaskToReadyList+0xc8>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d207      	bcs.n	8009d2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d1e:	4b0c      	ldr	r3, [pc, #48]	; (8009d50 <prvAddNewTaskToReadyList+0xdc>)
 8009d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20000da4 	.word	0x20000da4
 8009d3c:	200008d0 	.word	0x200008d0
 8009d40:	20000db0 	.word	0x20000db0
 8009d44:	20000dc0 	.word	0x20000dc0
 8009d48:	20000dac 	.word	0x20000dac
 8009d4c:	200008d4 	.word	0x200008d4
 8009d50:	e000ed04 	.word	0xe000ed04

08009d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d017      	beq.n	8009d96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d66:	4b13      	ldr	r3, [pc, #76]	; (8009db4 <vTaskDelay+0x60>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00a      	beq.n	8009d84 <vTaskDelay+0x30>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	60bb      	str	r3, [r7, #8]
}
 8009d80:	bf00      	nop
 8009d82:	e7fe      	b.n	8009d82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d84:	f000 f880 	bl	8009e88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d88:	2100      	movs	r1, #0
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fcea 	bl	800a764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d90:	f000 f888 	bl	8009ea4 <xTaskResumeAll>
 8009d94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d107      	bne.n	8009dac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d9c:	4b06      	ldr	r3, [pc, #24]	; (8009db8 <vTaskDelay+0x64>)
 8009d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009dac:	bf00      	nop
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20000dcc 	.word	0x20000dcc
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08a      	sub	sp, #40	; 0x28
 8009dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009dca:	463a      	mov	r2, r7
 8009dcc:	1d39      	adds	r1, r7, #4
 8009dce:	f107 0308 	add.w	r3, r7, #8
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7ff f848 	bl	8008e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	9202      	str	r2, [sp, #8]
 8009de0:	9301      	str	r3, [sp, #4]
 8009de2:	2300      	movs	r3, #0
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	2300      	movs	r3, #0
 8009de8:	460a      	mov	r2, r1
 8009dea:	4921      	ldr	r1, [pc, #132]	; (8009e70 <vTaskStartScheduler+0xb4>)
 8009dec:	4821      	ldr	r0, [pc, #132]	; (8009e74 <vTaskStartScheduler+0xb8>)
 8009dee:	f7ff fe0f 	bl	8009a10 <xTaskCreateStatic>
 8009df2:	4603      	mov	r3, r0
 8009df4:	4a20      	ldr	r2, [pc, #128]	; (8009e78 <vTaskStartScheduler+0xbc>)
 8009df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009df8:	4b1f      	ldr	r3, [pc, #124]	; (8009e78 <vTaskStartScheduler+0xbc>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d002      	beq.n	8009e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e00:	2301      	movs	r3, #1
 8009e02:	617b      	str	r3, [r7, #20]
 8009e04:	e001      	b.n	8009e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d102      	bne.n	8009e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e10:	f000 fcfc 	bl	800a80c <xTimerCreateTimerTask>
 8009e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d116      	bne.n	8009e4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	613b      	str	r3, [r7, #16]
}
 8009e2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e30:	4b12      	ldr	r3, [pc, #72]	; (8009e7c <vTaskStartScheduler+0xc0>)
 8009e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e38:	4b11      	ldr	r3, [pc, #68]	; (8009e80 <vTaskStartScheduler+0xc4>)
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e3e:	4b11      	ldr	r3, [pc, #68]	; (8009e84 <vTaskStartScheduler+0xc8>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e44:	f001 f8bc 	bl	800afc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e48:	e00e      	b.n	8009e68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e50:	d10a      	bne.n	8009e68 <vTaskStartScheduler+0xac>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	60fb      	str	r3, [r7, #12]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <vTaskStartScheduler+0xaa>
}
 8009e68:	bf00      	nop
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	0800e53c 	.word	0x0800e53c
 8009e74:	0800a4a1 	.word	0x0800a4a1
 8009e78:	20000dc8 	.word	0x20000dc8
 8009e7c:	20000dc4 	.word	0x20000dc4
 8009e80:	20000db0 	.word	0x20000db0
 8009e84:	20000da8 	.word	0x20000da8

08009e88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e8c:	4b04      	ldr	r3, [pc, #16]	; (8009ea0 <vTaskSuspendAll+0x18>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3301      	adds	r3, #1
 8009e92:	4a03      	ldr	r2, [pc, #12]	; (8009ea0 <vTaskSuspendAll+0x18>)
 8009e94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e96:	bf00      	nop
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	20000dcc 	.word	0x20000dcc

08009ea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009eb2:	4b42      	ldr	r3, [pc, #264]	; (8009fbc <xTaskResumeAll+0x118>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10a      	bne.n	8009ed0 <xTaskResumeAll+0x2c>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	603b      	str	r3, [r7, #0]
}
 8009ecc:	bf00      	nop
 8009ece:	e7fe      	b.n	8009ece <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ed0:	f001 f918 	bl	800b104 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ed4:	4b39      	ldr	r3, [pc, #228]	; (8009fbc <xTaskResumeAll+0x118>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	4a38      	ldr	r2, [pc, #224]	; (8009fbc <xTaskResumeAll+0x118>)
 8009edc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ede:	4b37      	ldr	r3, [pc, #220]	; (8009fbc <xTaskResumeAll+0x118>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d162      	bne.n	8009fac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ee6:	4b36      	ldr	r3, [pc, #216]	; (8009fc0 <xTaskResumeAll+0x11c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d05e      	beq.n	8009fac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009eee:	e02f      	b.n	8009f50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef0:	4b34      	ldr	r3, [pc, #208]	; (8009fc4 <xTaskResumeAll+0x120>)
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3318      	adds	r3, #24
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7ff f871 	bl	8008fe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3304      	adds	r3, #4
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff f86c 	bl	8008fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f10:	4b2d      	ldr	r3, [pc, #180]	; (8009fc8 <xTaskResumeAll+0x124>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d903      	bls.n	8009f20 <xTaskResumeAll+0x7c>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1c:	4a2a      	ldr	r2, [pc, #168]	; (8009fc8 <xTaskResumeAll+0x124>)
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f24:	4613      	mov	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4a27      	ldr	r2, [pc, #156]	; (8009fcc <xTaskResumeAll+0x128>)
 8009f2e:	441a      	add	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f7fe fff7 	bl	8008f2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f40:	4b23      	ldr	r3, [pc, #140]	; (8009fd0 <xTaskResumeAll+0x12c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d302      	bcc.n	8009f50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f4a:	4b22      	ldr	r3, [pc, #136]	; (8009fd4 <xTaskResumeAll+0x130>)
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f50:	4b1c      	ldr	r3, [pc, #112]	; (8009fc4 <xTaskResumeAll+0x120>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1cb      	bne.n	8009ef0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f5e:	f000 fb55 	bl	800a60c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f62:	4b1d      	ldr	r3, [pc, #116]	; (8009fd8 <xTaskResumeAll+0x134>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d010      	beq.n	8009f90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f6e:	f000 f847 	bl	800a000 <xTaskIncrementTick>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009f78:	4b16      	ldr	r3, [pc, #88]	; (8009fd4 <xTaskResumeAll+0x130>)
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3b01      	subs	r3, #1
 8009f82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1f1      	bne.n	8009f6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f8a:	4b13      	ldr	r3, [pc, #76]	; (8009fd8 <xTaskResumeAll+0x134>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f90:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <xTaskResumeAll+0x130>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d009      	beq.n	8009fac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f9c:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <xTaskResumeAll+0x138>)
 8009f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fac:	f001 f8da 	bl	800b164 <vPortExitCritical>

	return xAlreadyYielded;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	20000dcc 	.word	0x20000dcc
 8009fc0:	20000da4 	.word	0x20000da4
 8009fc4:	20000d64 	.word	0x20000d64
 8009fc8:	20000dac 	.word	0x20000dac
 8009fcc:	200008d4 	.word	0x200008d4
 8009fd0:	200008d0 	.word	0x200008d0
 8009fd4:	20000db8 	.word	0x20000db8
 8009fd8:	20000db4 	.word	0x20000db4
 8009fdc:	e000ed04 	.word	0xe000ed04

08009fe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009fe6:	4b05      	ldr	r3, [pc, #20]	; (8009ffc <xTaskGetTickCount+0x1c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009fec:	687b      	ldr	r3, [r7, #4]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	20000da8 	.word	0x20000da8

0800a000 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a006:	2300      	movs	r3, #0
 800a008:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a00a:	4b4f      	ldr	r3, [pc, #316]	; (800a148 <xTaskIncrementTick+0x148>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f040 808f 	bne.w	800a132 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a014:	4b4d      	ldr	r3, [pc, #308]	; (800a14c <xTaskIncrementTick+0x14c>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3301      	adds	r3, #1
 800a01a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a01c:	4a4b      	ldr	r2, [pc, #300]	; (800a14c <xTaskIncrementTick+0x14c>)
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d120      	bne.n	800a06a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a028:	4b49      	ldr	r3, [pc, #292]	; (800a150 <xTaskIncrementTick+0x150>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00a      	beq.n	800a048 <xTaskIncrementTick+0x48>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	603b      	str	r3, [r7, #0]
}
 800a044:	bf00      	nop
 800a046:	e7fe      	b.n	800a046 <xTaskIncrementTick+0x46>
 800a048:	4b41      	ldr	r3, [pc, #260]	; (800a150 <xTaskIncrementTick+0x150>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	4b41      	ldr	r3, [pc, #260]	; (800a154 <xTaskIncrementTick+0x154>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a3f      	ldr	r2, [pc, #252]	; (800a150 <xTaskIncrementTick+0x150>)
 800a054:	6013      	str	r3, [r2, #0]
 800a056:	4a3f      	ldr	r2, [pc, #252]	; (800a154 <xTaskIncrementTick+0x154>)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	4b3e      	ldr	r3, [pc, #248]	; (800a158 <xTaskIncrementTick+0x158>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3301      	adds	r3, #1
 800a062:	4a3d      	ldr	r2, [pc, #244]	; (800a158 <xTaskIncrementTick+0x158>)
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	f000 fad1 	bl	800a60c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a06a:	4b3c      	ldr	r3, [pc, #240]	; (800a15c <xTaskIncrementTick+0x15c>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	429a      	cmp	r2, r3
 800a072:	d349      	bcc.n	800a108 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a074:	4b36      	ldr	r3, [pc, #216]	; (800a150 <xTaskIncrementTick+0x150>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d104      	bne.n	800a088 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a07e:	4b37      	ldr	r3, [pc, #220]	; (800a15c <xTaskIncrementTick+0x15c>)
 800a080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a084:	601a      	str	r2, [r3, #0]
					break;
 800a086:	e03f      	b.n	800a108 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a088:	4b31      	ldr	r3, [pc, #196]	; (800a150 <xTaskIncrementTick+0x150>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d203      	bcs.n	800a0a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a0a0:	4a2e      	ldr	r2, [pc, #184]	; (800a15c <xTaskIncrementTick+0x15c>)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a0a6:	e02f      	b.n	800a108 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe ff99 	bl	8008fe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d004      	beq.n	800a0c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	3318      	adds	r3, #24
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe ff90 	bl	8008fe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c8:	4b25      	ldr	r3, [pc, #148]	; (800a160 <xTaskIncrementTick+0x160>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d903      	bls.n	800a0d8 <xTaskIncrementTick+0xd8>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d4:	4a22      	ldr	r2, [pc, #136]	; (800a160 <xTaskIncrementTick+0x160>)
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4a1f      	ldr	r2, [pc, #124]	; (800a164 <xTaskIncrementTick+0x164>)
 800a0e6:	441a      	add	r2, r3
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	f7fe ff1b 	bl	8008f2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f8:	4b1b      	ldr	r3, [pc, #108]	; (800a168 <xTaskIncrementTick+0x168>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d3b8      	bcc.n	800a074 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a102:	2301      	movs	r3, #1
 800a104:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a106:	e7b5      	b.n	800a074 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a108:	4b17      	ldr	r3, [pc, #92]	; (800a168 <xTaskIncrementTick+0x168>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a10e:	4915      	ldr	r1, [pc, #84]	; (800a164 <xTaskIncrementTick+0x164>)
 800a110:	4613      	mov	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	440b      	add	r3, r1
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d901      	bls.n	800a124 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a120:	2301      	movs	r3, #1
 800a122:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a124:	4b11      	ldr	r3, [pc, #68]	; (800a16c <xTaskIncrementTick+0x16c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d007      	beq.n	800a13c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a12c:	2301      	movs	r3, #1
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	e004      	b.n	800a13c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a132:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <xTaskIncrementTick+0x170>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3301      	adds	r3, #1
 800a138:	4a0d      	ldr	r2, [pc, #52]	; (800a170 <xTaskIncrementTick+0x170>)
 800a13a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a13c:	697b      	ldr	r3, [r7, #20]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20000dcc 	.word	0x20000dcc
 800a14c:	20000da8 	.word	0x20000da8
 800a150:	20000d5c 	.word	0x20000d5c
 800a154:	20000d60 	.word	0x20000d60
 800a158:	20000dbc 	.word	0x20000dbc
 800a15c:	20000dc4 	.word	0x20000dc4
 800a160:	20000dac 	.word	0x20000dac
 800a164:	200008d4 	.word	0x200008d4
 800a168:	200008d0 	.word	0x200008d0
 800a16c:	20000db8 	.word	0x20000db8
 800a170:	20000db4 	.word	0x20000db4

0800a174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a17a:	4b28      	ldr	r3, [pc, #160]	; (800a21c <vTaskSwitchContext+0xa8>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a182:	4b27      	ldr	r3, [pc, #156]	; (800a220 <vTaskSwitchContext+0xac>)
 800a184:	2201      	movs	r2, #1
 800a186:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a188:	e041      	b.n	800a20e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a18a:	4b25      	ldr	r3, [pc, #148]	; (800a220 <vTaskSwitchContext+0xac>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a190:	4b24      	ldr	r3, [pc, #144]	; (800a224 <vTaskSwitchContext+0xb0>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	60fb      	str	r3, [r7, #12]
 800a196:	e010      	b.n	800a1ba <vTaskSwitchContext+0x46>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10a      	bne.n	800a1b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
 800a1b2:	e7fe      	b.n	800a1b2 <vTaskSwitchContext+0x3e>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	60fb      	str	r3, [r7, #12]
 800a1ba:	491b      	ldr	r1, [pc, #108]	; (800a228 <vTaskSwitchContext+0xb4>)
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	440b      	add	r3, r1
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0e4      	beq.n	800a198 <vTaskSwitchContext+0x24>
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4a13      	ldr	r2, [pc, #76]	; (800a228 <vTaskSwitchContext+0xb4>)
 800a1da:	4413      	add	r3, r2
 800a1dc:	60bb      	str	r3, [r7, #8]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	605a      	str	r2, [r3, #4]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	3308      	adds	r3, #8
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d104      	bne.n	800a1fe <vTaskSwitchContext+0x8a>
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	685a      	ldr	r2, [r3, #4]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	605a      	str	r2, [r3, #4]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	4a09      	ldr	r2, [pc, #36]	; (800a22c <vTaskSwitchContext+0xb8>)
 800a206:	6013      	str	r3, [r2, #0]
 800a208:	4a06      	ldr	r2, [pc, #24]	; (800a224 <vTaskSwitchContext+0xb0>)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6013      	str	r3, [r2, #0]
}
 800a20e:	bf00      	nop
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	20000dcc 	.word	0x20000dcc
 800a220:	20000db8 	.word	0x20000db8
 800a224:	20000dac 	.word	0x20000dac
 800a228:	200008d4 	.word	0x200008d4
 800a22c:	200008d0 	.word	0x200008d0

0800a230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10a      	bne.n	800a256 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	60fb      	str	r3, [r7, #12]
}
 800a252:	bf00      	nop
 800a254:	e7fe      	b.n	800a254 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a256:	4b07      	ldr	r3, [pc, #28]	; (800a274 <vTaskPlaceOnEventList+0x44>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3318      	adds	r3, #24
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7fe fe87 	bl	8008f72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a264:	2101      	movs	r1, #1
 800a266:	6838      	ldr	r0, [r7, #0]
 800a268:	f000 fa7c 	bl	800a764 <prvAddCurrentTaskToDelayedList>
}
 800a26c:	bf00      	nop
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	200008d0 	.word	0x200008d0

0800a278 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d10a      	bne.n	800a2a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	617b      	str	r3, [r7, #20]
}
 800a29c:	bf00      	nop
 800a29e:	e7fe      	b.n	800a29e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2a0:	4b0a      	ldr	r3, [pc, #40]	; (800a2cc <vTaskPlaceOnEventListRestricted+0x54>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3318      	adds	r3, #24
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7fe fe3e 	bl	8008f2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a2b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2ba:	6879      	ldr	r1, [r7, #4]
 800a2bc:	68b8      	ldr	r0, [r7, #8]
 800a2be:	f000 fa51 	bl	800a764 <prvAddCurrentTaskToDelayedList>
	}
 800a2c2:	bf00      	nop
 800a2c4:	3718      	adds	r7, #24
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	200008d0 	.word	0x200008d0

0800a2d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10a      	bne.n	800a2fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ea:	f383 8811 	msr	BASEPRI, r3
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	60fb      	str	r3, [r7, #12]
}
 800a2f8:	bf00      	nop
 800a2fa:	e7fe      	b.n	800a2fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	3318      	adds	r3, #24
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe fe6f 	bl	8008fe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a306:	4b1e      	ldr	r3, [pc, #120]	; (800a380 <xTaskRemoveFromEventList+0xb0>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d11d      	bne.n	800a34a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	3304      	adds	r3, #4
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe fe66 	bl	8008fe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31c:	4b19      	ldr	r3, [pc, #100]	; (800a384 <xTaskRemoveFromEventList+0xb4>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d903      	bls.n	800a32c <xTaskRemoveFromEventList+0x5c>
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a328:	4a16      	ldr	r2, [pc, #88]	; (800a384 <xTaskRemoveFromEventList+0xb4>)
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a330:	4613      	mov	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4a13      	ldr	r2, [pc, #76]	; (800a388 <xTaskRemoveFromEventList+0xb8>)
 800a33a:	441a      	add	r2, r3
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	3304      	adds	r3, #4
 800a340:	4619      	mov	r1, r3
 800a342:	4610      	mov	r0, r2
 800a344:	f7fe fdf1 	bl	8008f2a <vListInsertEnd>
 800a348:	e005      	b.n	800a356 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	3318      	adds	r3, #24
 800a34e:	4619      	mov	r1, r3
 800a350:	480e      	ldr	r0, [pc, #56]	; (800a38c <xTaskRemoveFromEventList+0xbc>)
 800a352:	f7fe fdea 	bl	8008f2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35a:	4b0d      	ldr	r3, [pc, #52]	; (800a390 <xTaskRemoveFromEventList+0xc0>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a360:	429a      	cmp	r2, r3
 800a362:	d905      	bls.n	800a370 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a364:	2301      	movs	r3, #1
 800a366:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a368:	4b0a      	ldr	r3, [pc, #40]	; (800a394 <xTaskRemoveFromEventList+0xc4>)
 800a36a:	2201      	movs	r2, #1
 800a36c:	601a      	str	r2, [r3, #0]
 800a36e:	e001      	b.n	800a374 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a370:	2300      	movs	r3, #0
 800a372:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a374:	697b      	ldr	r3, [r7, #20]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20000dcc 	.word	0x20000dcc
 800a384:	20000dac 	.word	0x20000dac
 800a388:	200008d4 	.word	0x200008d4
 800a38c:	20000d64 	.word	0x20000d64
 800a390:	200008d0 	.word	0x200008d0
 800a394:	20000db8 	.word	0x20000db8

0800a398 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3a0:	4b06      	ldr	r3, [pc, #24]	; (800a3bc <vTaskInternalSetTimeOutState+0x24>)
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3a8:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <vTaskInternalSetTimeOutState+0x28>)
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	605a      	str	r2, [r3, #4]
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	20000dbc 	.word	0x20000dbc
 800a3c0:	20000da8 	.word	0x20000da8

0800a3c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b088      	sub	sp, #32
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10a      	bne.n	800a3ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	613b      	str	r3, [r7, #16]
}
 800a3e6:	bf00      	nop
 800a3e8:	e7fe      	b.n	800a3e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10a      	bne.n	800a406 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	60fb      	str	r3, [r7, #12]
}
 800a402:	bf00      	nop
 800a404:	e7fe      	b.n	800a404 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a406:	f000 fe7d 	bl	800b104 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a40a:	4b1d      	ldr	r3, [pc, #116]	; (800a480 <xTaskCheckForTimeOut+0xbc>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	69ba      	ldr	r2, [r7, #24]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a422:	d102      	bne.n	800a42a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a424:	2300      	movs	r3, #0
 800a426:	61fb      	str	r3, [r7, #28]
 800a428:	e023      	b.n	800a472 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	4b15      	ldr	r3, [pc, #84]	; (800a484 <xTaskCheckForTimeOut+0xc0>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d007      	beq.n	800a446 <xTaskCheckForTimeOut+0x82>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d302      	bcc.n	800a446 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a440:	2301      	movs	r3, #1
 800a442:	61fb      	str	r3, [r7, #28]
 800a444:	e015      	b.n	800a472 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d20b      	bcs.n	800a468 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	1ad2      	subs	r2, r2, r3
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff ff9b 	bl	800a398 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a462:	2300      	movs	r3, #0
 800a464:	61fb      	str	r3, [r7, #28]
 800a466:	e004      	b.n	800a472 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	2200      	movs	r2, #0
 800a46c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a46e:	2301      	movs	r3, #1
 800a470:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a472:	f000 fe77 	bl	800b164 <vPortExitCritical>

	return xReturn;
 800a476:	69fb      	ldr	r3, [r7, #28]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3720      	adds	r7, #32
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20000da8 	.word	0x20000da8
 800a484:	20000dbc 	.word	0x20000dbc

0800a488 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a488:	b480      	push	{r7}
 800a48a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a48c:	4b03      	ldr	r3, [pc, #12]	; (800a49c <vTaskMissedYield+0x14>)
 800a48e:	2201      	movs	r2, #1
 800a490:	601a      	str	r2, [r3, #0]
}
 800a492:	bf00      	nop
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	20000db8 	.word	0x20000db8

0800a4a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a4a8:	f000 f852 	bl	800a550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4ac:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <prvIdleTask+0x28>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d9f9      	bls.n	800a4a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <prvIdleTask+0x2c>)
 800a4b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4ba:	601a      	str	r2, [r3, #0]
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4c4:	e7f0      	b.n	800a4a8 <prvIdleTask+0x8>
 800a4c6:	bf00      	nop
 800a4c8:	200008d4 	.word	0x200008d4
 800a4cc:	e000ed04 	.word	0xe000ed04

0800a4d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	607b      	str	r3, [r7, #4]
 800a4da:	e00c      	b.n	800a4f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	4413      	add	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4a12      	ldr	r2, [pc, #72]	; (800a530 <prvInitialiseTaskLists+0x60>)
 800a4e8:	4413      	add	r3, r2
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fe fcf0 	bl	8008ed0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	607b      	str	r3, [r7, #4]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b37      	cmp	r3, #55	; 0x37
 800a4fa:	d9ef      	bls.n	800a4dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a4fc:	480d      	ldr	r0, [pc, #52]	; (800a534 <prvInitialiseTaskLists+0x64>)
 800a4fe:	f7fe fce7 	bl	8008ed0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a502:	480d      	ldr	r0, [pc, #52]	; (800a538 <prvInitialiseTaskLists+0x68>)
 800a504:	f7fe fce4 	bl	8008ed0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a508:	480c      	ldr	r0, [pc, #48]	; (800a53c <prvInitialiseTaskLists+0x6c>)
 800a50a:	f7fe fce1 	bl	8008ed0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a50e:	480c      	ldr	r0, [pc, #48]	; (800a540 <prvInitialiseTaskLists+0x70>)
 800a510:	f7fe fcde 	bl	8008ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a514:	480b      	ldr	r0, [pc, #44]	; (800a544 <prvInitialiseTaskLists+0x74>)
 800a516:	f7fe fcdb 	bl	8008ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a51a:	4b0b      	ldr	r3, [pc, #44]	; (800a548 <prvInitialiseTaskLists+0x78>)
 800a51c:	4a05      	ldr	r2, [pc, #20]	; (800a534 <prvInitialiseTaskLists+0x64>)
 800a51e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a520:	4b0a      	ldr	r3, [pc, #40]	; (800a54c <prvInitialiseTaskLists+0x7c>)
 800a522:	4a05      	ldr	r2, [pc, #20]	; (800a538 <prvInitialiseTaskLists+0x68>)
 800a524:	601a      	str	r2, [r3, #0]
}
 800a526:	bf00      	nop
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	200008d4 	.word	0x200008d4
 800a534:	20000d34 	.word	0x20000d34
 800a538:	20000d48 	.word	0x20000d48
 800a53c:	20000d64 	.word	0x20000d64
 800a540:	20000d78 	.word	0x20000d78
 800a544:	20000d90 	.word	0x20000d90
 800a548:	20000d5c 	.word	0x20000d5c
 800a54c:	20000d60 	.word	0x20000d60

0800a550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a556:	e019      	b.n	800a58c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a558:	f000 fdd4 	bl	800b104 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a55c:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <prvCheckTasksWaitingTermination+0x50>)
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3304      	adds	r3, #4
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fe fd3b 	bl	8008fe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a56e:	4b0d      	ldr	r3, [pc, #52]	; (800a5a4 <prvCheckTasksWaitingTermination+0x54>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3b01      	subs	r3, #1
 800a574:	4a0b      	ldr	r2, [pc, #44]	; (800a5a4 <prvCheckTasksWaitingTermination+0x54>)
 800a576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a578:	4b0b      	ldr	r3, [pc, #44]	; (800a5a8 <prvCheckTasksWaitingTermination+0x58>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3b01      	subs	r3, #1
 800a57e:	4a0a      	ldr	r2, [pc, #40]	; (800a5a8 <prvCheckTasksWaitingTermination+0x58>)
 800a580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a582:	f000 fdef 	bl	800b164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f810 	bl	800a5ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a58c:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <prvCheckTasksWaitingTermination+0x58>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e1      	bne.n	800a558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a594:	bf00      	nop
 800a596:	bf00      	nop
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20000d78 	.word	0x20000d78
 800a5a4:	20000da4 	.word	0x20000da4
 800a5a8:	20000d8c 	.word	0x20000d8c

0800a5ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d108      	bne.n	800a5d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 ff8c 	bl	800b4e0 <vPortFree>
				vPortFree( pxTCB );
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 ff89 	bl	800b4e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a5ce:	e018      	b.n	800a602 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d103      	bne.n	800a5e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 ff80 	bl	800b4e0 <vPortFree>
	}
 800a5e0:	e00f      	b.n	800a602 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d00a      	beq.n	800a602 <prvDeleteTCB+0x56>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	60fb      	str	r3, [r7, #12]
}
 800a5fe:	bf00      	nop
 800a600:	e7fe      	b.n	800a600 <prvDeleteTCB+0x54>
	}
 800a602:	bf00      	nop
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a612:	4b0c      	ldr	r3, [pc, #48]	; (800a644 <prvResetNextTaskUnblockTime+0x38>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d104      	bne.n	800a626 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a61c:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <prvResetNextTaskUnblockTime+0x3c>)
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a622:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a624:	e008      	b.n	800a638 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a626:	4b07      	ldr	r3, [pc, #28]	; (800a644 <prvResetNextTaskUnblockTime+0x38>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	4a04      	ldr	r2, [pc, #16]	; (800a648 <prvResetNextTaskUnblockTime+0x3c>)
 800a636:	6013      	str	r3, [r2, #0]
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	20000d5c 	.word	0x20000d5c
 800a648:	20000dc4 	.word	0x20000dc4

0800a64c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a652:	4b0b      	ldr	r3, [pc, #44]	; (800a680 <xTaskGetSchedulerState+0x34>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d102      	bne.n	800a660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a65a:	2301      	movs	r3, #1
 800a65c:	607b      	str	r3, [r7, #4]
 800a65e:	e008      	b.n	800a672 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a660:	4b08      	ldr	r3, [pc, #32]	; (800a684 <xTaskGetSchedulerState+0x38>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d102      	bne.n	800a66e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a668:	2302      	movs	r3, #2
 800a66a:	607b      	str	r3, [r7, #4]
 800a66c:	e001      	b.n	800a672 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a66e:	2300      	movs	r3, #0
 800a670:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a672:	687b      	ldr	r3, [r7, #4]
	}
 800a674:	4618      	mov	r0, r3
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	20000db0 	.word	0x20000db0
 800a684:	20000dcc 	.word	0x20000dcc

0800a688 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a694:	2300      	movs	r3, #0
 800a696:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d056      	beq.n	800a74c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a69e:	4b2e      	ldr	r3, [pc, #184]	; (800a758 <xTaskPriorityDisinherit+0xd0>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d00a      	beq.n	800a6be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	60fb      	str	r3, [r7, #12]
}
 800a6ba:	bf00      	nop
 800a6bc:	e7fe      	b.n	800a6bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10a      	bne.n	800a6dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	60bb      	str	r3, [r7, #8]
}
 800a6d8:	bf00      	nop
 800a6da:	e7fe      	b.n	800a6da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e0:	1e5a      	subs	r2, r3, #1
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d02c      	beq.n	800a74c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d128      	bne.n	800a74c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe fc70 	bl	8008fe4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71c:	4b0f      	ldr	r3, [pc, #60]	; (800a75c <xTaskPriorityDisinherit+0xd4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	429a      	cmp	r2, r3
 800a722:	d903      	bls.n	800a72c <xTaskPriorityDisinherit+0xa4>
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	4a0c      	ldr	r2, [pc, #48]	; (800a75c <xTaskPriorityDisinherit+0xd4>)
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a730:	4613      	mov	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4a09      	ldr	r2, [pc, #36]	; (800a760 <xTaskPriorityDisinherit+0xd8>)
 800a73a:	441a      	add	r2, r3
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	3304      	adds	r3, #4
 800a740:	4619      	mov	r1, r3
 800a742:	4610      	mov	r0, r2
 800a744:	f7fe fbf1 	bl	8008f2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a748:	2301      	movs	r3, #1
 800a74a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a74c:	697b      	ldr	r3, [r7, #20]
	}
 800a74e:	4618      	mov	r0, r3
 800a750:	3718      	adds	r7, #24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	200008d0 	.word	0x200008d0
 800a75c:	20000dac 	.word	0x20000dac
 800a760:	200008d4 	.word	0x200008d4

0800a764 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a76e:	4b21      	ldr	r3, [pc, #132]	; (800a7f4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a774:	4b20      	ldr	r3, [pc, #128]	; (800a7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3304      	adds	r3, #4
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fe fc32 	bl	8008fe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a786:	d10a      	bne.n	800a79e <prvAddCurrentTaskToDelayedList+0x3a>
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d007      	beq.n	800a79e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a78e:	4b1a      	ldr	r3, [pc, #104]	; (800a7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	3304      	adds	r3, #4
 800a794:	4619      	mov	r1, r3
 800a796:	4819      	ldr	r0, [pc, #100]	; (800a7fc <prvAddCurrentTaskToDelayedList+0x98>)
 800a798:	f7fe fbc7 	bl	8008f2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a79c:	e026      	b.n	800a7ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7a6:	4b14      	ldr	r3, [pc, #80]	; (800a7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d209      	bcs.n	800a7ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7b6:	4b12      	ldr	r3, [pc, #72]	; (800a800 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	4b0f      	ldr	r3, [pc, #60]	; (800a7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	f7fe fbd5 	bl	8008f72 <vListInsert>
}
 800a7c8:	e010      	b.n	800a7ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7ca:	4b0e      	ldr	r3, [pc, #56]	; (800a804 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	4b0a      	ldr	r3, [pc, #40]	; (800a7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	f7fe fbcb 	bl	8008f72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7dc:	4b0a      	ldr	r3, [pc, #40]	; (800a808 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d202      	bcs.n	800a7ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a7e6:	4a08      	ldr	r2, [pc, #32]	; (800a808 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	6013      	str	r3, [r2, #0]
}
 800a7ec:	bf00      	nop
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	20000da8 	.word	0x20000da8
 800a7f8:	200008d0 	.word	0x200008d0
 800a7fc:	20000d90 	.word	0x20000d90
 800a800:	20000d60 	.word	0x20000d60
 800a804:	20000d5c 	.word	0x20000d5c
 800a808:	20000dc4 	.word	0x20000dc4

0800a80c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08a      	sub	sp, #40	; 0x28
 800a810:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a812:	2300      	movs	r3, #0
 800a814:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a816:	f000 fb07 	bl	800ae28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a81a:	4b1c      	ldr	r3, [pc, #112]	; (800a88c <xTimerCreateTimerTask+0x80>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d021      	beq.n	800a866 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a826:	2300      	movs	r3, #0
 800a828:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a82a:	1d3a      	adds	r2, r7, #4
 800a82c:	f107 0108 	add.w	r1, r7, #8
 800a830:	f107 030c 	add.w	r3, r7, #12
 800a834:	4618      	mov	r0, r3
 800a836:	f7fe fb31 	bl	8008e9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a83a:	6879      	ldr	r1, [r7, #4]
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	9202      	str	r2, [sp, #8]
 800a842:	9301      	str	r3, [sp, #4]
 800a844:	2302      	movs	r3, #2
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	2300      	movs	r3, #0
 800a84a:	460a      	mov	r2, r1
 800a84c:	4910      	ldr	r1, [pc, #64]	; (800a890 <xTimerCreateTimerTask+0x84>)
 800a84e:	4811      	ldr	r0, [pc, #68]	; (800a894 <xTimerCreateTimerTask+0x88>)
 800a850:	f7ff f8de 	bl	8009a10 <xTaskCreateStatic>
 800a854:	4603      	mov	r3, r0
 800a856:	4a10      	ldr	r2, [pc, #64]	; (800a898 <xTimerCreateTimerTask+0x8c>)
 800a858:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a85a:	4b0f      	ldr	r3, [pc, #60]	; (800a898 <xTimerCreateTimerTask+0x8c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a862:	2301      	movs	r3, #1
 800a864:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10a      	bne.n	800a882 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	613b      	str	r3, [r7, #16]
}
 800a87e:	bf00      	nop
 800a880:	e7fe      	b.n	800a880 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a882:	697b      	ldr	r3, [r7, #20]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	20000e00 	.word	0x20000e00
 800a890:	0800e544 	.word	0x0800e544
 800a894:	0800a9d1 	.word	0x0800a9d1
 800a898:	20000e04 	.word	0x20000e04

0800a89c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08a      	sub	sp, #40	; 0x28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
 800a8a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10a      	bne.n	800a8ca <xTimerGenericCommand+0x2e>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	623b      	str	r3, [r7, #32]
}
 800a8c6:	bf00      	nop
 800a8c8:	e7fe      	b.n	800a8c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a8ca:	4b1a      	ldr	r3, [pc, #104]	; (800a934 <xTimerGenericCommand+0x98>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d02a      	beq.n	800a928 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	2b05      	cmp	r3, #5
 800a8e2:	dc18      	bgt.n	800a916 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8e4:	f7ff feb2 	bl	800a64c <xTaskGetSchedulerState>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d109      	bne.n	800a902 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8ee:	4b11      	ldr	r3, [pc, #68]	; (800a934 <xTimerGenericCommand+0x98>)
 800a8f0:	6818      	ldr	r0, [r3, #0]
 800a8f2:	f107 0110 	add.w	r1, r7, #16
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8fa:	f7fe fca1 	bl	8009240 <xQueueGenericSend>
 800a8fe:	6278      	str	r0, [r7, #36]	; 0x24
 800a900:	e012      	b.n	800a928 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a902:	4b0c      	ldr	r3, [pc, #48]	; (800a934 <xTimerGenericCommand+0x98>)
 800a904:	6818      	ldr	r0, [r3, #0]
 800a906:	f107 0110 	add.w	r1, r7, #16
 800a90a:	2300      	movs	r3, #0
 800a90c:	2200      	movs	r2, #0
 800a90e:	f7fe fc97 	bl	8009240 <xQueueGenericSend>
 800a912:	6278      	str	r0, [r7, #36]	; 0x24
 800a914:	e008      	b.n	800a928 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a916:	4b07      	ldr	r3, [pc, #28]	; (800a934 <xTimerGenericCommand+0x98>)
 800a918:	6818      	ldr	r0, [r3, #0]
 800a91a:	f107 0110 	add.w	r1, r7, #16
 800a91e:	2300      	movs	r3, #0
 800a920:	683a      	ldr	r2, [r7, #0]
 800a922:	f7fe fd8b 	bl	800943c <xQueueGenericSendFromISR>
 800a926:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3728      	adds	r7, #40	; 0x28
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20000e00 	.word	0x20000e00

0800a938 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b088      	sub	sp, #32
 800a93c:	af02      	add	r7, sp, #8
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a942:	4b22      	ldr	r3, [pc, #136]	; (800a9cc <prvProcessExpiredTimer+0x94>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	3304      	adds	r3, #4
 800a950:	4618      	mov	r0, r3
 800a952:	f7fe fb47 	bl	8008fe4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a95c:	f003 0304 	and.w	r3, r3, #4
 800a960:	2b00      	cmp	r3, #0
 800a962:	d022      	beq.n	800a9aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	699a      	ldr	r2, [r3, #24]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	18d1      	adds	r1, r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	6978      	ldr	r0, [r7, #20]
 800a972:	f000 f8d1 	bl	800ab18 <prvInsertTimerInActiveList>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d01f      	beq.n	800a9bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a97c:	2300      	movs	r3, #0
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	2300      	movs	r3, #0
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	2100      	movs	r1, #0
 800a986:	6978      	ldr	r0, [r7, #20]
 800a988:	f7ff ff88 	bl	800a89c <xTimerGenericCommand>
 800a98c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d113      	bne.n	800a9bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	60fb      	str	r3, [r7, #12]
}
 800a9a6:	bf00      	nop
 800a9a8:	e7fe      	b.n	800a9a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9b0:	f023 0301 	bic.w	r3, r3, #1
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	6a1b      	ldr	r3, [r3, #32]
 800a9c0:	6978      	ldr	r0, [r7, #20]
 800a9c2:	4798      	blx	r3
}
 800a9c4:	bf00      	nop
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	20000df8 	.word	0x20000df8

0800a9d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9d8:	f107 0308 	add.w	r3, r7, #8
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 f857 	bl	800aa90 <prvGetNextExpireTime>
 800a9e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f000 f803 	bl	800a9f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a9ee:	f000 f8d5 	bl	800ab9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9f2:	e7f1      	b.n	800a9d8 <prvTimerTask+0x8>

0800a9f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a9fe:	f7ff fa43 	bl	8009e88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa02:	f107 0308 	add.w	r3, r7, #8
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 f866 	bl	800aad8 <prvSampleTimeNow>
 800aa0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d130      	bne.n	800aa76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10a      	bne.n	800aa30 <prvProcessTimerOrBlockTask+0x3c>
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d806      	bhi.n	800aa30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa22:	f7ff fa3f 	bl	8009ea4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa26:	68f9      	ldr	r1, [r7, #12]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff ff85 	bl	800a938 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa2e:	e024      	b.n	800aa7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d008      	beq.n	800aa48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa36:	4b13      	ldr	r3, [pc, #76]	; (800aa84 <prvProcessTimerOrBlockTask+0x90>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <prvProcessTimerOrBlockTask+0x50>
 800aa40:	2301      	movs	r3, #1
 800aa42:	e000      	b.n	800aa46 <prvProcessTimerOrBlockTask+0x52>
 800aa44:	2300      	movs	r3, #0
 800aa46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa48:	4b0f      	ldr	r3, [pc, #60]	; (800aa88 <prvProcessTimerOrBlockTask+0x94>)
 800aa4a:	6818      	ldr	r0, [r3, #0]
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	4619      	mov	r1, r3
 800aa56:	f7fe ffa7 	bl	80099a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa5a:	f7ff fa23 	bl	8009ea4 <xTaskResumeAll>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10a      	bne.n	800aa7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa64:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <prvProcessTimerOrBlockTask+0x98>)
 800aa66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	f3bf 8f6f 	isb	sy
}
 800aa74:	e001      	b.n	800aa7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa76:	f7ff fa15 	bl	8009ea4 <xTaskResumeAll>
}
 800aa7a:	bf00      	nop
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20000dfc 	.word	0x20000dfc
 800aa88:	20000e00 	.word	0x20000e00
 800aa8c:	e000ed04 	.word	0xe000ed04

0800aa90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa98:	4b0e      	ldr	r3, [pc, #56]	; (800aad4 <prvGetNextExpireTime+0x44>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <prvGetNextExpireTime+0x16>
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	e000      	b.n	800aaa8 <prvGetNextExpireTime+0x18>
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d105      	bne.n	800aac0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aab4:	4b07      	ldr	r3, [pc, #28]	; (800aad4 <prvGetNextExpireTime+0x44>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	e001      	b.n	800aac4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aac0:	2300      	movs	r3, #0
 800aac2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aac4:	68fb      	ldr	r3, [r7, #12]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	20000df8 	.word	0x20000df8

0800aad8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aae0:	f7ff fa7e 	bl	8009fe0 <xTaskGetTickCount>
 800aae4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aae6:	4b0b      	ldr	r3, [pc, #44]	; (800ab14 <prvSampleTimeNow+0x3c>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d205      	bcs.n	800aafc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aaf0:	f000 f936 	bl	800ad60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	e002      	b.n	800ab02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab02:	4a04      	ldr	r2, [pc, #16]	; (800ab14 <prvSampleTimeNow+0x3c>)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab08:	68fb      	ldr	r3, [r7, #12]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20000e08 	.word	0x20000e08

0800ab18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	68ba      	ldr	r2, [r7, #8]
 800ab2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d812      	bhi.n	800ab64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	1ad2      	subs	r2, r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d302      	bcc.n	800ab52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	617b      	str	r3, [r7, #20]
 800ab50:	e01b      	b.n	800ab8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab52:	4b10      	ldr	r3, [pc, #64]	; (800ab94 <prvInsertTimerInActiveList+0x7c>)
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3304      	adds	r3, #4
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	f7fe fa08 	bl	8008f72 <vListInsert>
 800ab62:	e012      	b.n	800ab8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d206      	bcs.n	800ab7a <prvInsertTimerInActiveList+0x62>
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d302      	bcc.n	800ab7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab74:	2301      	movs	r3, #1
 800ab76:	617b      	str	r3, [r7, #20]
 800ab78:	e007      	b.n	800ab8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab7a:	4b07      	ldr	r3, [pc, #28]	; (800ab98 <prvInsertTimerInActiveList+0x80>)
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3304      	adds	r3, #4
 800ab82:	4619      	mov	r1, r3
 800ab84:	4610      	mov	r0, r2
 800ab86:	f7fe f9f4 	bl	8008f72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab8a:	697b      	ldr	r3, [r7, #20]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	20000dfc 	.word	0x20000dfc
 800ab98:	20000df8 	.word	0x20000df8

0800ab9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08e      	sub	sp, #56	; 0x38
 800aba0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aba2:	e0ca      	b.n	800ad3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	da18      	bge.n	800abdc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800abaa:	1d3b      	adds	r3, r7, #4
 800abac:	3304      	adds	r3, #4
 800abae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10a      	bne.n	800abcc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	61fb      	str	r3, [r7, #28]
}
 800abc8:	bf00      	nop
 800abca:	e7fe      	b.n	800abca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abd2:	6850      	ldr	r0, [r2, #4]
 800abd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abd6:	6892      	ldr	r2, [r2, #8]
 800abd8:	4611      	mov	r1, r2
 800abda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f2c0 80aa 	blt.w	800ad38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d004      	beq.n	800abfa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	3304      	adds	r3, #4
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fe f9f5 	bl	8008fe4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abfa:	463b      	mov	r3, r7
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7ff ff6b 	bl	800aad8 <prvSampleTimeNow>
 800ac02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b09      	cmp	r3, #9
 800ac08:	f200 8097 	bhi.w	800ad3a <prvProcessReceivedCommands+0x19e>
 800ac0c:	a201      	add	r2, pc, #4	; (adr r2, 800ac14 <prvProcessReceivedCommands+0x78>)
 800ac0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac12:	bf00      	nop
 800ac14:	0800ac3d 	.word	0x0800ac3d
 800ac18:	0800ac3d 	.word	0x0800ac3d
 800ac1c:	0800ac3d 	.word	0x0800ac3d
 800ac20:	0800acb1 	.word	0x0800acb1
 800ac24:	0800acc5 	.word	0x0800acc5
 800ac28:	0800ad0f 	.word	0x0800ad0f
 800ac2c:	0800ac3d 	.word	0x0800ac3d
 800ac30:	0800ac3d 	.word	0x0800ac3d
 800ac34:	0800acb1 	.word	0x0800acb1
 800ac38:	0800acc5 	.word	0x0800acc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac42:	f043 0301 	orr.w	r3, r3, #1
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	18d1      	adds	r1, r2, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac5c:	f7ff ff5c 	bl	800ab18 <prvInsertTimerInActiveList>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d069      	beq.n	800ad3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac74:	f003 0304 	and.w	r3, r3, #4
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d05e      	beq.n	800ad3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	441a      	add	r2, r3
 800ac84:	2300      	movs	r3, #0
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	2300      	movs	r3, #0
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac8e:	f7ff fe05 	bl	800a89c <xTimerGenericCommand>
 800ac92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d14f      	bne.n	800ad3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	61bb      	str	r3, [r7, #24]
}
 800acac:	bf00      	nop
 800acae:	e7fe      	b.n	800acae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acb6:	f023 0301 	bic.w	r3, r3, #1
 800acba:	b2da      	uxtb	r2, r3
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800acc2:	e03a      	b.n	800ad3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acca:	f043 0301 	orr.w	r3, r3, #1
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10a      	bne.n	800acfa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	617b      	str	r3, [r7, #20]
}
 800acf6:	bf00      	nop
 800acf8:	e7fe      	b.n	800acf8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800acfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfc:	699a      	ldr	r2, [r3, #24]
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	18d1      	adds	r1, r2, r3
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad08:	f7ff ff06 	bl	800ab18 <prvInsertTimerInActiveList>
					break;
 800ad0c:	e015      	b.n	800ad3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad14:	f003 0302 	and.w	r3, r3, #2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d103      	bne.n	800ad24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ad1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad1e:	f000 fbdf 	bl	800b4e0 <vPortFree>
 800ad22:	e00a      	b.n	800ad3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad2a:	f023 0301 	bic.w	r3, r3, #1
 800ad2e:	b2da      	uxtb	r2, r3
 800ad30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad36:	e000      	b.n	800ad3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ad38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad3a:	4b08      	ldr	r3, [pc, #32]	; (800ad5c <prvProcessReceivedCommands+0x1c0>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	1d39      	adds	r1, r7, #4
 800ad40:	2200      	movs	r2, #0
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe fc16 	bl	8009574 <xQueueReceive>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f47f af2a 	bne.w	800aba4 <prvProcessReceivedCommands+0x8>
	}
}
 800ad50:	bf00      	nop
 800ad52:	bf00      	nop
 800ad54:	3730      	adds	r7, #48	; 0x30
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20000e00 	.word	0x20000e00

0800ad60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad66:	e048      	b.n	800adfa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad68:	4b2d      	ldr	r3, [pc, #180]	; (800ae20 <prvSwitchTimerLists+0xc0>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad72:	4b2b      	ldr	r3, [pc, #172]	; (800ae20 <prvSwitchTimerLists+0xc0>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7fe f92f 	bl	8008fe4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d02e      	beq.n	800adfa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	4413      	add	r3, r2
 800ada4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d90e      	bls.n	800adcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adba:	4b19      	ldr	r3, [pc, #100]	; (800ae20 <prvSwitchTimerLists+0xc0>)
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4619      	mov	r1, r3
 800adc4:	4610      	mov	r0, r2
 800adc6:	f7fe f8d4 	bl	8008f72 <vListInsert>
 800adca:	e016      	b.n	800adfa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adcc:	2300      	movs	r3, #0
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	2300      	movs	r3, #0
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	2100      	movs	r1, #0
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f7ff fd60 	bl	800a89c <xTimerGenericCommand>
 800addc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	603b      	str	r3, [r7, #0]
}
 800adf6:	bf00      	nop
 800adf8:	e7fe      	b.n	800adf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adfa:	4b09      	ldr	r3, [pc, #36]	; (800ae20 <prvSwitchTimerLists+0xc0>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1b1      	bne.n	800ad68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ae04:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <prvSwitchTimerLists+0xc0>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae0a:	4b06      	ldr	r3, [pc, #24]	; (800ae24 <prvSwitchTimerLists+0xc4>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a04      	ldr	r2, [pc, #16]	; (800ae20 <prvSwitchTimerLists+0xc0>)
 800ae10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae12:	4a04      	ldr	r2, [pc, #16]	; (800ae24 <prvSwitchTimerLists+0xc4>)
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	6013      	str	r3, [r2, #0]
}
 800ae18:	bf00      	nop
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20000df8 	.word	0x20000df8
 800ae24:	20000dfc 	.word	0x20000dfc

0800ae28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae2e:	f000 f969 	bl	800b104 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae32:	4b15      	ldr	r3, [pc, #84]	; (800ae88 <prvCheckForValidListAndQueue+0x60>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d120      	bne.n	800ae7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae3a:	4814      	ldr	r0, [pc, #80]	; (800ae8c <prvCheckForValidListAndQueue+0x64>)
 800ae3c:	f7fe f848 	bl	8008ed0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae40:	4813      	ldr	r0, [pc, #76]	; (800ae90 <prvCheckForValidListAndQueue+0x68>)
 800ae42:	f7fe f845 	bl	8008ed0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae46:	4b13      	ldr	r3, [pc, #76]	; (800ae94 <prvCheckForValidListAndQueue+0x6c>)
 800ae48:	4a10      	ldr	r2, [pc, #64]	; (800ae8c <prvCheckForValidListAndQueue+0x64>)
 800ae4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae4c:	4b12      	ldr	r3, [pc, #72]	; (800ae98 <prvCheckForValidListAndQueue+0x70>)
 800ae4e:	4a10      	ldr	r2, [pc, #64]	; (800ae90 <prvCheckForValidListAndQueue+0x68>)
 800ae50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae52:	2300      	movs	r3, #0
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	4b11      	ldr	r3, [pc, #68]	; (800ae9c <prvCheckForValidListAndQueue+0x74>)
 800ae58:	4a11      	ldr	r2, [pc, #68]	; (800aea0 <prvCheckForValidListAndQueue+0x78>)
 800ae5a:	2110      	movs	r1, #16
 800ae5c:	200a      	movs	r0, #10
 800ae5e:	f7fe f953 	bl	8009108 <xQueueGenericCreateStatic>
 800ae62:	4603      	mov	r3, r0
 800ae64:	4a08      	ldr	r2, [pc, #32]	; (800ae88 <prvCheckForValidListAndQueue+0x60>)
 800ae66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae68:	4b07      	ldr	r3, [pc, #28]	; (800ae88 <prvCheckForValidListAndQueue+0x60>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d005      	beq.n	800ae7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae70:	4b05      	ldr	r3, [pc, #20]	; (800ae88 <prvCheckForValidListAndQueue+0x60>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	490b      	ldr	r1, [pc, #44]	; (800aea4 <prvCheckForValidListAndQueue+0x7c>)
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fe fd6c 	bl	8009954 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae7c:	f000 f972 	bl	800b164 <vPortExitCritical>
}
 800ae80:	bf00      	nop
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	20000e00 	.word	0x20000e00
 800ae8c:	20000dd0 	.word	0x20000dd0
 800ae90:	20000de4 	.word	0x20000de4
 800ae94:	20000df8 	.word	0x20000df8
 800ae98:	20000dfc 	.word	0x20000dfc
 800ae9c:	20000eac 	.word	0x20000eac
 800aea0:	20000e0c 	.word	0x20000e0c
 800aea4:	0800e54c 	.word	0x0800e54c

0800aea8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3b04      	subs	r3, #4
 800aeb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3b04      	subs	r3, #4
 800aec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	f023 0201 	bic.w	r2, r3, #1
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3b04      	subs	r3, #4
 800aed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aed8:	4a0c      	ldr	r2, [pc, #48]	; (800af0c <pxPortInitialiseStack+0x64>)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	3b14      	subs	r3, #20
 800aee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	3b04      	subs	r3, #4
 800aeee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f06f 0202 	mvn.w	r2, #2
 800aef6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	3b20      	subs	r3, #32
 800aefc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aefe:	68fb      	ldr	r3, [r7, #12]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3714      	adds	r7, #20
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	0800af11 	.word	0x0800af11

0800af10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af1a:	4b12      	ldr	r3, [pc, #72]	; (800af64 <prvTaskExitError+0x54>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af22:	d00a      	beq.n	800af3a <prvTaskExitError+0x2a>
	__asm volatile
 800af24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	60fb      	str	r3, [r7, #12]
}
 800af36:	bf00      	nop
 800af38:	e7fe      	b.n	800af38 <prvTaskExitError+0x28>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	60bb      	str	r3, [r7, #8]
}
 800af4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af4e:	bf00      	nop
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0fc      	beq.n	800af50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af56:	bf00      	nop
 800af58:	bf00      	nop
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	2000000c 	.word	0x2000000c
	...

0800af70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af70:	4b07      	ldr	r3, [pc, #28]	; (800af90 <pxCurrentTCBConst2>)
 800af72:	6819      	ldr	r1, [r3, #0]
 800af74:	6808      	ldr	r0, [r1, #0]
 800af76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7a:	f380 8809 	msr	PSP, r0
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f04f 0000 	mov.w	r0, #0
 800af86:	f380 8811 	msr	BASEPRI, r0
 800af8a:	4770      	bx	lr
 800af8c:	f3af 8000 	nop.w

0800af90 <pxCurrentTCBConst2>:
 800af90:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af94:	bf00      	nop
 800af96:	bf00      	nop

0800af98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af98:	4808      	ldr	r0, [pc, #32]	; (800afbc <prvPortStartFirstTask+0x24>)
 800af9a:	6800      	ldr	r0, [r0, #0]
 800af9c:	6800      	ldr	r0, [r0, #0]
 800af9e:	f380 8808 	msr	MSP, r0
 800afa2:	f04f 0000 	mov.w	r0, #0
 800afa6:	f380 8814 	msr	CONTROL, r0
 800afaa:	b662      	cpsie	i
 800afac:	b661      	cpsie	f
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	df00      	svc	0
 800afb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afba:	bf00      	nop
 800afbc:	e000ed08 	.word	0xe000ed08

0800afc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afc6:	4b46      	ldr	r3, [pc, #280]	; (800b0e0 <xPortStartScheduler+0x120>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a46      	ldr	r2, [pc, #280]	; (800b0e4 <xPortStartScheduler+0x124>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d10a      	bne.n	800afe6 <xPortStartScheduler+0x26>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	613b      	str	r3, [r7, #16]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afe6:	4b3e      	ldr	r3, [pc, #248]	; (800b0e0 <xPortStartScheduler+0x120>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a3f      	ldr	r2, [pc, #252]	; (800b0e8 <xPortStartScheduler+0x128>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d10a      	bne.n	800b006 <xPortStartScheduler+0x46>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	60fb      	str	r3, [r7, #12]
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b006:	4b39      	ldr	r3, [pc, #228]	; (800b0ec <xPortStartScheduler+0x12c>)
 800b008:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	22ff      	movs	r2, #255	; 0xff
 800b016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b020:	78fb      	ldrb	r3, [r7, #3]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	4b31      	ldr	r3, [pc, #196]	; (800b0f0 <xPortStartScheduler+0x130>)
 800b02c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b02e:	4b31      	ldr	r3, [pc, #196]	; (800b0f4 <xPortStartScheduler+0x134>)
 800b030:	2207      	movs	r2, #7
 800b032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b034:	e009      	b.n	800b04a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b036:	4b2f      	ldr	r3, [pc, #188]	; (800b0f4 <xPortStartScheduler+0x134>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3b01      	subs	r3, #1
 800b03c:	4a2d      	ldr	r2, [pc, #180]	; (800b0f4 <xPortStartScheduler+0x134>)
 800b03e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	b2db      	uxtb	r3, r3
 800b048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b04a:	78fb      	ldrb	r3, [r7, #3]
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b052:	2b80      	cmp	r3, #128	; 0x80
 800b054:	d0ef      	beq.n	800b036 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b056:	4b27      	ldr	r3, [pc, #156]	; (800b0f4 <xPortStartScheduler+0x134>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f1c3 0307 	rsb	r3, r3, #7
 800b05e:	2b04      	cmp	r3, #4
 800b060:	d00a      	beq.n	800b078 <xPortStartScheduler+0xb8>
	__asm volatile
 800b062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	60bb      	str	r3, [r7, #8]
}
 800b074:	bf00      	nop
 800b076:	e7fe      	b.n	800b076 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b078:	4b1e      	ldr	r3, [pc, #120]	; (800b0f4 <xPortStartScheduler+0x134>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	021b      	lsls	r3, r3, #8
 800b07e:	4a1d      	ldr	r2, [pc, #116]	; (800b0f4 <xPortStartScheduler+0x134>)
 800b080:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b082:	4b1c      	ldr	r3, [pc, #112]	; (800b0f4 <xPortStartScheduler+0x134>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b08a:	4a1a      	ldr	r2, [pc, #104]	; (800b0f4 <xPortStartScheduler+0x134>)
 800b08c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	b2da      	uxtb	r2, r3
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b096:	4b18      	ldr	r3, [pc, #96]	; (800b0f8 <xPortStartScheduler+0x138>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a17      	ldr	r2, [pc, #92]	; (800b0f8 <xPortStartScheduler+0x138>)
 800b09c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0a2:	4b15      	ldr	r3, [pc, #84]	; (800b0f8 <xPortStartScheduler+0x138>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a14      	ldr	r2, [pc, #80]	; (800b0f8 <xPortStartScheduler+0x138>)
 800b0a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b0ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0ae:	f000 f8dd 	bl	800b26c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0b2:	4b12      	ldr	r3, [pc, #72]	; (800b0fc <xPortStartScheduler+0x13c>)
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0b8:	f000 f8fc 	bl	800b2b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0bc:	4b10      	ldr	r3, [pc, #64]	; (800b100 <xPortStartScheduler+0x140>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a0f      	ldr	r2, [pc, #60]	; (800b100 <xPortStartScheduler+0x140>)
 800b0c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0c8:	f7ff ff66 	bl	800af98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0cc:	f7ff f852 	bl	800a174 <vTaskSwitchContext>
	prvTaskExitError();
 800b0d0:	f7ff ff1e 	bl	800af10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3718      	adds	r7, #24
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	e000ed00 	.word	0xe000ed00
 800b0e4:	410fc271 	.word	0x410fc271
 800b0e8:	410fc270 	.word	0x410fc270
 800b0ec:	e000e400 	.word	0xe000e400
 800b0f0:	20000efc 	.word	0x20000efc
 800b0f4:	20000f00 	.word	0x20000f00
 800b0f8:	e000ed20 	.word	0xe000ed20
 800b0fc:	2000000c 	.word	0x2000000c
 800b100:	e000ef34 	.word	0xe000ef34

0800b104 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
	__asm volatile
 800b10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10e:	f383 8811 	msr	BASEPRI, r3
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	607b      	str	r3, [r7, #4]
}
 800b11c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b11e:	4b0f      	ldr	r3, [pc, #60]	; (800b15c <vPortEnterCritical+0x58>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3301      	adds	r3, #1
 800b124:	4a0d      	ldr	r2, [pc, #52]	; (800b15c <vPortEnterCritical+0x58>)
 800b126:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b128:	4b0c      	ldr	r3, [pc, #48]	; (800b15c <vPortEnterCritical+0x58>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d10f      	bne.n	800b150 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b130:	4b0b      	ldr	r3, [pc, #44]	; (800b160 <vPortEnterCritical+0x5c>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00a      	beq.n	800b150 <vPortEnterCritical+0x4c>
	__asm volatile
 800b13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	603b      	str	r3, [r7, #0]
}
 800b14c:	bf00      	nop
 800b14e:	e7fe      	b.n	800b14e <vPortEnterCritical+0x4a>
	}
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	2000000c 	.word	0x2000000c
 800b160:	e000ed04 	.word	0xe000ed04

0800b164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b16a:	4b12      	ldr	r3, [pc, #72]	; (800b1b4 <vPortExitCritical+0x50>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10a      	bne.n	800b188 <vPortExitCritical+0x24>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	607b      	str	r3, [r7, #4]
}
 800b184:	bf00      	nop
 800b186:	e7fe      	b.n	800b186 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b188:	4b0a      	ldr	r3, [pc, #40]	; (800b1b4 <vPortExitCritical+0x50>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	4a09      	ldr	r2, [pc, #36]	; (800b1b4 <vPortExitCritical+0x50>)
 800b190:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b192:	4b08      	ldr	r3, [pc, #32]	; (800b1b4 <vPortExitCritical+0x50>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d105      	bne.n	800b1a6 <vPortExitCritical+0x42>
 800b19a:	2300      	movs	r3, #0
 800b19c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	f383 8811 	msr	BASEPRI, r3
}
 800b1a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1a6:	bf00      	nop
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	2000000c 	.word	0x2000000c
	...

0800b1c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1c0:	f3ef 8009 	mrs	r0, PSP
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	4b15      	ldr	r3, [pc, #84]	; (800b220 <pxCurrentTCBConst>)
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	f01e 0f10 	tst.w	lr, #16
 800b1d0:	bf08      	it	eq
 800b1d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1da:	6010      	str	r0, [r2, #0]
 800b1dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b1e4:	f380 8811 	msr	BASEPRI, r0
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f7fe ffc0 	bl	800a174 <vTaskSwitchContext>
 800b1f4:	f04f 0000 	mov.w	r0, #0
 800b1f8:	f380 8811 	msr	BASEPRI, r0
 800b1fc:	bc09      	pop	{r0, r3}
 800b1fe:	6819      	ldr	r1, [r3, #0]
 800b200:	6808      	ldr	r0, [r1, #0]
 800b202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b206:	f01e 0f10 	tst.w	lr, #16
 800b20a:	bf08      	it	eq
 800b20c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b210:	f380 8809 	msr	PSP, r0
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	f3af 8000 	nop.w

0800b220 <pxCurrentTCBConst>:
 800b220:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b224:	bf00      	nop
 800b226:	bf00      	nop

0800b228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	607b      	str	r3, [r7, #4]
}
 800b240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b242:	f7fe fedd 	bl	800a000 <xTaskIncrementTick>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b24c:	4b06      	ldr	r3, [pc, #24]	; (800b268 <xPortSysTickHandler+0x40>)
 800b24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	2300      	movs	r3, #0
 800b256:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	f383 8811 	msr	BASEPRI, r3
}
 800b25e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	e000ed04 	.word	0xe000ed04

0800b26c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b26c:	b480      	push	{r7}
 800b26e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b270:	4b0b      	ldr	r3, [pc, #44]	; (800b2a0 <vPortSetupTimerInterrupt+0x34>)
 800b272:	2200      	movs	r2, #0
 800b274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b276:	4b0b      	ldr	r3, [pc, #44]	; (800b2a4 <vPortSetupTimerInterrupt+0x38>)
 800b278:	2200      	movs	r2, #0
 800b27a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b27c:	4b0a      	ldr	r3, [pc, #40]	; (800b2a8 <vPortSetupTimerInterrupt+0x3c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a0a      	ldr	r2, [pc, #40]	; (800b2ac <vPortSetupTimerInterrupt+0x40>)
 800b282:	fba2 2303 	umull	r2, r3, r2, r3
 800b286:	099b      	lsrs	r3, r3, #6
 800b288:	4a09      	ldr	r2, [pc, #36]	; (800b2b0 <vPortSetupTimerInterrupt+0x44>)
 800b28a:	3b01      	subs	r3, #1
 800b28c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b28e:	4b04      	ldr	r3, [pc, #16]	; (800b2a0 <vPortSetupTimerInterrupt+0x34>)
 800b290:	2207      	movs	r2, #7
 800b292:	601a      	str	r2, [r3, #0]
}
 800b294:	bf00      	nop
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	e000e010 	.word	0xe000e010
 800b2a4:	e000e018 	.word	0xe000e018
 800b2a8:	20000000 	.word	0x20000000
 800b2ac:	10624dd3 	.word	0x10624dd3
 800b2b0:	e000e014 	.word	0xe000e014

0800b2b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2c4 <vPortEnableVFP+0x10>
 800b2b8:	6801      	ldr	r1, [r0, #0]
 800b2ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b2be:	6001      	str	r1, [r0, #0]
 800b2c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2c2:	bf00      	nop
 800b2c4:	e000ed88 	.word	0xe000ed88

0800b2c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2ce:	f3ef 8305 	mrs	r3, IPSR
 800b2d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2b0f      	cmp	r3, #15
 800b2d8:	d914      	bls.n	800b304 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2da:	4a17      	ldr	r2, [pc, #92]	; (800b338 <vPortValidateInterruptPriority+0x70>)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	4413      	add	r3, r2
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2e4:	4b15      	ldr	r3, [pc, #84]	; (800b33c <vPortValidateInterruptPriority+0x74>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	7afa      	ldrb	r2, [r7, #11]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d20a      	bcs.n	800b304 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	607b      	str	r3, [r7, #4]
}
 800b300:	bf00      	nop
 800b302:	e7fe      	b.n	800b302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b304:	4b0e      	ldr	r3, [pc, #56]	; (800b340 <vPortValidateInterruptPriority+0x78>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b30c:	4b0d      	ldr	r3, [pc, #52]	; (800b344 <vPortValidateInterruptPriority+0x7c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	429a      	cmp	r2, r3
 800b312:	d90a      	bls.n	800b32a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	603b      	str	r3, [r7, #0]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <vPortValidateInterruptPriority+0x60>
	}
 800b32a:	bf00      	nop
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	e000e3f0 	.word	0xe000e3f0
 800b33c:	20000efc 	.word	0x20000efc
 800b340:	e000ed0c 	.word	0xe000ed0c
 800b344:	20000f00 	.word	0x20000f00

0800b348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b08a      	sub	sp, #40	; 0x28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b350:	2300      	movs	r3, #0
 800b352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b354:	f7fe fd98 	bl	8009e88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b358:	4b5b      	ldr	r3, [pc, #364]	; (800b4c8 <pvPortMalloc+0x180>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d101      	bne.n	800b364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b360:	f000 f920 	bl	800b5a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b364:	4b59      	ldr	r3, [pc, #356]	; (800b4cc <pvPortMalloc+0x184>)
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4013      	ands	r3, r2
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f040 8093 	bne.w	800b498 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d01d      	beq.n	800b3b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b378:	2208      	movs	r2, #8
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4413      	add	r3, r2
 800b37e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f003 0307 	and.w	r3, r3, #7
 800b386:	2b00      	cmp	r3, #0
 800b388:	d014      	beq.n	800b3b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f023 0307 	bic.w	r3, r3, #7
 800b390:	3308      	adds	r3, #8
 800b392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f003 0307 	and.w	r3, r3, #7
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00a      	beq.n	800b3b4 <pvPortMalloc+0x6c>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	617b      	str	r3, [r7, #20]
}
 800b3b0:	bf00      	nop
 800b3b2:	e7fe      	b.n	800b3b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d06e      	beq.n	800b498 <pvPortMalloc+0x150>
 800b3ba:	4b45      	ldr	r3, [pc, #276]	; (800b4d0 <pvPortMalloc+0x188>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d869      	bhi.n	800b498 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3c4:	4b43      	ldr	r3, [pc, #268]	; (800b4d4 <pvPortMalloc+0x18c>)
 800b3c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3c8:	4b42      	ldr	r3, [pc, #264]	; (800b4d4 <pvPortMalloc+0x18c>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3ce:	e004      	b.n	800b3da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d903      	bls.n	800b3ec <pvPortMalloc+0xa4>
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1f1      	bne.n	800b3d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3ec:	4b36      	ldr	r3, [pc, #216]	; (800b4c8 <pvPortMalloc+0x180>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d050      	beq.n	800b498 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3f6:	6a3b      	ldr	r3, [r7, #32]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2208      	movs	r2, #8
 800b3fc:	4413      	add	r3, r2
 800b3fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	1ad2      	subs	r2, r2, r3
 800b410:	2308      	movs	r3, #8
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	429a      	cmp	r2, r3
 800b416:	d91f      	bls.n	800b458 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4413      	add	r3, r2
 800b41e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	f003 0307 	and.w	r3, r3, #7
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00a      	beq.n	800b440 <pvPortMalloc+0xf8>
	__asm volatile
 800b42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42e:	f383 8811 	msr	BASEPRI, r3
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	613b      	str	r3, [r7, #16]
}
 800b43c:	bf00      	nop
 800b43e:	e7fe      	b.n	800b43e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	1ad2      	subs	r2, r2, r3
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b452:	69b8      	ldr	r0, [r7, #24]
 800b454:	f000 f908 	bl	800b668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b458:	4b1d      	ldr	r3, [pc, #116]	; (800b4d0 <pvPortMalloc+0x188>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	4a1b      	ldr	r2, [pc, #108]	; (800b4d0 <pvPortMalloc+0x188>)
 800b464:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b466:	4b1a      	ldr	r3, [pc, #104]	; (800b4d0 <pvPortMalloc+0x188>)
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	4b1b      	ldr	r3, [pc, #108]	; (800b4d8 <pvPortMalloc+0x190>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d203      	bcs.n	800b47a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b472:	4b17      	ldr	r3, [pc, #92]	; (800b4d0 <pvPortMalloc+0x188>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a18      	ldr	r2, [pc, #96]	; (800b4d8 <pvPortMalloc+0x190>)
 800b478:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	4b13      	ldr	r3, [pc, #76]	; (800b4cc <pvPortMalloc+0x184>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	431a      	orrs	r2, r3
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	2200      	movs	r2, #0
 800b48c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b48e:	4b13      	ldr	r3, [pc, #76]	; (800b4dc <pvPortMalloc+0x194>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3301      	adds	r3, #1
 800b494:	4a11      	ldr	r2, [pc, #68]	; (800b4dc <pvPortMalloc+0x194>)
 800b496:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b498:	f7fe fd04 	bl	8009ea4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	f003 0307 	and.w	r3, r3, #7
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00a      	beq.n	800b4bc <pvPortMalloc+0x174>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	60fb      	str	r3, [r7, #12]
}
 800b4b8:	bf00      	nop
 800b4ba:	e7fe      	b.n	800b4ba <pvPortMalloc+0x172>
	return pvReturn;
 800b4bc:	69fb      	ldr	r3, [r7, #28]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3728      	adds	r7, #40	; 0x28
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20004b0c 	.word	0x20004b0c
 800b4cc:	20004b20 	.word	0x20004b20
 800b4d0:	20004b10 	.word	0x20004b10
 800b4d4:	20004b04 	.word	0x20004b04
 800b4d8:	20004b14 	.word	0x20004b14
 800b4dc:	20004b18 	.word	0x20004b18

0800b4e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d04d      	beq.n	800b58e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4f2:	2308      	movs	r3, #8
 800b4f4:	425b      	negs	r3, r3
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	685a      	ldr	r2, [r3, #4]
 800b504:	4b24      	ldr	r3, [pc, #144]	; (800b598 <vPortFree+0xb8>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4013      	ands	r3, r2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10a      	bne.n	800b524 <vPortFree+0x44>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	60fb      	str	r3, [r7, #12]
}
 800b520:	bf00      	nop
 800b522:	e7fe      	b.n	800b522 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00a      	beq.n	800b542 <vPortFree+0x62>
	__asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	60bb      	str	r3, [r7, #8]
}
 800b53e:	bf00      	nop
 800b540:	e7fe      	b.n	800b540 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	4b14      	ldr	r3, [pc, #80]	; (800b598 <vPortFree+0xb8>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4013      	ands	r3, r2
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d01e      	beq.n	800b58e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d11a      	bne.n	800b58e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	4b0e      	ldr	r3, [pc, #56]	; (800b598 <vPortFree+0xb8>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	43db      	mvns	r3, r3
 800b562:	401a      	ands	r2, r3
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b568:	f7fe fc8e 	bl	8009e88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	685a      	ldr	r2, [r3, #4]
 800b570:	4b0a      	ldr	r3, [pc, #40]	; (800b59c <vPortFree+0xbc>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4413      	add	r3, r2
 800b576:	4a09      	ldr	r2, [pc, #36]	; (800b59c <vPortFree+0xbc>)
 800b578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b57a:	6938      	ldr	r0, [r7, #16]
 800b57c:	f000 f874 	bl	800b668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b580:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <vPortFree+0xc0>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	4a06      	ldr	r2, [pc, #24]	; (800b5a0 <vPortFree+0xc0>)
 800b588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b58a:	f7fe fc8b 	bl	8009ea4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b58e:	bf00      	nop
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20004b20 	.word	0x20004b20
 800b59c:	20004b10 	.word	0x20004b10
 800b5a0:	20004b1c 	.word	0x20004b1c

0800b5a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b5aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b5ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b5b0:	4b27      	ldr	r3, [pc, #156]	; (800b650 <prvHeapInit+0xac>)
 800b5b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00c      	beq.n	800b5d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3307      	adds	r3, #7
 800b5c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f023 0307 	bic.w	r3, r3, #7
 800b5ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	4a1f      	ldr	r2, [pc, #124]	; (800b650 <prvHeapInit+0xac>)
 800b5d4:	4413      	add	r3, r2
 800b5d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5dc:	4a1d      	ldr	r2, [pc, #116]	; (800b654 <prvHeapInit+0xb0>)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5e2:	4b1c      	ldr	r3, [pc, #112]	; (800b654 <prvHeapInit+0xb0>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5f0:	2208      	movs	r2, #8
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	1a9b      	subs	r3, r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f023 0307 	bic.w	r3, r3, #7
 800b5fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	4a15      	ldr	r2, [pc, #84]	; (800b658 <prvHeapInit+0xb4>)
 800b604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b606:	4b14      	ldr	r3, [pc, #80]	; (800b658 <prvHeapInit+0xb4>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2200      	movs	r2, #0
 800b60c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b60e:	4b12      	ldr	r3, [pc, #72]	; (800b658 <prvHeapInit+0xb4>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2200      	movs	r2, #0
 800b614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	1ad2      	subs	r2, r2, r3
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b624:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <prvHeapInit+0xb4>)
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	4a0a      	ldr	r2, [pc, #40]	; (800b65c <prvHeapInit+0xb8>)
 800b632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	4a09      	ldr	r2, [pc, #36]	; (800b660 <prvHeapInit+0xbc>)
 800b63a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b63c:	4b09      	ldr	r3, [pc, #36]	; (800b664 <prvHeapInit+0xc0>)
 800b63e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b642:	601a      	str	r2, [r3, #0]
}
 800b644:	bf00      	nop
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr
 800b650:	20000f04 	.word	0x20000f04
 800b654:	20004b04 	.word	0x20004b04
 800b658:	20004b0c 	.word	0x20004b0c
 800b65c:	20004b14 	.word	0x20004b14
 800b660:	20004b10 	.word	0x20004b10
 800b664:	20004b20 	.word	0x20004b20

0800b668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b670:	4b28      	ldr	r3, [pc, #160]	; (800b714 <prvInsertBlockIntoFreeList+0xac>)
 800b672:	60fb      	str	r3, [r7, #12]
 800b674:	e002      	b.n	800b67c <prvInsertBlockIntoFreeList+0x14>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	60fb      	str	r3, [r7, #12]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	429a      	cmp	r2, r3
 800b684:	d8f7      	bhi.n	800b676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	4413      	add	r3, r2
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	429a      	cmp	r2, r3
 800b696:	d108      	bne.n	800b6aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	441a      	add	r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	441a      	add	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d118      	bne.n	800b6f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	4b15      	ldr	r3, [pc, #84]	; (800b718 <prvInsertBlockIntoFreeList+0xb0>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d00d      	beq.n	800b6e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	441a      	add	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	e008      	b.n	800b6f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6e6:	4b0c      	ldr	r3, [pc, #48]	; (800b718 <prvInsertBlockIntoFreeList+0xb0>)
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	e003      	b.n	800b6f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d002      	beq.n	800b706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b706:	bf00      	nop
 800b708:	3714      	adds	r7, #20
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	20004b04 	.word	0x20004b04
 800b718:	20004b0c 	.word	0x20004b0c

0800b71c <__errno>:
 800b71c:	4b01      	ldr	r3, [pc, #4]	; (800b724 <__errno+0x8>)
 800b71e:	6818      	ldr	r0, [r3, #0]
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	20000010 	.word	0x20000010

0800b728 <__libc_init_array>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	4d0d      	ldr	r5, [pc, #52]	; (800b760 <__libc_init_array+0x38>)
 800b72c:	4c0d      	ldr	r4, [pc, #52]	; (800b764 <__libc_init_array+0x3c>)
 800b72e:	1b64      	subs	r4, r4, r5
 800b730:	10a4      	asrs	r4, r4, #2
 800b732:	2600      	movs	r6, #0
 800b734:	42a6      	cmp	r6, r4
 800b736:	d109      	bne.n	800b74c <__libc_init_array+0x24>
 800b738:	4d0b      	ldr	r5, [pc, #44]	; (800b768 <__libc_init_array+0x40>)
 800b73a:	4c0c      	ldr	r4, [pc, #48]	; (800b76c <__libc_init_array+0x44>)
 800b73c:	f002 feb6 	bl	800e4ac <_init>
 800b740:	1b64      	subs	r4, r4, r5
 800b742:	10a4      	asrs	r4, r4, #2
 800b744:	2600      	movs	r6, #0
 800b746:	42a6      	cmp	r6, r4
 800b748:	d105      	bne.n	800b756 <__libc_init_array+0x2e>
 800b74a:	bd70      	pop	{r4, r5, r6, pc}
 800b74c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b750:	4798      	blx	r3
 800b752:	3601      	adds	r6, #1
 800b754:	e7ee      	b.n	800b734 <__libc_init_array+0xc>
 800b756:	f855 3b04 	ldr.w	r3, [r5], #4
 800b75a:	4798      	blx	r3
 800b75c:	3601      	adds	r6, #1
 800b75e:	e7f2      	b.n	800b746 <__libc_init_array+0x1e>
 800b760:	0800f44c 	.word	0x0800f44c
 800b764:	0800f44c 	.word	0x0800f44c
 800b768:	0800f44c 	.word	0x0800f44c
 800b76c:	0800f450 	.word	0x0800f450

0800b770 <memcpy>:
 800b770:	440a      	add	r2, r1
 800b772:	4291      	cmp	r1, r2
 800b774:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b778:	d100      	bne.n	800b77c <memcpy+0xc>
 800b77a:	4770      	bx	lr
 800b77c:	b510      	push	{r4, lr}
 800b77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b782:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b786:	4291      	cmp	r1, r2
 800b788:	d1f9      	bne.n	800b77e <memcpy+0xe>
 800b78a:	bd10      	pop	{r4, pc}

0800b78c <memmove>:
 800b78c:	4288      	cmp	r0, r1
 800b78e:	b510      	push	{r4, lr}
 800b790:	eb01 0402 	add.w	r4, r1, r2
 800b794:	d902      	bls.n	800b79c <memmove+0x10>
 800b796:	4284      	cmp	r4, r0
 800b798:	4623      	mov	r3, r4
 800b79a:	d807      	bhi.n	800b7ac <memmove+0x20>
 800b79c:	1e43      	subs	r3, r0, #1
 800b79e:	42a1      	cmp	r1, r4
 800b7a0:	d008      	beq.n	800b7b4 <memmove+0x28>
 800b7a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7aa:	e7f8      	b.n	800b79e <memmove+0x12>
 800b7ac:	4402      	add	r2, r0
 800b7ae:	4601      	mov	r1, r0
 800b7b0:	428a      	cmp	r2, r1
 800b7b2:	d100      	bne.n	800b7b6 <memmove+0x2a>
 800b7b4:	bd10      	pop	{r4, pc}
 800b7b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7be:	e7f7      	b.n	800b7b0 <memmove+0x24>

0800b7c0 <memset>:
 800b7c0:	4402      	add	r2, r0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d100      	bne.n	800b7ca <memset+0xa>
 800b7c8:	4770      	bx	lr
 800b7ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b7ce:	e7f9      	b.n	800b7c4 <memset+0x4>

0800b7d0 <__cvt>:
 800b7d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d4:	ec55 4b10 	vmov	r4, r5, d0
 800b7d8:	2d00      	cmp	r5, #0
 800b7da:	460e      	mov	r6, r1
 800b7dc:	4619      	mov	r1, r3
 800b7de:	462b      	mov	r3, r5
 800b7e0:	bfbb      	ittet	lt
 800b7e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b7e6:	461d      	movlt	r5, r3
 800b7e8:	2300      	movge	r3, #0
 800b7ea:	232d      	movlt	r3, #45	; 0x2d
 800b7ec:	700b      	strb	r3, [r1, #0]
 800b7ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b7f4:	4691      	mov	r9, r2
 800b7f6:	f023 0820 	bic.w	r8, r3, #32
 800b7fa:	bfbc      	itt	lt
 800b7fc:	4622      	movlt	r2, r4
 800b7fe:	4614      	movlt	r4, r2
 800b800:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b804:	d005      	beq.n	800b812 <__cvt+0x42>
 800b806:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b80a:	d100      	bne.n	800b80e <__cvt+0x3e>
 800b80c:	3601      	adds	r6, #1
 800b80e:	2102      	movs	r1, #2
 800b810:	e000      	b.n	800b814 <__cvt+0x44>
 800b812:	2103      	movs	r1, #3
 800b814:	ab03      	add	r3, sp, #12
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	ab02      	add	r3, sp, #8
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	ec45 4b10 	vmov	d0, r4, r5
 800b820:	4653      	mov	r3, sl
 800b822:	4632      	mov	r2, r6
 800b824:	f000 fcec 	bl	800c200 <_dtoa_r>
 800b828:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b82c:	4607      	mov	r7, r0
 800b82e:	d102      	bne.n	800b836 <__cvt+0x66>
 800b830:	f019 0f01 	tst.w	r9, #1
 800b834:	d022      	beq.n	800b87c <__cvt+0xac>
 800b836:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b83a:	eb07 0906 	add.w	r9, r7, r6
 800b83e:	d110      	bne.n	800b862 <__cvt+0x92>
 800b840:	783b      	ldrb	r3, [r7, #0]
 800b842:	2b30      	cmp	r3, #48	; 0x30
 800b844:	d10a      	bne.n	800b85c <__cvt+0x8c>
 800b846:	2200      	movs	r2, #0
 800b848:	2300      	movs	r3, #0
 800b84a:	4620      	mov	r0, r4
 800b84c:	4629      	mov	r1, r5
 800b84e:	f7f5 f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b852:	b918      	cbnz	r0, 800b85c <__cvt+0x8c>
 800b854:	f1c6 0601 	rsb	r6, r6, #1
 800b858:	f8ca 6000 	str.w	r6, [sl]
 800b85c:	f8da 3000 	ldr.w	r3, [sl]
 800b860:	4499      	add	r9, r3
 800b862:	2200      	movs	r2, #0
 800b864:	2300      	movs	r3, #0
 800b866:	4620      	mov	r0, r4
 800b868:	4629      	mov	r1, r5
 800b86a:	f7f5 f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b86e:	b108      	cbz	r0, 800b874 <__cvt+0xa4>
 800b870:	f8cd 900c 	str.w	r9, [sp, #12]
 800b874:	2230      	movs	r2, #48	; 0x30
 800b876:	9b03      	ldr	r3, [sp, #12]
 800b878:	454b      	cmp	r3, r9
 800b87a:	d307      	bcc.n	800b88c <__cvt+0xbc>
 800b87c:	9b03      	ldr	r3, [sp, #12]
 800b87e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b880:	1bdb      	subs	r3, r3, r7
 800b882:	4638      	mov	r0, r7
 800b884:	6013      	str	r3, [r2, #0]
 800b886:	b004      	add	sp, #16
 800b888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88c:	1c59      	adds	r1, r3, #1
 800b88e:	9103      	str	r1, [sp, #12]
 800b890:	701a      	strb	r2, [r3, #0]
 800b892:	e7f0      	b.n	800b876 <__cvt+0xa6>

0800b894 <__exponent>:
 800b894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b896:	4603      	mov	r3, r0
 800b898:	2900      	cmp	r1, #0
 800b89a:	bfb8      	it	lt
 800b89c:	4249      	neglt	r1, r1
 800b89e:	f803 2b02 	strb.w	r2, [r3], #2
 800b8a2:	bfb4      	ite	lt
 800b8a4:	222d      	movlt	r2, #45	; 0x2d
 800b8a6:	222b      	movge	r2, #43	; 0x2b
 800b8a8:	2909      	cmp	r1, #9
 800b8aa:	7042      	strb	r2, [r0, #1]
 800b8ac:	dd2a      	ble.n	800b904 <__exponent+0x70>
 800b8ae:	f10d 0407 	add.w	r4, sp, #7
 800b8b2:	46a4      	mov	ip, r4
 800b8b4:	270a      	movs	r7, #10
 800b8b6:	46a6      	mov	lr, r4
 800b8b8:	460a      	mov	r2, r1
 800b8ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800b8be:	fb07 1516 	mls	r5, r7, r6, r1
 800b8c2:	3530      	adds	r5, #48	; 0x30
 800b8c4:	2a63      	cmp	r2, #99	; 0x63
 800b8c6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b8ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	dcf1      	bgt.n	800b8b6 <__exponent+0x22>
 800b8d2:	3130      	adds	r1, #48	; 0x30
 800b8d4:	f1ae 0502 	sub.w	r5, lr, #2
 800b8d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b8dc:	1c44      	adds	r4, r0, #1
 800b8de:	4629      	mov	r1, r5
 800b8e0:	4561      	cmp	r1, ip
 800b8e2:	d30a      	bcc.n	800b8fa <__exponent+0x66>
 800b8e4:	f10d 0209 	add.w	r2, sp, #9
 800b8e8:	eba2 020e 	sub.w	r2, r2, lr
 800b8ec:	4565      	cmp	r5, ip
 800b8ee:	bf88      	it	hi
 800b8f0:	2200      	movhi	r2, #0
 800b8f2:	4413      	add	r3, r2
 800b8f4:	1a18      	subs	r0, r3, r0
 800b8f6:	b003      	add	sp, #12
 800b8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b902:	e7ed      	b.n	800b8e0 <__exponent+0x4c>
 800b904:	2330      	movs	r3, #48	; 0x30
 800b906:	3130      	adds	r1, #48	; 0x30
 800b908:	7083      	strb	r3, [r0, #2]
 800b90a:	70c1      	strb	r1, [r0, #3]
 800b90c:	1d03      	adds	r3, r0, #4
 800b90e:	e7f1      	b.n	800b8f4 <__exponent+0x60>

0800b910 <_printf_float>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	ed2d 8b02 	vpush	{d8}
 800b918:	b08d      	sub	sp, #52	; 0x34
 800b91a:	460c      	mov	r4, r1
 800b91c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b920:	4616      	mov	r6, r2
 800b922:	461f      	mov	r7, r3
 800b924:	4605      	mov	r5, r0
 800b926:	f001 fa57 	bl	800cdd8 <_localeconv_r>
 800b92a:	f8d0 a000 	ldr.w	sl, [r0]
 800b92e:	4650      	mov	r0, sl
 800b930:	f7f4 fc4e 	bl	80001d0 <strlen>
 800b934:	2300      	movs	r3, #0
 800b936:	930a      	str	r3, [sp, #40]	; 0x28
 800b938:	6823      	ldr	r3, [r4, #0]
 800b93a:	9305      	str	r3, [sp, #20]
 800b93c:	f8d8 3000 	ldr.w	r3, [r8]
 800b940:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b944:	3307      	adds	r3, #7
 800b946:	f023 0307 	bic.w	r3, r3, #7
 800b94a:	f103 0208 	add.w	r2, r3, #8
 800b94e:	f8c8 2000 	str.w	r2, [r8]
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b95a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b95e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b962:	9307      	str	r3, [sp, #28]
 800b964:	f8cd 8018 	str.w	r8, [sp, #24]
 800b968:	ee08 0a10 	vmov	s16, r0
 800b96c:	4b9f      	ldr	r3, [pc, #636]	; (800bbec <_printf_float+0x2dc>)
 800b96e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b976:	f7f5 f8d9 	bl	8000b2c <__aeabi_dcmpun>
 800b97a:	bb88      	cbnz	r0, 800b9e0 <_printf_float+0xd0>
 800b97c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b980:	4b9a      	ldr	r3, [pc, #616]	; (800bbec <_printf_float+0x2dc>)
 800b982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b986:	f7f5 f8b3 	bl	8000af0 <__aeabi_dcmple>
 800b98a:	bb48      	cbnz	r0, 800b9e0 <_printf_float+0xd0>
 800b98c:	2200      	movs	r2, #0
 800b98e:	2300      	movs	r3, #0
 800b990:	4640      	mov	r0, r8
 800b992:	4649      	mov	r1, r9
 800b994:	f7f5 f8a2 	bl	8000adc <__aeabi_dcmplt>
 800b998:	b110      	cbz	r0, 800b9a0 <_printf_float+0x90>
 800b99a:	232d      	movs	r3, #45	; 0x2d
 800b99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9a0:	4b93      	ldr	r3, [pc, #588]	; (800bbf0 <_printf_float+0x2e0>)
 800b9a2:	4894      	ldr	r0, [pc, #592]	; (800bbf4 <_printf_float+0x2e4>)
 800b9a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b9a8:	bf94      	ite	ls
 800b9aa:	4698      	movls	r8, r3
 800b9ac:	4680      	movhi	r8, r0
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	6123      	str	r3, [r4, #16]
 800b9b2:	9b05      	ldr	r3, [sp, #20]
 800b9b4:	f023 0204 	bic.w	r2, r3, #4
 800b9b8:	6022      	str	r2, [r4, #0]
 800b9ba:	f04f 0900 	mov.w	r9, #0
 800b9be:	9700      	str	r7, [sp, #0]
 800b9c0:	4633      	mov	r3, r6
 800b9c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	f000 f9d8 	bl	800bd7c <_printf_common>
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	f040 8090 	bne.w	800baf2 <_printf_float+0x1e2>
 800b9d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9d6:	b00d      	add	sp, #52	; 0x34
 800b9d8:	ecbd 8b02 	vpop	{d8}
 800b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e0:	4642      	mov	r2, r8
 800b9e2:	464b      	mov	r3, r9
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	f7f5 f8a0 	bl	8000b2c <__aeabi_dcmpun>
 800b9ec:	b140      	cbz	r0, 800ba00 <_printf_float+0xf0>
 800b9ee:	464b      	mov	r3, r9
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	bfbc      	itt	lt
 800b9f4:	232d      	movlt	r3, #45	; 0x2d
 800b9f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b9fa:	487f      	ldr	r0, [pc, #508]	; (800bbf8 <_printf_float+0x2e8>)
 800b9fc:	4b7f      	ldr	r3, [pc, #508]	; (800bbfc <_printf_float+0x2ec>)
 800b9fe:	e7d1      	b.n	800b9a4 <_printf_float+0x94>
 800ba00:	6863      	ldr	r3, [r4, #4]
 800ba02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ba06:	9206      	str	r2, [sp, #24]
 800ba08:	1c5a      	adds	r2, r3, #1
 800ba0a:	d13f      	bne.n	800ba8c <_printf_float+0x17c>
 800ba0c:	2306      	movs	r3, #6
 800ba0e:	6063      	str	r3, [r4, #4]
 800ba10:	9b05      	ldr	r3, [sp, #20]
 800ba12:	6861      	ldr	r1, [r4, #4]
 800ba14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ba18:	2300      	movs	r3, #0
 800ba1a:	9303      	str	r3, [sp, #12]
 800ba1c:	ab0a      	add	r3, sp, #40	; 0x28
 800ba1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ba22:	ab09      	add	r3, sp, #36	; 0x24
 800ba24:	ec49 8b10 	vmov	d0, r8, r9
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	6022      	str	r2, [r4, #0]
 800ba2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba30:	4628      	mov	r0, r5
 800ba32:	f7ff fecd 	bl	800b7d0 <__cvt>
 800ba36:	9b06      	ldr	r3, [sp, #24]
 800ba38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba3a:	2b47      	cmp	r3, #71	; 0x47
 800ba3c:	4680      	mov	r8, r0
 800ba3e:	d108      	bne.n	800ba52 <_printf_float+0x142>
 800ba40:	1cc8      	adds	r0, r1, #3
 800ba42:	db02      	blt.n	800ba4a <_printf_float+0x13a>
 800ba44:	6863      	ldr	r3, [r4, #4]
 800ba46:	4299      	cmp	r1, r3
 800ba48:	dd41      	ble.n	800bace <_printf_float+0x1be>
 800ba4a:	f1ab 0b02 	sub.w	fp, fp, #2
 800ba4e:	fa5f fb8b 	uxtb.w	fp, fp
 800ba52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba56:	d820      	bhi.n	800ba9a <_printf_float+0x18a>
 800ba58:	3901      	subs	r1, #1
 800ba5a:	465a      	mov	r2, fp
 800ba5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba60:	9109      	str	r1, [sp, #36]	; 0x24
 800ba62:	f7ff ff17 	bl	800b894 <__exponent>
 800ba66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba68:	1813      	adds	r3, r2, r0
 800ba6a:	2a01      	cmp	r2, #1
 800ba6c:	4681      	mov	r9, r0
 800ba6e:	6123      	str	r3, [r4, #16]
 800ba70:	dc02      	bgt.n	800ba78 <_printf_float+0x168>
 800ba72:	6822      	ldr	r2, [r4, #0]
 800ba74:	07d2      	lsls	r2, r2, #31
 800ba76:	d501      	bpl.n	800ba7c <_printf_float+0x16c>
 800ba78:	3301      	adds	r3, #1
 800ba7a:	6123      	str	r3, [r4, #16]
 800ba7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d09c      	beq.n	800b9be <_printf_float+0xae>
 800ba84:	232d      	movs	r3, #45	; 0x2d
 800ba86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba8a:	e798      	b.n	800b9be <_printf_float+0xae>
 800ba8c:	9a06      	ldr	r2, [sp, #24]
 800ba8e:	2a47      	cmp	r2, #71	; 0x47
 800ba90:	d1be      	bne.n	800ba10 <_printf_float+0x100>
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1bc      	bne.n	800ba10 <_printf_float+0x100>
 800ba96:	2301      	movs	r3, #1
 800ba98:	e7b9      	b.n	800ba0e <_printf_float+0xfe>
 800ba9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba9e:	d118      	bne.n	800bad2 <_printf_float+0x1c2>
 800baa0:	2900      	cmp	r1, #0
 800baa2:	6863      	ldr	r3, [r4, #4]
 800baa4:	dd0b      	ble.n	800babe <_printf_float+0x1ae>
 800baa6:	6121      	str	r1, [r4, #16]
 800baa8:	b913      	cbnz	r3, 800bab0 <_printf_float+0x1a0>
 800baaa:	6822      	ldr	r2, [r4, #0]
 800baac:	07d0      	lsls	r0, r2, #31
 800baae:	d502      	bpl.n	800bab6 <_printf_float+0x1a6>
 800bab0:	3301      	adds	r3, #1
 800bab2:	440b      	add	r3, r1
 800bab4:	6123      	str	r3, [r4, #16]
 800bab6:	65a1      	str	r1, [r4, #88]	; 0x58
 800bab8:	f04f 0900 	mov.w	r9, #0
 800babc:	e7de      	b.n	800ba7c <_printf_float+0x16c>
 800babe:	b913      	cbnz	r3, 800bac6 <_printf_float+0x1b6>
 800bac0:	6822      	ldr	r2, [r4, #0]
 800bac2:	07d2      	lsls	r2, r2, #31
 800bac4:	d501      	bpl.n	800baca <_printf_float+0x1ba>
 800bac6:	3302      	adds	r3, #2
 800bac8:	e7f4      	b.n	800bab4 <_printf_float+0x1a4>
 800baca:	2301      	movs	r3, #1
 800bacc:	e7f2      	b.n	800bab4 <_printf_float+0x1a4>
 800bace:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bad4:	4299      	cmp	r1, r3
 800bad6:	db05      	blt.n	800bae4 <_printf_float+0x1d4>
 800bad8:	6823      	ldr	r3, [r4, #0]
 800bada:	6121      	str	r1, [r4, #16]
 800badc:	07d8      	lsls	r0, r3, #31
 800bade:	d5ea      	bpl.n	800bab6 <_printf_float+0x1a6>
 800bae0:	1c4b      	adds	r3, r1, #1
 800bae2:	e7e7      	b.n	800bab4 <_printf_float+0x1a4>
 800bae4:	2900      	cmp	r1, #0
 800bae6:	bfd4      	ite	le
 800bae8:	f1c1 0202 	rsble	r2, r1, #2
 800baec:	2201      	movgt	r2, #1
 800baee:	4413      	add	r3, r2
 800baf0:	e7e0      	b.n	800bab4 <_printf_float+0x1a4>
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	055a      	lsls	r2, r3, #21
 800baf6:	d407      	bmi.n	800bb08 <_printf_float+0x1f8>
 800baf8:	6923      	ldr	r3, [r4, #16]
 800bafa:	4642      	mov	r2, r8
 800bafc:	4631      	mov	r1, r6
 800bafe:	4628      	mov	r0, r5
 800bb00:	47b8      	blx	r7
 800bb02:	3001      	adds	r0, #1
 800bb04:	d12c      	bne.n	800bb60 <_printf_float+0x250>
 800bb06:	e764      	b.n	800b9d2 <_printf_float+0xc2>
 800bb08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb0c:	f240 80e0 	bls.w	800bcd0 <_printf_float+0x3c0>
 800bb10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb14:	2200      	movs	r2, #0
 800bb16:	2300      	movs	r3, #0
 800bb18:	f7f4 ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d034      	beq.n	800bb8a <_printf_float+0x27a>
 800bb20:	4a37      	ldr	r2, [pc, #220]	; (800bc00 <_printf_float+0x2f0>)
 800bb22:	2301      	movs	r3, #1
 800bb24:	4631      	mov	r1, r6
 800bb26:	4628      	mov	r0, r5
 800bb28:	47b8      	blx	r7
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	f43f af51 	beq.w	800b9d2 <_printf_float+0xc2>
 800bb30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb34:	429a      	cmp	r2, r3
 800bb36:	db02      	blt.n	800bb3e <_printf_float+0x22e>
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	07d8      	lsls	r0, r3, #31
 800bb3c:	d510      	bpl.n	800bb60 <_printf_float+0x250>
 800bb3e:	ee18 3a10 	vmov	r3, s16
 800bb42:	4652      	mov	r2, sl
 800bb44:	4631      	mov	r1, r6
 800bb46:	4628      	mov	r0, r5
 800bb48:	47b8      	blx	r7
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	f43f af41 	beq.w	800b9d2 <_printf_float+0xc2>
 800bb50:	f04f 0800 	mov.w	r8, #0
 800bb54:	f104 091a 	add.w	r9, r4, #26
 800bb58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	4543      	cmp	r3, r8
 800bb5e:	dc09      	bgt.n	800bb74 <_printf_float+0x264>
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	079b      	lsls	r3, r3, #30
 800bb64:	f100 8105 	bmi.w	800bd72 <_printf_float+0x462>
 800bb68:	68e0      	ldr	r0, [r4, #12]
 800bb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb6c:	4298      	cmp	r0, r3
 800bb6e:	bfb8      	it	lt
 800bb70:	4618      	movlt	r0, r3
 800bb72:	e730      	b.n	800b9d6 <_printf_float+0xc6>
 800bb74:	2301      	movs	r3, #1
 800bb76:	464a      	mov	r2, r9
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	47b8      	blx	r7
 800bb7e:	3001      	adds	r0, #1
 800bb80:	f43f af27 	beq.w	800b9d2 <_printf_float+0xc2>
 800bb84:	f108 0801 	add.w	r8, r8, #1
 800bb88:	e7e6      	b.n	800bb58 <_printf_float+0x248>
 800bb8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	dc39      	bgt.n	800bc04 <_printf_float+0x2f4>
 800bb90:	4a1b      	ldr	r2, [pc, #108]	; (800bc00 <_printf_float+0x2f0>)
 800bb92:	2301      	movs	r3, #1
 800bb94:	4631      	mov	r1, r6
 800bb96:	4628      	mov	r0, r5
 800bb98:	47b8      	blx	r7
 800bb9a:	3001      	adds	r0, #1
 800bb9c:	f43f af19 	beq.w	800b9d2 <_printf_float+0xc2>
 800bba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bba4:	4313      	orrs	r3, r2
 800bba6:	d102      	bne.n	800bbae <_printf_float+0x29e>
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	07d9      	lsls	r1, r3, #31
 800bbac:	d5d8      	bpl.n	800bb60 <_printf_float+0x250>
 800bbae:	ee18 3a10 	vmov	r3, s16
 800bbb2:	4652      	mov	r2, sl
 800bbb4:	4631      	mov	r1, r6
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	47b8      	blx	r7
 800bbba:	3001      	adds	r0, #1
 800bbbc:	f43f af09 	beq.w	800b9d2 <_printf_float+0xc2>
 800bbc0:	f04f 0900 	mov.w	r9, #0
 800bbc4:	f104 0a1a 	add.w	sl, r4, #26
 800bbc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbca:	425b      	negs	r3, r3
 800bbcc:	454b      	cmp	r3, r9
 800bbce:	dc01      	bgt.n	800bbd4 <_printf_float+0x2c4>
 800bbd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbd2:	e792      	b.n	800bafa <_printf_float+0x1ea>
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	4652      	mov	r2, sl
 800bbd8:	4631      	mov	r1, r6
 800bbda:	4628      	mov	r0, r5
 800bbdc:	47b8      	blx	r7
 800bbde:	3001      	adds	r0, #1
 800bbe0:	f43f aef7 	beq.w	800b9d2 <_printf_float+0xc2>
 800bbe4:	f109 0901 	add.w	r9, r9, #1
 800bbe8:	e7ee      	b.n	800bbc8 <_printf_float+0x2b8>
 800bbea:	bf00      	nop
 800bbec:	7fefffff 	.word	0x7fefffff
 800bbf0:	0800f064 	.word	0x0800f064
 800bbf4:	0800f068 	.word	0x0800f068
 800bbf8:	0800f070 	.word	0x0800f070
 800bbfc:	0800f06c 	.word	0x0800f06c
 800bc00:	0800f074 	.word	0x0800f074
 800bc04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	bfa8      	it	ge
 800bc0c:	461a      	movge	r2, r3
 800bc0e:	2a00      	cmp	r2, #0
 800bc10:	4691      	mov	r9, r2
 800bc12:	dc37      	bgt.n	800bc84 <_printf_float+0x374>
 800bc14:	f04f 0b00 	mov.w	fp, #0
 800bc18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc1c:	f104 021a 	add.w	r2, r4, #26
 800bc20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc22:	9305      	str	r3, [sp, #20]
 800bc24:	eba3 0309 	sub.w	r3, r3, r9
 800bc28:	455b      	cmp	r3, fp
 800bc2a:	dc33      	bgt.n	800bc94 <_printf_float+0x384>
 800bc2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc30:	429a      	cmp	r2, r3
 800bc32:	db3b      	blt.n	800bcac <_printf_float+0x39c>
 800bc34:	6823      	ldr	r3, [r4, #0]
 800bc36:	07da      	lsls	r2, r3, #31
 800bc38:	d438      	bmi.n	800bcac <_printf_float+0x39c>
 800bc3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc3c:	9b05      	ldr	r3, [sp, #20]
 800bc3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	eba2 0901 	sub.w	r9, r2, r1
 800bc46:	4599      	cmp	r9, r3
 800bc48:	bfa8      	it	ge
 800bc4a:	4699      	movge	r9, r3
 800bc4c:	f1b9 0f00 	cmp.w	r9, #0
 800bc50:	dc35      	bgt.n	800bcbe <_printf_float+0x3ae>
 800bc52:	f04f 0800 	mov.w	r8, #0
 800bc56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc5a:	f104 0a1a 	add.w	sl, r4, #26
 800bc5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc62:	1a9b      	subs	r3, r3, r2
 800bc64:	eba3 0309 	sub.w	r3, r3, r9
 800bc68:	4543      	cmp	r3, r8
 800bc6a:	f77f af79 	ble.w	800bb60 <_printf_float+0x250>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	4652      	mov	r2, sl
 800bc72:	4631      	mov	r1, r6
 800bc74:	4628      	mov	r0, r5
 800bc76:	47b8      	blx	r7
 800bc78:	3001      	adds	r0, #1
 800bc7a:	f43f aeaa 	beq.w	800b9d2 <_printf_float+0xc2>
 800bc7e:	f108 0801 	add.w	r8, r8, #1
 800bc82:	e7ec      	b.n	800bc5e <_printf_float+0x34e>
 800bc84:	4613      	mov	r3, r2
 800bc86:	4631      	mov	r1, r6
 800bc88:	4642      	mov	r2, r8
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	47b8      	blx	r7
 800bc8e:	3001      	adds	r0, #1
 800bc90:	d1c0      	bne.n	800bc14 <_printf_float+0x304>
 800bc92:	e69e      	b.n	800b9d2 <_printf_float+0xc2>
 800bc94:	2301      	movs	r3, #1
 800bc96:	4631      	mov	r1, r6
 800bc98:	4628      	mov	r0, r5
 800bc9a:	9205      	str	r2, [sp, #20]
 800bc9c:	47b8      	blx	r7
 800bc9e:	3001      	adds	r0, #1
 800bca0:	f43f ae97 	beq.w	800b9d2 <_printf_float+0xc2>
 800bca4:	9a05      	ldr	r2, [sp, #20]
 800bca6:	f10b 0b01 	add.w	fp, fp, #1
 800bcaa:	e7b9      	b.n	800bc20 <_printf_float+0x310>
 800bcac:	ee18 3a10 	vmov	r3, s16
 800bcb0:	4652      	mov	r2, sl
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	47b8      	blx	r7
 800bcb8:	3001      	adds	r0, #1
 800bcba:	d1be      	bne.n	800bc3a <_printf_float+0x32a>
 800bcbc:	e689      	b.n	800b9d2 <_printf_float+0xc2>
 800bcbe:	9a05      	ldr	r2, [sp, #20]
 800bcc0:	464b      	mov	r3, r9
 800bcc2:	4442      	add	r2, r8
 800bcc4:	4631      	mov	r1, r6
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	47b8      	blx	r7
 800bcca:	3001      	adds	r0, #1
 800bccc:	d1c1      	bne.n	800bc52 <_printf_float+0x342>
 800bcce:	e680      	b.n	800b9d2 <_printf_float+0xc2>
 800bcd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcd2:	2a01      	cmp	r2, #1
 800bcd4:	dc01      	bgt.n	800bcda <_printf_float+0x3ca>
 800bcd6:	07db      	lsls	r3, r3, #31
 800bcd8:	d538      	bpl.n	800bd4c <_printf_float+0x43c>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	4642      	mov	r2, r8
 800bcde:	4631      	mov	r1, r6
 800bce0:	4628      	mov	r0, r5
 800bce2:	47b8      	blx	r7
 800bce4:	3001      	adds	r0, #1
 800bce6:	f43f ae74 	beq.w	800b9d2 <_printf_float+0xc2>
 800bcea:	ee18 3a10 	vmov	r3, s16
 800bcee:	4652      	mov	r2, sl
 800bcf0:	4631      	mov	r1, r6
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	47b8      	blx	r7
 800bcf6:	3001      	adds	r0, #1
 800bcf8:	f43f ae6b 	beq.w	800b9d2 <_printf_float+0xc2>
 800bcfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd00:	2200      	movs	r2, #0
 800bd02:	2300      	movs	r3, #0
 800bd04:	f7f4 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd08:	b9d8      	cbnz	r0, 800bd42 <_printf_float+0x432>
 800bd0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd0c:	f108 0201 	add.w	r2, r8, #1
 800bd10:	3b01      	subs	r3, #1
 800bd12:	4631      	mov	r1, r6
 800bd14:	4628      	mov	r0, r5
 800bd16:	47b8      	blx	r7
 800bd18:	3001      	adds	r0, #1
 800bd1a:	d10e      	bne.n	800bd3a <_printf_float+0x42a>
 800bd1c:	e659      	b.n	800b9d2 <_printf_float+0xc2>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	4652      	mov	r2, sl
 800bd22:	4631      	mov	r1, r6
 800bd24:	4628      	mov	r0, r5
 800bd26:	47b8      	blx	r7
 800bd28:	3001      	adds	r0, #1
 800bd2a:	f43f ae52 	beq.w	800b9d2 <_printf_float+0xc2>
 800bd2e:	f108 0801 	add.w	r8, r8, #1
 800bd32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd34:	3b01      	subs	r3, #1
 800bd36:	4543      	cmp	r3, r8
 800bd38:	dcf1      	bgt.n	800bd1e <_printf_float+0x40e>
 800bd3a:	464b      	mov	r3, r9
 800bd3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd40:	e6dc      	b.n	800bafc <_printf_float+0x1ec>
 800bd42:	f04f 0800 	mov.w	r8, #0
 800bd46:	f104 0a1a 	add.w	sl, r4, #26
 800bd4a:	e7f2      	b.n	800bd32 <_printf_float+0x422>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	4642      	mov	r2, r8
 800bd50:	e7df      	b.n	800bd12 <_printf_float+0x402>
 800bd52:	2301      	movs	r3, #1
 800bd54:	464a      	mov	r2, r9
 800bd56:	4631      	mov	r1, r6
 800bd58:	4628      	mov	r0, r5
 800bd5a:	47b8      	blx	r7
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	f43f ae38 	beq.w	800b9d2 <_printf_float+0xc2>
 800bd62:	f108 0801 	add.w	r8, r8, #1
 800bd66:	68e3      	ldr	r3, [r4, #12]
 800bd68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd6a:	1a5b      	subs	r3, r3, r1
 800bd6c:	4543      	cmp	r3, r8
 800bd6e:	dcf0      	bgt.n	800bd52 <_printf_float+0x442>
 800bd70:	e6fa      	b.n	800bb68 <_printf_float+0x258>
 800bd72:	f04f 0800 	mov.w	r8, #0
 800bd76:	f104 0919 	add.w	r9, r4, #25
 800bd7a:	e7f4      	b.n	800bd66 <_printf_float+0x456>

0800bd7c <_printf_common>:
 800bd7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd80:	4616      	mov	r6, r2
 800bd82:	4699      	mov	r9, r3
 800bd84:	688a      	ldr	r2, [r1, #8]
 800bd86:	690b      	ldr	r3, [r1, #16]
 800bd88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	bfb8      	it	lt
 800bd90:	4613      	movlt	r3, r2
 800bd92:	6033      	str	r3, [r6, #0]
 800bd94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd98:	4607      	mov	r7, r0
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	b10a      	cbz	r2, 800bda2 <_printf_common+0x26>
 800bd9e:	3301      	adds	r3, #1
 800bda0:	6033      	str	r3, [r6, #0]
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	0699      	lsls	r1, r3, #26
 800bda6:	bf42      	ittt	mi
 800bda8:	6833      	ldrmi	r3, [r6, #0]
 800bdaa:	3302      	addmi	r3, #2
 800bdac:	6033      	strmi	r3, [r6, #0]
 800bdae:	6825      	ldr	r5, [r4, #0]
 800bdb0:	f015 0506 	ands.w	r5, r5, #6
 800bdb4:	d106      	bne.n	800bdc4 <_printf_common+0x48>
 800bdb6:	f104 0a19 	add.w	sl, r4, #25
 800bdba:	68e3      	ldr	r3, [r4, #12]
 800bdbc:	6832      	ldr	r2, [r6, #0]
 800bdbe:	1a9b      	subs	r3, r3, r2
 800bdc0:	42ab      	cmp	r3, r5
 800bdc2:	dc26      	bgt.n	800be12 <_printf_common+0x96>
 800bdc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bdc8:	1e13      	subs	r3, r2, #0
 800bdca:	6822      	ldr	r2, [r4, #0]
 800bdcc:	bf18      	it	ne
 800bdce:	2301      	movne	r3, #1
 800bdd0:	0692      	lsls	r2, r2, #26
 800bdd2:	d42b      	bmi.n	800be2c <_printf_common+0xb0>
 800bdd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdd8:	4649      	mov	r1, r9
 800bdda:	4638      	mov	r0, r7
 800bddc:	47c0      	blx	r8
 800bdde:	3001      	adds	r0, #1
 800bde0:	d01e      	beq.n	800be20 <_printf_common+0xa4>
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	68e5      	ldr	r5, [r4, #12]
 800bde6:	6832      	ldr	r2, [r6, #0]
 800bde8:	f003 0306 	and.w	r3, r3, #6
 800bdec:	2b04      	cmp	r3, #4
 800bdee:	bf08      	it	eq
 800bdf0:	1aad      	subeq	r5, r5, r2
 800bdf2:	68a3      	ldr	r3, [r4, #8]
 800bdf4:	6922      	ldr	r2, [r4, #16]
 800bdf6:	bf0c      	ite	eq
 800bdf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdfc:	2500      	movne	r5, #0
 800bdfe:	4293      	cmp	r3, r2
 800be00:	bfc4      	itt	gt
 800be02:	1a9b      	subgt	r3, r3, r2
 800be04:	18ed      	addgt	r5, r5, r3
 800be06:	2600      	movs	r6, #0
 800be08:	341a      	adds	r4, #26
 800be0a:	42b5      	cmp	r5, r6
 800be0c:	d11a      	bne.n	800be44 <_printf_common+0xc8>
 800be0e:	2000      	movs	r0, #0
 800be10:	e008      	b.n	800be24 <_printf_common+0xa8>
 800be12:	2301      	movs	r3, #1
 800be14:	4652      	mov	r2, sl
 800be16:	4649      	mov	r1, r9
 800be18:	4638      	mov	r0, r7
 800be1a:	47c0      	blx	r8
 800be1c:	3001      	adds	r0, #1
 800be1e:	d103      	bne.n	800be28 <_printf_common+0xac>
 800be20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be28:	3501      	adds	r5, #1
 800be2a:	e7c6      	b.n	800bdba <_printf_common+0x3e>
 800be2c:	18e1      	adds	r1, r4, r3
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	2030      	movs	r0, #48	; 0x30
 800be32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be36:	4422      	add	r2, r4
 800be38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be40:	3302      	adds	r3, #2
 800be42:	e7c7      	b.n	800bdd4 <_printf_common+0x58>
 800be44:	2301      	movs	r3, #1
 800be46:	4622      	mov	r2, r4
 800be48:	4649      	mov	r1, r9
 800be4a:	4638      	mov	r0, r7
 800be4c:	47c0      	blx	r8
 800be4e:	3001      	adds	r0, #1
 800be50:	d0e6      	beq.n	800be20 <_printf_common+0xa4>
 800be52:	3601      	adds	r6, #1
 800be54:	e7d9      	b.n	800be0a <_printf_common+0x8e>
	...

0800be58 <_printf_i>:
 800be58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be5c:	460c      	mov	r4, r1
 800be5e:	4691      	mov	r9, r2
 800be60:	7e27      	ldrb	r7, [r4, #24]
 800be62:	990c      	ldr	r1, [sp, #48]	; 0x30
 800be64:	2f78      	cmp	r7, #120	; 0x78
 800be66:	4680      	mov	r8, r0
 800be68:	469a      	mov	sl, r3
 800be6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be6e:	d807      	bhi.n	800be80 <_printf_i+0x28>
 800be70:	2f62      	cmp	r7, #98	; 0x62
 800be72:	d80a      	bhi.n	800be8a <_printf_i+0x32>
 800be74:	2f00      	cmp	r7, #0
 800be76:	f000 80d8 	beq.w	800c02a <_printf_i+0x1d2>
 800be7a:	2f58      	cmp	r7, #88	; 0x58
 800be7c:	f000 80a3 	beq.w	800bfc6 <_printf_i+0x16e>
 800be80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be88:	e03a      	b.n	800bf00 <_printf_i+0xa8>
 800be8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be8e:	2b15      	cmp	r3, #21
 800be90:	d8f6      	bhi.n	800be80 <_printf_i+0x28>
 800be92:	a001      	add	r0, pc, #4	; (adr r0, 800be98 <_printf_i+0x40>)
 800be94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800be98:	0800bef1 	.word	0x0800bef1
 800be9c:	0800bf05 	.word	0x0800bf05
 800bea0:	0800be81 	.word	0x0800be81
 800bea4:	0800be81 	.word	0x0800be81
 800bea8:	0800be81 	.word	0x0800be81
 800beac:	0800be81 	.word	0x0800be81
 800beb0:	0800bf05 	.word	0x0800bf05
 800beb4:	0800be81 	.word	0x0800be81
 800beb8:	0800be81 	.word	0x0800be81
 800bebc:	0800be81 	.word	0x0800be81
 800bec0:	0800be81 	.word	0x0800be81
 800bec4:	0800c011 	.word	0x0800c011
 800bec8:	0800bf35 	.word	0x0800bf35
 800becc:	0800bff3 	.word	0x0800bff3
 800bed0:	0800be81 	.word	0x0800be81
 800bed4:	0800be81 	.word	0x0800be81
 800bed8:	0800c033 	.word	0x0800c033
 800bedc:	0800be81 	.word	0x0800be81
 800bee0:	0800bf35 	.word	0x0800bf35
 800bee4:	0800be81 	.word	0x0800be81
 800bee8:	0800be81 	.word	0x0800be81
 800beec:	0800bffb 	.word	0x0800bffb
 800bef0:	680b      	ldr	r3, [r1, #0]
 800bef2:	1d1a      	adds	r2, r3, #4
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	600a      	str	r2, [r1, #0]
 800bef8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800befc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf00:	2301      	movs	r3, #1
 800bf02:	e0a3      	b.n	800c04c <_printf_i+0x1f4>
 800bf04:	6825      	ldr	r5, [r4, #0]
 800bf06:	6808      	ldr	r0, [r1, #0]
 800bf08:	062e      	lsls	r6, r5, #24
 800bf0a:	f100 0304 	add.w	r3, r0, #4
 800bf0e:	d50a      	bpl.n	800bf26 <_printf_i+0xce>
 800bf10:	6805      	ldr	r5, [r0, #0]
 800bf12:	600b      	str	r3, [r1, #0]
 800bf14:	2d00      	cmp	r5, #0
 800bf16:	da03      	bge.n	800bf20 <_printf_i+0xc8>
 800bf18:	232d      	movs	r3, #45	; 0x2d
 800bf1a:	426d      	negs	r5, r5
 800bf1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf20:	485e      	ldr	r0, [pc, #376]	; (800c09c <_printf_i+0x244>)
 800bf22:	230a      	movs	r3, #10
 800bf24:	e019      	b.n	800bf5a <_printf_i+0x102>
 800bf26:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bf2a:	6805      	ldr	r5, [r0, #0]
 800bf2c:	600b      	str	r3, [r1, #0]
 800bf2e:	bf18      	it	ne
 800bf30:	b22d      	sxthne	r5, r5
 800bf32:	e7ef      	b.n	800bf14 <_printf_i+0xbc>
 800bf34:	680b      	ldr	r3, [r1, #0]
 800bf36:	6825      	ldr	r5, [r4, #0]
 800bf38:	1d18      	adds	r0, r3, #4
 800bf3a:	6008      	str	r0, [r1, #0]
 800bf3c:	0628      	lsls	r0, r5, #24
 800bf3e:	d501      	bpl.n	800bf44 <_printf_i+0xec>
 800bf40:	681d      	ldr	r5, [r3, #0]
 800bf42:	e002      	b.n	800bf4a <_printf_i+0xf2>
 800bf44:	0669      	lsls	r1, r5, #25
 800bf46:	d5fb      	bpl.n	800bf40 <_printf_i+0xe8>
 800bf48:	881d      	ldrh	r5, [r3, #0]
 800bf4a:	4854      	ldr	r0, [pc, #336]	; (800c09c <_printf_i+0x244>)
 800bf4c:	2f6f      	cmp	r7, #111	; 0x6f
 800bf4e:	bf0c      	ite	eq
 800bf50:	2308      	moveq	r3, #8
 800bf52:	230a      	movne	r3, #10
 800bf54:	2100      	movs	r1, #0
 800bf56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf5a:	6866      	ldr	r6, [r4, #4]
 800bf5c:	60a6      	str	r6, [r4, #8]
 800bf5e:	2e00      	cmp	r6, #0
 800bf60:	bfa2      	ittt	ge
 800bf62:	6821      	ldrge	r1, [r4, #0]
 800bf64:	f021 0104 	bicge.w	r1, r1, #4
 800bf68:	6021      	strge	r1, [r4, #0]
 800bf6a:	b90d      	cbnz	r5, 800bf70 <_printf_i+0x118>
 800bf6c:	2e00      	cmp	r6, #0
 800bf6e:	d04d      	beq.n	800c00c <_printf_i+0x1b4>
 800bf70:	4616      	mov	r6, r2
 800bf72:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf76:	fb03 5711 	mls	r7, r3, r1, r5
 800bf7a:	5dc7      	ldrb	r7, [r0, r7]
 800bf7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf80:	462f      	mov	r7, r5
 800bf82:	42bb      	cmp	r3, r7
 800bf84:	460d      	mov	r5, r1
 800bf86:	d9f4      	bls.n	800bf72 <_printf_i+0x11a>
 800bf88:	2b08      	cmp	r3, #8
 800bf8a:	d10b      	bne.n	800bfa4 <_printf_i+0x14c>
 800bf8c:	6823      	ldr	r3, [r4, #0]
 800bf8e:	07df      	lsls	r7, r3, #31
 800bf90:	d508      	bpl.n	800bfa4 <_printf_i+0x14c>
 800bf92:	6923      	ldr	r3, [r4, #16]
 800bf94:	6861      	ldr	r1, [r4, #4]
 800bf96:	4299      	cmp	r1, r3
 800bf98:	bfde      	ittt	le
 800bf9a:	2330      	movle	r3, #48	; 0x30
 800bf9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bfa0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800bfa4:	1b92      	subs	r2, r2, r6
 800bfa6:	6122      	str	r2, [r4, #16]
 800bfa8:	f8cd a000 	str.w	sl, [sp]
 800bfac:	464b      	mov	r3, r9
 800bfae:	aa03      	add	r2, sp, #12
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	f7ff fee2 	bl	800bd7c <_printf_common>
 800bfb8:	3001      	adds	r0, #1
 800bfba:	d14c      	bne.n	800c056 <_printf_i+0x1fe>
 800bfbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfc0:	b004      	add	sp, #16
 800bfc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc6:	4835      	ldr	r0, [pc, #212]	; (800c09c <_printf_i+0x244>)
 800bfc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	680e      	ldr	r6, [r1, #0]
 800bfd0:	061f      	lsls	r7, r3, #24
 800bfd2:	f856 5b04 	ldr.w	r5, [r6], #4
 800bfd6:	600e      	str	r6, [r1, #0]
 800bfd8:	d514      	bpl.n	800c004 <_printf_i+0x1ac>
 800bfda:	07d9      	lsls	r1, r3, #31
 800bfdc:	bf44      	itt	mi
 800bfde:	f043 0320 	orrmi.w	r3, r3, #32
 800bfe2:	6023      	strmi	r3, [r4, #0]
 800bfe4:	b91d      	cbnz	r5, 800bfee <_printf_i+0x196>
 800bfe6:	6823      	ldr	r3, [r4, #0]
 800bfe8:	f023 0320 	bic.w	r3, r3, #32
 800bfec:	6023      	str	r3, [r4, #0]
 800bfee:	2310      	movs	r3, #16
 800bff0:	e7b0      	b.n	800bf54 <_printf_i+0xfc>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	f043 0320 	orr.w	r3, r3, #32
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	2378      	movs	r3, #120	; 0x78
 800bffc:	4828      	ldr	r0, [pc, #160]	; (800c0a0 <_printf_i+0x248>)
 800bffe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c002:	e7e3      	b.n	800bfcc <_printf_i+0x174>
 800c004:	065e      	lsls	r6, r3, #25
 800c006:	bf48      	it	mi
 800c008:	b2ad      	uxthmi	r5, r5
 800c00a:	e7e6      	b.n	800bfda <_printf_i+0x182>
 800c00c:	4616      	mov	r6, r2
 800c00e:	e7bb      	b.n	800bf88 <_printf_i+0x130>
 800c010:	680b      	ldr	r3, [r1, #0]
 800c012:	6826      	ldr	r6, [r4, #0]
 800c014:	6960      	ldr	r0, [r4, #20]
 800c016:	1d1d      	adds	r5, r3, #4
 800c018:	600d      	str	r5, [r1, #0]
 800c01a:	0635      	lsls	r5, r6, #24
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	d501      	bpl.n	800c024 <_printf_i+0x1cc>
 800c020:	6018      	str	r0, [r3, #0]
 800c022:	e002      	b.n	800c02a <_printf_i+0x1d2>
 800c024:	0671      	lsls	r1, r6, #25
 800c026:	d5fb      	bpl.n	800c020 <_printf_i+0x1c8>
 800c028:	8018      	strh	r0, [r3, #0]
 800c02a:	2300      	movs	r3, #0
 800c02c:	6123      	str	r3, [r4, #16]
 800c02e:	4616      	mov	r6, r2
 800c030:	e7ba      	b.n	800bfa8 <_printf_i+0x150>
 800c032:	680b      	ldr	r3, [r1, #0]
 800c034:	1d1a      	adds	r2, r3, #4
 800c036:	600a      	str	r2, [r1, #0]
 800c038:	681e      	ldr	r6, [r3, #0]
 800c03a:	6862      	ldr	r2, [r4, #4]
 800c03c:	2100      	movs	r1, #0
 800c03e:	4630      	mov	r0, r6
 800c040:	f7f4 f8ce 	bl	80001e0 <memchr>
 800c044:	b108      	cbz	r0, 800c04a <_printf_i+0x1f2>
 800c046:	1b80      	subs	r0, r0, r6
 800c048:	6060      	str	r0, [r4, #4]
 800c04a:	6863      	ldr	r3, [r4, #4]
 800c04c:	6123      	str	r3, [r4, #16]
 800c04e:	2300      	movs	r3, #0
 800c050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c054:	e7a8      	b.n	800bfa8 <_printf_i+0x150>
 800c056:	6923      	ldr	r3, [r4, #16]
 800c058:	4632      	mov	r2, r6
 800c05a:	4649      	mov	r1, r9
 800c05c:	4640      	mov	r0, r8
 800c05e:	47d0      	blx	sl
 800c060:	3001      	adds	r0, #1
 800c062:	d0ab      	beq.n	800bfbc <_printf_i+0x164>
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	079b      	lsls	r3, r3, #30
 800c068:	d413      	bmi.n	800c092 <_printf_i+0x23a>
 800c06a:	68e0      	ldr	r0, [r4, #12]
 800c06c:	9b03      	ldr	r3, [sp, #12]
 800c06e:	4298      	cmp	r0, r3
 800c070:	bfb8      	it	lt
 800c072:	4618      	movlt	r0, r3
 800c074:	e7a4      	b.n	800bfc0 <_printf_i+0x168>
 800c076:	2301      	movs	r3, #1
 800c078:	4632      	mov	r2, r6
 800c07a:	4649      	mov	r1, r9
 800c07c:	4640      	mov	r0, r8
 800c07e:	47d0      	blx	sl
 800c080:	3001      	adds	r0, #1
 800c082:	d09b      	beq.n	800bfbc <_printf_i+0x164>
 800c084:	3501      	adds	r5, #1
 800c086:	68e3      	ldr	r3, [r4, #12]
 800c088:	9903      	ldr	r1, [sp, #12]
 800c08a:	1a5b      	subs	r3, r3, r1
 800c08c:	42ab      	cmp	r3, r5
 800c08e:	dcf2      	bgt.n	800c076 <_printf_i+0x21e>
 800c090:	e7eb      	b.n	800c06a <_printf_i+0x212>
 800c092:	2500      	movs	r5, #0
 800c094:	f104 0619 	add.w	r6, r4, #25
 800c098:	e7f5      	b.n	800c086 <_printf_i+0x22e>
 800c09a:	bf00      	nop
 800c09c:	0800f076 	.word	0x0800f076
 800c0a0:	0800f087 	.word	0x0800f087

0800c0a4 <siprintf>:
 800c0a4:	b40e      	push	{r1, r2, r3}
 800c0a6:	b500      	push	{lr}
 800c0a8:	b09c      	sub	sp, #112	; 0x70
 800c0aa:	ab1d      	add	r3, sp, #116	; 0x74
 800c0ac:	9002      	str	r0, [sp, #8]
 800c0ae:	9006      	str	r0, [sp, #24]
 800c0b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0b4:	4809      	ldr	r0, [pc, #36]	; (800c0dc <siprintf+0x38>)
 800c0b6:	9107      	str	r1, [sp, #28]
 800c0b8:	9104      	str	r1, [sp, #16]
 800c0ba:	4909      	ldr	r1, [pc, #36]	; (800c0e0 <siprintf+0x3c>)
 800c0bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0c0:	9105      	str	r1, [sp, #20]
 800c0c2:	6800      	ldr	r0, [r0, #0]
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	a902      	add	r1, sp, #8
 800c0c8:	f001 fb26 	bl	800d718 <_svfiprintf_r>
 800c0cc:	9b02      	ldr	r3, [sp, #8]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	701a      	strb	r2, [r3, #0]
 800c0d2:	b01c      	add	sp, #112	; 0x70
 800c0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0d8:	b003      	add	sp, #12
 800c0da:	4770      	bx	lr
 800c0dc:	20000010 	.word	0x20000010
 800c0e0:	ffff0208 	.word	0xffff0208

0800c0e4 <quorem>:
 800c0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e8:	6903      	ldr	r3, [r0, #16]
 800c0ea:	690c      	ldr	r4, [r1, #16]
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	f2c0 8081 	blt.w	800c1f6 <quorem+0x112>
 800c0f4:	3c01      	subs	r4, #1
 800c0f6:	f101 0814 	add.w	r8, r1, #20
 800c0fa:	f100 0514 	add.w	r5, r0, #20
 800c0fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c102:	9301      	str	r3, [sp, #4]
 800c104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c10c:	3301      	adds	r3, #1
 800c10e:	429a      	cmp	r2, r3
 800c110:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c118:	fbb2 f6f3 	udiv	r6, r2, r3
 800c11c:	d331      	bcc.n	800c182 <quorem+0x9e>
 800c11e:	f04f 0e00 	mov.w	lr, #0
 800c122:	4640      	mov	r0, r8
 800c124:	46ac      	mov	ip, r5
 800c126:	46f2      	mov	sl, lr
 800c128:	f850 2b04 	ldr.w	r2, [r0], #4
 800c12c:	b293      	uxth	r3, r2
 800c12e:	fb06 e303 	mla	r3, r6, r3, lr
 800c132:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c136:	b29b      	uxth	r3, r3
 800c138:	ebaa 0303 	sub.w	r3, sl, r3
 800c13c:	0c12      	lsrs	r2, r2, #16
 800c13e:	f8dc a000 	ldr.w	sl, [ip]
 800c142:	fb06 e202 	mla	r2, r6, r2, lr
 800c146:	fa13 f38a 	uxtah	r3, r3, sl
 800c14a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c14e:	fa1f fa82 	uxth.w	sl, r2
 800c152:	f8dc 2000 	ldr.w	r2, [ip]
 800c156:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c15a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c15e:	b29b      	uxth	r3, r3
 800c160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c164:	4581      	cmp	r9, r0
 800c166:	f84c 3b04 	str.w	r3, [ip], #4
 800c16a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c16e:	d2db      	bcs.n	800c128 <quorem+0x44>
 800c170:	f855 300b 	ldr.w	r3, [r5, fp]
 800c174:	b92b      	cbnz	r3, 800c182 <quorem+0x9e>
 800c176:	9b01      	ldr	r3, [sp, #4]
 800c178:	3b04      	subs	r3, #4
 800c17a:	429d      	cmp	r5, r3
 800c17c:	461a      	mov	r2, r3
 800c17e:	d32e      	bcc.n	800c1de <quorem+0xfa>
 800c180:	613c      	str	r4, [r7, #16]
 800c182:	4638      	mov	r0, r7
 800c184:	f001 f8b2 	bl	800d2ec <__mcmp>
 800c188:	2800      	cmp	r0, #0
 800c18a:	db24      	blt.n	800c1d6 <quorem+0xf2>
 800c18c:	3601      	adds	r6, #1
 800c18e:	4628      	mov	r0, r5
 800c190:	f04f 0c00 	mov.w	ip, #0
 800c194:	f858 2b04 	ldr.w	r2, [r8], #4
 800c198:	f8d0 e000 	ldr.w	lr, [r0]
 800c19c:	b293      	uxth	r3, r2
 800c19e:	ebac 0303 	sub.w	r3, ip, r3
 800c1a2:	0c12      	lsrs	r2, r2, #16
 800c1a4:	fa13 f38e 	uxtah	r3, r3, lr
 800c1a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c1ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1b6:	45c1      	cmp	r9, r8
 800c1b8:	f840 3b04 	str.w	r3, [r0], #4
 800c1bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c1c0:	d2e8      	bcs.n	800c194 <quorem+0xb0>
 800c1c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1ca:	b922      	cbnz	r2, 800c1d6 <quorem+0xf2>
 800c1cc:	3b04      	subs	r3, #4
 800c1ce:	429d      	cmp	r5, r3
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	d30a      	bcc.n	800c1ea <quorem+0x106>
 800c1d4:	613c      	str	r4, [r7, #16]
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	b003      	add	sp, #12
 800c1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1de:	6812      	ldr	r2, [r2, #0]
 800c1e0:	3b04      	subs	r3, #4
 800c1e2:	2a00      	cmp	r2, #0
 800c1e4:	d1cc      	bne.n	800c180 <quorem+0x9c>
 800c1e6:	3c01      	subs	r4, #1
 800c1e8:	e7c7      	b.n	800c17a <quorem+0x96>
 800c1ea:	6812      	ldr	r2, [r2, #0]
 800c1ec:	3b04      	subs	r3, #4
 800c1ee:	2a00      	cmp	r2, #0
 800c1f0:	d1f0      	bne.n	800c1d4 <quorem+0xf0>
 800c1f2:	3c01      	subs	r4, #1
 800c1f4:	e7eb      	b.n	800c1ce <quorem+0xea>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	e7ee      	b.n	800c1d8 <quorem+0xf4>
 800c1fa:	0000      	movs	r0, r0
 800c1fc:	0000      	movs	r0, r0
	...

0800c200 <_dtoa_r>:
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	ed2d 8b02 	vpush	{d8}
 800c208:	ec57 6b10 	vmov	r6, r7, d0
 800c20c:	b095      	sub	sp, #84	; 0x54
 800c20e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c210:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c214:	9105      	str	r1, [sp, #20]
 800c216:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c21a:	4604      	mov	r4, r0
 800c21c:	9209      	str	r2, [sp, #36]	; 0x24
 800c21e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c220:	b975      	cbnz	r5, 800c240 <_dtoa_r+0x40>
 800c222:	2010      	movs	r0, #16
 800c224:	f000 fddc 	bl	800cde0 <malloc>
 800c228:	4602      	mov	r2, r0
 800c22a:	6260      	str	r0, [r4, #36]	; 0x24
 800c22c:	b920      	cbnz	r0, 800c238 <_dtoa_r+0x38>
 800c22e:	4bb2      	ldr	r3, [pc, #712]	; (800c4f8 <_dtoa_r+0x2f8>)
 800c230:	21ea      	movs	r1, #234	; 0xea
 800c232:	48b2      	ldr	r0, [pc, #712]	; (800c4fc <_dtoa_r+0x2fc>)
 800c234:	f001 fb80 	bl	800d938 <__assert_func>
 800c238:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c23c:	6005      	str	r5, [r0, #0]
 800c23e:	60c5      	str	r5, [r0, #12]
 800c240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	b151      	cbz	r1, 800c25c <_dtoa_r+0x5c>
 800c246:	685a      	ldr	r2, [r3, #4]
 800c248:	604a      	str	r2, [r1, #4]
 800c24a:	2301      	movs	r3, #1
 800c24c:	4093      	lsls	r3, r2
 800c24e:	608b      	str	r3, [r1, #8]
 800c250:	4620      	mov	r0, r4
 800c252:	f000 fe0d 	bl	800ce70 <_Bfree>
 800c256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]
 800c25c:	1e3b      	subs	r3, r7, #0
 800c25e:	bfb9      	ittee	lt
 800c260:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c264:	9303      	strlt	r3, [sp, #12]
 800c266:	2300      	movge	r3, #0
 800c268:	f8c8 3000 	strge.w	r3, [r8]
 800c26c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c270:	4ba3      	ldr	r3, [pc, #652]	; (800c500 <_dtoa_r+0x300>)
 800c272:	bfbc      	itt	lt
 800c274:	2201      	movlt	r2, #1
 800c276:	f8c8 2000 	strlt.w	r2, [r8]
 800c27a:	ea33 0309 	bics.w	r3, r3, r9
 800c27e:	d11b      	bne.n	800c2b8 <_dtoa_r+0xb8>
 800c280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c282:	f242 730f 	movw	r3, #9999	; 0x270f
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c28c:	4333      	orrs	r3, r6
 800c28e:	f000 857a 	beq.w	800cd86 <_dtoa_r+0xb86>
 800c292:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c294:	b963      	cbnz	r3, 800c2b0 <_dtoa_r+0xb0>
 800c296:	4b9b      	ldr	r3, [pc, #620]	; (800c504 <_dtoa_r+0x304>)
 800c298:	e024      	b.n	800c2e4 <_dtoa_r+0xe4>
 800c29a:	4b9b      	ldr	r3, [pc, #620]	; (800c508 <_dtoa_r+0x308>)
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c2a2:	6013      	str	r3, [r2, #0]
 800c2a4:	9800      	ldr	r0, [sp, #0]
 800c2a6:	b015      	add	sp, #84	; 0x54
 800c2a8:	ecbd 8b02 	vpop	{d8}
 800c2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b0:	4b94      	ldr	r3, [pc, #592]	; (800c504 <_dtoa_r+0x304>)
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	3303      	adds	r3, #3
 800c2b6:	e7f3      	b.n	800c2a0 <_dtoa_r+0xa0>
 800c2b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	ec51 0b17 	vmov	r0, r1, d7
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c2c8:	f7f4 fbfe 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2cc:	4680      	mov	r8, r0
 800c2ce:	b158      	cbz	r0, 800c2e8 <_dtoa_r+0xe8>
 800c2d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	6013      	str	r3, [r2, #0]
 800c2d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f000 8551 	beq.w	800cd80 <_dtoa_r+0xb80>
 800c2de:	488b      	ldr	r0, [pc, #556]	; (800c50c <_dtoa_r+0x30c>)
 800c2e0:	6018      	str	r0, [r3, #0]
 800c2e2:	1e43      	subs	r3, r0, #1
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	e7dd      	b.n	800c2a4 <_dtoa_r+0xa4>
 800c2e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c2ec:	aa12      	add	r2, sp, #72	; 0x48
 800c2ee:	a913      	add	r1, sp, #76	; 0x4c
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f001 f89f 	bl	800d434 <__d2b>
 800c2f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c2fa:	4683      	mov	fp, r0
 800c2fc:	2d00      	cmp	r5, #0
 800c2fe:	d07c      	beq.n	800c3fa <_dtoa_r+0x1fa>
 800c300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c302:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c30a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c30e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c312:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c316:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c31a:	4b7d      	ldr	r3, [pc, #500]	; (800c510 <_dtoa_r+0x310>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	4630      	mov	r0, r6
 800c320:	4639      	mov	r1, r7
 800c322:	f7f3 ffb1 	bl	8000288 <__aeabi_dsub>
 800c326:	a36e      	add	r3, pc, #440	; (adr r3, 800c4e0 <_dtoa_r+0x2e0>)
 800c328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32c:	f7f4 f964 	bl	80005f8 <__aeabi_dmul>
 800c330:	a36d      	add	r3, pc, #436	; (adr r3, 800c4e8 <_dtoa_r+0x2e8>)
 800c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c336:	f7f3 ffa9 	bl	800028c <__adddf3>
 800c33a:	4606      	mov	r6, r0
 800c33c:	4628      	mov	r0, r5
 800c33e:	460f      	mov	r7, r1
 800c340:	f7f4 f8f0 	bl	8000524 <__aeabi_i2d>
 800c344:	a36a      	add	r3, pc, #424	; (adr r3, 800c4f0 <_dtoa_r+0x2f0>)
 800c346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34a:	f7f4 f955 	bl	80005f8 <__aeabi_dmul>
 800c34e:	4602      	mov	r2, r0
 800c350:	460b      	mov	r3, r1
 800c352:	4630      	mov	r0, r6
 800c354:	4639      	mov	r1, r7
 800c356:	f7f3 ff99 	bl	800028c <__adddf3>
 800c35a:	4606      	mov	r6, r0
 800c35c:	460f      	mov	r7, r1
 800c35e:	f7f4 fbfb 	bl	8000b58 <__aeabi_d2iz>
 800c362:	2200      	movs	r2, #0
 800c364:	4682      	mov	sl, r0
 800c366:	2300      	movs	r3, #0
 800c368:	4630      	mov	r0, r6
 800c36a:	4639      	mov	r1, r7
 800c36c:	f7f4 fbb6 	bl	8000adc <__aeabi_dcmplt>
 800c370:	b148      	cbz	r0, 800c386 <_dtoa_r+0x186>
 800c372:	4650      	mov	r0, sl
 800c374:	f7f4 f8d6 	bl	8000524 <__aeabi_i2d>
 800c378:	4632      	mov	r2, r6
 800c37a:	463b      	mov	r3, r7
 800c37c:	f7f4 fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c380:	b908      	cbnz	r0, 800c386 <_dtoa_r+0x186>
 800c382:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c386:	f1ba 0f16 	cmp.w	sl, #22
 800c38a:	d854      	bhi.n	800c436 <_dtoa_r+0x236>
 800c38c:	4b61      	ldr	r3, [pc, #388]	; (800c514 <_dtoa_r+0x314>)
 800c38e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c396:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c39a:	f7f4 fb9f 	bl	8000adc <__aeabi_dcmplt>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d04b      	beq.n	800c43a <_dtoa_r+0x23a>
 800c3a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	930e      	str	r3, [sp, #56]	; 0x38
 800c3aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c3ac:	1b5d      	subs	r5, r3, r5
 800c3ae:	1e6b      	subs	r3, r5, #1
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	bf43      	ittte	mi
 800c3b4:	2300      	movmi	r3, #0
 800c3b6:	f1c5 0801 	rsbmi	r8, r5, #1
 800c3ba:	9304      	strmi	r3, [sp, #16]
 800c3bc:	f04f 0800 	movpl.w	r8, #0
 800c3c0:	f1ba 0f00 	cmp.w	sl, #0
 800c3c4:	db3b      	blt.n	800c43e <_dtoa_r+0x23e>
 800c3c6:	9b04      	ldr	r3, [sp, #16]
 800c3c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c3cc:	4453      	add	r3, sl
 800c3ce:	9304      	str	r3, [sp, #16]
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	9306      	str	r3, [sp, #24]
 800c3d4:	9b05      	ldr	r3, [sp, #20]
 800c3d6:	2b09      	cmp	r3, #9
 800c3d8:	d869      	bhi.n	800c4ae <_dtoa_r+0x2ae>
 800c3da:	2b05      	cmp	r3, #5
 800c3dc:	bfc4      	itt	gt
 800c3de:	3b04      	subgt	r3, #4
 800c3e0:	9305      	strgt	r3, [sp, #20]
 800c3e2:	9b05      	ldr	r3, [sp, #20]
 800c3e4:	f1a3 0302 	sub.w	r3, r3, #2
 800c3e8:	bfcc      	ite	gt
 800c3ea:	2500      	movgt	r5, #0
 800c3ec:	2501      	movle	r5, #1
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d869      	bhi.n	800c4c6 <_dtoa_r+0x2c6>
 800c3f2:	e8df f003 	tbb	[pc, r3]
 800c3f6:	4e2c      	.short	0x4e2c
 800c3f8:	5a4c      	.short	0x5a4c
 800c3fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c3fe:	441d      	add	r5, r3
 800c400:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c404:	2b20      	cmp	r3, #32
 800c406:	bfc1      	itttt	gt
 800c408:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c40c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c410:	fa09 f303 	lslgt.w	r3, r9, r3
 800c414:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c418:	bfda      	itte	le
 800c41a:	f1c3 0320 	rsble	r3, r3, #32
 800c41e:	fa06 f003 	lslle.w	r0, r6, r3
 800c422:	4318      	orrgt	r0, r3
 800c424:	f7f4 f86e 	bl	8000504 <__aeabi_ui2d>
 800c428:	2301      	movs	r3, #1
 800c42a:	4606      	mov	r6, r0
 800c42c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c430:	3d01      	subs	r5, #1
 800c432:	9310      	str	r3, [sp, #64]	; 0x40
 800c434:	e771      	b.n	800c31a <_dtoa_r+0x11a>
 800c436:	2301      	movs	r3, #1
 800c438:	e7b6      	b.n	800c3a8 <_dtoa_r+0x1a8>
 800c43a:	900e      	str	r0, [sp, #56]	; 0x38
 800c43c:	e7b5      	b.n	800c3aa <_dtoa_r+0x1aa>
 800c43e:	f1ca 0300 	rsb	r3, sl, #0
 800c442:	9306      	str	r3, [sp, #24]
 800c444:	2300      	movs	r3, #0
 800c446:	eba8 080a 	sub.w	r8, r8, sl
 800c44a:	930d      	str	r3, [sp, #52]	; 0x34
 800c44c:	e7c2      	b.n	800c3d4 <_dtoa_r+0x1d4>
 800c44e:	2300      	movs	r3, #0
 800c450:	9308      	str	r3, [sp, #32]
 800c452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	dc39      	bgt.n	800c4cc <_dtoa_r+0x2cc>
 800c458:	f04f 0901 	mov.w	r9, #1
 800c45c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c460:	464b      	mov	r3, r9
 800c462:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c466:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c468:	2200      	movs	r2, #0
 800c46a:	6042      	str	r2, [r0, #4]
 800c46c:	2204      	movs	r2, #4
 800c46e:	f102 0614 	add.w	r6, r2, #20
 800c472:	429e      	cmp	r6, r3
 800c474:	6841      	ldr	r1, [r0, #4]
 800c476:	d92f      	bls.n	800c4d8 <_dtoa_r+0x2d8>
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 fcb9 	bl	800cdf0 <_Balloc>
 800c47e:	9000      	str	r0, [sp, #0]
 800c480:	2800      	cmp	r0, #0
 800c482:	d14b      	bne.n	800c51c <_dtoa_r+0x31c>
 800c484:	4b24      	ldr	r3, [pc, #144]	; (800c518 <_dtoa_r+0x318>)
 800c486:	4602      	mov	r2, r0
 800c488:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c48c:	e6d1      	b.n	800c232 <_dtoa_r+0x32>
 800c48e:	2301      	movs	r3, #1
 800c490:	e7de      	b.n	800c450 <_dtoa_r+0x250>
 800c492:	2300      	movs	r3, #0
 800c494:	9308      	str	r3, [sp, #32]
 800c496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c498:	eb0a 0903 	add.w	r9, sl, r3
 800c49c:	f109 0301 	add.w	r3, r9, #1
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	9301      	str	r3, [sp, #4]
 800c4a4:	bfb8      	it	lt
 800c4a6:	2301      	movlt	r3, #1
 800c4a8:	e7dd      	b.n	800c466 <_dtoa_r+0x266>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	e7f2      	b.n	800c494 <_dtoa_r+0x294>
 800c4ae:	2501      	movs	r5, #1
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	9305      	str	r3, [sp, #20]
 800c4b4:	9508      	str	r5, [sp, #32]
 800c4b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c4c0:	2312      	movs	r3, #18
 800c4c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c4c4:	e7cf      	b.n	800c466 <_dtoa_r+0x266>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	9308      	str	r3, [sp, #32]
 800c4ca:	e7f4      	b.n	800c4b6 <_dtoa_r+0x2b6>
 800c4cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c4d0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c4d4:	464b      	mov	r3, r9
 800c4d6:	e7c6      	b.n	800c466 <_dtoa_r+0x266>
 800c4d8:	3101      	adds	r1, #1
 800c4da:	6041      	str	r1, [r0, #4]
 800c4dc:	0052      	lsls	r2, r2, #1
 800c4de:	e7c6      	b.n	800c46e <_dtoa_r+0x26e>
 800c4e0:	636f4361 	.word	0x636f4361
 800c4e4:	3fd287a7 	.word	0x3fd287a7
 800c4e8:	8b60c8b3 	.word	0x8b60c8b3
 800c4ec:	3fc68a28 	.word	0x3fc68a28
 800c4f0:	509f79fb 	.word	0x509f79fb
 800c4f4:	3fd34413 	.word	0x3fd34413
 800c4f8:	0800f0a5 	.word	0x0800f0a5
 800c4fc:	0800f0bc 	.word	0x0800f0bc
 800c500:	7ff00000 	.word	0x7ff00000
 800c504:	0800f0a1 	.word	0x0800f0a1
 800c508:	0800f098 	.word	0x0800f098
 800c50c:	0800f075 	.word	0x0800f075
 800c510:	3ff80000 	.word	0x3ff80000
 800c514:	0800f1b8 	.word	0x0800f1b8
 800c518:	0800f11b 	.word	0x0800f11b
 800c51c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c51e:	9a00      	ldr	r2, [sp, #0]
 800c520:	601a      	str	r2, [r3, #0]
 800c522:	9b01      	ldr	r3, [sp, #4]
 800c524:	2b0e      	cmp	r3, #14
 800c526:	f200 80ad 	bhi.w	800c684 <_dtoa_r+0x484>
 800c52a:	2d00      	cmp	r5, #0
 800c52c:	f000 80aa 	beq.w	800c684 <_dtoa_r+0x484>
 800c530:	f1ba 0f00 	cmp.w	sl, #0
 800c534:	dd36      	ble.n	800c5a4 <_dtoa_r+0x3a4>
 800c536:	4ac3      	ldr	r2, [pc, #780]	; (800c844 <_dtoa_r+0x644>)
 800c538:	f00a 030f 	and.w	r3, sl, #15
 800c53c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c540:	ed93 7b00 	vldr	d7, [r3]
 800c544:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c548:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c54c:	eeb0 8a47 	vmov.f32	s16, s14
 800c550:	eef0 8a67 	vmov.f32	s17, s15
 800c554:	d016      	beq.n	800c584 <_dtoa_r+0x384>
 800c556:	4bbc      	ldr	r3, [pc, #752]	; (800c848 <_dtoa_r+0x648>)
 800c558:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c55c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c560:	f7f4 f974 	bl	800084c <__aeabi_ddiv>
 800c564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c568:	f007 070f 	and.w	r7, r7, #15
 800c56c:	2503      	movs	r5, #3
 800c56e:	4eb6      	ldr	r6, [pc, #728]	; (800c848 <_dtoa_r+0x648>)
 800c570:	b957      	cbnz	r7, 800c588 <_dtoa_r+0x388>
 800c572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c576:	ec53 2b18 	vmov	r2, r3, d8
 800c57a:	f7f4 f967 	bl	800084c <__aeabi_ddiv>
 800c57e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c582:	e029      	b.n	800c5d8 <_dtoa_r+0x3d8>
 800c584:	2502      	movs	r5, #2
 800c586:	e7f2      	b.n	800c56e <_dtoa_r+0x36e>
 800c588:	07f9      	lsls	r1, r7, #31
 800c58a:	d508      	bpl.n	800c59e <_dtoa_r+0x39e>
 800c58c:	ec51 0b18 	vmov	r0, r1, d8
 800c590:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c594:	f7f4 f830 	bl	80005f8 <__aeabi_dmul>
 800c598:	ec41 0b18 	vmov	d8, r0, r1
 800c59c:	3501      	adds	r5, #1
 800c59e:	107f      	asrs	r7, r7, #1
 800c5a0:	3608      	adds	r6, #8
 800c5a2:	e7e5      	b.n	800c570 <_dtoa_r+0x370>
 800c5a4:	f000 80a6 	beq.w	800c6f4 <_dtoa_r+0x4f4>
 800c5a8:	f1ca 0600 	rsb	r6, sl, #0
 800c5ac:	4ba5      	ldr	r3, [pc, #660]	; (800c844 <_dtoa_r+0x644>)
 800c5ae:	4fa6      	ldr	r7, [pc, #664]	; (800c848 <_dtoa_r+0x648>)
 800c5b0:	f006 020f 	and.w	r2, r6, #15
 800c5b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c5c0:	f7f4 f81a 	bl	80005f8 <__aeabi_dmul>
 800c5c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5c8:	1136      	asrs	r6, r6, #4
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	2502      	movs	r5, #2
 800c5ce:	2e00      	cmp	r6, #0
 800c5d0:	f040 8085 	bne.w	800c6de <_dtoa_r+0x4de>
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1d2      	bne.n	800c57e <_dtoa_r+0x37e>
 800c5d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f000 808c 	beq.w	800c6f8 <_dtoa_r+0x4f8>
 800c5e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c5e4:	4b99      	ldr	r3, [pc, #612]	; (800c84c <_dtoa_r+0x64c>)
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	4639      	mov	r1, r7
 800c5ec:	f7f4 fa76 	bl	8000adc <__aeabi_dcmplt>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	f000 8081 	beq.w	800c6f8 <_dtoa_r+0x4f8>
 800c5f6:	9b01      	ldr	r3, [sp, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d07d      	beq.n	800c6f8 <_dtoa_r+0x4f8>
 800c5fc:	f1b9 0f00 	cmp.w	r9, #0
 800c600:	dd3c      	ble.n	800c67c <_dtoa_r+0x47c>
 800c602:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c606:	9307      	str	r3, [sp, #28]
 800c608:	2200      	movs	r2, #0
 800c60a:	4b91      	ldr	r3, [pc, #580]	; (800c850 <_dtoa_r+0x650>)
 800c60c:	4630      	mov	r0, r6
 800c60e:	4639      	mov	r1, r7
 800c610:	f7f3 fff2 	bl	80005f8 <__aeabi_dmul>
 800c614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c618:	3501      	adds	r5, #1
 800c61a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c61e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c622:	4628      	mov	r0, r5
 800c624:	f7f3 ff7e 	bl	8000524 <__aeabi_i2d>
 800c628:	4632      	mov	r2, r6
 800c62a:	463b      	mov	r3, r7
 800c62c:	f7f3 ffe4 	bl	80005f8 <__aeabi_dmul>
 800c630:	4b88      	ldr	r3, [pc, #544]	; (800c854 <_dtoa_r+0x654>)
 800c632:	2200      	movs	r2, #0
 800c634:	f7f3 fe2a 	bl	800028c <__adddf3>
 800c638:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c63c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c640:	9303      	str	r3, [sp, #12]
 800c642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c644:	2b00      	cmp	r3, #0
 800c646:	d15c      	bne.n	800c702 <_dtoa_r+0x502>
 800c648:	4b83      	ldr	r3, [pc, #524]	; (800c858 <_dtoa_r+0x658>)
 800c64a:	2200      	movs	r2, #0
 800c64c:	4630      	mov	r0, r6
 800c64e:	4639      	mov	r1, r7
 800c650:	f7f3 fe1a 	bl	8000288 <__aeabi_dsub>
 800c654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c658:	4606      	mov	r6, r0
 800c65a:	460f      	mov	r7, r1
 800c65c:	f7f4 fa5c 	bl	8000b18 <__aeabi_dcmpgt>
 800c660:	2800      	cmp	r0, #0
 800c662:	f040 8296 	bne.w	800cb92 <_dtoa_r+0x992>
 800c666:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c66a:	4630      	mov	r0, r6
 800c66c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c670:	4639      	mov	r1, r7
 800c672:	f7f4 fa33 	bl	8000adc <__aeabi_dcmplt>
 800c676:	2800      	cmp	r0, #0
 800c678:	f040 8288 	bne.w	800cb8c <_dtoa_r+0x98c>
 800c67c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c680:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c684:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c686:	2b00      	cmp	r3, #0
 800c688:	f2c0 8158 	blt.w	800c93c <_dtoa_r+0x73c>
 800c68c:	f1ba 0f0e 	cmp.w	sl, #14
 800c690:	f300 8154 	bgt.w	800c93c <_dtoa_r+0x73c>
 800c694:	4b6b      	ldr	r3, [pc, #428]	; (800c844 <_dtoa_r+0x644>)
 800c696:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c69a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f280 80e3 	bge.w	800c86c <_dtoa_r+0x66c>
 800c6a6:	9b01      	ldr	r3, [sp, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f300 80df 	bgt.w	800c86c <_dtoa_r+0x66c>
 800c6ae:	f040 826d 	bne.w	800cb8c <_dtoa_r+0x98c>
 800c6b2:	4b69      	ldr	r3, [pc, #420]	; (800c858 <_dtoa_r+0x658>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	4640      	mov	r0, r8
 800c6b8:	4649      	mov	r1, r9
 800c6ba:	f7f3 ff9d 	bl	80005f8 <__aeabi_dmul>
 800c6be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6c2:	f7f4 fa1f 	bl	8000b04 <__aeabi_dcmpge>
 800c6c6:	9e01      	ldr	r6, [sp, #4]
 800c6c8:	4637      	mov	r7, r6
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	f040 8243 	bne.w	800cb56 <_dtoa_r+0x956>
 800c6d0:	9d00      	ldr	r5, [sp, #0]
 800c6d2:	2331      	movs	r3, #49	; 0x31
 800c6d4:	f805 3b01 	strb.w	r3, [r5], #1
 800c6d8:	f10a 0a01 	add.w	sl, sl, #1
 800c6dc:	e23f      	b.n	800cb5e <_dtoa_r+0x95e>
 800c6de:	07f2      	lsls	r2, r6, #31
 800c6e0:	d505      	bpl.n	800c6ee <_dtoa_r+0x4ee>
 800c6e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6e6:	f7f3 ff87 	bl	80005f8 <__aeabi_dmul>
 800c6ea:	3501      	adds	r5, #1
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	1076      	asrs	r6, r6, #1
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	e76c      	b.n	800c5ce <_dtoa_r+0x3ce>
 800c6f4:	2502      	movs	r5, #2
 800c6f6:	e76f      	b.n	800c5d8 <_dtoa_r+0x3d8>
 800c6f8:	9b01      	ldr	r3, [sp, #4]
 800c6fa:	f8cd a01c 	str.w	sl, [sp, #28]
 800c6fe:	930c      	str	r3, [sp, #48]	; 0x30
 800c700:	e78d      	b.n	800c61e <_dtoa_r+0x41e>
 800c702:	9900      	ldr	r1, [sp, #0]
 800c704:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c708:	4b4e      	ldr	r3, [pc, #312]	; (800c844 <_dtoa_r+0x644>)
 800c70a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c70e:	4401      	add	r1, r0
 800c710:	9102      	str	r1, [sp, #8]
 800c712:	9908      	ldr	r1, [sp, #32]
 800c714:	eeb0 8a47 	vmov.f32	s16, s14
 800c718:	eef0 8a67 	vmov.f32	s17, s15
 800c71c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c720:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c724:	2900      	cmp	r1, #0
 800c726:	d045      	beq.n	800c7b4 <_dtoa_r+0x5b4>
 800c728:	494c      	ldr	r1, [pc, #304]	; (800c85c <_dtoa_r+0x65c>)
 800c72a:	2000      	movs	r0, #0
 800c72c:	f7f4 f88e 	bl	800084c <__aeabi_ddiv>
 800c730:	ec53 2b18 	vmov	r2, r3, d8
 800c734:	f7f3 fda8 	bl	8000288 <__aeabi_dsub>
 800c738:	9d00      	ldr	r5, [sp, #0]
 800c73a:	ec41 0b18 	vmov	d8, r0, r1
 800c73e:	4639      	mov	r1, r7
 800c740:	4630      	mov	r0, r6
 800c742:	f7f4 fa09 	bl	8000b58 <__aeabi_d2iz>
 800c746:	900c      	str	r0, [sp, #48]	; 0x30
 800c748:	f7f3 feec 	bl	8000524 <__aeabi_i2d>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	4630      	mov	r0, r6
 800c752:	4639      	mov	r1, r7
 800c754:	f7f3 fd98 	bl	8000288 <__aeabi_dsub>
 800c758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c75a:	3330      	adds	r3, #48	; 0x30
 800c75c:	f805 3b01 	strb.w	r3, [r5], #1
 800c760:	ec53 2b18 	vmov	r2, r3, d8
 800c764:	4606      	mov	r6, r0
 800c766:	460f      	mov	r7, r1
 800c768:	f7f4 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d165      	bne.n	800c83c <_dtoa_r+0x63c>
 800c770:	4632      	mov	r2, r6
 800c772:	463b      	mov	r3, r7
 800c774:	4935      	ldr	r1, [pc, #212]	; (800c84c <_dtoa_r+0x64c>)
 800c776:	2000      	movs	r0, #0
 800c778:	f7f3 fd86 	bl	8000288 <__aeabi_dsub>
 800c77c:	ec53 2b18 	vmov	r2, r3, d8
 800c780:	f7f4 f9ac 	bl	8000adc <__aeabi_dcmplt>
 800c784:	2800      	cmp	r0, #0
 800c786:	f040 80b9 	bne.w	800c8fc <_dtoa_r+0x6fc>
 800c78a:	9b02      	ldr	r3, [sp, #8]
 800c78c:	429d      	cmp	r5, r3
 800c78e:	f43f af75 	beq.w	800c67c <_dtoa_r+0x47c>
 800c792:	4b2f      	ldr	r3, [pc, #188]	; (800c850 <_dtoa_r+0x650>)
 800c794:	ec51 0b18 	vmov	r0, r1, d8
 800c798:	2200      	movs	r2, #0
 800c79a:	f7f3 ff2d 	bl	80005f8 <__aeabi_dmul>
 800c79e:	4b2c      	ldr	r3, [pc, #176]	; (800c850 <_dtoa_r+0x650>)
 800c7a0:	ec41 0b18 	vmov	d8, r0, r1
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	f7f3 ff25 	bl	80005f8 <__aeabi_dmul>
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460f      	mov	r7, r1
 800c7b2:	e7c4      	b.n	800c73e <_dtoa_r+0x53e>
 800c7b4:	ec51 0b17 	vmov	r0, r1, d7
 800c7b8:	f7f3 ff1e 	bl	80005f8 <__aeabi_dmul>
 800c7bc:	9b02      	ldr	r3, [sp, #8]
 800c7be:	9d00      	ldr	r5, [sp, #0]
 800c7c0:	930c      	str	r3, [sp, #48]	; 0x30
 800c7c2:	ec41 0b18 	vmov	d8, r0, r1
 800c7c6:	4639      	mov	r1, r7
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f7f4 f9c5 	bl	8000b58 <__aeabi_d2iz>
 800c7ce:	9011      	str	r0, [sp, #68]	; 0x44
 800c7d0:	f7f3 fea8 	bl	8000524 <__aeabi_i2d>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	4630      	mov	r0, r6
 800c7da:	4639      	mov	r1, r7
 800c7dc:	f7f3 fd54 	bl	8000288 <__aeabi_dsub>
 800c7e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7e2:	3330      	adds	r3, #48	; 0x30
 800c7e4:	f805 3b01 	strb.w	r3, [r5], #1
 800c7e8:	9b02      	ldr	r3, [sp, #8]
 800c7ea:	429d      	cmp	r5, r3
 800c7ec:	4606      	mov	r6, r0
 800c7ee:	460f      	mov	r7, r1
 800c7f0:	f04f 0200 	mov.w	r2, #0
 800c7f4:	d134      	bne.n	800c860 <_dtoa_r+0x660>
 800c7f6:	4b19      	ldr	r3, [pc, #100]	; (800c85c <_dtoa_r+0x65c>)
 800c7f8:	ec51 0b18 	vmov	r0, r1, d8
 800c7fc:	f7f3 fd46 	bl	800028c <__adddf3>
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	4630      	mov	r0, r6
 800c806:	4639      	mov	r1, r7
 800c808:	f7f4 f986 	bl	8000b18 <__aeabi_dcmpgt>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	d175      	bne.n	800c8fc <_dtoa_r+0x6fc>
 800c810:	ec53 2b18 	vmov	r2, r3, d8
 800c814:	4911      	ldr	r1, [pc, #68]	; (800c85c <_dtoa_r+0x65c>)
 800c816:	2000      	movs	r0, #0
 800c818:	f7f3 fd36 	bl	8000288 <__aeabi_dsub>
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	4630      	mov	r0, r6
 800c822:	4639      	mov	r1, r7
 800c824:	f7f4 f95a 	bl	8000adc <__aeabi_dcmplt>
 800c828:	2800      	cmp	r0, #0
 800c82a:	f43f af27 	beq.w	800c67c <_dtoa_r+0x47c>
 800c82e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c830:	1e6b      	subs	r3, r5, #1
 800c832:	930c      	str	r3, [sp, #48]	; 0x30
 800c834:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c838:	2b30      	cmp	r3, #48	; 0x30
 800c83a:	d0f8      	beq.n	800c82e <_dtoa_r+0x62e>
 800c83c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c840:	e04a      	b.n	800c8d8 <_dtoa_r+0x6d8>
 800c842:	bf00      	nop
 800c844:	0800f1b8 	.word	0x0800f1b8
 800c848:	0800f190 	.word	0x0800f190
 800c84c:	3ff00000 	.word	0x3ff00000
 800c850:	40240000 	.word	0x40240000
 800c854:	401c0000 	.word	0x401c0000
 800c858:	40140000 	.word	0x40140000
 800c85c:	3fe00000 	.word	0x3fe00000
 800c860:	4baf      	ldr	r3, [pc, #700]	; (800cb20 <_dtoa_r+0x920>)
 800c862:	f7f3 fec9 	bl	80005f8 <__aeabi_dmul>
 800c866:	4606      	mov	r6, r0
 800c868:	460f      	mov	r7, r1
 800c86a:	e7ac      	b.n	800c7c6 <_dtoa_r+0x5c6>
 800c86c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c870:	9d00      	ldr	r5, [sp, #0]
 800c872:	4642      	mov	r2, r8
 800c874:	464b      	mov	r3, r9
 800c876:	4630      	mov	r0, r6
 800c878:	4639      	mov	r1, r7
 800c87a:	f7f3 ffe7 	bl	800084c <__aeabi_ddiv>
 800c87e:	f7f4 f96b 	bl	8000b58 <__aeabi_d2iz>
 800c882:	9002      	str	r0, [sp, #8]
 800c884:	f7f3 fe4e 	bl	8000524 <__aeabi_i2d>
 800c888:	4642      	mov	r2, r8
 800c88a:	464b      	mov	r3, r9
 800c88c:	f7f3 feb4 	bl	80005f8 <__aeabi_dmul>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4630      	mov	r0, r6
 800c896:	4639      	mov	r1, r7
 800c898:	f7f3 fcf6 	bl	8000288 <__aeabi_dsub>
 800c89c:	9e02      	ldr	r6, [sp, #8]
 800c89e:	9f01      	ldr	r7, [sp, #4]
 800c8a0:	3630      	adds	r6, #48	; 0x30
 800c8a2:	f805 6b01 	strb.w	r6, [r5], #1
 800c8a6:	9e00      	ldr	r6, [sp, #0]
 800c8a8:	1bae      	subs	r6, r5, r6
 800c8aa:	42b7      	cmp	r7, r6
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	d137      	bne.n	800c922 <_dtoa_r+0x722>
 800c8b2:	f7f3 fceb 	bl	800028c <__adddf3>
 800c8b6:	4642      	mov	r2, r8
 800c8b8:	464b      	mov	r3, r9
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	460f      	mov	r7, r1
 800c8be:	f7f4 f92b 	bl	8000b18 <__aeabi_dcmpgt>
 800c8c2:	b9c8      	cbnz	r0, 800c8f8 <_dtoa_r+0x6f8>
 800c8c4:	4642      	mov	r2, r8
 800c8c6:	464b      	mov	r3, r9
 800c8c8:	4630      	mov	r0, r6
 800c8ca:	4639      	mov	r1, r7
 800c8cc:	f7f4 f8fc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8d0:	b110      	cbz	r0, 800c8d8 <_dtoa_r+0x6d8>
 800c8d2:	9b02      	ldr	r3, [sp, #8]
 800c8d4:	07d9      	lsls	r1, r3, #31
 800c8d6:	d40f      	bmi.n	800c8f8 <_dtoa_r+0x6f8>
 800c8d8:	4620      	mov	r0, r4
 800c8da:	4659      	mov	r1, fp
 800c8dc:	f000 fac8 	bl	800ce70 <_Bfree>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	702b      	strb	r3, [r5, #0]
 800c8e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8e6:	f10a 0001 	add.w	r0, sl, #1
 800c8ea:	6018      	str	r0, [r3, #0]
 800c8ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f43f acd8 	beq.w	800c2a4 <_dtoa_r+0xa4>
 800c8f4:	601d      	str	r5, [r3, #0]
 800c8f6:	e4d5      	b.n	800c2a4 <_dtoa_r+0xa4>
 800c8f8:	f8cd a01c 	str.w	sl, [sp, #28]
 800c8fc:	462b      	mov	r3, r5
 800c8fe:	461d      	mov	r5, r3
 800c900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c904:	2a39      	cmp	r2, #57	; 0x39
 800c906:	d108      	bne.n	800c91a <_dtoa_r+0x71a>
 800c908:	9a00      	ldr	r2, [sp, #0]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d1f7      	bne.n	800c8fe <_dtoa_r+0x6fe>
 800c90e:	9a07      	ldr	r2, [sp, #28]
 800c910:	9900      	ldr	r1, [sp, #0]
 800c912:	3201      	adds	r2, #1
 800c914:	9207      	str	r2, [sp, #28]
 800c916:	2230      	movs	r2, #48	; 0x30
 800c918:	700a      	strb	r2, [r1, #0]
 800c91a:	781a      	ldrb	r2, [r3, #0]
 800c91c:	3201      	adds	r2, #1
 800c91e:	701a      	strb	r2, [r3, #0]
 800c920:	e78c      	b.n	800c83c <_dtoa_r+0x63c>
 800c922:	4b7f      	ldr	r3, [pc, #508]	; (800cb20 <_dtoa_r+0x920>)
 800c924:	2200      	movs	r2, #0
 800c926:	f7f3 fe67 	bl	80005f8 <__aeabi_dmul>
 800c92a:	2200      	movs	r2, #0
 800c92c:	2300      	movs	r3, #0
 800c92e:	4606      	mov	r6, r0
 800c930:	460f      	mov	r7, r1
 800c932:	f7f4 f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c936:	2800      	cmp	r0, #0
 800c938:	d09b      	beq.n	800c872 <_dtoa_r+0x672>
 800c93a:	e7cd      	b.n	800c8d8 <_dtoa_r+0x6d8>
 800c93c:	9a08      	ldr	r2, [sp, #32]
 800c93e:	2a00      	cmp	r2, #0
 800c940:	f000 80c4 	beq.w	800cacc <_dtoa_r+0x8cc>
 800c944:	9a05      	ldr	r2, [sp, #20]
 800c946:	2a01      	cmp	r2, #1
 800c948:	f300 80a8 	bgt.w	800ca9c <_dtoa_r+0x89c>
 800c94c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c94e:	2a00      	cmp	r2, #0
 800c950:	f000 80a0 	beq.w	800ca94 <_dtoa_r+0x894>
 800c954:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c958:	9e06      	ldr	r6, [sp, #24]
 800c95a:	4645      	mov	r5, r8
 800c95c:	9a04      	ldr	r2, [sp, #16]
 800c95e:	2101      	movs	r1, #1
 800c960:	441a      	add	r2, r3
 800c962:	4620      	mov	r0, r4
 800c964:	4498      	add	r8, r3
 800c966:	9204      	str	r2, [sp, #16]
 800c968:	f000 fb3e 	bl	800cfe8 <__i2b>
 800c96c:	4607      	mov	r7, r0
 800c96e:	2d00      	cmp	r5, #0
 800c970:	dd0b      	ble.n	800c98a <_dtoa_r+0x78a>
 800c972:	9b04      	ldr	r3, [sp, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	dd08      	ble.n	800c98a <_dtoa_r+0x78a>
 800c978:	42ab      	cmp	r3, r5
 800c97a:	9a04      	ldr	r2, [sp, #16]
 800c97c:	bfa8      	it	ge
 800c97e:	462b      	movge	r3, r5
 800c980:	eba8 0803 	sub.w	r8, r8, r3
 800c984:	1aed      	subs	r5, r5, r3
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	9304      	str	r3, [sp, #16]
 800c98a:	9b06      	ldr	r3, [sp, #24]
 800c98c:	b1fb      	cbz	r3, 800c9ce <_dtoa_r+0x7ce>
 800c98e:	9b08      	ldr	r3, [sp, #32]
 800c990:	2b00      	cmp	r3, #0
 800c992:	f000 809f 	beq.w	800cad4 <_dtoa_r+0x8d4>
 800c996:	2e00      	cmp	r6, #0
 800c998:	dd11      	ble.n	800c9be <_dtoa_r+0x7be>
 800c99a:	4639      	mov	r1, r7
 800c99c:	4632      	mov	r2, r6
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f000 fbde 	bl	800d160 <__pow5mult>
 800c9a4:	465a      	mov	r2, fp
 800c9a6:	4601      	mov	r1, r0
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	f000 fb32 	bl	800d014 <__multiply>
 800c9b0:	4659      	mov	r1, fp
 800c9b2:	9007      	str	r0, [sp, #28]
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	f000 fa5b 	bl	800ce70 <_Bfree>
 800c9ba:	9b07      	ldr	r3, [sp, #28]
 800c9bc:	469b      	mov	fp, r3
 800c9be:	9b06      	ldr	r3, [sp, #24]
 800c9c0:	1b9a      	subs	r2, r3, r6
 800c9c2:	d004      	beq.n	800c9ce <_dtoa_r+0x7ce>
 800c9c4:	4659      	mov	r1, fp
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f000 fbca 	bl	800d160 <__pow5mult>
 800c9cc:	4683      	mov	fp, r0
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f000 fb09 	bl	800cfe8 <__i2b>
 800c9d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	4606      	mov	r6, r0
 800c9dc:	dd7c      	ble.n	800cad8 <_dtoa_r+0x8d8>
 800c9de:	461a      	mov	r2, r3
 800c9e0:	4601      	mov	r1, r0
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	f000 fbbc 	bl	800d160 <__pow5mult>
 800c9e8:	9b05      	ldr	r3, [sp, #20]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	dd76      	ble.n	800cade <_dtoa_r+0x8de>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	9306      	str	r3, [sp, #24]
 800c9f4:	6933      	ldr	r3, [r6, #16]
 800c9f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c9fa:	6918      	ldr	r0, [r3, #16]
 800c9fc:	f000 faa4 	bl	800cf48 <__hi0bits>
 800ca00:	f1c0 0020 	rsb	r0, r0, #32
 800ca04:	9b04      	ldr	r3, [sp, #16]
 800ca06:	4418      	add	r0, r3
 800ca08:	f010 001f 	ands.w	r0, r0, #31
 800ca0c:	f000 8086 	beq.w	800cb1c <_dtoa_r+0x91c>
 800ca10:	f1c0 0320 	rsb	r3, r0, #32
 800ca14:	2b04      	cmp	r3, #4
 800ca16:	dd7f      	ble.n	800cb18 <_dtoa_r+0x918>
 800ca18:	f1c0 001c 	rsb	r0, r0, #28
 800ca1c:	9b04      	ldr	r3, [sp, #16]
 800ca1e:	4403      	add	r3, r0
 800ca20:	4480      	add	r8, r0
 800ca22:	4405      	add	r5, r0
 800ca24:	9304      	str	r3, [sp, #16]
 800ca26:	f1b8 0f00 	cmp.w	r8, #0
 800ca2a:	dd05      	ble.n	800ca38 <_dtoa_r+0x838>
 800ca2c:	4659      	mov	r1, fp
 800ca2e:	4642      	mov	r2, r8
 800ca30:	4620      	mov	r0, r4
 800ca32:	f000 fbef 	bl	800d214 <__lshift>
 800ca36:	4683      	mov	fp, r0
 800ca38:	9b04      	ldr	r3, [sp, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	dd05      	ble.n	800ca4a <_dtoa_r+0x84a>
 800ca3e:	4631      	mov	r1, r6
 800ca40:	461a      	mov	r2, r3
 800ca42:	4620      	mov	r0, r4
 800ca44:	f000 fbe6 	bl	800d214 <__lshift>
 800ca48:	4606      	mov	r6, r0
 800ca4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d069      	beq.n	800cb24 <_dtoa_r+0x924>
 800ca50:	4631      	mov	r1, r6
 800ca52:	4658      	mov	r0, fp
 800ca54:	f000 fc4a 	bl	800d2ec <__mcmp>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	da63      	bge.n	800cb24 <_dtoa_r+0x924>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	4659      	mov	r1, fp
 800ca60:	220a      	movs	r2, #10
 800ca62:	4620      	mov	r0, r4
 800ca64:	f000 fa26 	bl	800ceb4 <__multadd>
 800ca68:	9b08      	ldr	r3, [sp, #32]
 800ca6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ca6e:	4683      	mov	fp, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 818f 	beq.w	800cd94 <_dtoa_r+0xb94>
 800ca76:	4639      	mov	r1, r7
 800ca78:	2300      	movs	r3, #0
 800ca7a:	220a      	movs	r2, #10
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f000 fa19 	bl	800ceb4 <__multadd>
 800ca82:	f1b9 0f00 	cmp.w	r9, #0
 800ca86:	4607      	mov	r7, r0
 800ca88:	f300 808e 	bgt.w	800cba8 <_dtoa_r+0x9a8>
 800ca8c:	9b05      	ldr	r3, [sp, #20]
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	dc50      	bgt.n	800cb34 <_dtoa_r+0x934>
 800ca92:	e089      	b.n	800cba8 <_dtoa_r+0x9a8>
 800ca94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca9a:	e75d      	b.n	800c958 <_dtoa_r+0x758>
 800ca9c:	9b01      	ldr	r3, [sp, #4]
 800ca9e:	1e5e      	subs	r6, r3, #1
 800caa0:	9b06      	ldr	r3, [sp, #24]
 800caa2:	42b3      	cmp	r3, r6
 800caa4:	bfbf      	itttt	lt
 800caa6:	9b06      	ldrlt	r3, [sp, #24]
 800caa8:	9606      	strlt	r6, [sp, #24]
 800caaa:	1af2      	sublt	r2, r6, r3
 800caac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800caae:	bfb6      	itet	lt
 800cab0:	189b      	addlt	r3, r3, r2
 800cab2:	1b9e      	subge	r6, r3, r6
 800cab4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800cab6:	9b01      	ldr	r3, [sp, #4]
 800cab8:	bfb8      	it	lt
 800caba:	2600      	movlt	r6, #0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	bfb5      	itete	lt
 800cac0:	eba8 0503 	sublt.w	r5, r8, r3
 800cac4:	9b01      	ldrge	r3, [sp, #4]
 800cac6:	2300      	movlt	r3, #0
 800cac8:	4645      	movge	r5, r8
 800caca:	e747      	b.n	800c95c <_dtoa_r+0x75c>
 800cacc:	9e06      	ldr	r6, [sp, #24]
 800cace:	9f08      	ldr	r7, [sp, #32]
 800cad0:	4645      	mov	r5, r8
 800cad2:	e74c      	b.n	800c96e <_dtoa_r+0x76e>
 800cad4:	9a06      	ldr	r2, [sp, #24]
 800cad6:	e775      	b.n	800c9c4 <_dtoa_r+0x7c4>
 800cad8:	9b05      	ldr	r3, [sp, #20]
 800cada:	2b01      	cmp	r3, #1
 800cadc:	dc18      	bgt.n	800cb10 <_dtoa_r+0x910>
 800cade:	9b02      	ldr	r3, [sp, #8]
 800cae0:	b9b3      	cbnz	r3, 800cb10 <_dtoa_r+0x910>
 800cae2:	9b03      	ldr	r3, [sp, #12]
 800cae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cae8:	b9a3      	cbnz	r3, 800cb14 <_dtoa_r+0x914>
 800caea:	9b03      	ldr	r3, [sp, #12]
 800caec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800caf0:	0d1b      	lsrs	r3, r3, #20
 800caf2:	051b      	lsls	r3, r3, #20
 800caf4:	b12b      	cbz	r3, 800cb02 <_dtoa_r+0x902>
 800caf6:	9b04      	ldr	r3, [sp, #16]
 800caf8:	3301      	adds	r3, #1
 800cafa:	9304      	str	r3, [sp, #16]
 800cafc:	f108 0801 	add.w	r8, r8, #1
 800cb00:	2301      	movs	r3, #1
 800cb02:	9306      	str	r3, [sp, #24]
 800cb04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f47f af74 	bne.w	800c9f4 <_dtoa_r+0x7f4>
 800cb0c:	2001      	movs	r0, #1
 800cb0e:	e779      	b.n	800ca04 <_dtoa_r+0x804>
 800cb10:	2300      	movs	r3, #0
 800cb12:	e7f6      	b.n	800cb02 <_dtoa_r+0x902>
 800cb14:	9b02      	ldr	r3, [sp, #8]
 800cb16:	e7f4      	b.n	800cb02 <_dtoa_r+0x902>
 800cb18:	d085      	beq.n	800ca26 <_dtoa_r+0x826>
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	301c      	adds	r0, #28
 800cb1e:	e77d      	b.n	800ca1c <_dtoa_r+0x81c>
 800cb20:	40240000 	.word	0x40240000
 800cb24:	9b01      	ldr	r3, [sp, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	dc38      	bgt.n	800cb9c <_dtoa_r+0x99c>
 800cb2a:	9b05      	ldr	r3, [sp, #20]
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	dd35      	ble.n	800cb9c <_dtoa_r+0x99c>
 800cb30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cb34:	f1b9 0f00 	cmp.w	r9, #0
 800cb38:	d10d      	bne.n	800cb56 <_dtoa_r+0x956>
 800cb3a:	4631      	mov	r1, r6
 800cb3c:	464b      	mov	r3, r9
 800cb3e:	2205      	movs	r2, #5
 800cb40:	4620      	mov	r0, r4
 800cb42:	f000 f9b7 	bl	800ceb4 <__multadd>
 800cb46:	4601      	mov	r1, r0
 800cb48:	4606      	mov	r6, r0
 800cb4a:	4658      	mov	r0, fp
 800cb4c:	f000 fbce 	bl	800d2ec <__mcmp>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	f73f adbd 	bgt.w	800c6d0 <_dtoa_r+0x4d0>
 800cb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb58:	9d00      	ldr	r5, [sp, #0]
 800cb5a:	ea6f 0a03 	mvn.w	sl, r3
 800cb5e:	f04f 0800 	mov.w	r8, #0
 800cb62:	4631      	mov	r1, r6
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 f983 	bl	800ce70 <_Bfree>
 800cb6a:	2f00      	cmp	r7, #0
 800cb6c:	f43f aeb4 	beq.w	800c8d8 <_dtoa_r+0x6d8>
 800cb70:	f1b8 0f00 	cmp.w	r8, #0
 800cb74:	d005      	beq.n	800cb82 <_dtoa_r+0x982>
 800cb76:	45b8      	cmp	r8, r7
 800cb78:	d003      	beq.n	800cb82 <_dtoa_r+0x982>
 800cb7a:	4641      	mov	r1, r8
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f000 f977 	bl	800ce70 <_Bfree>
 800cb82:	4639      	mov	r1, r7
 800cb84:	4620      	mov	r0, r4
 800cb86:	f000 f973 	bl	800ce70 <_Bfree>
 800cb8a:	e6a5      	b.n	800c8d8 <_dtoa_r+0x6d8>
 800cb8c:	2600      	movs	r6, #0
 800cb8e:	4637      	mov	r7, r6
 800cb90:	e7e1      	b.n	800cb56 <_dtoa_r+0x956>
 800cb92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cb94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cb98:	4637      	mov	r7, r6
 800cb9a:	e599      	b.n	800c6d0 <_dtoa_r+0x4d0>
 800cb9c:	9b08      	ldr	r3, [sp, #32]
 800cb9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f000 80fd 	beq.w	800cda2 <_dtoa_r+0xba2>
 800cba8:	2d00      	cmp	r5, #0
 800cbaa:	dd05      	ble.n	800cbb8 <_dtoa_r+0x9b8>
 800cbac:	4639      	mov	r1, r7
 800cbae:	462a      	mov	r2, r5
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f000 fb2f 	bl	800d214 <__lshift>
 800cbb6:	4607      	mov	r7, r0
 800cbb8:	9b06      	ldr	r3, [sp, #24]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d05c      	beq.n	800cc78 <_dtoa_r+0xa78>
 800cbbe:	6879      	ldr	r1, [r7, #4]
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f000 f915 	bl	800cdf0 <_Balloc>
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	b928      	cbnz	r0, 800cbd6 <_dtoa_r+0x9d6>
 800cbca:	4b80      	ldr	r3, [pc, #512]	; (800cdcc <_dtoa_r+0xbcc>)
 800cbcc:	4602      	mov	r2, r0
 800cbce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cbd2:	f7ff bb2e 	b.w	800c232 <_dtoa_r+0x32>
 800cbd6:	693a      	ldr	r2, [r7, #16]
 800cbd8:	3202      	adds	r2, #2
 800cbda:	0092      	lsls	r2, r2, #2
 800cbdc:	f107 010c 	add.w	r1, r7, #12
 800cbe0:	300c      	adds	r0, #12
 800cbe2:	f7fe fdc5 	bl	800b770 <memcpy>
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	4629      	mov	r1, r5
 800cbea:	4620      	mov	r0, r4
 800cbec:	f000 fb12 	bl	800d214 <__lshift>
 800cbf0:	9b00      	ldr	r3, [sp, #0]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	9301      	str	r3, [sp, #4]
 800cbf6:	9b00      	ldr	r3, [sp, #0]
 800cbf8:	444b      	add	r3, r9
 800cbfa:	9307      	str	r3, [sp, #28]
 800cbfc:	9b02      	ldr	r3, [sp, #8]
 800cbfe:	f003 0301 	and.w	r3, r3, #1
 800cc02:	46b8      	mov	r8, r7
 800cc04:	9306      	str	r3, [sp, #24]
 800cc06:	4607      	mov	r7, r0
 800cc08:	9b01      	ldr	r3, [sp, #4]
 800cc0a:	4631      	mov	r1, r6
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	4658      	mov	r0, fp
 800cc10:	9302      	str	r3, [sp, #8]
 800cc12:	f7ff fa67 	bl	800c0e4 <quorem>
 800cc16:	4603      	mov	r3, r0
 800cc18:	3330      	adds	r3, #48	; 0x30
 800cc1a:	9004      	str	r0, [sp, #16]
 800cc1c:	4641      	mov	r1, r8
 800cc1e:	4658      	mov	r0, fp
 800cc20:	9308      	str	r3, [sp, #32]
 800cc22:	f000 fb63 	bl	800d2ec <__mcmp>
 800cc26:	463a      	mov	r2, r7
 800cc28:	4681      	mov	r9, r0
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f000 fb79 	bl	800d324 <__mdiff>
 800cc32:	68c2      	ldr	r2, [r0, #12]
 800cc34:	9b08      	ldr	r3, [sp, #32]
 800cc36:	4605      	mov	r5, r0
 800cc38:	bb02      	cbnz	r2, 800cc7c <_dtoa_r+0xa7c>
 800cc3a:	4601      	mov	r1, r0
 800cc3c:	4658      	mov	r0, fp
 800cc3e:	f000 fb55 	bl	800d2ec <__mcmp>
 800cc42:	9b08      	ldr	r3, [sp, #32]
 800cc44:	4602      	mov	r2, r0
 800cc46:	4629      	mov	r1, r5
 800cc48:	4620      	mov	r0, r4
 800cc4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cc4e:	f000 f90f 	bl	800ce70 <_Bfree>
 800cc52:	9b05      	ldr	r3, [sp, #20]
 800cc54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc56:	9d01      	ldr	r5, [sp, #4]
 800cc58:	ea43 0102 	orr.w	r1, r3, r2
 800cc5c:	9b06      	ldr	r3, [sp, #24]
 800cc5e:	430b      	orrs	r3, r1
 800cc60:	9b08      	ldr	r3, [sp, #32]
 800cc62:	d10d      	bne.n	800cc80 <_dtoa_r+0xa80>
 800cc64:	2b39      	cmp	r3, #57	; 0x39
 800cc66:	d029      	beq.n	800ccbc <_dtoa_r+0xabc>
 800cc68:	f1b9 0f00 	cmp.w	r9, #0
 800cc6c:	dd01      	ble.n	800cc72 <_dtoa_r+0xa72>
 800cc6e:	9b04      	ldr	r3, [sp, #16]
 800cc70:	3331      	adds	r3, #49	; 0x31
 800cc72:	9a02      	ldr	r2, [sp, #8]
 800cc74:	7013      	strb	r3, [r2, #0]
 800cc76:	e774      	b.n	800cb62 <_dtoa_r+0x962>
 800cc78:	4638      	mov	r0, r7
 800cc7a:	e7b9      	b.n	800cbf0 <_dtoa_r+0x9f0>
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	e7e2      	b.n	800cc46 <_dtoa_r+0xa46>
 800cc80:	f1b9 0f00 	cmp.w	r9, #0
 800cc84:	db06      	blt.n	800cc94 <_dtoa_r+0xa94>
 800cc86:	9905      	ldr	r1, [sp, #20]
 800cc88:	ea41 0909 	orr.w	r9, r1, r9
 800cc8c:	9906      	ldr	r1, [sp, #24]
 800cc8e:	ea59 0101 	orrs.w	r1, r9, r1
 800cc92:	d120      	bne.n	800ccd6 <_dtoa_r+0xad6>
 800cc94:	2a00      	cmp	r2, #0
 800cc96:	ddec      	ble.n	800cc72 <_dtoa_r+0xa72>
 800cc98:	4659      	mov	r1, fp
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	9301      	str	r3, [sp, #4]
 800cca0:	f000 fab8 	bl	800d214 <__lshift>
 800cca4:	4631      	mov	r1, r6
 800cca6:	4683      	mov	fp, r0
 800cca8:	f000 fb20 	bl	800d2ec <__mcmp>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	9b01      	ldr	r3, [sp, #4]
 800ccb0:	dc02      	bgt.n	800ccb8 <_dtoa_r+0xab8>
 800ccb2:	d1de      	bne.n	800cc72 <_dtoa_r+0xa72>
 800ccb4:	07da      	lsls	r2, r3, #31
 800ccb6:	d5dc      	bpl.n	800cc72 <_dtoa_r+0xa72>
 800ccb8:	2b39      	cmp	r3, #57	; 0x39
 800ccba:	d1d8      	bne.n	800cc6e <_dtoa_r+0xa6e>
 800ccbc:	9a02      	ldr	r2, [sp, #8]
 800ccbe:	2339      	movs	r3, #57	; 0x39
 800ccc0:	7013      	strb	r3, [r2, #0]
 800ccc2:	462b      	mov	r3, r5
 800ccc4:	461d      	mov	r5, r3
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cccc:	2a39      	cmp	r2, #57	; 0x39
 800ccce:	d050      	beq.n	800cd72 <_dtoa_r+0xb72>
 800ccd0:	3201      	adds	r2, #1
 800ccd2:	701a      	strb	r2, [r3, #0]
 800ccd4:	e745      	b.n	800cb62 <_dtoa_r+0x962>
 800ccd6:	2a00      	cmp	r2, #0
 800ccd8:	dd03      	ble.n	800cce2 <_dtoa_r+0xae2>
 800ccda:	2b39      	cmp	r3, #57	; 0x39
 800ccdc:	d0ee      	beq.n	800ccbc <_dtoa_r+0xabc>
 800ccde:	3301      	adds	r3, #1
 800cce0:	e7c7      	b.n	800cc72 <_dtoa_r+0xa72>
 800cce2:	9a01      	ldr	r2, [sp, #4]
 800cce4:	9907      	ldr	r1, [sp, #28]
 800cce6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ccea:	428a      	cmp	r2, r1
 800ccec:	d02a      	beq.n	800cd44 <_dtoa_r+0xb44>
 800ccee:	4659      	mov	r1, fp
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	220a      	movs	r2, #10
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f000 f8dd 	bl	800ceb4 <__multadd>
 800ccfa:	45b8      	cmp	r8, r7
 800ccfc:	4683      	mov	fp, r0
 800ccfe:	f04f 0300 	mov.w	r3, #0
 800cd02:	f04f 020a 	mov.w	r2, #10
 800cd06:	4641      	mov	r1, r8
 800cd08:	4620      	mov	r0, r4
 800cd0a:	d107      	bne.n	800cd1c <_dtoa_r+0xb1c>
 800cd0c:	f000 f8d2 	bl	800ceb4 <__multadd>
 800cd10:	4680      	mov	r8, r0
 800cd12:	4607      	mov	r7, r0
 800cd14:	9b01      	ldr	r3, [sp, #4]
 800cd16:	3301      	adds	r3, #1
 800cd18:	9301      	str	r3, [sp, #4]
 800cd1a:	e775      	b.n	800cc08 <_dtoa_r+0xa08>
 800cd1c:	f000 f8ca 	bl	800ceb4 <__multadd>
 800cd20:	4639      	mov	r1, r7
 800cd22:	4680      	mov	r8, r0
 800cd24:	2300      	movs	r3, #0
 800cd26:	220a      	movs	r2, #10
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f000 f8c3 	bl	800ceb4 <__multadd>
 800cd2e:	4607      	mov	r7, r0
 800cd30:	e7f0      	b.n	800cd14 <_dtoa_r+0xb14>
 800cd32:	f1b9 0f00 	cmp.w	r9, #0
 800cd36:	9a00      	ldr	r2, [sp, #0]
 800cd38:	bfcc      	ite	gt
 800cd3a:	464d      	movgt	r5, r9
 800cd3c:	2501      	movle	r5, #1
 800cd3e:	4415      	add	r5, r2
 800cd40:	f04f 0800 	mov.w	r8, #0
 800cd44:	4659      	mov	r1, fp
 800cd46:	2201      	movs	r2, #1
 800cd48:	4620      	mov	r0, r4
 800cd4a:	9301      	str	r3, [sp, #4]
 800cd4c:	f000 fa62 	bl	800d214 <__lshift>
 800cd50:	4631      	mov	r1, r6
 800cd52:	4683      	mov	fp, r0
 800cd54:	f000 faca 	bl	800d2ec <__mcmp>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	dcb2      	bgt.n	800ccc2 <_dtoa_r+0xac2>
 800cd5c:	d102      	bne.n	800cd64 <_dtoa_r+0xb64>
 800cd5e:	9b01      	ldr	r3, [sp, #4]
 800cd60:	07db      	lsls	r3, r3, #31
 800cd62:	d4ae      	bmi.n	800ccc2 <_dtoa_r+0xac2>
 800cd64:	462b      	mov	r3, r5
 800cd66:	461d      	mov	r5, r3
 800cd68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd6c:	2a30      	cmp	r2, #48	; 0x30
 800cd6e:	d0fa      	beq.n	800cd66 <_dtoa_r+0xb66>
 800cd70:	e6f7      	b.n	800cb62 <_dtoa_r+0x962>
 800cd72:	9a00      	ldr	r2, [sp, #0]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d1a5      	bne.n	800ccc4 <_dtoa_r+0xac4>
 800cd78:	f10a 0a01 	add.w	sl, sl, #1
 800cd7c:	2331      	movs	r3, #49	; 0x31
 800cd7e:	e779      	b.n	800cc74 <_dtoa_r+0xa74>
 800cd80:	4b13      	ldr	r3, [pc, #76]	; (800cdd0 <_dtoa_r+0xbd0>)
 800cd82:	f7ff baaf 	b.w	800c2e4 <_dtoa_r+0xe4>
 800cd86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f47f aa86 	bne.w	800c29a <_dtoa_r+0x9a>
 800cd8e:	4b11      	ldr	r3, [pc, #68]	; (800cdd4 <_dtoa_r+0xbd4>)
 800cd90:	f7ff baa8 	b.w	800c2e4 <_dtoa_r+0xe4>
 800cd94:	f1b9 0f00 	cmp.w	r9, #0
 800cd98:	dc03      	bgt.n	800cda2 <_dtoa_r+0xba2>
 800cd9a:	9b05      	ldr	r3, [sp, #20]
 800cd9c:	2b02      	cmp	r3, #2
 800cd9e:	f73f aec9 	bgt.w	800cb34 <_dtoa_r+0x934>
 800cda2:	9d00      	ldr	r5, [sp, #0]
 800cda4:	4631      	mov	r1, r6
 800cda6:	4658      	mov	r0, fp
 800cda8:	f7ff f99c 	bl	800c0e4 <quorem>
 800cdac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cdb0:	f805 3b01 	strb.w	r3, [r5], #1
 800cdb4:	9a00      	ldr	r2, [sp, #0]
 800cdb6:	1aaa      	subs	r2, r5, r2
 800cdb8:	4591      	cmp	r9, r2
 800cdba:	ddba      	ble.n	800cd32 <_dtoa_r+0xb32>
 800cdbc:	4659      	mov	r1, fp
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	220a      	movs	r2, #10
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f000 f876 	bl	800ceb4 <__multadd>
 800cdc8:	4683      	mov	fp, r0
 800cdca:	e7eb      	b.n	800cda4 <_dtoa_r+0xba4>
 800cdcc:	0800f11b 	.word	0x0800f11b
 800cdd0:	0800f074 	.word	0x0800f074
 800cdd4:	0800f098 	.word	0x0800f098

0800cdd8 <_localeconv_r>:
 800cdd8:	4800      	ldr	r0, [pc, #0]	; (800cddc <_localeconv_r+0x4>)
 800cdda:	4770      	bx	lr
 800cddc:	20000164 	.word	0x20000164

0800cde0 <malloc>:
 800cde0:	4b02      	ldr	r3, [pc, #8]	; (800cdec <malloc+0xc>)
 800cde2:	4601      	mov	r1, r0
 800cde4:	6818      	ldr	r0, [r3, #0]
 800cde6:	f000 bbe1 	b.w	800d5ac <_malloc_r>
 800cdea:	bf00      	nop
 800cdec:	20000010 	.word	0x20000010

0800cdf0 <_Balloc>:
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	460d      	mov	r5, r1
 800cdf8:	b976      	cbnz	r6, 800ce18 <_Balloc+0x28>
 800cdfa:	2010      	movs	r0, #16
 800cdfc:	f7ff fff0 	bl	800cde0 <malloc>
 800ce00:	4602      	mov	r2, r0
 800ce02:	6260      	str	r0, [r4, #36]	; 0x24
 800ce04:	b920      	cbnz	r0, 800ce10 <_Balloc+0x20>
 800ce06:	4b18      	ldr	r3, [pc, #96]	; (800ce68 <_Balloc+0x78>)
 800ce08:	4818      	ldr	r0, [pc, #96]	; (800ce6c <_Balloc+0x7c>)
 800ce0a:	2166      	movs	r1, #102	; 0x66
 800ce0c:	f000 fd94 	bl	800d938 <__assert_func>
 800ce10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce14:	6006      	str	r6, [r0, #0]
 800ce16:	60c6      	str	r6, [r0, #12]
 800ce18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ce1a:	68f3      	ldr	r3, [r6, #12]
 800ce1c:	b183      	cbz	r3, 800ce40 <_Balloc+0x50>
 800ce1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce26:	b9b8      	cbnz	r0, 800ce58 <_Balloc+0x68>
 800ce28:	2101      	movs	r1, #1
 800ce2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ce2e:	1d72      	adds	r2, r6, #5
 800ce30:	0092      	lsls	r2, r2, #2
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fb5a 	bl	800d4ec <_calloc_r>
 800ce38:	b160      	cbz	r0, 800ce54 <_Balloc+0x64>
 800ce3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce3e:	e00e      	b.n	800ce5e <_Balloc+0x6e>
 800ce40:	2221      	movs	r2, #33	; 0x21
 800ce42:	2104      	movs	r1, #4
 800ce44:	4620      	mov	r0, r4
 800ce46:	f000 fb51 	bl	800d4ec <_calloc_r>
 800ce4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce4c:	60f0      	str	r0, [r6, #12]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1e4      	bne.n	800ce1e <_Balloc+0x2e>
 800ce54:	2000      	movs	r0, #0
 800ce56:	bd70      	pop	{r4, r5, r6, pc}
 800ce58:	6802      	ldr	r2, [r0, #0]
 800ce5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce64:	e7f7      	b.n	800ce56 <_Balloc+0x66>
 800ce66:	bf00      	nop
 800ce68:	0800f0a5 	.word	0x0800f0a5
 800ce6c:	0800f12c 	.word	0x0800f12c

0800ce70 <_Bfree>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce74:	4605      	mov	r5, r0
 800ce76:	460c      	mov	r4, r1
 800ce78:	b976      	cbnz	r6, 800ce98 <_Bfree+0x28>
 800ce7a:	2010      	movs	r0, #16
 800ce7c:	f7ff ffb0 	bl	800cde0 <malloc>
 800ce80:	4602      	mov	r2, r0
 800ce82:	6268      	str	r0, [r5, #36]	; 0x24
 800ce84:	b920      	cbnz	r0, 800ce90 <_Bfree+0x20>
 800ce86:	4b09      	ldr	r3, [pc, #36]	; (800ceac <_Bfree+0x3c>)
 800ce88:	4809      	ldr	r0, [pc, #36]	; (800ceb0 <_Bfree+0x40>)
 800ce8a:	218a      	movs	r1, #138	; 0x8a
 800ce8c:	f000 fd54 	bl	800d938 <__assert_func>
 800ce90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce94:	6006      	str	r6, [r0, #0]
 800ce96:	60c6      	str	r6, [r0, #12]
 800ce98:	b13c      	cbz	r4, 800ceaa <_Bfree+0x3a>
 800ce9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce9c:	6862      	ldr	r2, [r4, #4]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cea4:	6021      	str	r1, [r4, #0]
 800cea6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	0800f0a5 	.word	0x0800f0a5
 800ceb0:	0800f12c 	.word	0x0800f12c

0800ceb4 <__multadd>:
 800ceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb8:	690e      	ldr	r6, [r1, #16]
 800ceba:	4607      	mov	r7, r0
 800cebc:	4698      	mov	r8, r3
 800cebe:	460c      	mov	r4, r1
 800cec0:	f101 0014 	add.w	r0, r1, #20
 800cec4:	2300      	movs	r3, #0
 800cec6:	6805      	ldr	r5, [r0, #0]
 800cec8:	b2a9      	uxth	r1, r5
 800ceca:	fb02 8101 	mla	r1, r2, r1, r8
 800cece:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ced2:	0c2d      	lsrs	r5, r5, #16
 800ced4:	fb02 c505 	mla	r5, r2, r5, ip
 800ced8:	b289      	uxth	r1, r1
 800ceda:	3301      	adds	r3, #1
 800cedc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cee0:	429e      	cmp	r6, r3
 800cee2:	f840 1b04 	str.w	r1, [r0], #4
 800cee6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ceea:	dcec      	bgt.n	800cec6 <__multadd+0x12>
 800ceec:	f1b8 0f00 	cmp.w	r8, #0
 800cef0:	d022      	beq.n	800cf38 <__multadd+0x84>
 800cef2:	68a3      	ldr	r3, [r4, #8]
 800cef4:	42b3      	cmp	r3, r6
 800cef6:	dc19      	bgt.n	800cf2c <__multadd+0x78>
 800cef8:	6861      	ldr	r1, [r4, #4]
 800cefa:	4638      	mov	r0, r7
 800cefc:	3101      	adds	r1, #1
 800cefe:	f7ff ff77 	bl	800cdf0 <_Balloc>
 800cf02:	4605      	mov	r5, r0
 800cf04:	b928      	cbnz	r0, 800cf12 <__multadd+0x5e>
 800cf06:	4602      	mov	r2, r0
 800cf08:	4b0d      	ldr	r3, [pc, #52]	; (800cf40 <__multadd+0x8c>)
 800cf0a:	480e      	ldr	r0, [pc, #56]	; (800cf44 <__multadd+0x90>)
 800cf0c:	21b5      	movs	r1, #181	; 0xb5
 800cf0e:	f000 fd13 	bl	800d938 <__assert_func>
 800cf12:	6922      	ldr	r2, [r4, #16]
 800cf14:	3202      	adds	r2, #2
 800cf16:	f104 010c 	add.w	r1, r4, #12
 800cf1a:	0092      	lsls	r2, r2, #2
 800cf1c:	300c      	adds	r0, #12
 800cf1e:	f7fe fc27 	bl	800b770 <memcpy>
 800cf22:	4621      	mov	r1, r4
 800cf24:	4638      	mov	r0, r7
 800cf26:	f7ff ffa3 	bl	800ce70 <_Bfree>
 800cf2a:	462c      	mov	r4, r5
 800cf2c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cf30:	3601      	adds	r6, #1
 800cf32:	f8c3 8014 	str.w	r8, [r3, #20]
 800cf36:	6126      	str	r6, [r4, #16]
 800cf38:	4620      	mov	r0, r4
 800cf3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf3e:	bf00      	nop
 800cf40:	0800f11b 	.word	0x0800f11b
 800cf44:	0800f12c 	.word	0x0800f12c

0800cf48 <__hi0bits>:
 800cf48:	0c03      	lsrs	r3, r0, #16
 800cf4a:	041b      	lsls	r3, r3, #16
 800cf4c:	b9d3      	cbnz	r3, 800cf84 <__hi0bits+0x3c>
 800cf4e:	0400      	lsls	r0, r0, #16
 800cf50:	2310      	movs	r3, #16
 800cf52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf56:	bf04      	itt	eq
 800cf58:	0200      	lsleq	r0, r0, #8
 800cf5a:	3308      	addeq	r3, #8
 800cf5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf60:	bf04      	itt	eq
 800cf62:	0100      	lsleq	r0, r0, #4
 800cf64:	3304      	addeq	r3, #4
 800cf66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf6a:	bf04      	itt	eq
 800cf6c:	0080      	lsleq	r0, r0, #2
 800cf6e:	3302      	addeq	r3, #2
 800cf70:	2800      	cmp	r0, #0
 800cf72:	db05      	blt.n	800cf80 <__hi0bits+0x38>
 800cf74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cf78:	f103 0301 	add.w	r3, r3, #1
 800cf7c:	bf08      	it	eq
 800cf7e:	2320      	moveq	r3, #32
 800cf80:	4618      	mov	r0, r3
 800cf82:	4770      	bx	lr
 800cf84:	2300      	movs	r3, #0
 800cf86:	e7e4      	b.n	800cf52 <__hi0bits+0xa>

0800cf88 <__lo0bits>:
 800cf88:	6803      	ldr	r3, [r0, #0]
 800cf8a:	f013 0207 	ands.w	r2, r3, #7
 800cf8e:	4601      	mov	r1, r0
 800cf90:	d00b      	beq.n	800cfaa <__lo0bits+0x22>
 800cf92:	07da      	lsls	r2, r3, #31
 800cf94:	d424      	bmi.n	800cfe0 <__lo0bits+0x58>
 800cf96:	0798      	lsls	r0, r3, #30
 800cf98:	bf49      	itett	mi
 800cf9a:	085b      	lsrmi	r3, r3, #1
 800cf9c:	089b      	lsrpl	r3, r3, #2
 800cf9e:	2001      	movmi	r0, #1
 800cfa0:	600b      	strmi	r3, [r1, #0]
 800cfa2:	bf5c      	itt	pl
 800cfa4:	600b      	strpl	r3, [r1, #0]
 800cfa6:	2002      	movpl	r0, #2
 800cfa8:	4770      	bx	lr
 800cfaa:	b298      	uxth	r0, r3
 800cfac:	b9b0      	cbnz	r0, 800cfdc <__lo0bits+0x54>
 800cfae:	0c1b      	lsrs	r3, r3, #16
 800cfb0:	2010      	movs	r0, #16
 800cfb2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cfb6:	bf04      	itt	eq
 800cfb8:	0a1b      	lsreq	r3, r3, #8
 800cfba:	3008      	addeq	r0, #8
 800cfbc:	071a      	lsls	r2, r3, #28
 800cfbe:	bf04      	itt	eq
 800cfc0:	091b      	lsreq	r3, r3, #4
 800cfc2:	3004      	addeq	r0, #4
 800cfc4:	079a      	lsls	r2, r3, #30
 800cfc6:	bf04      	itt	eq
 800cfc8:	089b      	lsreq	r3, r3, #2
 800cfca:	3002      	addeq	r0, #2
 800cfcc:	07da      	lsls	r2, r3, #31
 800cfce:	d403      	bmi.n	800cfd8 <__lo0bits+0x50>
 800cfd0:	085b      	lsrs	r3, r3, #1
 800cfd2:	f100 0001 	add.w	r0, r0, #1
 800cfd6:	d005      	beq.n	800cfe4 <__lo0bits+0x5c>
 800cfd8:	600b      	str	r3, [r1, #0]
 800cfda:	4770      	bx	lr
 800cfdc:	4610      	mov	r0, r2
 800cfde:	e7e8      	b.n	800cfb2 <__lo0bits+0x2a>
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	4770      	bx	lr
 800cfe4:	2020      	movs	r0, #32
 800cfe6:	4770      	bx	lr

0800cfe8 <__i2b>:
 800cfe8:	b510      	push	{r4, lr}
 800cfea:	460c      	mov	r4, r1
 800cfec:	2101      	movs	r1, #1
 800cfee:	f7ff feff 	bl	800cdf0 <_Balloc>
 800cff2:	4602      	mov	r2, r0
 800cff4:	b928      	cbnz	r0, 800d002 <__i2b+0x1a>
 800cff6:	4b05      	ldr	r3, [pc, #20]	; (800d00c <__i2b+0x24>)
 800cff8:	4805      	ldr	r0, [pc, #20]	; (800d010 <__i2b+0x28>)
 800cffa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cffe:	f000 fc9b 	bl	800d938 <__assert_func>
 800d002:	2301      	movs	r3, #1
 800d004:	6144      	str	r4, [r0, #20]
 800d006:	6103      	str	r3, [r0, #16]
 800d008:	bd10      	pop	{r4, pc}
 800d00a:	bf00      	nop
 800d00c:	0800f11b 	.word	0x0800f11b
 800d010:	0800f12c 	.word	0x0800f12c

0800d014 <__multiply>:
 800d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d018:	4614      	mov	r4, r2
 800d01a:	690a      	ldr	r2, [r1, #16]
 800d01c:	6923      	ldr	r3, [r4, #16]
 800d01e:	429a      	cmp	r2, r3
 800d020:	bfb8      	it	lt
 800d022:	460b      	movlt	r3, r1
 800d024:	460d      	mov	r5, r1
 800d026:	bfbc      	itt	lt
 800d028:	4625      	movlt	r5, r4
 800d02a:	461c      	movlt	r4, r3
 800d02c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d030:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d034:	68ab      	ldr	r3, [r5, #8]
 800d036:	6869      	ldr	r1, [r5, #4]
 800d038:	eb0a 0709 	add.w	r7, sl, r9
 800d03c:	42bb      	cmp	r3, r7
 800d03e:	b085      	sub	sp, #20
 800d040:	bfb8      	it	lt
 800d042:	3101      	addlt	r1, #1
 800d044:	f7ff fed4 	bl	800cdf0 <_Balloc>
 800d048:	b930      	cbnz	r0, 800d058 <__multiply+0x44>
 800d04a:	4602      	mov	r2, r0
 800d04c:	4b42      	ldr	r3, [pc, #264]	; (800d158 <__multiply+0x144>)
 800d04e:	4843      	ldr	r0, [pc, #268]	; (800d15c <__multiply+0x148>)
 800d050:	f240 115d 	movw	r1, #349	; 0x15d
 800d054:	f000 fc70 	bl	800d938 <__assert_func>
 800d058:	f100 0614 	add.w	r6, r0, #20
 800d05c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d060:	4633      	mov	r3, r6
 800d062:	2200      	movs	r2, #0
 800d064:	4543      	cmp	r3, r8
 800d066:	d31e      	bcc.n	800d0a6 <__multiply+0x92>
 800d068:	f105 0c14 	add.w	ip, r5, #20
 800d06c:	f104 0314 	add.w	r3, r4, #20
 800d070:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d074:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d078:	9202      	str	r2, [sp, #8]
 800d07a:	ebac 0205 	sub.w	r2, ip, r5
 800d07e:	3a15      	subs	r2, #21
 800d080:	f022 0203 	bic.w	r2, r2, #3
 800d084:	3204      	adds	r2, #4
 800d086:	f105 0115 	add.w	r1, r5, #21
 800d08a:	458c      	cmp	ip, r1
 800d08c:	bf38      	it	cc
 800d08e:	2204      	movcc	r2, #4
 800d090:	9201      	str	r2, [sp, #4]
 800d092:	9a02      	ldr	r2, [sp, #8]
 800d094:	9303      	str	r3, [sp, #12]
 800d096:	429a      	cmp	r2, r3
 800d098:	d808      	bhi.n	800d0ac <__multiply+0x98>
 800d09a:	2f00      	cmp	r7, #0
 800d09c:	dc55      	bgt.n	800d14a <__multiply+0x136>
 800d09e:	6107      	str	r7, [r0, #16]
 800d0a0:	b005      	add	sp, #20
 800d0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a6:	f843 2b04 	str.w	r2, [r3], #4
 800d0aa:	e7db      	b.n	800d064 <__multiply+0x50>
 800d0ac:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0b0:	f1ba 0f00 	cmp.w	sl, #0
 800d0b4:	d020      	beq.n	800d0f8 <__multiply+0xe4>
 800d0b6:	f105 0e14 	add.w	lr, r5, #20
 800d0ba:	46b1      	mov	r9, r6
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d0c2:	f8d9 b000 	ldr.w	fp, [r9]
 800d0c6:	b2a1      	uxth	r1, r4
 800d0c8:	fa1f fb8b 	uxth.w	fp, fp
 800d0cc:	fb0a b101 	mla	r1, sl, r1, fp
 800d0d0:	4411      	add	r1, r2
 800d0d2:	f8d9 2000 	ldr.w	r2, [r9]
 800d0d6:	0c24      	lsrs	r4, r4, #16
 800d0d8:	0c12      	lsrs	r2, r2, #16
 800d0da:	fb0a 2404 	mla	r4, sl, r4, r2
 800d0de:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d0e2:	b289      	uxth	r1, r1
 800d0e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d0e8:	45f4      	cmp	ip, lr
 800d0ea:	f849 1b04 	str.w	r1, [r9], #4
 800d0ee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d0f2:	d8e4      	bhi.n	800d0be <__multiply+0xaa>
 800d0f4:	9901      	ldr	r1, [sp, #4]
 800d0f6:	5072      	str	r2, [r6, r1]
 800d0f8:	9a03      	ldr	r2, [sp, #12]
 800d0fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d0fe:	3304      	adds	r3, #4
 800d100:	f1b9 0f00 	cmp.w	r9, #0
 800d104:	d01f      	beq.n	800d146 <__multiply+0x132>
 800d106:	6834      	ldr	r4, [r6, #0]
 800d108:	f105 0114 	add.w	r1, r5, #20
 800d10c:	46b6      	mov	lr, r6
 800d10e:	f04f 0a00 	mov.w	sl, #0
 800d112:	880a      	ldrh	r2, [r1, #0]
 800d114:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d118:	fb09 b202 	mla	r2, r9, r2, fp
 800d11c:	4492      	add	sl, r2
 800d11e:	b2a4      	uxth	r4, r4
 800d120:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d124:	f84e 4b04 	str.w	r4, [lr], #4
 800d128:	f851 4b04 	ldr.w	r4, [r1], #4
 800d12c:	f8be 2000 	ldrh.w	r2, [lr]
 800d130:	0c24      	lsrs	r4, r4, #16
 800d132:	fb09 2404 	mla	r4, r9, r4, r2
 800d136:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d13a:	458c      	cmp	ip, r1
 800d13c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d140:	d8e7      	bhi.n	800d112 <__multiply+0xfe>
 800d142:	9a01      	ldr	r2, [sp, #4]
 800d144:	50b4      	str	r4, [r6, r2]
 800d146:	3604      	adds	r6, #4
 800d148:	e7a3      	b.n	800d092 <__multiply+0x7e>
 800d14a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1a5      	bne.n	800d09e <__multiply+0x8a>
 800d152:	3f01      	subs	r7, #1
 800d154:	e7a1      	b.n	800d09a <__multiply+0x86>
 800d156:	bf00      	nop
 800d158:	0800f11b 	.word	0x0800f11b
 800d15c:	0800f12c 	.word	0x0800f12c

0800d160 <__pow5mult>:
 800d160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d164:	4615      	mov	r5, r2
 800d166:	f012 0203 	ands.w	r2, r2, #3
 800d16a:	4606      	mov	r6, r0
 800d16c:	460f      	mov	r7, r1
 800d16e:	d007      	beq.n	800d180 <__pow5mult+0x20>
 800d170:	4c25      	ldr	r4, [pc, #148]	; (800d208 <__pow5mult+0xa8>)
 800d172:	3a01      	subs	r2, #1
 800d174:	2300      	movs	r3, #0
 800d176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d17a:	f7ff fe9b 	bl	800ceb4 <__multadd>
 800d17e:	4607      	mov	r7, r0
 800d180:	10ad      	asrs	r5, r5, #2
 800d182:	d03d      	beq.n	800d200 <__pow5mult+0xa0>
 800d184:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d186:	b97c      	cbnz	r4, 800d1a8 <__pow5mult+0x48>
 800d188:	2010      	movs	r0, #16
 800d18a:	f7ff fe29 	bl	800cde0 <malloc>
 800d18e:	4602      	mov	r2, r0
 800d190:	6270      	str	r0, [r6, #36]	; 0x24
 800d192:	b928      	cbnz	r0, 800d1a0 <__pow5mult+0x40>
 800d194:	4b1d      	ldr	r3, [pc, #116]	; (800d20c <__pow5mult+0xac>)
 800d196:	481e      	ldr	r0, [pc, #120]	; (800d210 <__pow5mult+0xb0>)
 800d198:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d19c:	f000 fbcc 	bl	800d938 <__assert_func>
 800d1a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1a4:	6004      	str	r4, [r0, #0]
 800d1a6:	60c4      	str	r4, [r0, #12]
 800d1a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d1ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1b0:	b94c      	cbnz	r4, 800d1c6 <__pow5mult+0x66>
 800d1b2:	f240 2171 	movw	r1, #625	; 0x271
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f7ff ff16 	bl	800cfe8 <__i2b>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	6003      	str	r3, [r0, #0]
 800d1c6:	f04f 0900 	mov.w	r9, #0
 800d1ca:	07eb      	lsls	r3, r5, #31
 800d1cc:	d50a      	bpl.n	800d1e4 <__pow5mult+0x84>
 800d1ce:	4639      	mov	r1, r7
 800d1d0:	4622      	mov	r2, r4
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f7ff ff1e 	bl	800d014 <__multiply>
 800d1d8:	4639      	mov	r1, r7
 800d1da:	4680      	mov	r8, r0
 800d1dc:	4630      	mov	r0, r6
 800d1de:	f7ff fe47 	bl	800ce70 <_Bfree>
 800d1e2:	4647      	mov	r7, r8
 800d1e4:	106d      	asrs	r5, r5, #1
 800d1e6:	d00b      	beq.n	800d200 <__pow5mult+0xa0>
 800d1e8:	6820      	ldr	r0, [r4, #0]
 800d1ea:	b938      	cbnz	r0, 800d1fc <__pow5mult+0x9c>
 800d1ec:	4622      	mov	r2, r4
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	f7ff ff0f 	bl	800d014 <__multiply>
 800d1f6:	6020      	str	r0, [r4, #0]
 800d1f8:	f8c0 9000 	str.w	r9, [r0]
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	e7e4      	b.n	800d1ca <__pow5mult+0x6a>
 800d200:	4638      	mov	r0, r7
 800d202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d206:	bf00      	nop
 800d208:	0800f280 	.word	0x0800f280
 800d20c:	0800f0a5 	.word	0x0800f0a5
 800d210:	0800f12c 	.word	0x0800f12c

0800d214 <__lshift>:
 800d214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d218:	460c      	mov	r4, r1
 800d21a:	6849      	ldr	r1, [r1, #4]
 800d21c:	6923      	ldr	r3, [r4, #16]
 800d21e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d222:	68a3      	ldr	r3, [r4, #8]
 800d224:	4607      	mov	r7, r0
 800d226:	4691      	mov	r9, r2
 800d228:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d22c:	f108 0601 	add.w	r6, r8, #1
 800d230:	42b3      	cmp	r3, r6
 800d232:	db0b      	blt.n	800d24c <__lshift+0x38>
 800d234:	4638      	mov	r0, r7
 800d236:	f7ff fddb 	bl	800cdf0 <_Balloc>
 800d23a:	4605      	mov	r5, r0
 800d23c:	b948      	cbnz	r0, 800d252 <__lshift+0x3e>
 800d23e:	4602      	mov	r2, r0
 800d240:	4b28      	ldr	r3, [pc, #160]	; (800d2e4 <__lshift+0xd0>)
 800d242:	4829      	ldr	r0, [pc, #164]	; (800d2e8 <__lshift+0xd4>)
 800d244:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d248:	f000 fb76 	bl	800d938 <__assert_func>
 800d24c:	3101      	adds	r1, #1
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	e7ee      	b.n	800d230 <__lshift+0x1c>
 800d252:	2300      	movs	r3, #0
 800d254:	f100 0114 	add.w	r1, r0, #20
 800d258:	f100 0210 	add.w	r2, r0, #16
 800d25c:	4618      	mov	r0, r3
 800d25e:	4553      	cmp	r3, sl
 800d260:	db33      	blt.n	800d2ca <__lshift+0xb6>
 800d262:	6920      	ldr	r0, [r4, #16]
 800d264:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d268:	f104 0314 	add.w	r3, r4, #20
 800d26c:	f019 091f 	ands.w	r9, r9, #31
 800d270:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d274:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d278:	d02b      	beq.n	800d2d2 <__lshift+0xbe>
 800d27a:	f1c9 0e20 	rsb	lr, r9, #32
 800d27e:	468a      	mov	sl, r1
 800d280:	2200      	movs	r2, #0
 800d282:	6818      	ldr	r0, [r3, #0]
 800d284:	fa00 f009 	lsl.w	r0, r0, r9
 800d288:	4302      	orrs	r2, r0
 800d28a:	f84a 2b04 	str.w	r2, [sl], #4
 800d28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d292:	459c      	cmp	ip, r3
 800d294:	fa22 f20e 	lsr.w	r2, r2, lr
 800d298:	d8f3      	bhi.n	800d282 <__lshift+0x6e>
 800d29a:	ebac 0304 	sub.w	r3, ip, r4
 800d29e:	3b15      	subs	r3, #21
 800d2a0:	f023 0303 	bic.w	r3, r3, #3
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	f104 0015 	add.w	r0, r4, #21
 800d2aa:	4584      	cmp	ip, r0
 800d2ac:	bf38      	it	cc
 800d2ae:	2304      	movcc	r3, #4
 800d2b0:	50ca      	str	r2, [r1, r3]
 800d2b2:	b10a      	cbz	r2, 800d2b8 <__lshift+0xa4>
 800d2b4:	f108 0602 	add.w	r6, r8, #2
 800d2b8:	3e01      	subs	r6, #1
 800d2ba:	4638      	mov	r0, r7
 800d2bc:	612e      	str	r6, [r5, #16]
 800d2be:	4621      	mov	r1, r4
 800d2c0:	f7ff fdd6 	bl	800ce70 <_Bfree>
 800d2c4:	4628      	mov	r0, r5
 800d2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	e7c5      	b.n	800d25e <__lshift+0x4a>
 800d2d2:	3904      	subs	r1, #4
 800d2d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2dc:	459c      	cmp	ip, r3
 800d2de:	d8f9      	bhi.n	800d2d4 <__lshift+0xc0>
 800d2e0:	e7ea      	b.n	800d2b8 <__lshift+0xa4>
 800d2e2:	bf00      	nop
 800d2e4:	0800f11b 	.word	0x0800f11b
 800d2e8:	0800f12c 	.word	0x0800f12c

0800d2ec <__mcmp>:
 800d2ec:	b530      	push	{r4, r5, lr}
 800d2ee:	6902      	ldr	r2, [r0, #16]
 800d2f0:	690c      	ldr	r4, [r1, #16]
 800d2f2:	1b12      	subs	r2, r2, r4
 800d2f4:	d10e      	bne.n	800d314 <__mcmp+0x28>
 800d2f6:	f100 0314 	add.w	r3, r0, #20
 800d2fa:	3114      	adds	r1, #20
 800d2fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d300:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d304:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d308:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d30c:	42a5      	cmp	r5, r4
 800d30e:	d003      	beq.n	800d318 <__mcmp+0x2c>
 800d310:	d305      	bcc.n	800d31e <__mcmp+0x32>
 800d312:	2201      	movs	r2, #1
 800d314:	4610      	mov	r0, r2
 800d316:	bd30      	pop	{r4, r5, pc}
 800d318:	4283      	cmp	r3, r0
 800d31a:	d3f3      	bcc.n	800d304 <__mcmp+0x18>
 800d31c:	e7fa      	b.n	800d314 <__mcmp+0x28>
 800d31e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d322:	e7f7      	b.n	800d314 <__mcmp+0x28>

0800d324 <__mdiff>:
 800d324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d328:	460c      	mov	r4, r1
 800d32a:	4606      	mov	r6, r0
 800d32c:	4611      	mov	r1, r2
 800d32e:	4620      	mov	r0, r4
 800d330:	4617      	mov	r7, r2
 800d332:	f7ff ffdb 	bl	800d2ec <__mcmp>
 800d336:	1e05      	subs	r5, r0, #0
 800d338:	d110      	bne.n	800d35c <__mdiff+0x38>
 800d33a:	4629      	mov	r1, r5
 800d33c:	4630      	mov	r0, r6
 800d33e:	f7ff fd57 	bl	800cdf0 <_Balloc>
 800d342:	b930      	cbnz	r0, 800d352 <__mdiff+0x2e>
 800d344:	4b39      	ldr	r3, [pc, #228]	; (800d42c <__mdiff+0x108>)
 800d346:	4602      	mov	r2, r0
 800d348:	f240 2132 	movw	r1, #562	; 0x232
 800d34c:	4838      	ldr	r0, [pc, #224]	; (800d430 <__mdiff+0x10c>)
 800d34e:	f000 faf3 	bl	800d938 <__assert_func>
 800d352:	2301      	movs	r3, #1
 800d354:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d35c:	bfa4      	itt	ge
 800d35e:	463b      	movge	r3, r7
 800d360:	4627      	movge	r7, r4
 800d362:	4630      	mov	r0, r6
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	bfa6      	itte	ge
 800d368:	461c      	movge	r4, r3
 800d36a:	2500      	movge	r5, #0
 800d36c:	2501      	movlt	r5, #1
 800d36e:	f7ff fd3f 	bl	800cdf0 <_Balloc>
 800d372:	b920      	cbnz	r0, 800d37e <__mdiff+0x5a>
 800d374:	4b2d      	ldr	r3, [pc, #180]	; (800d42c <__mdiff+0x108>)
 800d376:	4602      	mov	r2, r0
 800d378:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d37c:	e7e6      	b.n	800d34c <__mdiff+0x28>
 800d37e:	693e      	ldr	r6, [r7, #16]
 800d380:	60c5      	str	r5, [r0, #12]
 800d382:	6925      	ldr	r5, [r4, #16]
 800d384:	f107 0114 	add.w	r1, r7, #20
 800d388:	f104 0914 	add.w	r9, r4, #20
 800d38c:	f100 0e14 	add.w	lr, r0, #20
 800d390:	f107 0210 	add.w	r2, r7, #16
 800d394:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d398:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d39c:	46f2      	mov	sl, lr
 800d39e:	2700      	movs	r7, #0
 800d3a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3a8:	fa1f f883 	uxth.w	r8, r3
 800d3ac:	fa17 f78b 	uxtah	r7, r7, fp
 800d3b0:	0c1b      	lsrs	r3, r3, #16
 800d3b2:	eba7 0808 	sub.w	r8, r7, r8
 800d3b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d3ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d3be:	fa1f f888 	uxth.w	r8, r8
 800d3c2:	141f      	asrs	r7, r3, #16
 800d3c4:	454d      	cmp	r5, r9
 800d3c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d3ca:	f84a 3b04 	str.w	r3, [sl], #4
 800d3ce:	d8e7      	bhi.n	800d3a0 <__mdiff+0x7c>
 800d3d0:	1b2b      	subs	r3, r5, r4
 800d3d2:	3b15      	subs	r3, #21
 800d3d4:	f023 0303 	bic.w	r3, r3, #3
 800d3d8:	3304      	adds	r3, #4
 800d3da:	3415      	adds	r4, #21
 800d3dc:	42a5      	cmp	r5, r4
 800d3de:	bf38      	it	cc
 800d3e0:	2304      	movcc	r3, #4
 800d3e2:	4419      	add	r1, r3
 800d3e4:	4473      	add	r3, lr
 800d3e6:	469e      	mov	lr, r3
 800d3e8:	460d      	mov	r5, r1
 800d3ea:	4565      	cmp	r5, ip
 800d3ec:	d30e      	bcc.n	800d40c <__mdiff+0xe8>
 800d3ee:	f10c 0203 	add.w	r2, ip, #3
 800d3f2:	1a52      	subs	r2, r2, r1
 800d3f4:	f022 0203 	bic.w	r2, r2, #3
 800d3f8:	3903      	subs	r1, #3
 800d3fa:	458c      	cmp	ip, r1
 800d3fc:	bf38      	it	cc
 800d3fe:	2200      	movcc	r2, #0
 800d400:	441a      	add	r2, r3
 800d402:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d406:	b17b      	cbz	r3, 800d428 <__mdiff+0x104>
 800d408:	6106      	str	r6, [r0, #16]
 800d40a:	e7a5      	b.n	800d358 <__mdiff+0x34>
 800d40c:	f855 8b04 	ldr.w	r8, [r5], #4
 800d410:	fa17 f488 	uxtah	r4, r7, r8
 800d414:	1422      	asrs	r2, r4, #16
 800d416:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d41a:	b2a4      	uxth	r4, r4
 800d41c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d420:	f84e 4b04 	str.w	r4, [lr], #4
 800d424:	1417      	asrs	r7, r2, #16
 800d426:	e7e0      	b.n	800d3ea <__mdiff+0xc6>
 800d428:	3e01      	subs	r6, #1
 800d42a:	e7ea      	b.n	800d402 <__mdiff+0xde>
 800d42c:	0800f11b 	.word	0x0800f11b
 800d430:	0800f12c 	.word	0x0800f12c

0800d434 <__d2b>:
 800d434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d438:	4689      	mov	r9, r1
 800d43a:	2101      	movs	r1, #1
 800d43c:	ec57 6b10 	vmov	r6, r7, d0
 800d440:	4690      	mov	r8, r2
 800d442:	f7ff fcd5 	bl	800cdf0 <_Balloc>
 800d446:	4604      	mov	r4, r0
 800d448:	b930      	cbnz	r0, 800d458 <__d2b+0x24>
 800d44a:	4602      	mov	r2, r0
 800d44c:	4b25      	ldr	r3, [pc, #148]	; (800d4e4 <__d2b+0xb0>)
 800d44e:	4826      	ldr	r0, [pc, #152]	; (800d4e8 <__d2b+0xb4>)
 800d450:	f240 310a 	movw	r1, #778	; 0x30a
 800d454:	f000 fa70 	bl	800d938 <__assert_func>
 800d458:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d45c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d460:	bb35      	cbnz	r5, 800d4b0 <__d2b+0x7c>
 800d462:	2e00      	cmp	r6, #0
 800d464:	9301      	str	r3, [sp, #4]
 800d466:	d028      	beq.n	800d4ba <__d2b+0x86>
 800d468:	4668      	mov	r0, sp
 800d46a:	9600      	str	r6, [sp, #0]
 800d46c:	f7ff fd8c 	bl	800cf88 <__lo0bits>
 800d470:	9900      	ldr	r1, [sp, #0]
 800d472:	b300      	cbz	r0, 800d4b6 <__d2b+0x82>
 800d474:	9a01      	ldr	r2, [sp, #4]
 800d476:	f1c0 0320 	rsb	r3, r0, #32
 800d47a:	fa02 f303 	lsl.w	r3, r2, r3
 800d47e:	430b      	orrs	r3, r1
 800d480:	40c2      	lsrs	r2, r0
 800d482:	6163      	str	r3, [r4, #20]
 800d484:	9201      	str	r2, [sp, #4]
 800d486:	9b01      	ldr	r3, [sp, #4]
 800d488:	61a3      	str	r3, [r4, #24]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	bf14      	ite	ne
 800d48e:	2202      	movne	r2, #2
 800d490:	2201      	moveq	r2, #1
 800d492:	6122      	str	r2, [r4, #16]
 800d494:	b1d5      	cbz	r5, 800d4cc <__d2b+0x98>
 800d496:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d49a:	4405      	add	r5, r0
 800d49c:	f8c9 5000 	str.w	r5, [r9]
 800d4a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4a4:	f8c8 0000 	str.w	r0, [r8]
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	b003      	add	sp, #12
 800d4ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4b4:	e7d5      	b.n	800d462 <__d2b+0x2e>
 800d4b6:	6161      	str	r1, [r4, #20]
 800d4b8:	e7e5      	b.n	800d486 <__d2b+0x52>
 800d4ba:	a801      	add	r0, sp, #4
 800d4bc:	f7ff fd64 	bl	800cf88 <__lo0bits>
 800d4c0:	9b01      	ldr	r3, [sp, #4]
 800d4c2:	6163      	str	r3, [r4, #20]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	6122      	str	r2, [r4, #16]
 800d4c8:	3020      	adds	r0, #32
 800d4ca:	e7e3      	b.n	800d494 <__d2b+0x60>
 800d4cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4d4:	f8c9 0000 	str.w	r0, [r9]
 800d4d8:	6918      	ldr	r0, [r3, #16]
 800d4da:	f7ff fd35 	bl	800cf48 <__hi0bits>
 800d4de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4e2:	e7df      	b.n	800d4a4 <__d2b+0x70>
 800d4e4:	0800f11b 	.word	0x0800f11b
 800d4e8:	0800f12c 	.word	0x0800f12c

0800d4ec <_calloc_r>:
 800d4ec:	b513      	push	{r0, r1, r4, lr}
 800d4ee:	434a      	muls	r2, r1
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	9201      	str	r2, [sp, #4]
 800d4f4:	f000 f85a 	bl	800d5ac <_malloc_r>
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	b118      	cbz	r0, 800d504 <_calloc_r+0x18>
 800d4fc:	9a01      	ldr	r2, [sp, #4]
 800d4fe:	2100      	movs	r1, #0
 800d500:	f7fe f95e 	bl	800b7c0 <memset>
 800d504:	4620      	mov	r0, r4
 800d506:	b002      	add	sp, #8
 800d508:	bd10      	pop	{r4, pc}
	...

0800d50c <_free_r>:
 800d50c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d50e:	2900      	cmp	r1, #0
 800d510:	d048      	beq.n	800d5a4 <_free_r+0x98>
 800d512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d516:	9001      	str	r0, [sp, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f1a1 0404 	sub.w	r4, r1, #4
 800d51e:	bfb8      	it	lt
 800d520:	18e4      	addlt	r4, r4, r3
 800d522:	f000 fa4b 	bl	800d9bc <__malloc_lock>
 800d526:	4a20      	ldr	r2, [pc, #128]	; (800d5a8 <_free_r+0x9c>)
 800d528:	9801      	ldr	r0, [sp, #4]
 800d52a:	6813      	ldr	r3, [r2, #0]
 800d52c:	4615      	mov	r5, r2
 800d52e:	b933      	cbnz	r3, 800d53e <_free_r+0x32>
 800d530:	6063      	str	r3, [r4, #4]
 800d532:	6014      	str	r4, [r2, #0]
 800d534:	b003      	add	sp, #12
 800d536:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d53a:	f000 ba45 	b.w	800d9c8 <__malloc_unlock>
 800d53e:	42a3      	cmp	r3, r4
 800d540:	d90b      	bls.n	800d55a <_free_r+0x4e>
 800d542:	6821      	ldr	r1, [r4, #0]
 800d544:	1862      	adds	r2, r4, r1
 800d546:	4293      	cmp	r3, r2
 800d548:	bf04      	itt	eq
 800d54a:	681a      	ldreq	r2, [r3, #0]
 800d54c:	685b      	ldreq	r3, [r3, #4]
 800d54e:	6063      	str	r3, [r4, #4]
 800d550:	bf04      	itt	eq
 800d552:	1852      	addeq	r2, r2, r1
 800d554:	6022      	streq	r2, [r4, #0]
 800d556:	602c      	str	r4, [r5, #0]
 800d558:	e7ec      	b.n	800d534 <_free_r+0x28>
 800d55a:	461a      	mov	r2, r3
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	b10b      	cbz	r3, 800d564 <_free_r+0x58>
 800d560:	42a3      	cmp	r3, r4
 800d562:	d9fa      	bls.n	800d55a <_free_r+0x4e>
 800d564:	6811      	ldr	r1, [r2, #0]
 800d566:	1855      	adds	r5, r2, r1
 800d568:	42a5      	cmp	r5, r4
 800d56a:	d10b      	bne.n	800d584 <_free_r+0x78>
 800d56c:	6824      	ldr	r4, [r4, #0]
 800d56e:	4421      	add	r1, r4
 800d570:	1854      	adds	r4, r2, r1
 800d572:	42a3      	cmp	r3, r4
 800d574:	6011      	str	r1, [r2, #0]
 800d576:	d1dd      	bne.n	800d534 <_free_r+0x28>
 800d578:	681c      	ldr	r4, [r3, #0]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	6053      	str	r3, [r2, #4]
 800d57e:	4421      	add	r1, r4
 800d580:	6011      	str	r1, [r2, #0]
 800d582:	e7d7      	b.n	800d534 <_free_r+0x28>
 800d584:	d902      	bls.n	800d58c <_free_r+0x80>
 800d586:	230c      	movs	r3, #12
 800d588:	6003      	str	r3, [r0, #0]
 800d58a:	e7d3      	b.n	800d534 <_free_r+0x28>
 800d58c:	6825      	ldr	r5, [r4, #0]
 800d58e:	1961      	adds	r1, r4, r5
 800d590:	428b      	cmp	r3, r1
 800d592:	bf04      	itt	eq
 800d594:	6819      	ldreq	r1, [r3, #0]
 800d596:	685b      	ldreq	r3, [r3, #4]
 800d598:	6063      	str	r3, [r4, #4]
 800d59a:	bf04      	itt	eq
 800d59c:	1949      	addeq	r1, r1, r5
 800d59e:	6021      	streq	r1, [r4, #0]
 800d5a0:	6054      	str	r4, [r2, #4]
 800d5a2:	e7c7      	b.n	800d534 <_free_r+0x28>
 800d5a4:	b003      	add	sp, #12
 800d5a6:	bd30      	pop	{r4, r5, pc}
 800d5a8:	20004b24 	.word	0x20004b24

0800d5ac <_malloc_r>:
 800d5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ae:	1ccd      	adds	r5, r1, #3
 800d5b0:	f025 0503 	bic.w	r5, r5, #3
 800d5b4:	3508      	adds	r5, #8
 800d5b6:	2d0c      	cmp	r5, #12
 800d5b8:	bf38      	it	cc
 800d5ba:	250c      	movcc	r5, #12
 800d5bc:	2d00      	cmp	r5, #0
 800d5be:	4606      	mov	r6, r0
 800d5c0:	db01      	blt.n	800d5c6 <_malloc_r+0x1a>
 800d5c2:	42a9      	cmp	r1, r5
 800d5c4:	d903      	bls.n	800d5ce <_malloc_r+0x22>
 800d5c6:	230c      	movs	r3, #12
 800d5c8:	6033      	str	r3, [r6, #0]
 800d5ca:	2000      	movs	r0, #0
 800d5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5ce:	f000 f9f5 	bl	800d9bc <__malloc_lock>
 800d5d2:	4921      	ldr	r1, [pc, #132]	; (800d658 <_malloc_r+0xac>)
 800d5d4:	680a      	ldr	r2, [r1, #0]
 800d5d6:	4614      	mov	r4, r2
 800d5d8:	b99c      	cbnz	r4, 800d602 <_malloc_r+0x56>
 800d5da:	4f20      	ldr	r7, [pc, #128]	; (800d65c <_malloc_r+0xb0>)
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	b923      	cbnz	r3, 800d5ea <_malloc_r+0x3e>
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	f000 f998 	bl	800d918 <_sbrk_r>
 800d5e8:	6038      	str	r0, [r7, #0]
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f000 f993 	bl	800d918 <_sbrk_r>
 800d5f2:	1c43      	adds	r3, r0, #1
 800d5f4:	d123      	bne.n	800d63e <_malloc_r+0x92>
 800d5f6:	230c      	movs	r3, #12
 800d5f8:	6033      	str	r3, [r6, #0]
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	f000 f9e4 	bl	800d9c8 <__malloc_unlock>
 800d600:	e7e3      	b.n	800d5ca <_malloc_r+0x1e>
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	1b5b      	subs	r3, r3, r5
 800d606:	d417      	bmi.n	800d638 <_malloc_r+0x8c>
 800d608:	2b0b      	cmp	r3, #11
 800d60a:	d903      	bls.n	800d614 <_malloc_r+0x68>
 800d60c:	6023      	str	r3, [r4, #0]
 800d60e:	441c      	add	r4, r3
 800d610:	6025      	str	r5, [r4, #0]
 800d612:	e004      	b.n	800d61e <_malloc_r+0x72>
 800d614:	6863      	ldr	r3, [r4, #4]
 800d616:	42a2      	cmp	r2, r4
 800d618:	bf0c      	ite	eq
 800d61a:	600b      	streq	r3, [r1, #0]
 800d61c:	6053      	strne	r3, [r2, #4]
 800d61e:	4630      	mov	r0, r6
 800d620:	f000 f9d2 	bl	800d9c8 <__malloc_unlock>
 800d624:	f104 000b 	add.w	r0, r4, #11
 800d628:	1d23      	adds	r3, r4, #4
 800d62a:	f020 0007 	bic.w	r0, r0, #7
 800d62e:	1ac2      	subs	r2, r0, r3
 800d630:	d0cc      	beq.n	800d5cc <_malloc_r+0x20>
 800d632:	1a1b      	subs	r3, r3, r0
 800d634:	50a3      	str	r3, [r4, r2]
 800d636:	e7c9      	b.n	800d5cc <_malloc_r+0x20>
 800d638:	4622      	mov	r2, r4
 800d63a:	6864      	ldr	r4, [r4, #4]
 800d63c:	e7cc      	b.n	800d5d8 <_malloc_r+0x2c>
 800d63e:	1cc4      	adds	r4, r0, #3
 800d640:	f024 0403 	bic.w	r4, r4, #3
 800d644:	42a0      	cmp	r0, r4
 800d646:	d0e3      	beq.n	800d610 <_malloc_r+0x64>
 800d648:	1a21      	subs	r1, r4, r0
 800d64a:	4630      	mov	r0, r6
 800d64c:	f000 f964 	bl	800d918 <_sbrk_r>
 800d650:	3001      	adds	r0, #1
 800d652:	d1dd      	bne.n	800d610 <_malloc_r+0x64>
 800d654:	e7cf      	b.n	800d5f6 <_malloc_r+0x4a>
 800d656:	bf00      	nop
 800d658:	20004b24 	.word	0x20004b24
 800d65c:	20004b28 	.word	0x20004b28

0800d660 <__ssputs_r>:
 800d660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d664:	688e      	ldr	r6, [r1, #8]
 800d666:	429e      	cmp	r6, r3
 800d668:	4682      	mov	sl, r0
 800d66a:	460c      	mov	r4, r1
 800d66c:	4690      	mov	r8, r2
 800d66e:	461f      	mov	r7, r3
 800d670:	d838      	bhi.n	800d6e4 <__ssputs_r+0x84>
 800d672:	898a      	ldrh	r2, [r1, #12]
 800d674:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d678:	d032      	beq.n	800d6e0 <__ssputs_r+0x80>
 800d67a:	6825      	ldr	r5, [r4, #0]
 800d67c:	6909      	ldr	r1, [r1, #16]
 800d67e:	eba5 0901 	sub.w	r9, r5, r1
 800d682:	6965      	ldr	r5, [r4, #20]
 800d684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d68c:	3301      	adds	r3, #1
 800d68e:	444b      	add	r3, r9
 800d690:	106d      	asrs	r5, r5, #1
 800d692:	429d      	cmp	r5, r3
 800d694:	bf38      	it	cc
 800d696:	461d      	movcc	r5, r3
 800d698:	0553      	lsls	r3, r2, #21
 800d69a:	d531      	bpl.n	800d700 <__ssputs_r+0xa0>
 800d69c:	4629      	mov	r1, r5
 800d69e:	f7ff ff85 	bl	800d5ac <_malloc_r>
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	b950      	cbnz	r0, 800d6bc <__ssputs_r+0x5c>
 800d6a6:	230c      	movs	r3, #12
 800d6a8:	f8ca 3000 	str.w	r3, [sl]
 800d6ac:	89a3      	ldrh	r3, [r4, #12]
 800d6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6b2:	81a3      	strh	r3, [r4, #12]
 800d6b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6bc:	6921      	ldr	r1, [r4, #16]
 800d6be:	464a      	mov	r2, r9
 800d6c0:	f7fe f856 	bl	800b770 <memcpy>
 800d6c4:	89a3      	ldrh	r3, [r4, #12]
 800d6c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d6ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6ce:	81a3      	strh	r3, [r4, #12]
 800d6d0:	6126      	str	r6, [r4, #16]
 800d6d2:	6165      	str	r5, [r4, #20]
 800d6d4:	444e      	add	r6, r9
 800d6d6:	eba5 0509 	sub.w	r5, r5, r9
 800d6da:	6026      	str	r6, [r4, #0]
 800d6dc:	60a5      	str	r5, [r4, #8]
 800d6de:	463e      	mov	r6, r7
 800d6e0:	42be      	cmp	r6, r7
 800d6e2:	d900      	bls.n	800d6e6 <__ssputs_r+0x86>
 800d6e4:	463e      	mov	r6, r7
 800d6e6:	4632      	mov	r2, r6
 800d6e8:	6820      	ldr	r0, [r4, #0]
 800d6ea:	4641      	mov	r1, r8
 800d6ec:	f7fe f84e 	bl	800b78c <memmove>
 800d6f0:	68a3      	ldr	r3, [r4, #8]
 800d6f2:	6822      	ldr	r2, [r4, #0]
 800d6f4:	1b9b      	subs	r3, r3, r6
 800d6f6:	4432      	add	r2, r6
 800d6f8:	60a3      	str	r3, [r4, #8]
 800d6fa:	6022      	str	r2, [r4, #0]
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	e7db      	b.n	800d6b8 <__ssputs_r+0x58>
 800d700:	462a      	mov	r2, r5
 800d702:	f000 f967 	bl	800d9d4 <_realloc_r>
 800d706:	4606      	mov	r6, r0
 800d708:	2800      	cmp	r0, #0
 800d70a:	d1e1      	bne.n	800d6d0 <__ssputs_r+0x70>
 800d70c:	6921      	ldr	r1, [r4, #16]
 800d70e:	4650      	mov	r0, sl
 800d710:	f7ff fefc 	bl	800d50c <_free_r>
 800d714:	e7c7      	b.n	800d6a6 <__ssputs_r+0x46>
	...

0800d718 <_svfiprintf_r>:
 800d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71c:	4698      	mov	r8, r3
 800d71e:	898b      	ldrh	r3, [r1, #12]
 800d720:	061b      	lsls	r3, r3, #24
 800d722:	b09d      	sub	sp, #116	; 0x74
 800d724:	4607      	mov	r7, r0
 800d726:	460d      	mov	r5, r1
 800d728:	4614      	mov	r4, r2
 800d72a:	d50e      	bpl.n	800d74a <_svfiprintf_r+0x32>
 800d72c:	690b      	ldr	r3, [r1, #16]
 800d72e:	b963      	cbnz	r3, 800d74a <_svfiprintf_r+0x32>
 800d730:	2140      	movs	r1, #64	; 0x40
 800d732:	f7ff ff3b 	bl	800d5ac <_malloc_r>
 800d736:	6028      	str	r0, [r5, #0]
 800d738:	6128      	str	r0, [r5, #16]
 800d73a:	b920      	cbnz	r0, 800d746 <_svfiprintf_r+0x2e>
 800d73c:	230c      	movs	r3, #12
 800d73e:	603b      	str	r3, [r7, #0]
 800d740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d744:	e0d1      	b.n	800d8ea <_svfiprintf_r+0x1d2>
 800d746:	2340      	movs	r3, #64	; 0x40
 800d748:	616b      	str	r3, [r5, #20]
 800d74a:	2300      	movs	r3, #0
 800d74c:	9309      	str	r3, [sp, #36]	; 0x24
 800d74e:	2320      	movs	r3, #32
 800d750:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d754:	f8cd 800c 	str.w	r8, [sp, #12]
 800d758:	2330      	movs	r3, #48	; 0x30
 800d75a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d904 <_svfiprintf_r+0x1ec>
 800d75e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d762:	f04f 0901 	mov.w	r9, #1
 800d766:	4623      	mov	r3, r4
 800d768:	469a      	mov	sl, r3
 800d76a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d76e:	b10a      	cbz	r2, 800d774 <_svfiprintf_r+0x5c>
 800d770:	2a25      	cmp	r2, #37	; 0x25
 800d772:	d1f9      	bne.n	800d768 <_svfiprintf_r+0x50>
 800d774:	ebba 0b04 	subs.w	fp, sl, r4
 800d778:	d00b      	beq.n	800d792 <_svfiprintf_r+0x7a>
 800d77a:	465b      	mov	r3, fp
 800d77c:	4622      	mov	r2, r4
 800d77e:	4629      	mov	r1, r5
 800d780:	4638      	mov	r0, r7
 800d782:	f7ff ff6d 	bl	800d660 <__ssputs_r>
 800d786:	3001      	adds	r0, #1
 800d788:	f000 80aa 	beq.w	800d8e0 <_svfiprintf_r+0x1c8>
 800d78c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d78e:	445a      	add	r2, fp
 800d790:	9209      	str	r2, [sp, #36]	; 0x24
 800d792:	f89a 3000 	ldrb.w	r3, [sl]
 800d796:	2b00      	cmp	r3, #0
 800d798:	f000 80a2 	beq.w	800d8e0 <_svfiprintf_r+0x1c8>
 800d79c:	2300      	movs	r3, #0
 800d79e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7a6:	f10a 0a01 	add.w	sl, sl, #1
 800d7aa:	9304      	str	r3, [sp, #16]
 800d7ac:	9307      	str	r3, [sp, #28]
 800d7ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7b2:	931a      	str	r3, [sp, #104]	; 0x68
 800d7b4:	4654      	mov	r4, sl
 800d7b6:	2205      	movs	r2, #5
 800d7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7bc:	4851      	ldr	r0, [pc, #324]	; (800d904 <_svfiprintf_r+0x1ec>)
 800d7be:	f7f2 fd0f 	bl	80001e0 <memchr>
 800d7c2:	9a04      	ldr	r2, [sp, #16]
 800d7c4:	b9d8      	cbnz	r0, 800d7fe <_svfiprintf_r+0xe6>
 800d7c6:	06d0      	lsls	r0, r2, #27
 800d7c8:	bf44      	itt	mi
 800d7ca:	2320      	movmi	r3, #32
 800d7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7d0:	0711      	lsls	r1, r2, #28
 800d7d2:	bf44      	itt	mi
 800d7d4:	232b      	movmi	r3, #43	; 0x2b
 800d7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7da:	f89a 3000 	ldrb.w	r3, [sl]
 800d7de:	2b2a      	cmp	r3, #42	; 0x2a
 800d7e0:	d015      	beq.n	800d80e <_svfiprintf_r+0xf6>
 800d7e2:	9a07      	ldr	r2, [sp, #28]
 800d7e4:	4654      	mov	r4, sl
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	f04f 0c0a 	mov.w	ip, #10
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7f2:	3b30      	subs	r3, #48	; 0x30
 800d7f4:	2b09      	cmp	r3, #9
 800d7f6:	d94e      	bls.n	800d896 <_svfiprintf_r+0x17e>
 800d7f8:	b1b0      	cbz	r0, 800d828 <_svfiprintf_r+0x110>
 800d7fa:	9207      	str	r2, [sp, #28]
 800d7fc:	e014      	b.n	800d828 <_svfiprintf_r+0x110>
 800d7fe:	eba0 0308 	sub.w	r3, r0, r8
 800d802:	fa09 f303 	lsl.w	r3, r9, r3
 800d806:	4313      	orrs	r3, r2
 800d808:	9304      	str	r3, [sp, #16]
 800d80a:	46a2      	mov	sl, r4
 800d80c:	e7d2      	b.n	800d7b4 <_svfiprintf_r+0x9c>
 800d80e:	9b03      	ldr	r3, [sp, #12]
 800d810:	1d19      	adds	r1, r3, #4
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	9103      	str	r1, [sp, #12]
 800d816:	2b00      	cmp	r3, #0
 800d818:	bfbb      	ittet	lt
 800d81a:	425b      	neglt	r3, r3
 800d81c:	f042 0202 	orrlt.w	r2, r2, #2
 800d820:	9307      	strge	r3, [sp, #28]
 800d822:	9307      	strlt	r3, [sp, #28]
 800d824:	bfb8      	it	lt
 800d826:	9204      	strlt	r2, [sp, #16]
 800d828:	7823      	ldrb	r3, [r4, #0]
 800d82a:	2b2e      	cmp	r3, #46	; 0x2e
 800d82c:	d10c      	bne.n	800d848 <_svfiprintf_r+0x130>
 800d82e:	7863      	ldrb	r3, [r4, #1]
 800d830:	2b2a      	cmp	r3, #42	; 0x2a
 800d832:	d135      	bne.n	800d8a0 <_svfiprintf_r+0x188>
 800d834:	9b03      	ldr	r3, [sp, #12]
 800d836:	1d1a      	adds	r2, r3, #4
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	9203      	str	r2, [sp, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	bfb8      	it	lt
 800d840:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d844:	3402      	adds	r4, #2
 800d846:	9305      	str	r3, [sp, #20]
 800d848:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d914 <_svfiprintf_r+0x1fc>
 800d84c:	7821      	ldrb	r1, [r4, #0]
 800d84e:	2203      	movs	r2, #3
 800d850:	4650      	mov	r0, sl
 800d852:	f7f2 fcc5 	bl	80001e0 <memchr>
 800d856:	b140      	cbz	r0, 800d86a <_svfiprintf_r+0x152>
 800d858:	2340      	movs	r3, #64	; 0x40
 800d85a:	eba0 000a 	sub.w	r0, r0, sl
 800d85e:	fa03 f000 	lsl.w	r0, r3, r0
 800d862:	9b04      	ldr	r3, [sp, #16]
 800d864:	4303      	orrs	r3, r0
 800d866:	3401      	adds	r4, #1
 800d868:	9304      	str	r3, [sp, #16]
 800d86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d86e:	4826      	ldr	r0, [pc, #152]	; (800d908 <_svfiprintf_r+0x1f0>)
 800d870:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d874:	2206      	movs	r2, #6
 800d876:	f7f2 fcb3 	bl	80001e0 <memchr>
 800d87a:	2800      	cmp	r0, #0
 800d87c:	d038      	beq.n	800d8f0 <_svfiprintf_r+0x1d8>
 800d87e:	4b23      	ldr	r3, [pc, #140]	; (800d90c <_svfiprintf_r+0x1f4>)
 800d880:	bb1b      	cbnz	r3, 800d8ca <_svfiprintf_r+0x1b2>
 800d882:	9b03      	ldr	r3, [sp, #12]
 800d884:	3307      	adds	r3, #7
 800d886:	f023 0307 	bic.w	r3, r3, #7
 800d88a:	3308      	adds	r3, #8
 800d88c:	9303      	str	r3, [sp, #12]
 800d88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d890:	4433      	add	r3, r6
 800d892:	9309      	str	r3, [sp, #36]	; 0x24
 800d894:	e767      	b.n	800d766 <_svfiprintf_r+0x4e>
 800d896:	fb0c 3202 	mla	r2, ip, r2, r3
 800d89a:	460c      	mov	r4, r1
 800d89c:	2001      	movs	r0, #1
 800d89e:	e7a5      	b.n	800d7ec <_svfiprintf_r+0xd4>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	3401      	adds	r4, #1
 800d8a4:	9305      	str	r3, [sp, #20]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	f04f 0c0a 	mov.w	ip, #10
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8b2:	3a30      	subs	r2, #48	; 0x30
 800d8b4:	2a09      	cmp	r2, #9
 800d8b6:	d903      	bls.n	800d8c0 <_svfiprintf_r+0x1a8>
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d0c5      	beq.n	800d848 <_svfiprintf_r+0x130>
 800d8bc:	9105      	str	r1, [sp, #20]
 800d8be:	e7c3      	b.n	800d848 <_svfiprintf_r+0x130>
 800d8c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8c4:	4604      	mov	r4, r0
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e7f0      	b.n	800d8ac <_svfiprintf_r+0x194>
 800d8ca:	ab03      	add	r3, sp, #12
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	462a      	mov	r2, r5
 800d8d0:	4b0f      	ldr	r3, [pc, #60]	; (800d910 <_svfiprintf_r+0x1f8>)
 800d8d2:	a904      	add	r1, sp, #16
 800d8d4:	4638      	mov	r0, r7
 800d8d6:	f7fe f81b 	bl	800b910 <_printf_float>
 800d8da:	1c42      	adds	r2, r0, #1
 800d8dc:	4606      	mov	r6, r0
 800d8de:	d1d6      	bne.n	800d88e <_svfiprintf_r+0x176>
 800d8e0:	89ab      	ldrh	r3, [r5, #12]
 800d8e2:	065b      	lsls	r3, r3, #25
 800d8e4:	f53f af2c 	bmi.w	800d740 <_svfiprintf_r+0x28>
 800d8e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8ea:	b01d      	add	sp, #116	; 0x74
 800d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f0:	ab03      	add	r3, sp, #12
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	462a      	mov	r2, r5
 800d8f6:	4b06      	ldr	r3, [pc, #24]	; (800d910 <_svfiprintf_r+0x1f8>)
 800d8f8:	a904      	add	r1, sp, #16
 800d8fa:	4638      	mov	r0, r7
 800d8fc:	f7fe faac 	bl	800be58 <_printf_i>
 800d900:	e7eb      	b.n	800d8da <_svfiprintf_r+0x1c2>
 800d902:	bf00      	nop
 800d904:	0800f28c 	.word	0x0800f28c
 800d908:	0800f296 	.word	0x0800f296
 800d90c:	0800b911 	.word	0x0800b911
 800d910:	0800d661 	.word	0x0800d661
 800d914:	0800f292 	.word	0x0800f292

0800d918 <_sbrk_r>:
 800d918:	b538      	push	{r3, r4, r5, lr}
 800d91a:	4d06      	ldr	r5, [pc, #24]	; (800d934 <_sbrk_r+0x1c>)
 800d91c:	2300      	movs	r3, #0
 800d91e:	4604      	mov	r4, r0
 800d920:	4608      	mov	r0, r1
 800d922:	602b      	str	r3, [r5, #0]
 800d924:	f7f6 fd42 	bl	80043ac <_sbrk>
 800d928:	1c43      	adds	r3, r0, #1
 800d92a:	d102      	bne.n	800d932 <_sbrk_r+0x1a>
 800d92c:	682b      	ldr	r3, [r5, #0]
 800d92e:	b103      	cbz	r3, 800d932 <_sbrk_r+0x1a>
 800d930:	6023      	str	r3, [r4, #0]
 800d932:	bd38      	pop	{r3, r4, r5, pc}
 800d934:	20005200 	.word	0x20005200

0800d938 <__assert_func>:
 800d938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d93a:	4614      	mov	r4, r2
 800d93c:	461a      	mov	r2, r3
 800d93e:	4b09      	ldr	r3, [pc, #36]	; (800d964 <__assert_func+0x2c>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4605      	mov	r5, r0
 800d944:	68d8      	ldr	r0, [r3, #12]
 800d946:	b14c      	cbz	r4, 800d95c <__assert_func+0x24>
 800d948:	4b07      	ldr	r3, [pc, #28]	; (800d968 <__assert_func+0x30>)
 800d94a:	9100      	str	r1, [sp, #0]
 800d94c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d950:	4906      	ldr	r1, [pc, #24]	; (800d96c <__assert_func+0x34>)
 800d952:	462b      	mov	r3, r5
 800d954:	f000 f80e 	bl	800d974 <fiprintf>
 800d958:	f000 fa8a 	bl	800de70 <abort>
 800d95c:	4b04      	ldr	r3, [pc, #16]	; (800d970 <__assert_func+0x38>)
 800d95e:	461c      	mov	r4, r3
 800d960:	e7f3      	b.n	800d94a <__assert_func+0x12>
 800d962:	bf00      	nop
 800d964:	20000010 	.word	0x20000010
 800d968:	0800f29d 	.word	0x0800f29d
 800d96c:	0800f2aa 	.word	0x0800f2aa
 800d970:	0800f2d8 	.word	0x0800f2d8

0800d974 <fiprintf>:
 800d974:	b40e      	push	{r1, r2, r3}
 800d976:	b503      	push	{r0, r1, lr}
 800d978:	4601      	mov	r1, r0
 800d97a:	ab03      	add	r3, sp, #12
 800d97c:	4805      	ldr	r0, [pc, #20]	; (800d994 <fiprintf+0x20>)
 800d97e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d982:	6800      	ldr	r0, [r0, #0]
 800d984:	9301      	str	r3, [sp, #4]
 800d986:	f000 f875 	bl	800da74 <_vfiprintf_r>
 800d98a:	b002      	add	sp, #8
 800d98c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d990:	b003      	add	sp, #12
 800d992:	4770      	bx	lr
 800d994:	20000010 	.word	0x20000010

0800d998 <__ascii_mbtowc>:
 800d998:	b082      	sub	sp, #8
 800d99a:	b901      	cbnz	r1, 800d99e <__ascii_mbtowc+0x6>
 800d99c:	a901      	add	r1, sp, #4
 800d99e:	b142      	cbz	r2, 800d9b2 <__ascii_mbtowc+0x1a>
 800d9a0:	b14b      	cbz	r3, 800d9b6 <__ascii_mbtowc+0x1e>
 800d9a2:	7813      	ldrb	r3, [r2, #0]
 800d9a4:	600b      	str	r3, [r1, #0]
 800d9a6:	7812      	ldrb	r2, [r2, #0]
 800d9a8:	1e10      	subs	r0, r2, #0
 800d9aa:	bf18      	it	ne
 800d9ac:	2001      	movne	r0, #1
 800d9ae:	b002      	add	sp, #8
 800d9b0:	4770      	bx	lr
 800d9b2:	4610      	mov	r0, r2
 800d9b4:	e7fb      	b.n	800d9ae <__ascii_mbtowc+0x16>
 800d9b6:	f06f 0001 	mvn.w	r0, #1
 800d9ba:	e7f8      	b.n	800d9ae <__ascii_mbtowc+0x16>

0800d9bc <__malloc_lock>:
 800d9bc:	4801      	ldr	r0, [pc, #4]	; (800d9c4 <__malloc_lock+0x8>)
 800d9be:	f000 bc17 	b.w	800e1f0 <__retarget_lock_acquire_recursive>
 800d9c2:	bf00      	nop
 800d9c4:	20005208 	.word	0x20005208

0800d9c8 <__malloc_unlock>:
 800d9c8:	4801      	ldr	r0, [pc, #4]	; (800d9d0 <__malloc_unlock+0x8>)
 800d9ca:	f000 bc12 	b.w	800e1f2 <__retarget_lock_release_recursive>
 800d9ce:	bf00      	nop
 800d9d0:	20005208 	.word	0x20005208

0800d9d4 <_realloc_r>:
 800d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d6:	4607      	mov	r7, r0
 800d9d8:	4614      	mov	r4, r2
 800d9da:	460e      	mov	r6, r1
 800d9dc:	b921      	cbnz	r1, 800d9e8 <_realloc_r+0x14>
 800d9de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	f7ff bde2 	b.w	800d5ac <_malloc_r>
 800d9e8:	b922      	cbnz	r2, 800d9f4 <_realloc_r+0x20>
 800d9ea:	f7ff fd8f 	bl	800d50c <_free_r>
 800d9ee:	4625      	mov	r5, r4
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9f4:	f000 fc62 	bl	800e2bc <_malloc_usable_size_r>
 800d9f8:	42a0      	cmp	r0, r4
 800d9fa:	d20f      	bcs.n	800da1c <_realloc_r+0x48>
 800d9fc:	4621      	mov	r1, r4
 800d9fe:	4638      	mov	r0, r7
 800da00:	f7ff fdd4 	bl	800d5ac <_malloc_r>
 800da04:	4605      	mov	r5, r0
 800da06:	2800      	cmp	r0, #0
 800da08:	d0f2      	beq.n	800d9f0 <_realloc_r+0x1c>
 800da0a:	4631      	mov	r1, r6
 800da0c:	4622      	mov	r2, r4
 800da0e:	f7fd feaf 	bl	800b770 <memcpy>
 800da12:	4631      	mov	r1, r6
 800da14:	4638      	mov	r0, r7
 800da16:	f7ff fd79 	bl	800d50c <_free_r>
 800da1a:	e7e9      	b.n	800d9f0 <_realloc_r+0x1c>
 800da1c:	4635      	mov	r5, r6
 800da1e:	e7e7      	b.n	800d9f0 <_realloc_r+0x1c>

0800da20 <__sfputc_r>:
 800da20:	6893      	ldr	r3, [r2, #8]
 800da22:	3b01      	subs	r3, #1
 800da24:	2b00      	cmp	r3, #0
 800da26:	b410      	push	{r4}
 800da28:	6093      	str	r3, [r2, #8]
 800da2a:	da08      	bge.n	800da3e <__sfputc_r+0x1e>
 800da2c:	6994      	ldr	r4, [r2, #24]
 800da2e:	42a3      	cmp	r3, r4
 800da30:	db01      	blt.n	800da36 <__sfputc_r+0x16>
 800da32:	290a      	cmp	r1, #10
 800da34:	d103      	bne.n	800da3e <__sfputc_r+0x1e>
 800da36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da3a:	f000 b94b 	b.w	800dcd4 <__swbuf_r>
 800da3e:	6813      	ldr	r3, [r2, #0]
 800da40:	1c58      	adds	r0, r3, #1
 800da42:	6010      	str	r0, [r2, #0]
 800da44:	7019      	strb	r1, [r3, #0]
 800da46:	4608      	mov	r0, r1
 800da48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <__sfputs_r>:
 800da4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da50:	4606      	mov	r6, r0
 800da52:	460f      	mov	r7, r1
 800da54:	4614      	mov	r4, r2
 800da56:	18d5      	adds	r5, r2, r3
 800da58:	42ac      	cmp	r4, r5
 800da5a:	d101      	bne.n	800da60 <__sfputs_r+0x12>
 800da5c:	2000      	movs	r0, #0
 800da5e:	e007      	b.n	800da70 <__sfputs_r+0x22>
 800da60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da64:	463a      	mov	r2, r7
 800da66:	4630      	mov	r0, r6
 800da68:	f7ff ffda 	bl	800da20 <__sfputc_r>
 800da6c:	1c43      	adds	r3, r0, #1
 800da6e:	d1f3      	bne.n	800da58 <__sfputs_r+0xa>
 800da70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da74 <_vfiprintf_r>:
 800da74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da78:	460d      	mov	r5, r1
 800da7a:	b09d      	sub	sp, #116	; 0x74
 800da7c:	4614      	mov	r4, r2
 800da7e:	4698      	mov	r8, r3
 800da80:	4606      	mov	r6, r0
 800da82:	b118      	cbz	r0, 800da8c <_vfiprintf_r+0x18>
 800da84:	6983      	ldr	r3, [r0, #24]
 800da86:	b90b      	cbnz	r3, 800da8c <_vfiprintf_r+0x18>
 800da88:	f000 fb14 	bl	800e0b4 <__sinit>
 800da8c:	4b89      	ldr	r3, [pc, #548]	; (800dcb4 <_vfiprintf_r+0x240>)
 800da8e:	429d      	cmp	r5, r3
 800da90:	d11b      	bne.n	800daca <_vfiprintf_r+0x56>
 800da92:	6875      	ldr	r5, [r6, #4]
 800da94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da96:	07d9      	lsls	r1, r3, #31
 800da98:	d405      	bmi.n	800daa6 <_vfiprintf_r+0x32>
 800da9a:	89ab      	ldrh	r3, [r5, #12]
 800da9c:	059a      	lsls	r2, r3, #22
 800da9e:	d402      	bmi.n	800daa6 <_vfiprintf_r+0x32>
 800daa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daa2:	f000 fba5 	bl	800e1f0 <__retarget_lock_acquire_recursive>
 800daa6:	89ab      	ldrh	r3, [r5, #12]
 800daa8:	071b      	lsls	r3, r3, #28
 800daaa:	d501      	bpl.n	800dab0 <_vfiprintf_r+0x3c>
 800daac:	692b      	ldr	r3, [r5, #16]
 800daae:	b9eb      	cbnz	r3, 800daec <_vfiprintf_r+0x78>
 800dab0:	4629      	mov	r1, r5
 800dab2:	4630      	mov	r0, r6
 800dab4:	f000 f96e 	bl	800dd94 <__swsetup_r>
 800dab8:	b1c0      	cbz	r0, 800daec <_vfiprintf_r+0x78>
 800daba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dabc:	07dc      	lsls	r4, r3, #31
 800dabe:	d50e      	bpl.n	800dade <_vfiprintf_r+0x6a>
 800dac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dac4:	b01d      	add	sp, #116	; 0x74
 800dac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daca:	4b7b      	ldr	r3, [pc, #492]	; (800dcb8 <_vfiprintf_r+0x244>)
 800dacc:	429d      	cmp	r5, r3
 800dace:	d101      	bne.n	800dad4 <_vfiprintf_r+0x60>
 800dad0:	68b5      	ldr	r5, [r6, #8]
 800dad2:	e7df      	b.n	800da94 <_vfiprintf_r+0x20>
 800dad4:	4b79      	ldr	r3, [pc, #484]	; (800dcbc <_vfiprintf_r+0x248>)
 800dad6:	429d      	cmp	r5, r3
 800dad8:	bf08      	it	eq
 800dada:	68f5      	ldreq	r5, [r6, #12]
 800dadc:	e7da      	b.n	800da94 <_vfiprintf_r+0x20>
 800dade:	89ab      	ldrh	r3, [r5, #12]
 800dae0:	0598      	lsls	r0, r3, #22
 800dae2:	d4ed      	bmi.n	800dac0 <_vfiprintf_r+0x4c>
 800dae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dae6:	f000 fb84 	bl	800e1f2 <__retarget_lock_release_recursive>
 800daea:	e7e9      	b.n	800dac0 <_vfiprintf_r+0x4c>
 800daec:	2300      	movs	r3, #0
 800daee:	9309      	str	r3, [sp, #36]	; 0x24
 800daf0:	2320      	movs	r3, #32
 800daf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dafa:	2330      	movs	r3, #48	; 0x30
 800dafc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dcc0 <_vfiprintf_r+0x24c>
 800db00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db04:	f04f 0901 	mov.w	r9, #1
 800db08:	4623      	mov	r3, r4
 800db0a:	469a      	mov	sl, r3
 800db0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db10:	b10a      	cbz	r2, 800db16 <_vfiprintf_r+0xa2>
 800db12:	2a25      	cmp	r2, #37	; 0x25
 800db14:	d1f9      	bne.n	800db0a <_vfiprintf_r+0x96>
 800db16:	ebba 0b04 	subs.w	fp, sl, r4
 800db1a:	d00b      	beq.n	800db34 <_vfiprintf_r+0xc0>
 800db1c:	465b      	mov	r3, fp
 800db1e:	4622      	mov	r2, r4
 800db20:	4629      	mov	r1, r5
 800db22:	4630      	mov	r0, r6
 800db24:	f7ff ff93 	bl	800da4e <__sfputs_r>
 800db28:	3001      	adds	r0, #1
 800db2a:	f000 80aa 	beq.w	800dc82 <_vfiprintf_r+0x20e>
 800db2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db30:	445a      	add	r2, fp
 800db32:	9209      	str	r2, [sp, #36]	; 0x24
 800db34:	f89a 3000 	ldrb.w	r3, [sl]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f000 80a2 	beq.w	800dc82 <_vfiprintf_r+0x20e>
 800db3e:	2300      	movs	r3, #0
 800db40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db48:	f10a 0a01 	add.w	sl, sl, #1
 800db4c:	9304      	str	r3, [sp, #16]
 800db4e:	9307      	str	r3, [sp, #28]
 800db50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db54:	931a      	str	r3, [sp, #104]	; 0x68
 800db56:	4654      	mov	r4, sl
 800db58:	2205      	movs	r2, #5
 800db5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5e:	4858      	ldr	r0, [pc, #352]	; (800dcc0 <_vfiprintf_r+0x24c>)
 800db60:	f7f2 fb3e 	bl	80001e0 <memchr>
 800db64:	9a04      	ldr	r2, [sp, #16]
 800db66:	b9d8      	cbnz	r0, 800dba0 <_vfiprintf_r+0x12c>
 800db68:	06d1      	lsls	r1, r2, #27
 800db6a:	bf44      	itt	mi
 800db6c:	2320      	movmi	r3, #32
 800db6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db72:	0713      	lsls	r3, r2, #28
 800db74:	bf44      	itt	mi
 800db76:	232b      	movmi	r3, #43	; 0x2b
 800db78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db7c:	f89a 3000 	ldrb.w	r3, [sl]
 800db80:	2b2a      	cmp	r3, #42	; 0x2a
 800db82:	d015      	beq.n	800dbb0 <_vfiprintf_r+0x13c>
 800db84:	9a07      	ldr	r2, [sp, #28]
 800db86:	4654      	mov	r4, sl
 800db88:	2000      	movs	r0, #0
 800db8a:	f04f 0c0a 	mov.w	ip, #10
 800db8e:	4621      	mov	r1, r4
 800db90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db94:	3b30      	subs	r3, #48	; 0x30
 800db96:	2b09      	cmp	r3, #9
 800db98:	d94e      	bls.n	800dc38 <_vfiprintf_r+0x1c4>
 800db9a:	b1b0      	cbz	r0, 800dbca <_vfiprintf_r+0x156>
 800db9c:	9207      	str	r2, [sp, #28]
 800db9e:	e014      	b.n	800dbca <_vfiprintf_r+0x156>
 800dba0:	eba0 0308 	sub.w	r3, r0, r8
 800dba4:	fa09 f303 	lsl.w	r3, r9, r3
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	9304      	str	r3, [sp, #16]
 800dbac:	46a2      	mov	sl, r4
 800dbae:	e7d2      	b.n	800db56 <_vfiprintf_r+0xe2>
 800dbb0:	9b03      	ldr	r3, [sp, #12]
 800dbb2:	1d19      	adds	r1, r3, #4
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	9103      	str	r1, [sp, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	bfbb      	ittet	lt
 800dbbc:	425b      	neglt	r3, r3
 800dbbe:	f042 0202 	orrlt.w	r2, r2, #2
 800dbc2:	9307      	strge	r3, [sp, #28]
 800dbc4:	9307      	strlt	r3, [sp, #28]
 800dbc6:	bfb8      	it	lt
 800dbc8:	9204      	strlt	r2, [sp, #16]
 800dbca:	7823      	ldrb	r3, [r4, #0]
 800dbcc:	2b2e      	cmp	r3, #46	; 0x2e
 800dbce:	d10c      	bne.n	800dbea <_vfiprintf_r+0x176>
 800dbd0:	7863      	ldrb	r3, [r4, #1]
 800dbd2:	2b2a      	cmp	r3, #42	; 0x2a
 800dbd4:	d135      	bne.n	800dc42 <_vfiprintf_r+0x1ce>
 800dbd6:	9b03      	ldr	r3, [sp, #12]
 800dbd8:	1d1a      	adds	r2, r3, #4
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	9203      	str	r2, [sp, #12]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	bfb8      	it	lt
 800dbe2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dbe6:	3402      	adds	r4, #2
 800dbe8:	9305      	str	r3, [sp, #20]
 800dbea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dcd0 <_vfiprintf_r+0x25c>
 800dbee:	7821      	ldrb	r1, [r4, #0]
 800dbf0:	2203      	movs	r2, #3
 800dbf2:	4650      	mov	r0, sl
 800dbf4:	f7f2 faf4 	bl	80001e0 <memchr>
 800dbf8:	b140      	cbz	r0, 800dc0c <_vfiprintf_r+0x198>
 800dbfa:	2340      	movs	r3, #64	; 0x40
 800dbfc:	eba0 000a 	sub.w	r0, r0, sl
 800dc00:	fa03 f000 	lsl.w	r0, r3, r0
 800dc04:	9b04      	ldr	r3, [sp, #16]
 800dc06:	4303      	orrs	r3, r0
 800dc08:	3401      	adds	r4, #1
 800dc0a:	9304      	str	r3, [sp, #16]
 800dc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc10:	482c      	ldr	r0, [pc, #176]	; (800dcc4 <_vfiprintf_r+0x250>)
 800dc12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc16:	2206      	movs	r2, #6
 800dc18:	f7f2 fae2 	bl	80001e0 <memchr>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d03f      	beq.n	800dca0 <_vfiprintf_r+0x22c>
 800dc20:	4b29      	ldr	r3, [pc, #164]	; (800dcc8 <_vfiprintf_r+0x254>)
 800dc22:	bb1b      	cbnz	r3, 800dc6c <_vfiprintf_r+0x1f8>
 800dc24:	9b03      	ldr	r3, [sp, #12]
 800dc26:	3307      	adds	r3, #7
 800dc28:	f023 0307 	bic.w	r3, r3, #7
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	9303      	str	r3, [sp, #12]
 800dc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc32:	443b      	add	r3, r7
 800dc34:	9309      	str	r3, [sp, #36]	; 0x24
 800dc36:	e767      	b.n	800db08 <_vfiprintf_r+0x94>
 800dc38:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	2001      	movs	r0, #1
 800dc40:	e7a5      	b.n	800db8e <_vfiprintf_r+0x11a>
 800dc42:	2300      	movs	r3, #0
 800dc44:	3401      	adds	r4, #1
 800dc46:	9305      	str	r3, [sp, #20]
 800dc48:	4619      	mov	r1, r3
 800dc4a:	f04f 0c0a 	mov.w	ip, #10
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc54:	3a30      	subs	r2, #48	; 0x30
 800dc56:	2a09      	cmp	r2, #9
 800dc58:	d903      	bls.n	800dc62 <_vfiprintf_r+0x1ee>
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d0c5      	beq.n	800dbea <_vfiprintf_r+0x176>
 800dc5e:	9105      	str	r1, [sp, #20]
 800dc60:	e7c3      	b.n	800dbea <_vfiprintf_r+0x176>
 800dc62:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc66:	4604      	mov	r4, r0
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e7f0      	b.n	800dc4e <_vfiprintf_r+0x1da>
 800dc6c:	ab03      	add	r3, sp, #12
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	462a      	mov	r2, r5
 800dc72:	4b16      	ldr	r3, [pc, #88]	; (800dccc <_vfiprintf_r+0x258>)
 800dc74:	a904      	add	r1, sp, #16
 800dc76:	4630      	mov	r0, r6
 800dc78:	f7fd fe4a 	bl	800b910 <_printf_float>
 800dc7c:	4607      	mov	r7, r0
 800dc7e:	1c78      	adds	r0, r7, #1
 800dc80:	d1d6      	bne.n	800dc30 <_vfiprintf_r+0x1bc>
 800dc82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc84:	07d9      	lsls	r1, r3, #31
 800dc86:	d405      	bmi.n	800dc94 <_vfiprintf_r+0x220>
 800dc88:	89ab      	ldrh	r3, [r5, #12]
 800dc8a:	059a      	lsls	r2, r3, #22
 800dc8c:	d402      	bmi.n	800dc94 <_vfiprintf_r+0x220>
 800dc8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc90:	f000 faaf 	bl	800e1f2 <__retarget_lock_release_recursive>
 800dc94:	89ab      	ldrh	r3, [r5, #12]
 800dc96:	065b      	lsls	r3, r3, #25
 800dc98:	f53f af12 	bmi.w	800dac0 <_vfiprintf_r+0x4c>
 800dc9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc9e:	e711      	b.n	800dac4 <_vfiprintf_r+0x50>
 800dca0:	ab03      	add	r3, sp, #12
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	462a      	mov	r2, r5
 800dca6:	4b09      	ldr	r3, [pc, #36]	; (800dccc <_vfiprintf_r+0x258>)
 800dca8:	a904      	add	r1, sp, #16
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f7fe f8d4 	bl	800be58 <_printf_i>
 800dcb0:	e7e4      	b.n	800dc7c <_vfiprintf_r+0x208>
 800dcb2:	bf00      	nop
 800dcb4:	0800f404 	.word	0x0800f404
 800dcb8:	0800f424 	.word	0x0800f424
 800dcbc:	0800f3e4 	.word	0x0800f3e4
 800dcc0:	0800f28c 	.word	0x0800f28c
 800dcc4:	0800f296 	.word	0x0800f296
 800dcc8:	0800b911 	.word	0x0800b911
 800dccc:	0800da4f 	.word	0x0800da4f
 800dcd0:	0800f292 	.word	0x0800f292

0800dcd4 <__swbuf_r>:
 800dcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd6:	460e      	mov	r6, r1
 800dcd8:	4614      	mov	r4, r2
 800dcda:	4605      	mov	r5, r0
 800dcdc:	b118      	cbz	r0, 800dce6 <__swbuf_r+0x12>
 800dcde:	6983      	ldr	r3, [r0, #24]
 800dce0:	b90b      	cbnz	r3, 800dce6 <__swbuf_r+0x12>
 800dce2:	f000 f9e7 	bl	800e0b4 <__sinit>
 800dce6:	4b21      	ldr	r3, [pc, #132]	; (800dd6c <__swbuf_r+0x98>)
 800dce8:	429c      	cmp	r4, r3
 800dcea:	d12b      	bne.n	800dd44 <__swbuf_r+0x70>
 800dcec:	686c      	ldr	r4, [r5, #4]
 800dcee:	69a3      	ldr	r3, [r4, #24]
 800dcf0:	60a3      	str	r3, [r4, #8]
 800dcf2:	89a3      	ldrh	r3, [r4, #12]
 800dcf4:	071a      	lsls	r2, r3, #28
 800dcf6:	d52f      	bpl.n	800dd58 <__swbuf_r+0x84>
 800dcf8:	6923      	ldr	r3, [r4, #16]
 800dcfa:	b36b      	cbz	r3, 800dd58 <__swbuf_r+0x84>
 800dcfc:	6923      	ldr	r3, [r4, #16]
 800dcfe:	6820      	ldr	r0, [r4, #0]
 800dd00:	1ac0      	subs	r0, r0, r3
 800dd02:	6963      	ldr	r3, [r4, #20]
 800dd04:	b2f6      	uxtb	r6, r6
 800dd06:	4283      	cmp	r3, r0
 800dd08:	4637      	mov	r7, r6
 800dd0a:	dc04      	bgt.n	800dd16 <__swbuf_r+0x42>
 800dd0c:	4621      	mov	r1, r4
 800dd0e:	4628      	mov	r0, r5
 800dd10:	f000 f93c 	bl	800df8c <_fflush_r>
 800dd14:	bb30      	cbnz	r0, 800dd64 <__swbuf_r+0x90>
 800dd16:	68a3      	ldr	r3, [r4, #8]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	60a3      	str	r3, [r4, #8]
 800dd1c:	6823      	ldr	r3, [r4, #0]
 800dd1e:	1c5a      	adds	r2, r3, #1
 800dd20:	6022      	str	r2, [r4, #0]
 800dd22:	701e      	strb	r6, [r3, #0]
 800dd24:	6963      	ldr	r3, [r4, #20]
 800dd26:	3001      	adds	r0, #1
 800dd28:	4283      	cmp	r3, r0
 800dd2a:	d004      	beq.n	800dd36 <__swbuf_r+0x62>
 800dd2c:	89a3      	ldrh	r3, [r4, #12]
 800dd2e:	07db      	lsls	r3, r3, #31
 800dd30:	d506      	bpl.n	800dd40 <__swbuf_r+0x6c>
 800dd32:	2e0a      	cmp	r6, #10
 800dd34:	d104      	bne.n	800dd40 <__swbuf_r+0x6c>
 800dd36:	4621      	mov	r1, r4
 800dd38:	4628      	mov	r0, r5
 800dd3a:	f000 f927 	bl	800df8c <_fflush_r>
 800dd3e:	b988      	cbnz	r0, 800dd64 <__swbuf_r+0x90>
 800dd40:	4638      	mov	r0, r7
 800dd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd44:	4b0a      	ldr	r3, [pc, #40]	; (800dd70 <__swbuf_r+0x9c>)
 800dd46:	429c      	cmp	r4, r3
 800dd48:	d101      	bne.n	800dd4e <__swbuf_r+0x7a>
 800dd4a:	68ac      	ldr	r4, [r5, #8]
 800dd4c:	e7cf      	b.n	800dcee <__swbuf_r+0x1a>
 800dd4e:	4b09      	ldr	r3, [pc, #36]	; (800dd74 <__swbuf_r+0xa0>)
 800dd50:	429c      	cmp	r4, r3
 800dd52:	bf08      	it	eq
 800dd54:	68ec      	ldreq	r4, [r5, #12]
 800dd56:	e7ca      	b.n	800dcee <__swbuf_r+0x1a>
 800dd58:	4621      	mov	r1, r4
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	f000 f81a 	bl	800dd94 <__swsetup_r>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	d0cb      	beq.n	800dcfc <__swbuf_r+0x28>
 800dd64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dd68:	e7ea      	b.n	800dd40 <__swbuf_r+0x6c>
 800dd6a:	bf00      	nop
 800dd6c:	0800f404 	.word	0x0800f404
 800dd70:	0800f424 	.word	0x0800f424
 800dd74:	0800f3e4 	.word	0x0800f3e4

0800dd78 <__ascii_wctomb>:
 800dd78:	b149      	cbz	r1, 800dd8e <__ascii_wctomb+0x16>
 800dd7a:	2aff      	cmp	r2, #255	; 0xff
 800dd7c:	bf85      	ittet	hi
 800dd7e:	238a      	movhi	r3, #138	; 0x8a
 800dd80:	6003      	strhi	r3, [r0, #0]
 800dd82:	700a      	strbls	r2, [r1, #0]
 800dd84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dd88:	bf98      	it	ls
 800dd8a:	2001      	movls	r0, #1
 800dd8c:	4770      	bx	lr
 800dd8e:	4608      	mov	r0, r1
 800dd90:	4770      	bx	lr
	...

0800dd94 <__swsetup_r>:
 800dd94:	4b32      	ldr	r3, [pc, #200]	; (800de60 <__swsetup_r+0xcc>)
 800dd96:	b570      	push	{r4, r5, r6, lr}
 800dd98:	681d      	ldr	r5, [r3, #0]
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	460c      	mov	r4, r1
 800dd9e:	b125      	cbz	r5, 800ddaa <__swsetup_r+0x16>
 800dda0:	69ab      	ldr	r3, [r5, #24]
 800dda2:	b913      	cbnz	r3, 800ddaa <__swsetup_r+0x16>
 800dda4:	4628      	mov	r0, r5
 800dda6:	f000 f985 	bl	800e0b4 <__sinit>
 800ddaa:	4b2e      	ldr	r3, [pc, #184]	; (800de64 <__swsetup_r+0xd0>)
 800ddac:	429c      	cmp	r4, r3
 800ddae:	d10f      	bne.n	800ddd0 <__swsetup_r+0x3c>
 800ddb0:	686c      	ldr	r4, [r5, #4]
 800ddb2:	89a3      	ldrh	r3, [r4, #12]
 800ddb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddb8:	0719      	lsls	r1, r3, #28
 800ddba:	d42c      	bmi.n	800de16 <__swsetup_r+0x82>
 800ddbc:	06dd      	lsls	r5, r3, #27
 800ddbe:	d411      	bmi.n	800dde4 <__swsetup_r+0x50>
 800ddc0:	2309      	movs	r3, #9
 800ddc2:	6033      	str	r3, [r6, #0]
 800ddc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ddc8:	81a3      	strh	r3, [r4, #12]
 800ddca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddce:	e03e      	b.n	800de4e <__swsetup_r+0xba>
 800ddd0:	4b25      	ldr	r3, [pc, #148]	; (800de68 <__swsetup_r+0xd4>)
 800ddd2:	429c      	cmp	r4, r3
 800ddd4:	d101      	bne.n	800ddda <__swsetup_r+0x46>
 800ddd6:	68ac      	ldr	r4, [r5, #8]
 800ddd8:	e7eb      	b.n	800ddb2 <__swsetup_r+0x1e>
 800ddda:	4b24      	ldr	r3, [pc, #144]	; (800de6c <__swsetup_r+0xd8>)
 800dddc:	429c      	cmp	r4, r3
 800ddde:	bf08      	it	eq
 800dde0:	68ec      	ldreq	r4, [r5, #12]
 800dde2:	e7e6      	b.n	800ddb2 <__swsetup_r+0x1e>
 800dde4:	0758      	lsls	r0, r3, #29
 800dde6:	d512      	bpl.n	800de0e <__swsetup_r+0x7a>
 800dde8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddea:	b141      	cbz	r1, 800ddfe <__swsetup_r+0x6a>
 800ddec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddf0:	4299      	cmp	r1, r3
 800ddf2:	d002      	beq.n	800ddfa <__swsetup_r+0x66>
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f7ff fb89 	bl	800d50c <_free_r>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	6363      	str	r3, [r4, #52]	; 0x34
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de04:	81a3      	strh	r3, [r4, #12]
 800de06:	2300      	movs	r3, #0
 800de08:	6063      	str	r3, [r4, #4]
 800de0a:	6923      	ldr	r3, [r4, #16]
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	89a3      	ldrh	r3, [r4, #12]
 800de10:	f043 0308 	orr.w	r3, r3, #8
 800de14:	81a3      	strh	r3, [r4, #12]
 800de16:	6923      	ldr	r3, [r4, #16]
 800de18:	b94b      	cbnz	r3, 800de2e <__swsetup_r+0x9a>
 800de1a:	89a3      	ldrh	r3, [r4, #12]
 800de1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de24:	d003      	beq.n	800de2e <__swsetup_r+0x9a>
 800de26:	4621      	mov	r1, r4
 800de28:	4630      	mov	r0, r6
 800de2a:	f000 fa07 	bl	800e23c <__smakebuf_r>
 800de2e:	89a0      	ldrh	r0, [r4, #12]
 800de30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de34:	f010 0301 	ands.w	r3, r0, #1
 800de38:	d00a      	beq.n	800de50 <__swsetup_r+0xbc>
 800de3a:	2300      	movs	r3, #0
 800de3c:	60a3      	str	r3, [r4, #8]
 800de3e:	6963      	ldr	r3, [r4, #20]
 800de40:	425b      	negs	r3, r3
 800de42:	61a3      	str	r3, [r4, #24]
 800de44:	6923      	ldr	r3, [r4, #16]
 800de46:	b943      	cbnz	r3, 800de5a <__swsetup_r+0xc6>
 800de48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de4c:	d1ba      	bne.n	800ddc4 <__swsetup_r+0x30>
 800de4e:	bd70      	pop	{r4, r5, r6, pc}
 800de50:	0781      	lsls	r1, r0, #30
 800de52:	bf58      	it	pl
 800de54:	6963      	ldrpl	r3, [r4, #20]
 800de56:	60a3      	str	r3, [r4, #8]
 800de58:	e7f4      	b.n	800de44 <__swsetup_r+0xb0>
 800de5a:	2000      	movs	r0, #0
 800de5c:	e7f7      	b.n	800de4e <__swsetup_r+0xba>
 800de5e:	bf00      	nop
 800de60:	20000010 	.word	0x20000010
 800de64:	0800f404 	.word	0x0800f404
 800de68:	0800f424 	.word	0x0800f424
 800de6c:	0800f3e4 	.word	0x0800f3e4

0800de70 <abort>:
 800de70:	b508      	push	{r3, lr}
 800de72:	2006      	movs	r0, #6
 800de74:	f000 fa52 	bl	800e31c <raise>
 800de78:	2001      	movs	r0, #1
 800de7a:	f7f6 fa1f 	bl	80042bc <_exit>
	...

0800de80 <__sflush_r>:
 800de80:	898a      	ldrh	r2, [r1, #12]
 800de82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de86:	4605      	mov	r5, r0
 800de88:	0710      	lsls	r0, r2, #28
 800de8a:	460c      	mov	r4, r1
 800de8c:	d458      	bmi.n	800df40 <__sflush_r+0xc0>
 800de8e:	684b      	ldr	r3, [r1, #4]
 800de90:	2b00      	cmp	r3, #0
 800de92:	dc05      	bgt.n	800dea0 <__sflush_r+0x20>
 800de94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de96:	2b00      	cmp	r3, #0
 800de98:	dc02      	bgt.n	800dea0 <__sflush_r+0x20>
 800de9a:	2000      	movs	r0, #0
 800de9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dea2:	2e00      	cmp	r6, #0
 800dea4:	d0f9      	beq.n	800de9a <__sflush_r+0x1a>
 800dea6:	2300      	movs	r3, #0
 800dea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800deac:	682f      	ldr	r7, [r5, #0]
 800deae:	602b      	str	r3, [r5, #0]
 800deb0:	d032      	beq.n	800df18 <__sflush_r+0x98>
 800deb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800deb4:	89a3      	ldrh	r3, [r4, #12]
 800deb6:	075a      	lsls	r2, r3, #29
 800deb8:	d505      	bpl.n	800dec6 <__sflush_r+0x46>
 800deba:	6863      	ldr	r3, [r4, #4]
 800debc:	1ac0      	subs	r0, r0, r3
 800debe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dec0:	b10b      	cbz	r3, 800dec6 <__sflush_r+0x46>
 800dec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dec4:	1ac0      	subs	r0, r0, r3
 800dec6:	2300      	movs	r3, #0
 800dec8:	4602      	mov	r2, r0
 800deca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800decc:	6a21      	ldr	r1, [r4, #32]
 800dece:	4628      	mov	r0, r5
 800ded0:	47b0      	blx	r6
 800ded2:	1c43      	adds	r3, r0, #1
 800ded4:	89a3      	ldrh	r3, [r4, #12]
 800ded6:	d106      	bne.n	800dee6 <__sflush_r+0x66>
 800ded8:	6829      	ldr	r1, [r5, #0]
 800deda:	291d      	cmp	r1, #29
 800dedc:	d82c      	bhi.n	800df38 <__sflush_r+0xb8>
 800dede:	4a2a      	ldr	r2, [pc, #168]	; (800df88 <__sflush_r+0x108>)
 800dee0:	40ca      	lsrs	r2, r1
 800dee2:	07d6      	lsls	r6, r2, #31
 800dee4:	d528      	bpl.n	800df38 <__sflush_r+0xb8>
 800dee6:	2200      	movs	r2, #0
 800dee8:	6062      	str	r2, [r4, #4]
 800deea:	04d9      	lsls	r1, r3, #19
 800deec:	6922      	ldr	r2, [r4, #16]
 800deee:	6022      	str	r2, [r4, #0]
 800def0:	d504      	bpl.n	800defc <__sflush_r+0x7c>
 800def2:	1c42      	adds	r2, r0, #1
 800def4:	d101      	bne.n	800defa <__sflush_r+0x7a>
 800def6:	682b      	ldr	r3, [r5, #0]
 800def8:	b903      	cbnz	r3, 800defc <__sflush_r+0x7c>
 800defa:	6560      	str	r0, [r4, #84]	; 0x54
 800defc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800defe:	602f      	str	r7, [r5, #0]
 800df00:	2900      	cmp	r1, #0
 800df02:	d0ca      	beq.n	800de9a <__sflush_r+0x1a>
 800df04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df08:	4299      	cmp	r1, r3
 800df0a:	d002      	beq.n	800df12 <__sflush_r+0x92>
 800df0c:	4628      	mov	r0, r5
 800df0e:	f7ff fafd 	bl	800d50c <_free_r>
 800df12:	2000      	movs	r0, #0
 800df14:	6360      	str	r0, [r4, #52]	; 0x34
 800df16:	e7c1      	b.n	800de9c <__sflush_r+0x1c>
 800df18:	6a21      	ldr	r1, [r4, #32]
 800df1a:	2301      	movs	r3, #1
 800df1c:	4628      	mov	r0, r5
 800df1e:	47b0      	blx	r6
 800df20:	1c41      	adds	r1, r0, #1
 800df22:	d1c7      	bne.n	800deb4 <__sflush_r+0x34>
 800df24:	682b      	ldr	r3, [r5, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d0c4      	beq.n	800deb4 <__sflush_r+0x34>
 800df2a:	2b1d      	cmp	r3, #29
 800df2c:	d001      	beq.n	800df32 <__sflush_r+0xb2>
 800df2e:	2b16      	cmp	r3, #22
 800df30:	d101      	bne.n	800df36 <__sflush_r+0xb6>
 800df32:	602f      	str	r7, [r5, #0]
 800df34:	e7b1      	b.n	800de9a <__sflush_r+0x1a>
 800df36:	89a3      	ldrh	r3, [r4, #12]
 800df38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df3c:	81a3      	strh	r3, [r4, #12]
 800df3e:	e7ad      	b.n	800de9c <__sflush_r+0x1c>
 800df40:	690f      	ldr	r7, [r1, #16]
 800df42:	2f00      	cmp	r7, #0
 800df44:	d0a9      	beq.n	800de9a <__sflush_r+0x1a>
 800df46:	0793      	lsls	r3, r2, #30
 800df48:	680e      	ldr	r6, [r1, #0]
 800df4a:	bf08      	it	eq
 800df4c:	694b      	ldreq	r3, [r1, #20]
 800df4e:	600f      	str	r7, [r1, #0]
 800df50:	bf18      	it	ne
 800df52:	2300      	movne	r3, #0
 800df54:	eba6 0807 	sub.w	r8, r6, r7
 800df58:	608b      	str	r3, [r1, #8]
 800df5a:	f1b8 0f00 	cmp.w	r8, #0
 800df5e:	dd9c      	ble.n	800de9a <__sflush_r+0x1a>
 800df60:	6a21      	ldr	r1, [r4, #32]
 800df62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df64:	4643      	mov	r3, r8
 800df66:	463a      	mov	r2, r7
 800df68:	4628      	mov	r0, r5
 800df6a:	47b0      	blx	r6
 800df6c:	2800      	cmp	r0, #0
 800df6e:	dc06      	bgt.n	800df7e <__sflush_r+0xfe>
 800df70:	89a3      	ldrh	r3, [r4, #12]
 800df72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df76:	81a3      	strh	r3, [r4, #12]
 800df78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df7c:	e78e      	b.n	800de9c <__sflush_r+0x1c>
 800df7e:	4407      	add	r7, r0
 800df80:	eba8 0800 	sub.w	r8, r8, r0
 800df84:	e7e9      	b.n	800df5a <__sflush_r+0xda>
 800df86:	bf00      	nop
 800df88:	20400001 	.word	0x20400001

0800df8c <_fflush_r>:
 800df8c:	b538      	push	{r3, r4, r5, lr}
 800df8e:	690b      	ldr	r3, [r1, #16]
 800df90:	4605      	mov	r5, r0
 800df92:	460c      	mov	r4, r1
 800df94:	b913      	cbnz	r3, 800df9c <_fflush_r+0x10>
 800df96:	2500      	movs	r5, #0
 800df98:	4628      	mov	r0, r5
 800df9a:	bd38      	pop	{r3, r4, r5, pc}
 800df9c:	b118      	cbz	r0, 800dfa6 <_fflush_r+0x1a>
 800df9e:	6983      	ldr	r3, [r0, #24]
 800dfa0:	b90b      	cbnz	r3, 800dfa6 <_fflush_r+0x1a>
 800dfa2:	f000 f887 	bl	800e0b4 <__sinit>
 800dfa6:	4b14      	ldr	r3, [pc, #80]	; (800dff8 <_fflush_r+0x6c>)
 800dfa8:	429c      	cmp	r4, r3
 800dfaa:	d11b      	bne.n	800dfe4 <_fflush_r+0x58>
 800dfac:	686c      	ldr	r4, [r5, #4]
 800dfae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d0ef      	beq.n	800df96 <_fflush_r+0xa>
 800dfb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfb8:	07d0      	lsls	r0, r2, #31
 800dfba:	d404      	bmi.n	800dfc6 <_fflush_r+0x3a>
 800dfbc:	0599      	lsls	r1, r3, #22
 800dfbe:	d402      	bmi.n	800dfc6 <_fflush_r+0x3a>
 800dfc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfc2:	f000 f915 	bl	800e1f0 <__retarget_lock_acquire_recursive>
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	4621      	mov	r1, r4
 800dfca:	f7ff ff59 	bl	800de80 <__sflush_r>
 800dfce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfd0:	07da      	lsls	r2, r3, #31
 800dfd2:	4605      	mov	r5, r0
 800dfd4:	d4e0      	bmi.n	800df98 <_fflush_r+0xc>
 800dfd6:	89a3      	ldrh	r3, [r4, #12]
 800dfd8:	059b      	lsls	r3, r3, #22
 800dfda:	d4dd      	bmi.n	800df98 <_fflush_r+0xc>
 800dfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfde:	f000 f908 	bl	800e1f2 <__retarget_lock_release_recursive>
 800dfe2:	e7d9      	b.n	800df98 <_fflush_r+0xc>
 800dfe4:	4b05      	ldr	r3, [pc, #20]	; (800dffc <_fflush_r+0x70>)
 800dfe6:	429c      	cmp	r4, r3
 800dfe8:	d101      	bne.n	800dfee <_fflush_r+0x62>
 800dfea:	68ac      	ldr	r4, [r5, #8]
 800dfec:	e7df      	b.n	800dfae <_fflush_r+0x22>
 800dfee:	4b04      	ldr	r3, [pc, #16]	; (800e000 <_fflush_r+0x74>)
 800dff0:	429c      	cmp	r4, r3
 800dff2:	bf08      	it	eq
 800dff4:	68ec      	ldreq	r4, [r5, #12]
 800dff6:	e7da      	b.n	800dfae <_fflush_r+0x22>
 800dff8:	0800f404 	.word	0x0800f404
 800dffc:	0800f424 	.word	0x0800f424
 800e000:	0800f3e4 	.word	0x0800f3e4

0800e004 <std>:
 800e004:	2300      	movs	r3, #0
 800e006:	b510      	push	{r4, lr}
 800e008:	4604      	mov	r4, r0
 800e00a:	e9c0 3300 	strd	r3, r3, [r0]
 800e00e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e012:	6083      	str	r3, [r0, #8]
 800e014:	8181      	strh	r1, [r0, #12]
 800e016:	6643      	str	r3, [r0, #100]	; 0x64
 800e018:	81c2      	strh	r2, [r0, #14]
 800e01a:	6183      	str	r3, [r0, #24]
 800e01c:	4619      	mov	r1, r3
 800e01e:	2208      	movs	r2, #8
 800e020:	305c      	adds	r0, #92	; 0x5c
 800e022:	f7fd fbcd 	bl	800b7c0 <memset>
 800e026:	4b05      	ldr	r3, [pc, #20]	; (800e03c <std+0x38>)
 800e028:	6263      	str	r3, [r4, #36]	; 0x24
 800e02a:	4b05      	ldr	r3, [pc, #20]	; (800e040 <std+0x3c>)
 800e02c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e02e:	4b05      	ldr	r3, [pc, #20]	; (800e044 <std+0x40>)
 800e030:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e032:	4b05      	ldr	r3, [pc, #20]	; (800e048 <std+0x44>)
 800e034:	6224      	str	r4, [r4, #32]
 800e036:	6323      	str	r3, [r4, #48]	; 0x30
 800e038:	bd10      	pop	{r4, pc}
 800e03a:	bf00      	nop
 800e03c:	0800e355 	.word	0x0800e355
 800e040:	0800e377 	.word	0x0800e377
 800e044:	0800e3af 	.word	0x0800e3af
 800e048:	0800e3d3 	.word	0x0800e3d3

0800e04c <_cleanup_r>:
 800e04c:	4901      	ldr	r1, [pc, #4]	; (800e054 <_cleanup_r+0x8>)
 800e04e:	f000 b8af 	b.w	800e1b0 <_fwalk_reent>
 800e052:	bf00      	nop
 800e054:	0800df8d 	.word	0x0800df8d

0800e058 <__sfmoreglue>:
 800e058:	b570      	push	{r4, r5, r6, lr}
 800e05a:	1e4a      	subs	r2, r1, #1
 800e05c:	2568      	movs	r5, #104	; 0x68
 800e05e:	4355      	muls	r5, r2
 800e060:	460e      	mov	r6, r1
 800e062:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e066:	f7ff faa1 	bl	800d5ac <_malloc_r>
 800e06a:	4604      	mov	r4, r0
 800e06c:	b140      	cbz	r0, 800e080 <__sfmoreglue+0x28>
 800e06e:	2100      	movs	r1, #0
 800e070:	e9c0 1600 	strd	r1, r6, [r0]
 800e074:	300c      	adds	r0, #12
 800e076:	60a0      	str	r0, [r4, #8]
 800e078:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e07c:	f7fd fba0 	bl	800b7c0 <memset>
 800e080:	4620      	mov	r0, r4
 800e082:	bd70      	pop	{r4, r5, r6, pc}

0800e084 <__sfp_lock_acquire>:
 800e084:	4801      	ldr	r0, [pc, #4]	; (800e08c <__sfp_lock_acquire+0x8>)
 800e086:	f000 b8b3 	b.w	800e1f0 <__retarget_lock_acquire_recursive>
 800e08a:	bf00      	nop
 800e08c:	2000520c 	.word	0x2000520c

0800e090 <__sfp_lock_release>:
 800e090:	4801      	ldr	r0, [pc, #4]	; (800e098 <__sfp_lock_release+0x8>)
 800e092:	f000 b8ae 	b.w	800e1f2 <__retarget_lock_release_recursive>
 800e096:	bf00      	nop
 800e098:	2000520c 	.word	0x2000520c

0800e09c <__sinit_lock_acquire>:
 800e09c:	4801      	ldr	r0, [pc, #4]	; (800e0a4 <__sinit_lock_acquire+0x8>)
 800e09e:	f000 b8a7 	b.w	800e1f0 <__retarget_lock_acquire_recursive>
 800e0a2:	bf00      	nop
 800e0a4:	20005207 	.word	0x20005207

0800e0a8 <__sinit_lock_release>:
 800e0a8:	4801      	ldr	r0, [pc, #4]	; (800e0b0 <__sinit_lock_release+0x8>)
 800e0aa:	f000 b8a2 	b.w	800e1f2 <__retarget_lock_release_recursive>
 800e0ae:	bf00      	nop
 800e0b0:	20005207 	.word	0x20005207

0800e0b4 <__sinit>:
 800e0b4:	b510      	push	{r4, lr}
 800e0b6:	4604      	mov	r4, r0
 800e0b8:	f7ff fff0 	bl	800e09c <__sinit_lock_acquire>
 800e0bc:	69a3      	ldr	r3, [r4, #24]
 800e0be:	b11b      	cbz	r3, 800e0c8 <__sinit+0x14>
 800e0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0c4:	f7ff bff0 	b.w	800e0a8 <__sinit_lock_release>
 800e0c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0cc:	6523      	str	r3, [r4, #80]	; 0x50
 800e0ce:	4b13      	ldr	r3, [pc, #76]	; (800e11c <__sinit+0x68>)
 800e0d0:	4a13      	ldr	r2, [pc, #76]	; (800e120 <__sinit+0x6c>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0d6:	42a3      	cmp	r3, r4
 800e0d8:	bf04      	itt	eq
 800e0da:	2301      	moveq	r3, #1
 800e0dc:	61a3      	streq	r3, [r4, #24]
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f000 f820 	bl	800e124 <__sfp>
 800e0e4:	6060      	str	r0, [r4, #4]
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f000 f81c 	bl	800e124 <__sfp>
 800e0ec:	60a0      	str	r0, [r4, #8]
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f000 f818 	bl	800e124 <__sfp>
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	60e0      	str	r0, [r4, #12]
 800e0f8:	2104      	movs	r1, #4
 800e0fa:	6860      	ldr	r0, [r4, #4]
 800e0fc:	f7ff ff82 	bl	800e004 <std>
 800e100:	68a0      	ldr	r0, [r4, #8]
 800e102:	2201      	movs	r2, #1
 800e104:	2109      	movs	r1, #9
 800e106:	f7ff ff7d 	bl	800e004 <std>
 800e10a:	68e0      	ldr	r0, [r4, #12]
 800e10c:	2202      	movs	r2, #2
 800e10e:	2112      	movs	r1, #18
 800e110:	f7ff ff78 	bl	800e004 <std>
 800e114:	2301      	movs	r3, #1
 800e116:	61a3      	str	r3, [r4, #24]
 800e118:	e7d2      	b.n	800e0c0 <__sinit+0xc>
 800e11a:	bf00      	nop
 800e11c:	0800f060 	.word	0x0800f060
 800e120:	0800e04d 	.word	0x0800e04d

0800e124 <__sfp>:
 800e124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e126:	4607      	mov	r7, r0
 800e128:	f7ff ffac 	bl	800e084 <__sfp_lock_acquire>
 800e12c:	4b1e      	ldr	r3, [pc, #120]	; (800e1a8 <__sfp+0x84>)
 800e12e:	681e      	ldr	r6, [r3, #0]
 800e130:	69b3      	ldr	r3, [r6, #24]
 800e132:	b913      	cbnz	r3, 800e13a <__sfp+0x16>
 800e134:	4630      	mov	r0, r6
 800e136:	f7ff ffbd 	bl	800e0b4 <__sinit>
 800e13a:	3648      	adds	r6, #72	; 0x48
 800e13c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e140:	3b01      	subs	r3, #1
 800e142:	d503      	bpl.n	800e14c <__sfp+0x28>
 800e144:	6833      	ldr	r3, [r6, #0]
 800e146:	b30b      	cbz	r3, 800e18c <__sfp+0x68>
 800e148:	6836      	ldr	r6, [r6, #0]
 800e14a:	e7f7      	b.n	800e13c <__sfp+0x18>
 800e14c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e150:	b9d5      	cbnz	r5, 800e188 <__sfp+0x64>
 800e152:	4b16      	ldr	r3, [pc, #88]	; (800e1ac <__sfp+0x88>)
 800e154:	60e3      	str	r3, [r4, #12]
 800e156:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e15a:	6665      	str	r5, [r4, #100]	; 0x64
 800e15c:	f000 f847 	bl	800e1ee <__retarget_lock_init_recursive>
 800e160:	f7ff ff96 	bl	800e090 <__sfp_lock_release>
 800e164:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e168:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e16c:	6025      	str	r5, [r4, #0]
 800e16e:	61a5      	str	r5, [r4, #24]
 800e170:	2208      	movs	r2, #8
 800e172:	4629      	mov	r1, r5
 800e174:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e178:	f7fd fb22 	bl	800b7c0 <memset>
 800e17c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e180:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e184:	4620      	mov	r0, r4
 800e186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e188:	3468      	adds	r4, #104	; 0x68
 800e18a:	e7d9      	b.n	800e140 <__sfp+0x1c>
 800e18c:	2104      	movs	r1, #4
 800e18e:	4638      	mov	r0, r7
 800e190:	f7ff ff62 	bl	800e058 <__sfmoreglue>
 800e194:	4604      	mov	r4, r0
 800e196:	6030      	str	r0, [r6, #0]
 800e198:	2800      	cmp	r0, #0
 800e19a:	d1d5      	bne.n	800e148 <__sfp+0x24>
 800e19c:	f7ff ff78 	bl	800e090 <__sfp_lock_release>
 800e1a0:	230c      	movs	r3, #12
 800e1a2:	603b      	str	r3, [r7, #0]
 800e1a4:	e7ee      	b.n	800e184 <__sfp+0x60>
 800e1a6:	bf00      	nop
 800e1a8:	0800f060 	.word	0x0800f060
 800e1ac:	ffff0001 	.word	0xffff0001

0800e1b0 <_fwalk_reent>:
 800e1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1b4:	4606      	mov	r6, r0
 800e1b6:	4688      	mov	r8, r1
 800e1b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1bc:	2700      	movs	r7, #0
 800e1be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1c2:	f1b9 0901 	subs.w	r9, r9, #1
 800e1c6:	d505      	bpl.n	800e1d4 <_fwalk_reent+0x24>
 800e1c8:	6824      	ldr	r4, [r4, #0]
 800e1ca:	2c00      	cmp	r4, #0
 800e1cc:	d1f7      	bne.n	800e1be <_fwalk_reent+0xe>
 800e1ce:	4638      	mov	r0, r7
 800e1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d4:	89ab      	ldrh	r3, [r5, #12]
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d907      	bls.n	800e1ea <_fwalk_reent+0x3a>
 800e1da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	d003      	beq.n	800e1ea <_fwalk_reent+0x3a>
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	47c0      	blx	r8
 800e1e8:	4307      	orrs	r7, r0
 800e1ea:	3568      	adds	r5, #104	; 0x68
 800e1ec:	e7e9      	b.n	800e1c2 <_fwalk_reent+0x12>

0800e1ee <__retarget_lock_init_recursive>:
 800e1ee:	4770      	bx	lr

0800e1f0 <__retarget_lock_acquire_recursive>:
 800e1f0:	4770      	bx	lr

0800e1f2 <__retarget_lock_release_recursive>:
 800e1f2:	4770      	bx	lr

0800e1f4 <__swhatbuf_r>:
 800e1f4:	b570      	push	{r4, r5, r6, lr}
 800e1f6:	460e      	mov	r6, r1
 800e1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1fc:	2900      	cmp	r1, #0
 800e1fe:	b096      	sub	sp, #88	; 0x58
 800e200:	4614      	mov	r4, r2
 800e202:	461d      	mov	r5, r3
 800e204:	da07      	bge.n	800e216 <__swhatbuf_r+0x22>
 800e206:	2300      	movs	r3, #0
 800e208:	602b      	str	r3, [r5, #0]
 800e20a:	89b3      	ldrh	r3, [r6, #12]
 800e20c:	061a      	lsls	r2, r3, #24
 800e20e:	d410      	bmi.n	800e232 <__swhatbuf_r+0x3e>
 800e210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e214:	e00e      	b.n	800e234 <__swhatbuf_r+0x40>
 800e216:	466a      	mov	r2, sp
 800e218:	f000 f902 	bl	800e420 <_fstat_r>
 800e21c:	2800      	cmp	r0, #0
 800e21e:	dbf2      	blt.n	800e206 <__swhatbuf_r+0x12>
 800e220:	9a01      	ldr	r2, [sp, #4]
 800e222:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e226:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e22a:	425a      	negs	r2, r3
 800e22c:	415a      	adcs	r2, r3
 800e22e:	602a      	str	r2, [r5, #0]
 800e230:	e7ee      	b.n	800e210 <__swhatbuf_r+0x1c>
 800e232:	2340      	movs	r3, #64	; 0x40
 800e234:	2000      	movs	r0, #0
 800e236:	6023      	str	r3, [r4, #0]
 800e238:	b016      	add	sp, #88	; 0x58
 800e23a:	bd70      	pop	{r4, r5, r6, pc}

0800e23c <__smakebuf_r>:
 800e23c:	898b      	ldrh	r3, [r1, #12]
 800e23e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e240:	079d      	lsls	r5, r3, #30
 800e242:	4606      	mov	r6, r0
 800e244:	460c      	mov	r4, r1
 800e246:	d507      	bpl.n	800e258 <__smakebuf_r+0x1c>
 800e248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e24c:	6023      	str	r3, [r4, #0]
 800e24e:	6123      	str	r3, [r4, #16]
 800e250:	2301      	movs	r3, #1
 800e252:	6163      	str	r3, [r4, #20]
 800e254:	b002      	add	sp, #8
 800e256:	bd70      	pop	{r4, r5, r6, pc}
 800e258:	ab01      	add	r3, sp, #4
 800e25a:	466a      	mov	r2, sp
 800e25c:	f7ff ffca 	bl	800e1f4 <__swhatbuf_r>
 800e260:	9900      	ldr	r1, [sp, #0]
 800e262:	4605      	mov	r5, r0
 800e264:	4630      	mov	r0, r6
 800e266:	f7ff f9a1 	bl	800d5ac <_malloc_r>
 800e26a:	b948      	cbnz	r0, 800e280 <__smakebuf_r+0x44>
 800e26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e270:	059a      	lsls	r2, r3, #22
 800e272:	d4ef      	bmi.n	800e254 <__smakebuf_r+0x18>
 800e274:	f023 0303 	bic.w	r3, r3, #3
 800e278:	f043 0302 	orr.w	r3, r3, #2
 800e27c:	81a3      	strh	r3, [r4, #12]
 800e27e:	e7e3      	b.n	800e248 <__smakebuf_r+0xc>
 800e280:	4b0d      	ldr	r3, [pc, #52]	; (800e2b8 <__smakebuf_r+0x7c>)
 800e282:	62b3      	str	r3, [r6, #40]	; 0x28
 800e284:	89a3      	ldrh	r3, [r4, #12]
 800e286:	6020      	str	r0, [r4, #0]
 800e288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e28c:	81a3      	strh	r3, [r4, #12]
 800e28e:	9b00      	ldr	r3, [sp, #0]
 800e290:	6163      	str	r3, [r4, #20]
 800e292:	9b01      	ldr	r3, [sp, #4]
 800e294:	6120      	str	r0, [r4, #16]
 800e296:	b15b      	cbz	r3, 800e2b0 <__smakebuf_r+0x74>
 800e298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e29c:	4630      	mov	r0, r6
 800e29e:	f000 f8d1 	bl	800e444 <_isatty_r>
 800e2a2:	b128      	cbz	r0, 800e2b0 <__smakebuf_r+0x74>
 800e2a4:	89a3      	ldrh	r3, [r4, #12]
 800e2a6:	f023 0303 	bic.w	r3, r3, #3
 800e2aa:	f043 0301 	orr.w	r3, r3, #1
 800e2ae:	81a3      	strh	r3, [r4, #12]
 800e2b0:	89a0      	ldrh	r0, [r4, #12]
 800e2b2:	4305      	orrs	r5, r0
 800e2b4:	81a5      	strh	r5, [r4, #12]
 800e2b6:	e7cd      	b.n	800e254 <__smakebuf_r+0x18>
 800e2b8:	0800e04d 	.word	0x0800e04d

0800e2bc <_malloc_usable_size_r>:
 800e2bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2c0:	1f18      	subs	r0, r3, #4
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	bfbc      	itt	lt
 800e2c6:	580b      	ldrlt	r3, [r1, r0]
 800e2c8:	18c0      	addlt	r0, r0, r3
 800e2ca:	4770      	bx	lr

0800e2cc <_raise_r>:
 800e2cc:	291f      	cmp	r1, #31
 800e2ce:	b538      	push	{r3, r4, r5, lr}
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	d904      	bls.n	800e2e0 <_raise_r+0x14>
 800e2d6:	2316      	movs	r3, #22
 800e2d8:	6003      	str	r3, [r0, #0]
 800e2da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2de:	bd38      	pop	{r3, r4, r5, pc}
 800e2e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2e2:	b112      	cbz	r2, 800e2ea <_raise_r+0x1e>
 800e2e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2e8:	b94b      	cbnz	r3, 800e2fe <_raise_r+0x32>
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	f000 f830 	bl	800e350 <_getpid_r>
 800e2f0:	462a      	mov	r2, r5
 800e2f2:	4601      	mov	r1, r0
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2fa:	f000 b817 	b.w	800e32c <_kill_r>
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d00a      	beq.n	800e318 <_raise_r+0x4c>
 800e302:	1c59      	adds	r1, r3, #1
 800e304:	d103      	bne.n	800e30e <_raise_r+0x42>
 800e306:	2316      	movs	r3, #22
 800e308:	6003      	str	r3, [r0, #0]
 800e30a:	2001      	movs	r0, #1
 800e30c:	e7e7      	b.n	800e2de <_raise_r+0x12>
 800e30e:	2400      	movs	r4, #0
 800e310:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e314:	4628      	mov	r0, r5
 800e316:	4798      	blx	r3
 800e318:	2000      	movs	r0, #0
 800e31a:	e7e0      	b.n	800e2de <_raise_r+0x12>

0800e31c <raise>:
 800e31c:	4b02      	ldr	r3, [pc, #8]	; (800e328 <raise+0xc>)
 800e31e:	4601      	mov	r1, r0
 800e320:	6818      	ldr	r0, [r3, #0]
 800e322:	f7ff bfd3 	b.w	800e2cc <_raise_r>
 800e326:	bf00      	nop
 800e328:	20000010 	.word	0x20000010

0800e32c <_kill_r>:
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	4d07      	ldr	r5, [pc, #28]	; (800e34c <_kill_r+0x20>)
 800e330:	2300      	movs	r3, #0
 800e332:	4604      	mov	r4, r0
 800e334:	4608      	mov	r0, r1
 800e336:	4611      	mov	r1, r2
 800e338:	602b      	str	r3, [r5, #0]
 800e33a:	f7f5 ffaf 	bl	800429c <_kill>
 800e33e:	1c43      	adds	r3, r0, #1
 800e340:	d102      	bne.n	800e348 <_kill_r+0x1c>
 800e342:	682b      	ldr	r3, [r5, #0]
 800e344:	b103      	cbz	r3, 800e348 <_kill_r+0x1c>
 800e346:	6023      	str	r3, [r4, #0]
 800e348:	bd38      	pop	{r3, r4, r5, pc}
 800e34a:	bf00      	nop
 800e34c:	20005200 	.word	0x20005200

0800e350 <_getpid_r>:
 800e350:	f7f5 bf9c 	b.w	800428c <_getpid>

0800e354 <__sread>:
 800e354:	b510      	push	{r4, lr}
 800e356:	460c      	mov	r4, r1
 800e358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e35c:	f000 f894 	bl	800e488 <_read_r>
 800e360:	2800      	cmp	r0, #0
 800e362:	bfab      	itete	ge
 800e364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e366:	89a3      	ldrhlt	r3, [r4, #12]
 800e368:	181b      	addge	r3, r3, r0
 800e36a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e36e:	bfac      	ite	ge
 800e370:	6563      	strge	r3, [r4, #84]	; 0x54
 800e372:	81a3      	strhlt	r3, [r4, #12]
 800e374:	bd10      	pop	{r4, pc}

0800e376 <__swrite>:
 800e376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e37a:	461f      	mov	r7, r3
 800e37c:	898b      	ldrh	r3, [r1, #12]
 800e37e:	05db      	lsls	r3, r3, #23
 800e380:	4605      	mov	r5, r0
 800e382:	460c      	mov	r4, r1
 800e384:	4616      	mov	r6, r2
 800e386:	d505      	bpl.n	800e394 <__swrite+0x1e>
 800e388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e38c:	2302      	movs	r3, #2
 800e38e:	2200      	movs	r2, #0
 800e390:	f000 f868 	bl	800e464 <_lseek_r>
 800e394:	89a3      	ldrh	r3, [r4, #12]
 800e396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e39a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e39e:	81a3      	strh	r3, [r4, #12]
 800e3a0:	4632      	mov	r2, r6
 800e3a2:	463b      	mov	r3, r7
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3aa:	f000 b817 	b.w	800e3dc <_write_r>

0800e3ae <__sseek>:
 800e3ae:	b510      	push	{r4, lr}
 800e3b0:	460c      	mov	r4, r1
 800e3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3b6:	f000 f855 	bl	800e464 <_lseek_r>
 800e3ba:	1c43      	adds	r3, r0, #1
 800e3bc:	89a3      	ldrh	r3, [r4, #12]
 800e3be:	bf15      	itete	ne
 800e3c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3ca:	81a3      	strheq	r3, [r4, #12]
 800e3cc:	bf18      	it	ne
 800e3ce:	81a3      	strhne	r3, [r4, #12]
 800e3d0:	bd10      	pop	{r4, pc}

0800e3d2 <__sclose>:
 800e3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3d6:	f000 b813 	b.w	800e400 <_close_r>
	...

0800e3dc <_write_r>:
 800e3dc:	b538      	push	{r3, r4, r5, lr}
 800e3de:	4d07      	ldr	r5, [pc, #28]	; (800e3fc <_write_r+0x20>)
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	4608      	mov	r0, r1
 800e3e4:	4611      	mov	r1, r2
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	602a      	str	r2, [r5, #0]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	f7f5 ff8d 	bl	800430a <_write>
 800e3f0:	1c43      	adds	r3, r0, #1
 800e3f2:	d102      	bne.n	800e3fa <_write_r+0x1e>
 800e3f4:	682b      	ldr	r3, [r5, #0]
 800e3f6:	b103      	cbz	r3, 800e3fa <_write_r+0x1e>
 800e3f8:	6023      	str	r3, [r4, #0]
 800e3fa:	bd38      	pop	{r3, r4, r5, pc}
 800e3fc:	20005200 	.word	0x20005200

0800e400 <_close_r>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	4d06      	ldr	r5, [pc, #24]	; (800e41c <_close_r+0x1c>)
 800e404:	2300      	movs	r3, #0
 800e406:	4604      	mov	r4, r0
 800e408:	4608      	mov	r0, r1
 800e40a:	602b      	str	r3, [r5, #0]
 800e40c:	f7f5 ff99 	bl	8004342 <_close>
 800e410:	1c43      	adds	r3, r0, #1
 800e412:	d102      	bne.n	800e41a <_close_r+0x1a>
 800e414:	682b      	ldr	r3, [r5, #0]
 800e416:	b103      	cbz	r3, 800e41a <_close_r+0x1a>
 800e418:	6023      	str	r3, [r4, #0]
 800e41a:	bd38      	pop	{r3, r4, r5, pc}
 800e41c:	20005200 	.word	0x20005200

0800e420 <_fstat_r>:
 800e420:	b538      	push	{r3, r4, r5, lr}
 800e422:	4d07      	ldr	r5, [pc, #28]	; (800e440 <_fstat_r+0x20>)
 800e424:	2300      	movs	r3, #0
 800e426:	4604      	mov	r4, r0
 800e428:	4608      	mov	r0, r1
 800e42a:	4611      	mov	r1, r2
 800e42c:	602b      	str	r3, [r5, #0]
 800e42e:	f7f5 ff94 	bl	800435a <_fstat>
 800e432:	1c43      	adds	r3, r0, #1
 800e434:	d102      	bne.n	800e43c <_fstat_r+0x1c>
 800e436:	682b      	ldr	r3, [r5, #0]
 800e438:	b103      	cbz	r3, 800e43c <_fstat_r+0x1c>
 800e43a:	6023      	str	r3, [r4, #0]
 800e43c:	bd38      	pop	{r3, r4, r5, pc}
 800e43e:	bf00      	nop
 800e440:	20005200 	.word	0x20005200

0800e444 <_isatty_r>:
 800e444:	b538      	push	{r3, r4, r5, lr}
 800e446:	4d06      	ldr	r5, [pc, #24]	; (800e460 <_isatty_r+0x1c>)
 800e448:	2300      	movs	r3, #0
 800e44a:	4604      	mov	r4, r0
 800e44c:	4608      	mov	r0, r1
 800e44e:	602b      	str	r3, [r5, #0]
 800e450:	f7f5 ff93 	bl	800437a <_isatty>
 800e454:	1c43      	adds	r3, r0, #1
 800e456:	d102      	bne.n	800e45e <_isatty_r+0x1a>
 800e458:	682b      	ldr	r3, [r5, #0]
 800e45a:	b103      	cbz	r3, 800e45e <_isatty_r+0x1a>
 800e45c:	6023      	str	r3, [r4, #0]
 800e45e:	bd38      	pop	{r3, r4, r5, pc}
 800e460:	20005200 	.word	0x20005200

0800e464 <_lseek_r>:
 800e464:	b538      	push	{r3, r4, r5, lr}
 800e466:	4d07      	ldr	r5, [pc, #28]	; (800e484 <_lseek_r+0x20>)
 800e468:	4604      	mov	r4, r0
 800e46a:	4608      	mov	r0, r1
 800e46c:	4611      	mov	r1, r2
 800e46e:	2200      	movs	r2, #0
 800e470:	602a      	str	r2, [r5, #0]
 800e472:	461a      	mov	r2, r3
 800e474:	f7f5 ff8c 	bl	8004390 <_lseek>
 800e478:	1c43      	adds	r3, r0, #1
 800e47a:	d102      	bne.n	800e482 <_lseek_r+0x1e>
 800e47c:	682b      	ldr	r3, [r5, #0]
 800e47e:	b103      	cbz	r3, 800e482 <_lseek_r+0x1e>
 800e480:	6023      	str	r3, [r4, #0]
 800e482:	bd38      	pop	{r3, r4, r5, pc}
 800e484:	20005200 	.word	0x20005200

0800e488 <_read_r>:
 800e488:	b538      	push	{r3, r4, r5, lr}
 800e48a:	4d07      	ldr	r5, [pc, #28]	; (800e4a8 <_read_r+0x20>)
 800e48c:	4604      	mov	r4, r0
 800e48e:	4608      	mov	r0, r1
 800e490:	4611      	mov	r1, r2
 800e492:	2200      	movs	r2, #0
 800e494:	602a      	str	r2, [r5, #0]
 800e496:	461a      	mov	r2, r3
 800e498:	f7f5 ff1a 	bl	80042d0 <_read>
 800e49c:	1c43      	adds	r3, r0, #1
 800e49e:	d102      	bne.n	800e4a6 <_read_r+0x1e>
 800e4a0:	682b      	ldr	r3, [r5, #0]
 800e4a2:	b103      	cbz	r3, 800e4a6 <_read_r+0x1e>
 800e4a4:	6023      	str	r3, [r4, #0]
 800e4a6:	bd38      	pop	{r3, r4, r5, pc}
 800e4a8:	20005200 	.word	0x20005200

0800e4ac <_init>:
 800e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ae:	bf00      	nop
 800e4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4b2:	bc08      	pop	{r3}
 800e4b4:	469e      	mov	lr, r3
 800e4b6:	4770      	bx	lr

0800e4b8 <_fini>:
 800e4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ba:	bf00      	nop
 800e4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4be:	bc08      	pop	{r3}
 800e4c0:	469e      	mov	lr, r3
 800e4c2:	4770      	bx	lr
