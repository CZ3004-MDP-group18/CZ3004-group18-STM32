
MDP_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008734  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009470  08009470  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009470  08009470  00019470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009478  08009478  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009478  08009478  00019478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800947c  0800947c  0001947c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004f5c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004fd0  20004fd0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd86  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f85  00000000  00000000  0003fe2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00043db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001730  00000000  00000000  00045658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005b91  00000000  00000000  00046d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ad4d  00000000  00000000  0004c919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edecb  00000000  00000000  00067666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00155531  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b84  00000000  00000000  00155584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088ac 	.word	0x080088ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080088ac 	.word	0x080088ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	601a      	str	r2, [r3, #0]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	601a      	str	r2, [r3, #0]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	431a      	orrs	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	60da      	str	r2, [r3, #12]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	f023 0201 	bic.w	r2, r3, #1
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	60da      	str	r2, [r3, #12]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40023800 	.word	0x40023800

08000620 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <LL_APB1_GRP1_EnableClock+0x2c>)
 800062a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800062c:	4907      	ldr	r1, [pc, #28]	; (800064c <LL_APB1_GRP1_EnableClock+0x2c>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4013      	ands	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	40023800 	.word	0x40023800

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f001 f99a 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f858 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 fb78 	bl	8000d50 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000660:	f000 faa2 	bl	8000ba8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000664:	f000 f9f8 	bl	8000a58 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000668:	f000 f958 	bl	800091c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800066c:	f000 fb46 	bl	8000cfc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000670:	f000 f8fc 	bl	800086c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000674:	f000 f8a8 	bl	80007c8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000678:	f000 fa42 	bl	8000b00 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800067c:	f000 fe68 	bl	8001350 <OLED_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 10);
 8000680:	220a      	movs	r2, #10
 8000682:	4914      	ldr	r1, [pc, #80]	; (80006d4 <main+0x84>)
 8000684:	4814      	ldr	r0, [pc, #80]	; (80006d8 <main+0x88>)
 8000686:	f003 fc66 	bl	8003f56 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800068a:	f004 ff5b 	bl	8005544 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <main+0x8c>)
 8000690:	2100      	movs	r1, #0
 8000692:	4813      	ldr	r0, [pc, #76]	; (80006e0 <main+0x90>)
 8000694:	f004 ffa0 	bl	80055d8 <osThreadNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <main+0x94>)
 800069c:	6013      	str	r3, [r2, #0]

  /* creation of encoder */
  encoderHandle = osThreadNew(Encoder, NULL, &encoder_attributes);
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <main+0x98>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	4812      	ldr	r0, [pc, #72]	; (80006ec <main+0x9c>)
 80006a4:	f004 ff98 	bl	80055d8 <osThreadNew>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <main+0xa0>)
 80006ac:	6013      	str	r3, [r2, #0]

  /* creation of display */
  displayHandle = osThreadNew(Display, NULL, &display_attributes);
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <main+0xa4>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <main+0xa8>)
 80006b4:	f004 ff90 	bl	80055d8 <osThreadNew>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <main+0xac>)
 80006bc:	6013      	str	r3, [r2, #0]

  /* creation of gyroscope */
  gyroscopeHandle = osThreadNew(Gyroscope, NULL, &gyroscope_attributes);
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <main+0xb0>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4810      	ldr	r0, [pc, #64]	; (8000704 <main+0xb4>)
 80006c4:	f004 ff88 	bl	80055d8 <osThreadNew>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <main+0xb8>)
 80006cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006ce:	f004 ff5d 	bl	800558c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006d2:	e7fe      	b.n	80006d2 <main+0x82>
 80006d4:	20004b1c 	.word	0x20004b1c
 80006d8:	200049f8 	.word	0x200049f8
 80006dc:	08008930 	.word	0x08008930
 80006e0:	08000e89 	.word	0x08000e89
 80006e4:	200049ac 	.word	0x200049ac
 80006e8:	08008954 	.word	0x08008954
 80006ec:	08000e99 	.word	0x08000e99
 80006f0:	20004b18 	.word	0x20004b18
 80006f4:	08008978 	.word	0x08008978
 80006f8:	08000f91 	.word	0x08000f91
 80006fc:	20004b78 	.word	0x20004b78
 8000700:	0800899c 	.word	0x0800899c
 8000704:	08000fe5 	.word	0x08000fe5
 8000708:	20004acc 	.word	0x20004acc

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f007 fc9e 	bl	800805c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <SystemClock_Config+0xb4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemClock_Config+0xb4>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <SystemClock_Config+0xb4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <SystemClock_Config+0xb8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <SystemClock_Config+0xb8>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <SystemClock_Config+0xb8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000774:	2300      	movs	r3, #0
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f001 ff7f 	bl	8002680 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000788:	f000 fc36 	bl	8000ff8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 f9e2 	bl	8002b70 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007b2:	f000 fc21 	bl	8000ff8 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_ADC1_Init+0x98>)
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <MX_ADC1_Init+0x9c>)
 80007de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ADC1_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ADC1_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_ADC1_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_ADC1_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_ADC1_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_ADC1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_ADC1_Init+0x98>)
 8000808:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_ADC1_Init+0xa0>)
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_ADC1_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_ADC1_Init+0x98>)
 8000814:	2201      	movs	r2, #1
 8000816:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_ADC1_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_ADC1_Init+0x98>)
 8000822:	2201      	movs	r2, #1
 8000824:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000826:	480e      	ldr	r0, [pc, #56]	; (8000860 <MX_ADC1_Init+0x98>)
 8000828:	f001 f946 	bl	8001ab8 <HAL_ADC_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 fbe1 	bl	8000ff8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000836:	230b      	movs	r3, #11
 8000838:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000842:	463b      	mov	r3, r7
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_ADC1_Init+0x98>)
 8000848:	f001 f97a 	bl	8001b40 <HAL_ADC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000852:	f000 fbd1 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20004a84 	.word	0x20004a84
 8000864:	40012000 	.word	0x40012000
 8000868:	0f000001 	.word	0x0f000001

0800086c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000872:	f107 0318 	add.w	r3, r7, #24
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
 8000882:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
 8000892:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000894:	2002      	movs	r0, #2
 8000896:	f7ff feab 	bl	80005f0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800089a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800089e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008a0:	2302      	movs	r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80008a8:	2301      	movs	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4815      	ldr	r0, [pc, #84]	; (8000910 <MX_I2C1_Init+0xa4>)
 80008ba:	f004 fb3a 	bl	8004f32 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80008be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80008c2:	f7ff fead 	bl	8000620 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80008c6:	4813      	ldr	r0, [pc, #76]	; (8000914 <MX_I2C1_Init+0xa8>)
 80008c8:	f7ff fe81 	bl	80005ce <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_I2C1_Init+0xa8>)
 80008ce:	f7ff fe5b 	bl	8000588 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80008d2:	4810      	ldr	r0, [pc, #64]	; (8000914 <MX_I2C1_Init+0xa8>)
 80008d4:	f7ff fe48 	bl	8000568 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_I2C1_Init+0xac>)
 80008de:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80008e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80008ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80008f4:	f107 0318 	add.w	r3, r7, #24
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_I2C1_Init+0xa8>)
 80008fc:	f004 fc82 	bl	8005204 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8000900:	2100      	movs	r1, #0
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_I2C1_Init+0xa8>)
 8000904:	f7ff fe50 	bl	80005a8 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40020400 	.word	0x40020400
 8000914:	40005400 	.word	0x40005400
 8000918:	000186a0 	.word	0x000186a0

0800091c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b096      	sub	sp, #88	; 0x58
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2220      	movs	r2, #32
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f007 fb81 	bl	800805c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <MX_TIM1_Init+0x134>)
 800095c:	4a3d      	ldr	r2, [pc, #244]	; (8000a54 <MX_TIM1_Init+0x138>)
 800095e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000960:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <MX_TIM1_Init+0x134>)
 8000962:	22a0      	movs	r2, #160	; 0xa0
 8000964:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b3a      	ldr	r3, [pc, #232]	; (8000a50 <MX_TIM1_Init+0x134>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800096c:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <MX_TIM1_Init+0x134>)
 800096e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000972:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <MX_TIM1_Init+0x134>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <MX_TIM1_Init+0x134>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000980:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <MX_TIM1_Init+0x134>)
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000986:	4832      	ldr	r0, [pc, #200]	; (8000a50 <MX_TIM1_Init+0x134>)
 8000988:	f002 fac2 	bl	8002f10 <HAL_TIM_Base_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000992:	f000 fb31 	bl	8000ff8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800099c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009a0:	4619      	mov	r1, r3
 80009a2:	482b      	ldr	r0, [pc, #172]	; (8000a50 <MX_TIM1_Init+0x134>)
 80009a4:	f002 fd52 	bl	800344c <HAL_TIM_ConfigClockSource>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009ae:	f000 fb23 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009b2:	4827      	ldr	r0, [pc, #156]	; (8000a50 <MX_TIM1_Init+0x134>)
 80009b4:	f002 fafb 	bl	8002fae <HAL_TIM_PWM_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009be:	f000 fb1b 	bl	8000ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009ce:	4619      	mov	r1, r3
 80009d0:	481f      	ldr	r0, [pc, #124]	; (8000a50 <MX_TIM1_Init+0x134>)
 80009d2:	f003 f913 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009dc:	f000 fb0c 	bl	8000ff8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e0:	2360      	movs	r3, #96	; 0x60
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	220c      	movs	r2, #12
 80009fe:	4619      	mov	r1, r3
 8000a00:	4813      	ldr	r0, [pc, #76]	; (8000a50 <MX_TIM1_Init+0x134>)
 8000a02:	f002 fc61 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000a0c:	f000 faf4 	bl	8000ff8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4619      	mov	r1, r3
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <MX_TIM1_Init+0x134>)
 8000a34:	f003 f95e 	bl	8003cf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000a3e:	f000 fadb 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a42:	4803      	ldr	r0, [pc, #12]	; (8000a50 <MX_TIM1_Init+0x134>)
 8000a44:	f000 fe78 	bl	8001738 <HAL_TIM_MspPostInit>

}
 8000a48:	bf00      	nop
 8000a4a:	3758      	adds	r7, #88	; 0x58
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20004ad0 	.word	0x20004ad0
 8000a54:	40010000 	.word	0x40010000

08000a58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	; 0x30
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	2224      	movs	r2, #36	; 0x24
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f007 faf8 	bl	800805c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000ac8:	f002 faca 	bl	8003060 <HAL_TIM_Encoder_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ad2:	f000 fa91 	bl	8000ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000ae4:	f003 f88a 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000aee:	f000 fa83 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	3730      	adds	r7, #48	; 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20004b30 	.word	0x20004b30

08000b00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	; 0x30
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2224      	movs	r2, #36	; 0x24
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f007 faa4 	bl	800805c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b1c:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_TIM3_Init+0xa0>)
 8000b1e:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <MX_TIM3_Init+0xa4>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <MX_TIM3_Init+0xa0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_TIM3_Init+0xa0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_TIM3_Init+0xa0>)
 8000b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_TIM3_Init+0xa0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_TIM3_Init+0xa0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b42:	2303      	movs	r3, #3
 8000b44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_TIM3_Init+0xa0>)
 8000b6e:	f002 fa77 	bl	8003060 <HAL_TIM_Encoder_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b78:	f000 fa3e 	bl	8000ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_TIM3_Init+0xa0>)
 8000b8a:	f003 f837 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b94:	f000 fa30 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3730      	adds	r7, #48	; 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20004a3c 	.word	0x20004a3c
 8000ba4:	40000400 	.word	0x40000400

08000ba8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b096      	sub	sp, #88	; 0x58
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
 8000bd6:	615a      	str	r2, [r3, #20]
 8000bd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2220      	movs	r2, #32
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f007 fa3b 	bl	800805c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000be6:	4b43      	ldr	r3, [pc, #268]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000be8:	4a43      	ldr	r2, [pc, #268]	; (8000cf8 <MX_TIM8_Init+0x150>)
 8000bea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000bec:	4b41      	ldr	r3, [pc, #260]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b40      	ldr	r3, [pc, #256]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000bf8:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000bfa:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000bfe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c06:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c12:	4838      	ldr	r0, [pc, #224]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000c14:	f002 f97c 	bl	8002f10 <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000c1e:	f000 f9eb 	bl	8000ff8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000c28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4831      	ldr	r0, [pc, #196]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000c30:	f002 fc0c 	bl	800344c <HAL_TIM_ConfigClockSource>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000c3a:	f000 f9dd 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000c3e:	482d      	ldr	r0, [pc, #180]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000c40:	f002 f9b5 	bl	8002fae <HAL_TIM_PWM_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000c4a:	f000 f9d5 	bl	8000ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4825      	ldr	r0, [pc, #148]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000c5e:	f002 ffcd 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000c68:	f000 f9c6 	bl	8000ff8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6c:	2360      	movs	r3, #96	; 0x60
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000c92:	f002 fb19 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000c9c:	f000 f9ac 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000caa:	f002 fb0d 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000cb4:	f000 f9a0 	bl	8000ff8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <MX_TIM8_Init+0x14c>)
 8000cdc:	f003 f80a 	bl	8003cf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000ce6:	f000 f987 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3758      	adds	r7, #88	; 0x58
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200049b0 	.word	0x200049b0
 8000cf8:	40010400 	.word	0x40010400

08000cfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_USART3_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d34:	f003 f830 	bl	8003d98 <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d3e:	f000 f95b 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200049f8 	.word	0x200049f8
 8000d4c:	40004800 	.word	0x40004800

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b3a      	ldr	r3, [pc, #232]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a39      	ldr	r2, [pc, #228]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b37      	ldr	r3, [pc, #220]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a32      	ldr	r2, [pc, #200]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a2b      	ldr	r2, [pc, #172]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_GPIO_Init+0x104>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000ddc:	481e      	ldr	r0, [pc, #120]	; (8000e58 <MX_GPIO_Init+0x108>)
 8000dde:	f001 fc0d 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	213c      	movs	r1, #60	; 0x3c
 8000de6:	481d      	ldr	r0, [pc, #116]	; (8000e5c <MX_GPIO_Init+0x10c>)
 8000de8:	f001 fc08 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM_INT_GPIO_Port, ICM_INT_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2102      	movs	r1, #2
 8000df0:	4819      	ldr	r0, [pc, #100]	; (8000e58 <MX_GPIO_Init+0x108>)
 8000df2:	f001 fc03 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin;
 8000df6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4812      	ldr	r0, [pc, #72]	; (8000e58 <MX_GPIO_Init+0x108>)
 8000e10:	f001 fa58 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8000e14:	233c      	movs	r3, #60	; 0x3c
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e20:	2302      	movs	r3, #2
 8000e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <MX_GPIO_Init+0x10c>)
 8000e2c:	f001 fa4a 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ICM_INT_Pin */
  GPIO_InitStruct.Pin = ICM_INT_Pin;
 8000e30:	2302      	movs	r3, #2
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ICM_INT_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_GPIO_Init+0x108>)
 8000e48:	f001 fa3c 	bl	80022c4 <HAL_GPIO_Init>

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning*/
	UNUSED(huart);
	HAL_UART_Transmit(&huart3, (uint8_t*) aRxBuffer, 10, 0xFFFF);
 8000e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e6c:	220a      	movs	r2, #10
 8000e6e:	4904      	ldr	r1, [pc, #16]	; (8000e80 <HAL_UART_RxCpltCallback+0x20>)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <HAL_UART_RxCpltCallback+0x24>)
 8000e72:	f002 ffde 	bl	8003e32 <HAL_UART_Transmit>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20004b1c 	.word	0x20004b1c
 8000e84:	200049f8 	.word	0x200049f8

08000e88 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f004 fc33 	bl	80056fc <osDelay>
 8000e96:	e7fb      	b.n	8000e90 <StartDefaultTask+0x8>

08000e98 <Encoder>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Encoder */
void Encoder(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Encoder */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ea0:	213c      	movs	r1, #60	; 0x3c
 8000ea2:	4838      	ldr	r0, [pc, #224]	; (8000f84 <Encoder+0xec>)
 8000ea4:	f002 f982 	bl	80031ac <HAL_TIM_Encoder_Start>

	int cnt1, cnt2, diff;
	uint32_t tick;

	cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <Encoder+0xec>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
	tick = HAL_GetTick();
 8000eb0:	f000 fdd2 	bl	8001a58 <HAL_GetTick>
 8000eb4:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t hello[20];
	uint16_t dir;
	/* Infinite loop */

	for (;;) {
		if (HAL_GetTick() - tick > 1000L) {
 8000eb6:	f000 fdcf 	bl	8001a58 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ec4:	d959      	bls.n	8000f7a <Encoder+0xe2>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <Encoder+0xec>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	623b      	str	r3, [r7, #32]
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <Encoder+0xec>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	2b10      	cmp	r3, #16
 8000eda:	d110      	bne.n	8000efe <Encoder+0x66>
				if (cnt2 < cnt1)
 8000edc:	6a3a      	ldr	r2, [r7, #32]
 8000ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	da04      	bge.n	8000eee <Encoder+0x56>
					diff = cnt1 - cnt2;
 8000ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eec:	e017      	b.n	8000f1e <Encoder+0x86>
				else
					diff = (65535 - cnt2) + cnt1;
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000ef4:	33ff      	adds	r3, #255	; 0xff
 8000ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ef8:	4413      	add	r3, r2
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000efc:	e00f      	b.n	8000f1e <Encoder+0x86>
			} else {
				if (cnt2 > cnt1)
 8000efe:	6a3a      	ldr	r2, [r7, #32]
 8000f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dd04      	ble.n	8000f10 <Encoder+0x78>
					diff = cnt2 - cnt1;
 8000f06:	6a3a      	ldr	r2, [r7, #32]
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f0e:	e006      	b.n	8000f1e <Encoder+0x86>
				else
					diff = (65535 - cnt1) + cnt2;
 8000f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f12:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000f16:	33ff      	adds	r3, #255	; 0xff
 8000f18:	6a3a      	ldr	r2, [r7, #32]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			sprintf(hello, "Speed:%5d", diff);
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f24:	4918      	ldr	r1, [pc, #96]	; (8000f88 <Encoder+0xf0>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f007 f8a0 	bl	800806c <siprintf>
			OLED_ShowString(10, 20, hello);
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	461a      	mov	r2, r3
 8000f32:	2114      	movs	r1, #20
 8000f34:	200a      	movs	r0, #10
 8000f36:	f000 f9d9 	bl	80012ec <OLED_ShowString>
//			HAL_UART_Transmit(&huart3, hello, strlen((char*)hello), HAL_MAX_DELAY);
			dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <Encoder+0xec>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	2b10      	cmp	r3, #16
 8000f46:	bf0c      	ite	eq
 8000f48:	2301      	moveq	r3, #1
 8000f4a:	2300      	movne	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	83fb      	strh	r3, [r7, #30]
			sprintf(hello, "Dir:%5d", dir);
 8000f50:	8bfa      	ldrh	r2, [r7, #30]
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <Encoder+0xf4>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f007 f887 	bl	800806c <siprintf>
			OLED_ShowString(10, 30, hello);
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	461a      	mov	r2, r3
 8000f64:	211e      	movs	r1, #30
 8000f66:	200a      	movs	r0, #10
 8000f68:	f000 f9c0 	bl	80012ec <OLED_ShowString>
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <Encoder+0xec>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
			tick = HAL_GetTick();
 8000f74:	f000 fd70 	bl	8001a58 <HAL_GetTick>
 8000f78:	6278      	str	r0, [r7, #36]	; 0x24
		}
		osDelay(1);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f004 fbbe 	bl	80056fc <osDelay>
		if (HAL_GetTick() - tick > 1000L) {
 8000f80:	e799      	b.n	8000eb6 <Encoder+0x1e>
 8000f82:	bf00      	nop
 8000f84:	20004a3c 	.word	0x20004a3c
 8000f88:	080088ec 	.word	0x080088ec
 8000f8c:	080088f8 	.word	0x080088f8

08000f90 <Display>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display */
	uint8_t display_buf[20] = "Hello World!\0";
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <Display+0x48>)
 8000f9a:	f107 040c 	add.w	r4, r7, #12
 8000f9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa0:	c407      	stmia	r4!, {r0, r1, r2}
 8000fa2:	8023      	strh	r3, [r4, #0]
 8000fa4:	f107 031a 	add.w	r3, r7, #26
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	809a      	strh	r2, [r3, #4]
	/* Infinite loop */
	for (;;) {
		sprintf(display_buf, "%s", aRxBuffer);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <Display+0x4c>)
 8000fb4:	490a      	ldr	r1, [pc, #40]	; (8000fe0 <Display+0x50>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f007 f858 	bl	800806c <siprintf>
		OLED_ShowString(10, 10, display_buf);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	210a      	movs	r1, #10
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f000 f991 	bl	80012ec <OLED_ShowString>
		OLED_Refresh_Gram();
 8000fca:	f000 f81b 	bl	8001004 <OLED_Refresh_Gram>
		osDelay(1000);
 8000fce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd2:	f004 fb93 	bl	80056fc <osDelay>
		sprintf(display_buf, "%s", aRxBuffer);
 8000fd6:	e7ea      	b.n	8000fae <Display+0x1e>
 8000fd8:	08008904 	.word	0x08008904
 8000fdc:	20004b1c 	.word	0x20004b1c
 8000fe0:	08008900 	.word	0x08008900

08000fe4 <Gyroscope>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Gyroscope */
void Gyroscope(void *argument)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Gyroscope */

  /* USER CODE END Gyroscope */
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001000:	e7fe      	b.n	8001000 <Error_Handler+0x8>
	...

08001004 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e026      	b.n	800105e <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	3b50      	subs	r3, #80	; 0x50
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f82b 	bl	8001074 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800101e:	2100      	movs	r1, #0
 8001020:	2000      	movs	r0, #0
 8001022:	f000 f827 	bl	8001074 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8001026:	2100      	movs	r1, #0
 8001028:	2010      	movs	r0, #16
 800102a:	f000 f823 	bl	8001074 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800102e:	2300      	movs	r3, #0
 8001030:	71bb      	strb	r3, [r7, #6]
 8001032:	e00d      	b.n	8001050 <OLED_Refresh_Gram+0x4c>
 8001034:	79ba      	ldrb	r2, [r7, #6]
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	490d      	ldr	r1, [pc, #52]	; (8001070 <OLED_Refresh_Gram+0x6c>)
 800103a:	00d2      	lsls	r2, r2, #3
 800103c:	440a      	add	r2, r1
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2101      	movs	r1, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f815 	bl	8001074 <OLED_WR_Byte>
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	3301      	adds	r3, #1
 800104e:	71bb      	strb	r3, [r7, #6]
 8001050:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001054:	2b00      	cmp	r3, #0
 8001056:	daed      	bge.n	8001034 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	3301      	adds	r3, #1
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b07      	cmp	r3, #7
 8001062:	d9d5      	bls.n	8001010 <OLED_Refresh_Gram+0xc>
	}   
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20004b7c 	.word	0x20004b7c

08001074 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <OLED_WR_Byte+0x90>)
 8001092:	f001 fab3 	bl	80025fc <HAL_GPIO_WritePin>
 8001096:	e005      	b.n	80010a4 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109e:	4819      	ldr	r0, [pc, #100]	; (8001104 <OLED_WR_Byte+0x90>)
 80010a0:	f001 faac 	bl	80025fc <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e01e      	b.n	80010e8 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80010aa:	2200      	movs	r2, #0
 80010ac:	2120      	movs	r1, #32
 80010ae:	4815      	ldr	r0, [pc, #84]	; (8001104 <OLED_WR_Byte+0x90>)
 80010b0:	f001 faa4 	bl	80025fc <HAL_GPIO_WritePin>
		if(dat&0x80)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	da05      	bge.n	80010c8 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80010bc:	2201      	movs	r2, #1
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	4810      	ldr	r0, [pc, #64]	; (8001104 <OLED_WR_Byte+0x90>)
 80010c2:	f001 fa9b 	bl	80025fc <HAL_GPIO_WritePin>
 80010c6:	e004      	b.n	80010d2 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80010c8:	2200      	movs	r2, #0
 80010ca:	2140      	movs	r1, #64	; 0x40
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <OLED_WR_Byte+0x90>)
 80010ce:	f001 fa95 	bl	80025fc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80010d2:	2201      	movs	r2, #1
 80010d4:	2120      	movs	r1, #32
 80010d6:	480b      	ldr	r0, [pc, #44]	; (8001104 <OLED_WR_Byte+0x90>)
 80010d8:	f001 fa90 	bl	80025fc <HAL_GPIO_WritePin>
		dat<<=1;   
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	3301      	adds	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d9dd      	bls.n	80010aa <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <OLED_WR_Byte+0x90>)
 80010f6:	f001 fa81 	bl	80025fc <HAL_GPIO_WritePin>
} 
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800110e:	2300      	movs	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	e014      	b.n	800113e <OLED_Clear+0x36>
 8001114:	2300      	movs	r3, #0
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	e00a      	b.n	8001130 <OLED_Clear+0x28>
 800111a:	79ba      	ldrb	r2, [r7, #6]
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	490c      	ldr	r1, [pc, #48]	; (8001150 <OLED_Clear+0x48>)
 8001120:	00d2      	lsls	r2, r2, #3
 8001122:	440a      	add	r2, r1
 8001124:	4413      	add	r3, r2
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	3301      	adds	r3, #1
 800112e:	71bb      	strb	r3, [r7, #6]
 8001130:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001134:	2b00      	cmp	r3, #0
 8001136:	daf0      	bge.n	800111a <OLED_Clear+0x12>
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	3301      	adds	r3, #1
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b07      	cmp	r3, #7
 8001142:	d9e7      	bls.n	8001114 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8001144:	f7ff ff5e 	bl	8001004 <OLED_Refresh_Gram>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20004b7c 	.word	0x20004b7c

08001154 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	460b      	mov	r3, r1
 8001160:	71bb      	strb	r3, [r7, #6]
 8001162:	4613      	mov	r3, r2
 8001164:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db41      	blt.n	80011f6 <OLED_DrawPoint+0xa2>
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b3f      	cmp	r3, #63	; 0x3f
 8001176:	d83e      	bhi.n	80011f6 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800118c:	7b7b      	ldrb	r3, [r7, #13]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2201      	movs	r2, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800119a:	797b      	ldrb	r3, [r7, #5]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d012      	beq.n	80011c6 <OLED_DrawPoint+0x72>
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	7bbb      	ldrb	r3, [r7, #14]
 80011a4:	4917      	ldr	r1, [pc, #92]	; (8001204 <OLED_DrawPoint+0xb0>)
 80011a6:	00d2      	lsls	r2, r2, #3
 80011a8:	440a      	add	r2, r1
 80011aa:	4413      	add	r3, r2
 80011ac:	7818      	ldrb	r0, [r3, #0]
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	7bf9      	ldrb	r1, [r7, #15]
 80011b4:	4301      	orrs	r1, r0
 80011b6:	b2c8      	uxtb	r0, r1
 80011b8:	4912      	ldr	r1, [pc, #72]	; (8001204 <OLED_DrawPoint+0xb0>)
 80011ba:	00d2      	lsls	r2, r2, #3
 80011bc:	440a      	add	r2, r1
 80011be:	4413      	add	r3, r2
 80011c0:	4602      	mov	r2, r0
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e018      	b.n	80011f8 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80011c6:	79fa      	ldrb	r2, [r7, #7]
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <OLED_DrawPoint+0xb0>)
 80011cc:	00d2      	lsls	r2, r2, #3
 80011ce:	440a      	add	r2, r1
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b25a      	sxtb	r2, r3
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	43db      	mvns	r3, r3
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	4013      	ands	r3, r2
 80011e0:	b259      	sxtb	r1, r3
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	b2c8      	uxtb	r0, r1
 80011e8:	4906      	ldr	r1, [pc, #24]	; (8001204 <OLED_DrawPoint+0xb0>)
 80011ea:	00d2      	lsls	r2, r2, #3
 80011ec:	440a      	add	r2, r1
 80011ee:	4413      	add	r3, r2
 80011f0:	4602      	mov	r2, r0
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e000      	b.n	80011f8 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80011f6:	bf00      	nop
}
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20004b7c 	.word	0x20004b7c

08001208 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	4604      	mov	r4, r0
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4623      	mov	r3, r4
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	4603      	mov	r3, r0
 800121c:	71bb      	strb	r3, [r7, #6]
 800121e:	460b      	mov	r3, r1
 8001220:	717b      	strb	r3, [r7, #5]
 8001222:	4613      	mov	r3, r2
 8001224:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800122a:	797b      	ldrb	r3, [r7, #5]
 800122c:	3b20      	subs	r3, #32
 800122e:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001230:	2300      	movs	r3, #0
 8001232:	73bb      	strb	r3, [r7, #14]
 8001234:	e04d      	b.n	80012d2 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8001236:	793b      	ldrb	r3, [r7, #4]
 8001238:	2b0c      	cmp	r3, #12
 800123a:	d10b      	bne.n	8001254 <OLED_ShowChar+0x4c>
 800123c:	797a      	ldrb	r2, [r7, #5]
 800123e:	7bb9      	ldrb	r1, [r7, #14]
 8001240:	4828      	ldr	r0, [pc, #160]	; (80012e4 <OLED_ShowChar+0xdc>)
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4403      	add	r3, r0
 800124c:	440b      	add	r3, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e007      	b.n	8001264 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001254:	797a      	ldrb	r2, [r7, #5]
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	4923      	ldr	r1, [pc, #140]	; (80012e8 <OLED_ShowChar+0xe0>)
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	440a      	add	r2, r1
 800125e:	4413      	add	r3, r2
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001264:	2300      	movs	r3, #0
 8001266:	737b      	strb	r3, [r7, #13]
 8001268:	e02d      	b.n	80012c6 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	2b00      	cmp	r3, #0
 8001270:	da07      	bge.n	8001282 <OLED_ShowChar+0x7a>
 8001272:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001276:	79b9      	ldrb	r1, [r7, #6]
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff6a 	bl	8001154 <OLED_DrawPoint>
 8001280:	e00c      	b.n	800129c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001282:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001286:	2b00      	cmp	r3, #0
 8001288:	bf0c      	ite	eq
 800128a:	2301      	moveq	r3, #1
 800128c:	2300      	movne	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	79b9      	ldrb	r1, [r7, #6]
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff5c 	bl	8001154 <OLED_DrawPoint>
			temp<<=1;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
			y++;
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	3301      	adds	r3, #1
 80012a6:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	7b3b      	ldrb	r3, [r7, #12]
 80012ac:	1ad2      	subs	r2, r2, r3
 80012ae:	793b      	ldrb	r3, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d105      	bne.n	80012c0 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80012b4:	7b3b      	ldrb	r3, [r7, #12]
 80012b6:	71bb      	strb	r3, [r7, #6]
				x++;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	3301      	adds	r3, #1
 80012bc:	71fb      	strb	r3, [r7, #7]
				break;
 80012be:	e005      	b.n	80012cc <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80012c0:	7b7b      	ldrb	r3, [r7, #13]
 80012c2:	3301      	adds	r3, #1
 80012c4:	737b      	strb	r3, [r7, #13]
 80012c6:	7b7b      	ldrb	r3, [r7, #13]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	d9ce      	bls.n	800126a <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80012cc:	7bbb      	ldrb	r3, [r7, #14]
 80012ce:	3301      	adds	r3, #1
 80012d0:	73bb      	strb	r3, [r7, #14]
 80012d2:	7bba      	ldrb	r2, [r7, #14]
 80012d4:	793b      	ldrb	r3, [r7, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3ad      	bcc.n	8001236 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	080089c0 	.word	0x080089c0
 80012e8:	08008e34 	.word	0x08008e34

080012ec <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	4603      	mov	r3, r0
 80012f4:	603a      	str	r2, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	460b      	mov	r3, r1
 80012fa:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80012fc:	e01f      	b.n	800133e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b7a      	cmp	r3, #122	; 0x7a
 8001302:	d904      	bls.n	800130e <OLED_ShowString+0x22>
 8001304:	2300      	movs	r3, #0
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	3310      	adds	r3, #16
 800130c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800130e:	79bb      	ldrb	r3, [r7, #6]
 8001310:	2b3a      	cmp	r3, #58	; 0x3a
 8001312:	d905      	bls.n	8001320 <OLED_ShowString+0x34>
 8001314:	2300      	movs	r3, #0
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	71bb      	strb	r3, [r7, #6]
 800131c:	f7ff fef4 	bl	8001108 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	781a      	ldrb	r2, [r3, #0]
 8001324:	79b9      	ldrb	r1, [r7, #6]
 8001326:	79f8      	ldrb	r0, [r7, #7]
 8001328:	2301      	movs	r3, #1
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	230c      	movs	r3, #12
 800132e:	f7ff ff6b 	bl	8001208 <OLED_ShowChar>
        x+=8;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3308      	adds	r3, #8
 8001336:	71fb      	strb	r3, [r7, #7]
        p++;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1db      	bne.n	80012fe <OLED_ShowString+0x12>
    }  
}	 
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <OLED_Init>:

void OLED_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001354:	f001 f96c 	bl	8002630 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <OLED_Init+0x110>)
 800135a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135c:	4a40      	ldr	r2, [pc, #256]	; (8001460 <OLED_Init+0x110>)
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	6713      	str	r3, [r2, #112]	; 0x70
 8001364:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <OLED_Init+0x110>)
 8001366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001368:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <OLED_Init+0x110>)
 800136a:	f023 0304 	bic.w	r3, r3, #4
 800136e:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8001370:	f001 f972 	bl	8002658 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8001374:	2200      	movs	r2, #0
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	483a      	ldr	r0, [pc, #232]	; (8001464 <OLED_Init+0x114>)
 800137a:	f001 f93f 	bl	80025fc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800137e:	2064      	movs	r0, #100	; 0x64
 8001380:	f000 fb76 	bl	8001a70 <HAL_Delay>
	OLED_RST_Set();
 8001384:	2201      	movs	r2, #1
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	4836      	ldr	r0, [pc, #216]	; (8001464 <OLED_Init+0x114>)
 800138a:	f001 f937 	bl	80025fc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800138e:	2100      	movs	r1, #0
 8001390:	20ae      	movs	r0, #174	; 0xae
 8001392:	f7ff fe6f 	bl	8001074 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8001396:	2100      	movs	r1, #0
 8001398:	20d5      	movs	r0, #213	; 0xd5
 800139a:	f7ff fe6b 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800139e:	2100      	movs	r1, #0
 80013a0:	2050      	movs	r0, #80	; 0x50
 80013a2:	f7ff fe67 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80013a6:	2100      	movs	r1, #0
 80013a8:	20a8      	movs	r0, #168	; 0xa8
 80013aa:	f7ff fe63 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80013ae:	2100      	movs	r1, #0
 80013b0:	203f      	movs	r0, #63	; 0x3f
 80013b2:	f7ff fe5f 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80013b6:	2100      	movs	r1, #0
 80013b8:	20d3      	movs	r0, #211	; 0xd3
 80013ba:	f7ff fe5b 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80013be:	2100      	movs	r1, #0
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fe57 	bl	8001074 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80013c6:	2100      	movs	r1, #0
 80013c8:	2040      	movs	r0, #64	; 0x40
 80013ca:	f7ff fe53 	bl	8001074 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80013ce:	2100      	movs	r1, #0
 80013d0:	208d      	movs	r0, #141	; 0x8d
 80013d2:	f7ff fe4f 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80013d6:	2100      	movs	r1, #0
 80013d8:	2014      	movs	r0, #20
 80013da:	f7ff fe4b 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80013de:	2100      	movs	r1, #0
 80013e0:	2020      	movs	r0, #32
 80013e2:	f7ff fe47 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80013e6:	2100      	movs	r1, #0
 80013e8:	2002      	movs	r0, #2
 80013ea:	f7ff fe43 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80013ee:	2100      	movs	r1, #0
 80013f0:	20a1      	movs	r0, #161	; 0xa1
 80013f2:	f7ff fe3f 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80013f6:	2100      	movs	r1, #0
 80013f8:	20c0      	movs	r0, #192	; 0xc0
 80013fa:	f7ff fe3b 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80013fe:	2100      	movs	r1, #0
 8001400:	20da      	movs	r0, #218	; 0xda
 8001402:	f7ff fe37 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8001406:	2100      	movs	r1, #0
 8001408:	2012      	movs	r0, #18
 800140a:	f7ff fe33 	bl	8001074 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800140e:	2100      	movs	r1, #0
 8001410:	2081      	movs	r0, #129	; 0x81
 8001412:	f7ff fe2f 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8001416:	2100      	movs	r1, #0
 8001418:	20ef      	movs	r0, #239	; 0xef
 800141a:	f7ff fe2b 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800141e:	2100      	movs	r1, #0
 8001420:	20d9      	movs	r0, #217	; 0xd9
 8001422:	f7ff fe27 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001426:	2100      	movs	r1, #0
 8001428:	20f1      	movs	r0, #241	; 0xf1
 800142a:	f7ff fe23 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800142e:	2100      	movs	r1, #0
 8001430:	20db      	movs	r0, #219	; 0xdb
 8001432:	f7ff fe1f 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001436:	2100      	movs	r1, #0
 8001438:	2030      	movs	r0, #48	; 0x30
 800143a:	f7ff fe1b 	bl	8001074 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800143e:	2100      	movs	r1, #0
 8001440:	20a4      	movs	r0, #164	; 0xa4
 8001442:	f7ff fe17 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8001446:	2100      	movs	r1, #0
 8001448:	20a6      	movs	r0, #166	; 0xa6
 800144a:	f7ff fe13 	bl	8001074 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800144e:	2100      	movs	r1, #0
 8001450:	20af      	movs	r0, #175	; 0xaf
 8001452:	f7ff fe0f 	bl	8001074 <OLED_WR_Byte>
	OLED_Clear(); 
 8001456:	f7ff fe57 	bl	8001108 <OLED_Clear>
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_MspInit+0x54>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_MspInit+0x54>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_MspInit+0x54>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_MspInit+0x54>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_MspInit+0x54>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_MspInit+0x54>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	210f      	movs	r1, #15
 80014aa:	f06f 0001 	mvn.w	r0, #1
 80014ae:	f000 fe40 	bl	8002132 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_ADC_MspInit+0x7c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d127      	bne.n	8001532 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_ADC_MspInit+0x80>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <HAL_ADC_MspInit+0x80>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_ADC_MspInit+0x80>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_ADC_MspInit+0x80>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_ADC_MspInit+0x80>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_ADC_MspInit+0x80>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800151a:	2302      	movs	r3, #2
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151e:	2303      	movs	r3, #3
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <HAL_ADC_MspInit+0x84>)
 800152e:	f000 fec9 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40012000 	.word	0x40012000
 8001540:	40023800 	.word	0x40023800
 8001544:	40020800 	.word	0x40020800

08001548 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <HAL_TIM_Base_MspInit+0xac>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10e      	bne.n	8001588 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_TIM_Base_MspInit+0xb0>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <HAL_TIM_Base_MspInit+0xb0>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_TIM_Base_MspInit+0xb0>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001586:	e030      	b.n	80015ea <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <HAL_TIM_Base_MspInit+0xb4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12b      	bne.n	80015ea <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_TIM_Base_MspInit+0xb0>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_TIM_Base_MspInit+0xb0>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_TIM_Base_MspInit+0xb0>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_TIM_Base_MspInit+0xb0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <HAL_TIM_Base_MspInit+0xb0>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_TIM_Base_MspInit+0xb0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80015ca:	23c0      	movs	r3, #192	; 0xc0
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80015da:	2303      	movs	r3, #3
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4806      	ldr	r0, [pc, #24]	; (8001600 <HAL_TIM_Base_MspInit+0xb8>)
 80015e6:	f000 fe6d 	bl	80022c4 <HAL_GPIO_Init>
}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	; 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40010000 	.word	0x40010000
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40010400 	.word	0x40010400
 8001600:	40020800 	.word	0x40020800

08001604 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	; 0x30
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d14b      	bne.n	80016be <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a3e      	ldr	r2, [pc, #248]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	4b38      	ldr	r3, [pc, #224]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a37      	ldr	r2, [pc, #220]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b35      	ldr	r3, [pc, #212]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b31      	ldr	r3, [pc, #196]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a30      	ldr	r2, [pc, #192]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800167a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800168c:	2301      	movs	r3, #1
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4825      	ldr	r0, [pc, #148]	; (800172c <HAL_TIM_Encoder_MspInit+0x128>)
 8001698:	f000 fe14 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800169c:	2308      	movs	r3, #8
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	481e      	ldr	r0, [pc, #120]	; (8001730 <HAL_TIM_Encoder_MspInit+0x12c>)
 80016b8:	f000 fe04 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016bc:	e030      	b.n	8001720 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <HAL_TIM_Encoder_MspInit+0x130>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d12b      	bne.n	8001720 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	6413      	str	r3, [r2, #64]	; 0x40
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_TIM_Encoder_MspInit+0x124>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001700:	23c0      	movs	r3, #192	; 0xc0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001710:	2302      	movs	r3, #2
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4804      	ldr	r0, [pc, #16]	; (800172c <HAL_TIM_Encoder_MspInit+0x128>)
 800171c:	f000 fdd2 	bl	80022c4 <HAL_GPIO_Init>
}
 8001720:	bf00      	nop
 8001722:	3730      	adds	r7, #48	; 0x30
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000
 8001730:	40020400 	.word	0x40020400
 8001734:	40000400 	.word	0x40000400

08001738 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <HAL_TIM_MspPostInit+0x68>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d11e      	bne.n	8001798 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_TIM_MspPostInit+0x6c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_TIM_MspPostInit+0x6c>)
 8001764:	f043 0310 	orr.w	r3, r3, #16
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_TIM_MspPostInit+0x6c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001776:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800177a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001788:	2301      	movs	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <HAL_TIM_MspPostInit+0x70>)
 8001794:	f000 fd96 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40010000 	.word	0x40010000
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_UART_MspInit+0x94>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d134      	bne.n	8001838 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001806:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001818:	2307      	movs	r3, #7
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4809      	ldr	r0, [pc, #36]	; (8001848 <HAL_UART_MspInit+0x9c>)
 8001824:	f000 fd4e 	bl	80022c4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2105      	movs	r1, #5
 800182c:	2027      	movs	r0, #39	; 0x27
 800182e:	f000 fc80 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001832:	2027      	movs	r0, #39	; 0x27
 8001834:	f000 fc99 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40004800 	.word	0x40004800
 8001844:	40023800 	.word	0x40023800
 8001848:	40020800 	.word	0x40020800

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler+0x4>

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler+0x4>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler+0x4>

0800186a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187c:	f000 f8d8 	bl	8001a30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001880:	f005 fb4a 	bl	8006f18 <xTaskGetSchedulerState>
 8001884:	4603      	mov	r3, r0
 8001886:	2b01      	cmp	r3, #1
 8001888:	d001      	beq.n	800188e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800188a:	f006 f935 	bl	8007af8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <USART3_IRQHandler+0x10>)
 800189a:	f002 fb8d 	bl	8003fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200049f8 	.word	0x200049f8

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f006 fb88 	bl	8007fec <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20020000 	.word	0x20020000
 8001908:	00000400 	.word	0x00000400
 800190c:	20000090 	.word	0x20000090
 8001910:	20004fd0 	.word	0x20004fd0

08001914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193e:	490e      	ldr	r1, [pc, #56]	; (8001978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001940:	4a0e      	ldr	r2, [pc, #56]	; (800197c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001944:	e002      	b.n	800194c <LoopCopyDataInit>

08001946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194a:	3304      	adds	r3, #4

0800194c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800194c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001950:	d3f9      	bcc.n	8001946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001954:	4c0b      	ldr	r4, [pc, #44]	; (8001984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001958:	e001      	b.n	800195e <LoopFillZerobss>

0800195a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800195c:	3204      	adds	r2, #4

0800195e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001960:	d3fb      	bcc.n	800195a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001962:	f7ff ffd7 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001966:	f006 fb47 	bl	8007ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196a:	f7fe fe71 	bl	8000650 <main>
  bx  lr    
 800196e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800197c:	08009480 	.word	0x08009480
  ldr r2, =_sbss
 8001980:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001984:	20004fd0 	.word	0x20004fd0

08001988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <HAL_Init+0x40>)
 8001996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_Init+0x40>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_Init+0x40>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 fbb1 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fd52 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fbc9 	bl	8002186 <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 fb91 	bl	8002132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x20>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x24>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_IncTick+0x24>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20004f7c 	.word	0x20004f7c

08001a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_GetTick+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20004f7c 	.word	0x20004f7c

08001a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff ffee 	bl	8001a58 <HAL_GetTick>
 8001a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d005      	beq.n	8001a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_Delay+0x44>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a96:	bf00      	nop
 8001a98:	f7ff ffde 	bl	8001a58 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d8f7      	bhi.n	8001a98 <HAL_Delay+0x28>
  {
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e033      	b.n	8001b36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fcf2 	bl	80014c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d118      	bne.n	8001b28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001afe:	f023 0302 	bic.w	r3, r3, #2
 8001b02:	f043 0202 	orr.w	r2, r3, #2
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f93a 	bl	8001d84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f023 0303 	bic.w	r3, r3, #3
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
 8001b26:	e001      	b.n	8001b2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1c>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e105      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x228>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d925      	bls.n	8001bb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b1e      	subs	r3, #30
 8001b82:	2207      	movs	r2, #7
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	400a      	ands	r2, r1
 8001b90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68d9      	ldr	r1, [r3, #12]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4403      	add	r3, r0
 8001baa:	3b1e      	subs	r3, #30
 8001bac:	409a      	lsls	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	e022      	b.n	8001bfe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6919      	ldr	r1, [r3, #16]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	2207      	movs	r2, #7
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	400a      	ands	r2, r1
 8001bda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4403      	add	r3, r0
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d824      	bhi.n	8001c50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	3b05      	subs	r3, #5
 8001c18:	221f      	movs	r2, #31
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	400a      	ands	r2, r1
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b05      	subs	r3, #5
 8001c42:	fa00 f203 	lsl.w	r2, r0, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c4e:	e04c      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	d824      	bhi.n	8001ca2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	3b23      	subs	r3, #35	; 0x23
 8001c6a:	221f      	movs	r2, #31
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43da      	mvns	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	400a      	ands	r2, r1
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	3b23      	subs	r3, #35	; 0x23
 8001c94:	fa00 f203 	lsl.w	r2, r0, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca0:	e023      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3b41      	subs	r3, #65	; 0x41
 8001cb4:	221f      	movs	r2, #31
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b41      	subs	r3, #65	; 0x41
 8001cde:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cea:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <HAL_ADC_ConfigChannel+0x234>)
 8001cec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <HAL_ADC_ConfigChannel+0x238>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d109      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1cc>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b12      	cmp	r3, #18
 8001cfe:	d105      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <HAL_ADC_ConfigChannel+0x238>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d123      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x21e>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d003      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x1e6>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b11      	cmp	r3, #17
 8001d24:	d11b      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b10      	cmp	r3, #16
 8001d38:	d111      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_ADC_ConfigChannel+0x23c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_ADC_ConfigChannel+0x240>)
 8001d40:	fba2 2303 	umull	r2, r3, r2, r3
 8001d44:	0c9a      	lsrs	r2, r3, #18
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40012300 	.word	0x40012300
 8001d78:	40012000 	.word	0x40012000
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	431bde83 	.word	0x431bde83

08001d84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d8c:	4b79      	ldr	r3, [pc, #484]	; (8001f74 <ADC_Init+0x1f0>)
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	021a      	lsls	r2, r3, #8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ddc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6899      	ldr	r1, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <ADC_Init+0x1f4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d022      	beq.n	8001e62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6899      	ldr	r1, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6899      	ldr	r1, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	e00f      	b.n	8001e82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0202 	bic.w	r2, r2, #2
 8001e90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6899      	ldr	r1, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7e1b      	ldrb	r3, [r3, #24]
 8001e9c:	005a      	lsls	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ebe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ece:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6859      	ldr	r1, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	3b01      	subs	r3, #1
 8001edc:	035a      	lsls	r2, r3, #13
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	e007      	b.n	8001ef8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	051a      	lsls	r2, r3, #20
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6899      	ldr	r1, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f3a:	025a      	lsls	r2, r3, #9
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6899      	ldr	r1, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	029a      	lsls	r2, r3, #10
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	609a      	str	r2, [r3, #8]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	40012300 	.word	0x40012300
 8001f78:	0f000001 	.word	0x0f000001

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <__NVIC_EnableIRQ+0x38>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	; (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff8e 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff29 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002144:	f7ff ff3e 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff8e 	bl	8002070 <NVIC_EncodePriority>
 8002154:	4602      	mov	r2, r0
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff5d 	bl	800201c <__NVIC_SetPriority>
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff31 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffa2 	bl	80020d8 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff fc54 	bl	8001a58 <HAL_GetTick>
 80021b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d008      	beq.n	80021d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2280      	movs	r2, #128	; 0x80
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e052      	b.n	8002276 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0216 	bic.w	r2, r2, #22
 80021de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d103      	bne.n	8002200 <HAL_DMA_Abort+0x62>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0208 	bic.w	r2, r2, #8
 800220e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002220:	e013      	b.n	800224a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002222:	f7ff fc19 	bl	8001a58 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b05      	cmp	r3, #5
 800222e:	d90c      	bls.n	800224a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2203      	movs	r2, #3
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e015      	b.n	8002276 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e4      	bne.n	8002222 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225c:	223f      	movs	r2, #63	; 0x3f
 800225e:	409a      	lsls	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d004      	beq.n	800229c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2280      	movs	r2, #128	; 0x80
 8002296:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e00c      	b.n	80022b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2205      	movs	r2, #5
 80022a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e16b      	b.n	80025b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	f040 815a 	bne.w	80025b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d005      	beq.n	8002316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002312:	2b02      	cmp	r3, #2
 8002314:	d130      	bne.n	8002378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800234c:	2201      	movs	r2, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 0201 	and.w	r2, r3, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b03      	cmp	r3, #3
 8002382:	d017      	beq.n	80023b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d123      	bne.n	8002408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	08da      	lsrs	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3208      	adds	r2, #8
 80023c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	220f      	movs	r2, #15
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	08da      	lsrs	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3208      	adds	r2, #8
 8002402:	69b9      	ldr	r1, [r7, #24]
 8002404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0203 	and.w	r2, r3, #3
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80b4 	beq.w	80025b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b60      	ldr	r3, [pc, #384]	; (80025d0 <HAL_GPIO_Init+0x30c>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a5f      	ldr	r2, [pc, #380]	; (80025d0 <HAL_GPIO_Init+0x30c>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <HAL_GPIO_Init+0x30c>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002466:	4a5b      	ldr	r2, [pc, #364]	; (80025d4 <HAL_GPIO_Init+0x310>)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	089b      	lsrs	r3, r3, #2
 800246c:	3302      	adds	r3, #2
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	220f      	movs	r2, #15
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_GPIO_Init+0x314>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d02b      	beq.n	80024ea <HAL_GPIO_Init+0x226>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a51      	ldr	r2, [pc, #324]	; (80025dc <HAL_GPIO_Init+0x318>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d025      	beq.n	80024e6 <HAL_GPIO_Init+0x222>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <HAL_GPIO_Init+0x31c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d01f      	beq.n	80024e2 <HAL_GPIO_Init+0x21e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4f      	ldr	r2, [pc, #316]	; (80025e4 <HAL_GPIO_Init+0x320>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d019      	beq.n	80024de <HAL_GPIO_Init+0x21a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4e      	ldr	r2, [pc, #312]	; (80025e8 <HAL_GPIO_Init+0x324>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_GPIO_Init+0x216>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4d      	ldr	r2, [pc, #308]	; (80025ec <HAL_GPIO_Init+0x328>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00d      	beq.n	80024d6 <HAL_GPIO_Init+0x212>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4c      	ldr	r2, [pc, #304]	; (80025f0 <HAL_GPIO_Init+0x32c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <HAL_GPIO_Init+0x20e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4b      	ldr	r2, [pc, #300]	; (80025f4 <HAL_GPIO_Init+0x330>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d101      	bne.n	80024ce <HAL_GPIO_Init+0x20a>
 80024ca:	2307      	movs	r3, #7
 80024cc:	e00e      	b.n	80024ec <HAL_GPIO_Init+0x228>
 80024ce:	2308      	movs	r3, #8
 80024d0:	e00c      	b.n	80024ec <HAL_GPIO_Init+0x228>
 80024d2:	2306      	movs	r3, #6
 80024d4:	e00a      	b.n	80024ec <HAL_GPIO_Init+0x228>
 80024d6:	2305      	movs	r3, #5
 80024d8:	e008      	b.n	80024ec <HAL_GPIO_Init+0x228>
 80024da:	2304      	movs	r3, #4
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x228>
 80024de:	2303      	movs	r3, #3
 80024e0:	e004      	b.n	80024ec <HAL_GPIO_Init+0x228>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_Init+0x228>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_Init+0x228>
 80024ea:	2300      	movs	r3, #0
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f002 0203 	and.w	r2, r2, #3
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	4093      	lsls	r3, r2
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024fc:	4935      	ldr	r1, [pc, #212]	; (80025d4 <HAL_GPIO_Init+0x310>)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250a:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_GPIO_Init+0x334>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252e:	4a32      	ldr	r2, [pc, #200]	; (80025f8 <HAL_GPIO_Init+0x334>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002534:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <HAL_GPIO_Init+0x334>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002558:	4a27      	ldr	r2, [pc, #156]	; (80025f8 <HAL_GPIO_Init+0x334>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800255e:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <HAL_GPIO_Init+0x334>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002582:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <HAL_GPIO_Init+0x334>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_GPIO_Init+0x334>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025ac:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <HAL_GPIO_Init+0x334>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b0f      	cmp	r3, #15
 80025bc:	f67f ae90 	bls.w	80022e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40021400 	.word	0x40021400
 80025f0:	40021800 	.word	0x40021800
 80025f4:	40021c00 	.word	0x40021c00
 80025f8:	40013c00 	.word	0x40013c00

080025fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]
 8002608:	4613      	mov	r3, r2
 800260a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800260c:	787b      	ldrb	r3, [r7, #1]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002612:	887a      	ldrh	r2, [r7, #2]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002618:	e003      	b.n	8002622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261a:	887b      	ldrh	r3, [r7, #2]
 800261c:	041a      	lsls	r2, r3, #16
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	619a      	str	r2, [r3, #24]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_PWR_EnableBkUpAccess+0x20>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_PWR_EnableBkUpAccess+0x24>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002642:	687b      	ldr	r3, [r7, #4]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	420e0020 	.word	0x420e0020
 8002654:	40007000 	.word	0x40007000

08002658 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_PWR_DisableBkUpAccess+0x20>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_PWR_DisableBkUpAccess+0x24>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800266a:	687b      	ldr	r3, [r7, #4]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	420e0020 	.word	0x420e0020
 800267c:	40007000 	.word	0x40007000

08002680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e264      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d075      	beq.n	800278a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800269e:	4ba3      	ldr	r3, [pc, #652]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d00c      	beq.n	80026c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026aa:	4ba0      	ldr	r3, [pc, #640]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d112      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b9d      	ldr	r3, [pc, #628]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c2:	d10b      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	4b99      	ldr	r3, [pc, #612]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d05b      	beq.n	8002788 <HAL_RCC_OscConfig+0x108>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d157      	bne.n	8002788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e23f      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d106      	bne.n	80026f4 <HAL_RCC_OscConfig+0x74>
 80026e6:	4b91      	ldr	r3, [pc, #580]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a90      	ldr	r2, [pc, #576]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e01d      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x98>
 80026fe:	4b8b      	ldr	r3, [pc, #556]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a8a      	ldr	r2, [pc, #552]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b88      	ldr	r3, [pc, #544]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a87      	ldr	r2, [pc, #540]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 8002718:	4b84      	ldr	r3, [pc, #528]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a83      	ldr	r2, [pc, #524]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b81      	ldr	r3, [pc, #516]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a80      	ldr	r2, [pc, #512]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff f98e 	bl	8001a58 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff f98a 	bl	8001a58 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e204      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b76      	ldr	r3, [pc, #472]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xc0>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff f97a 	bl	8001a58 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff f976 	bl	8001a58 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1f0      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	4b6c      	ldr	r3, [pc, #432]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0xe8>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002796:	4b65      	ldr	r3, [pc, #404]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a2:	4b62      	ldr	r3, [pc, #392]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b5f      	ldr	r3, [pc, #380]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	4b5c      	ldr	r3, [pc, #368]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1c4      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b56      	ldr	r3, [pc, #344]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4952      	ldr	r1, [pc, #328]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	e03a      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f0:	4b4f      	ldr	r3, [pc, #316]	; (8002930 <HAL_RCC_OscConfig+0x2b0>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7ff f92f 	bl	8001a58 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff f92b 	bl	8001a58 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e1a5      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b46      	ldr	r3, [pc, #280]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b43      	ldr	r3, [pc, #268]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4940      	ldr	r1, [pc, #256]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b3f      	ldr	r3, [pc, #252]	; (8002930 <HAL_RCC_OscConfig+0x2b0>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7ff f90e 	bl	8001a58 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002840:	f7ff f90a 	bl	8001a58 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e184      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b36      	ldr	r3, [pc, #216]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d030      	beq.n	80028cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <HAL_RCC_OscConfig+0x2b4>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7ff f8ee 	bl	8001a58 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff f8ea 	bl	8001a58 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e164      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x200>
 800289e:	e015      	b.n	80028cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a0:	4b24      	ldr	r3, [pc, #144]	; (8002934 <HAL_RCC_OscConfig+0x2b4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7ff f8d7 	bl	8001a58 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ae:	f7ff f8d3 	bl	8001a58 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e14d      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80028c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a0 	beq.w	8002a1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028de:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10f      	bne.n	800290a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a0e      	ldr	r2, [pc, #56]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_OscConfig+0x2b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d121      	bne.n	800295a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_RCC_OscConfig+0x2b8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a07      	ldr	r2, [pc, #28]	; (8002938 <HAL_RCC_OscConfig+0x2b8>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7ff f899 	bl	8001a58 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e011      	b.n	800294e <HAL_RCC_OscConfig+0x2ce>
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	42470000 	.word	0x42470000
 8002934:	42470e80 	.word	0x42470e80
 8002938:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293c:	f7ff f88c 	bl	8001a58 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e106      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b85      	ldr	r3, [pc, #532]	; (8002b64 <HAL_RCC_OscConfig+0x4e4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d106      	bne.n	8002970 <HAL_RCC_OscConfig+0x2f0>
 8002962:	4b81      	ldr	r3, [pc, #516]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	4a80      	ldr	r2, [pc, #512]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6713      	str	r3, [r2, #112]	; 0x70
 800296e:	e01c      	b.n	80029aa <HAL_RCC_OscConfig+0x32a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b05      	cmp	r3, #5
 8002976:	d10c      	bne.n	8002992 <HAL_RCC_OscConfig+0x312>
 8002978:	4b7b      	ldr	r3, [pc, #492]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	4a7a      	ldr	r2, [pc, #488]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	6713      	str	r3, [r2, #112]	; 0x70
 8002984:	4b78      	ldr	r3, [pc, #480]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a77      	ldr	r2, [pc, #476]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
 8002990:	e00b      	b.n	80029aa <HAL_RCC_OscConfig+0x32a>
 8002992:	4b75      	ldr	r3, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	4a74      	ldr	r2, [pc, #464]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	6713      	str	r3, [r2, #112]	; 0x70
 800299e:	4b72      	ldr	r3, [pc, #456]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	4a71      	ldr	r2, [pc, #452]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d015      	beq.n	80029de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7ff f851 	bl	8001a58 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7ff f84d 	bl	8001a58 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0c5      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	4b65      	ldr	r3, [pc, #404]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ee      	beq.n	80029ba <HAL_RCC_OscConfig+0x33a>
 80029dc:	e014      	b.n	8002a08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7ff f83b 	bl	8001a58 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7ff f837 	bl	8001a58 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e0af      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fc:	4b5a      	ldr	r3, [pc, #360]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ee      	bne.n	80029e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d105      	bne.n	8002a1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0e:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a55      	ldr	r2, [pc, #340]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 809b 	beq.w	8002b5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d05c      	beq.n	8002aea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d141      	bne.n	8002abc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a38:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <HAL_RCC_OscConfig+0x4ec>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7ff f80b 	bl	8001a58 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a46:	f7ff f807 	bl	8001a58 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e081      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a58:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	019b      	lsls	r3, r3, #6
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	061b      	lsls	r3, r3, #24
 8002a88:	4937      	ldr	r1, [pc, #220]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8e:	4b37      	ldr	r3, [pc, #220]	; (8002b6c <HAL_RCC_OscConfig+0x4ec>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe ffe0 	bl	8001a58 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe ffdc 	bl	8001a58 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e056      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x41c>
 8002aba:	e04e      	b.n	8002b5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abc:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <HAL_RCC_OscConfig+0x4ec>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe ffc9 	bl	8001a58 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe ffc5 	bl	8001a58 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e03f      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002adc:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x44a>
 8002ae8:	e037      	b.n	8002b5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e032      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af6:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <HAL_RCC_OscConfig+0x4e8>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d028      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d121      	bne.n	8002b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d11a      	bne.n	8002b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b26:	4013      	ands	r3, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d111      	bne.n	8002b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40007000 	.word	0x40007000
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	42470060 	.word	0x42470060

08002b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0cc      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d90c      	bls.n	8002bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b63      	ldr	r3, [pc, #396]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0b8      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc4:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a58      	ldr	r2, [pc, #352]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bdc:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4a52      	ldr	r2, [pc, #328]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be8:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	494d      	ldr	r1, [pc, #308]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d044      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d119      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e07f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e067      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4e:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f023 0203 	bic.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4934      	ldr	r1, [pc, #208]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c60:	f7fe fefa 	bl	8001a58 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f7fe fef6 	bl	8001a58 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e04f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 020c 	and.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d1eb      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c90:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d20c      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e032      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4916      	ldr	r1, [pc, #88]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	490e      	ldr	r1, [pc, #56]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cf6:	f000 f821 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	490a      	ldr	r1, [pc, #40]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	5ccb      	ldrb	r3, [r1, r3]
 8002d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0e:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1c8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fe5a 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023c00 	.word	0x40023c00
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	08009424 	.word	0x08009424
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000004 	.word	0x20000004

08002d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d3c:	b5b0      	push	{r4, r5, r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d42:	2100      	movs	r1, #0
 8002d44:	6079      	str	r1, [r7, #4]
 8002d46:	2100      	movs	r1, #0
 8002d48:	60f9      	str	r1, [r7, #12]
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d4e:	2100      	movs	r1, #0
 8002d50:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d52:	4952      	ldr	r1, [pc, #328]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d54:	6889      	ldr	r1, [r1, #8]
 8002d56:	f001 010c 	and.w	r1, r1, #12
 8002d5a:	2908      	cmp	r1, #8
 8002d5c:	d00d      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x3e>
 8002d5e:	2908      	cmp	r1, #8
 8002d60:	f200 8094 	bhi.w	8002e8c <HAL_RCC_GetSysClockFreq+0x150>
 8002d64:	2900      	cmp	r1, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_RCC_GetSysClockFreq+0x32>
 8002d68:	2904      	cmp	r1, #4
 8002d6a:	d003      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x38>
 8002d6c:	e08e      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d70:	60bb      	str	r3, [r7, #8]
       break;
 8002d72:	e08e      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d74:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d76:	60bb      	str	r3, [r7, #8]
      break;
 8002d78:	e08b      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d7a:	4948      	ldr	r1, [pc, #288]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d7c:	6849      	ldr	r1, [r1, #4]
 8002d7e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002d82:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d84:	4945      	ldr	r1, [pc, #276]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d86:	6849      	ldr	r1, [r1, #4]
 8002d88:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002d8c:	2900      	cmp	r1, #0
 8002d8e:	d024      	beq.n	8002dda <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d90:	4942      	ldr	r1, [pc, #264]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d92:	6849      	ldr	r1, [r1, #4]
 8002d94:	0989      	lsrs	r1, r1, #6
 8002d96:	4608      	mov	r0, r1
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002da0:	f04f 0500 	mov.w	r5, #0
 8002da4:	ea00 0204 	and.w	r2, r0, r4
 8002da8:	ea01 0305 	and.w	r3, r1, r5
 8002dac:	493d      	ldr	r1, [pc, #244]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002dae:	fb01 f003 	mul.w	r0, r1, r3
 8002db2:	2100      	movs	r1, #0
 8002db4:	fb01 f102 	mul.w	r1, r1, r2
 8002db8:	1844      	adds	r4, r0, r1
 8002dba:	493a      	ldr	r1, [pc, #232]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002dbc:	fba2 0101 	umull	r0, r1, r2, r1
 8002dc0:	1863      	adds	r3, r4, r1
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	f7fd fa50 	bl	8000270 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e04a      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dda:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	461a      	mov	r2, r3
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	ea02 0400 	and.w	r4, r2, r0
 8002df2:	ea03 0501 	and.w	r5, r3, r1
 8002df6:	4620      	mov	r0, r4
 8002df8:	4629      	mov	r1, r5
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	014b      	lsls	r3, r1, #5
 8002e04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e08:	0142      	lsls	r2, r0, #5
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	1b00      	subs	r0, r0, r4
 8002e10:	eb61 0105 	sbc.w	r1, r1, r5
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	018b      	lsls	r3, r1, #6
 8002e1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e22:	0182      	lsls	r2, r0, #6
 8002e24:	1a12      	subs	r2, r2, r0
 8002e26:	eb63 0301 	sbc.w	r3, r3, r1
 8002e2a:	f04f 0000 	mov.w	r0, #0
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	00d9      	lsls	r1, r3, #3
 8002e34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e38:	00d0      	lsls	r0, r2, #3
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	1912      	adds	r2, r2, r4
 8002e40:	eb45 0303 	adc.w	r3, r5, r3
 8002e44:	f04f 0000 	mov.w	r0, #0
 8002e48:	f04f 0100 	mov.w	r1, #0
 8002e4c:	0299      	lsls	r1, r3, #10
 8002e4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e52:	0290      	lsls	r0, r2, #10
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	f7fd fa04 	bl	8000270 <__aeabi_uldivmod>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x160>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	0c1b      	lsrs	r3, r3, #16
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	60bb      	str	r3, [r7, #8]
      break;
 8002e8a:	e002      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002e8e:	60bb      	str	r3, [r7, #8]
      break;
 8002e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e92:	68bb      	ldr	r3, [r7, #8]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	017d7840 	.word	0x017d7840

08002ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000

08002ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ec4:	f7ff fff0 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0a9b      	lsrs	r3, r3, #10
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4903      	ldr	r1, [pc, #12]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	08009434 	.word	0x08009434

08002ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eec:	f7ff ffdc 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0b5b      	lsrs	r3, r3, #13
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4903      	ldr	r1, [pc, #12]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08009434 	.word	0x08009434

08002f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e041      	b.n	8002fa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe fb06 	bl	8001548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f000 fb44 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e041      	b.n	8003044 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f839 	bl	800304c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	4619      	mov	r1, r3
 8002fec:	4610      	mov	r0, r2
 8002fee:	f000 faf5 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e097      	b.n	80031a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d106      	bne.n	800308e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7fe fabb 	bl	8001604 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030a4:	f023 0307 	bic.w	r3, r3, #7
 80030a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3304      	adds	r3, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f000 fa91 	bl	80035dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	4313      	orrs	r3, r2
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003100:	f023 030c 	bic.w	r3, r3, #12
 8003104:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800310c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	4313      	orrs	r3, r2
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	011a      	lsls	r2, r3, #4
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	031b      	lsls	r3, r3, #12
 8003130:	4313      	orrs	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800313e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003146:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	4313      	orrs	r3, r2
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d110      	bne.n	80031fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d102      	bne.n	80031e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80031e2:	7b7b      	ldrb	r3, [r7, #13]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d001      	beq.n	80031ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e069      	b.n	80032c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031fc:	e031      	b.n	8003262 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d110      	bne.n	8003226 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003204:	7bbb      	ldrb	r3, [r7, #14]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d102      	bne.n	8003210 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800320a:	7b3b      	ldrb	r3, [r7, #12]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d001      	beq.n	8003214 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e055      	b.n	80032c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003224:	e01d      	b.n	8003262 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d108      	bne.n	800323e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800322c:	7bbb      	ldrb	r3, [r7, #14]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003232:	7b7b      	ldrb	r3, [r7, #13]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d102      	bne.n	800323e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003238:	7b3b      	ldrb	r3, [r7, #12]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d001      	beq.n	8003242 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e03e      	b.n	80032c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2202      	movs	r2, #2
 800324e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_TIM_Encoder_Start+0xc4>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b04      	cmp	r3, #4
 800326c:	d008      	beq.n	8003280 <HAL_TIM_Encoder_Start+0xd4>
 800326e:	e00f      	b.n	8003290 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2201      	movs	r2, #1
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fc99 	bl	8003bb0 <TIM_CCxChannelCmd>
      break;
 800327e:	e016      	b.n	80032ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2201      	movs	r2, #1
 8003286:	2104      	movs	r1, #4
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fc91 	bl	8003bb0 <TIM_CCxChannelCmd>
      break;
 800328e:	e00e      	b.n	80032ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fc89 	bl	8003bb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2201      	movs	r2, #1
 80032a4:	2104      	movs	r1, #4
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fc82 	bl	8003bb0 <TIM_CCxChannelCmd>
      break;
 80032ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0ae      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b0c      	cmp	r3, #12
 80032f2:	f200 809f 	bhi.w	8003434 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003435 	.word	0x08003435
 8003304:	08003435 	.word	0x08003435
 8003308:	08003435 	.word	0x08003435
 800330c:	08003371 	.word	0x08003371
 8003310:	08003435 	.word	0x08003435
 8003314:	08003435 	.word	0x08003435
 8003318:	08003435 	.word	0x08003435
 800331c:	080033b3 	.word	0x080033b3
 8003320:	08003435 	.word	0x08003435
 8003324:	08003435 	.word	0x08003435
 8003328:	08003435 	.word	0x08003435
 800332c:	080033f3 	.word	0x080033f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f9f0 	bl	800371c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0208 	orr.w	r2, r2, #8
 800334a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6999      	ldr	r1, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	619a      	str	r2, [r3, #24]
      break;
 800336e:	e064      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fa40 	bl	80037fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800338a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6999      	ldr	r1, [r3, #24]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	021a      	lsls	r2, r3, #8
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	619a      	str	r2, [r3, #24]
      break;
 80033b0:	e043      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fa95 	bl	80038e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0208 	orr.w	r2, r2, #8
 80033cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0204 	bic.w	r2, r2, #4
 80033dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69d9      	ldr	r1, [r3, #28]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	61da      	str	r2, [r3, #28]
      break;
 80033f0:	e023      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fae9 	bl	80039d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800340c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69d9      	ldr	r1, [r3, #28]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	021a      	lsls	r2, r3, #8
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	61da      	str	r2, [r3, #28]
      break;
 8003432:	e002      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	75fb      	strb	r3, [r7, #23]
      break;
 8003438:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003442:	7dfb      	ldrb	r3, [r7, #23]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_TIM_ConfigClockSource+0x1c>
 8003464:	2302      	movs	r3, #2
 8003466:	e0b4      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x186>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800348e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a0:	d03e      	beq.n	8003520 <HAL_TIM_ConfigClockSource+0xd4>
 80034a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a6:	f200 8087 	bhi.w	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ae:	f000 8086 	beq.w	80035be <HAL_TIM_ConfigClockSource+0x172>
 80034b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b6:	d87f      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b70      	cmp	r3, #112	; 0x70
 80034ba:	d01a      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0xa6>
 80034bc:	2b70      	cmp	r3, #112	; 0x70
 80034be:	d87b      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b60      	cmp	r3, #96	; 0x60
 80034c2:	d050      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x11a>
 80034c4:	2b60      	cmp	r3, #96	; 0x60
 80034c6:	d877      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b50      	cmp	r3, #80	; 0x50
 80034ca:	d03c      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0xfa>
 80034cc:	2b50      	cmp	r3, #80	; 0x50
 80034ce:	d873      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d058      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x13a>
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d86f      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b30      	cmp	r3, #48	; 0x30
 80034da:	d064      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x15a>
 80034dc:	2b30      	cmp	r3, #48	; 0x30
 80034de:	d86b      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d060      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x15a>
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d867      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d05c      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x15a>
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d05a      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x15a>
 80034f0:	e062      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f000 fb35 	bl	8003b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003514:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	609a      	str	r2, [r3, #8]
      break;
 800351e:	e04f      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6899      	ldr	r1, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f000 fb1e 	bl	8003b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003542:	609a      	str	r2, [r3, #8]
      break;
 8003544:	e03c      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	461a      	mov	r2, r3
 8003554:	f000 fa92 	bl	8003a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2150      	movs	r1, #80	; 0x50
 800355e:	4618      	mov	r0, r3
 8003560:	f000 faeb 	bl	8003b3a <TIM_ITRx_SetConfig>
      break;
 8003564:	e02c      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	461a      	mov	r2, r3
 8003574:	f000 fab1 	bl	8003ada <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2160      	movs	r1, #96	; 0x60
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fadb 	bl	8003b3a <TIM_ITRx_SetConfig>
      break;
 8003584:	e01c      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	461a      	mov	r2, r3
 8003594:	f000 fa72 	bl	8003a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2140      	movs	r1, #64	; 0x40
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 facb 	bl	8003b3a <TIM_ITRx_SetConfig>
      break;
 80035a4:	e00c      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f000 fac2 	bl	8003b3a <TIM_ITRx_SetConfig>
      break;
 80035b6:	e003      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      break;
 80035bc:	e000      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a40      	ldr	r2, [pc, #256]	; (80036f0 <TIM_Base_SetConfig+0x114>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d013      	beq.n	800361c <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fa:	d00f      	beq.n	800361c <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a3d      	ldr	r2, [pc, #244]	; (80036f4 <TIM_Base_SetConfig+0x118>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00b      	beq.n	800361c <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a3c      	ldr	r2, [pc, #240]	; (80036f8 <TIM_Base_SetConfig+0x11c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d007      	beq.n	800361c <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a3b      	ldr	r2, [pc, #236]	; (80036fc <TIM_Base_SetConfig+0x120>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3a      	ldr	r2, [pc, #232]	; (8003700 <TIM_Base_SetConfig+0x124>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d108      	bne.n	800362e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2f      	ldr	r2, [pc, #188]	; (80036f0 <TIM_Base_SetConfig+0x114>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d02b      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363c:	d027      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a2c      	ldr	r2, [pc, #176]	; (80036f4 <TIM_Base_SetConfig+0x118>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d023      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <TIM_Base_SetConfig+0x11c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01f      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <TIM_Base_SetConfig+0x120>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01b      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a29      	ldr	r2, [pc, #164]	; (8003700 <TIM_Base_SetConfig+0x124>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d017      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a28      	ldr	r2, [pc, #160]	; (8003704 <TIM_Base_SetConfig+0x128>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a27      	ldr	r2, [pc, #156]	; (8003708 <TIM_Base_SetConfig+0x12c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00f      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a26      	ldr	r2, [pc, #152]	; (800370c <TIM_Base_SetConfig+0x130>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00b      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a25      	ldr	r2, [pc, #148]	; (8003710 <TIM_Base_SetConfig+0x134>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a24      	ldr	r2, [pc, #144]	; (8003714 <TIM_Base_SetConfig+0x138>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d003      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a23      	ldr	r2, [pc, #140]	; (8003718 <TIM_Base_SetConfig+0x13c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d108      	bne.n	80036a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <TIM_Base_SetConfig+0x114>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0xf8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <TIM_Base_SetConfig+0x124>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d103      	bne.n	80036dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	615a      	str	r2, [r3, #20]
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40010400 	.word	0x40010400
 8003704:	40014000 	.word	0x40014000
 8003708:	40014400 	.word	0x40014400
 800370c:	40014800 	.word	0x40014800
 8003710:	40001800 	.word	0x40001800
 8003714:	40001c00 	.word	0x40001c00
 8003718:	40002000 	.word	0x40002000

0800371c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f023 0201 	bic.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f023 0302 	bic.w	r3, r3, #2
 8003764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a20      	ldr	r2, [pc, #128]	; (80037f4 <TIM_OC1_SetConfig+0xd8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_OC1_SetConfig+0x64>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <TIM_OC1_SetConfig+0xdc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d10c      	bne.n	800379a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f023 0308 	bic.w	r3, r3, #8
 8003786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f023 0304 	bic.w	r3, r3, #4
 8003798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <TIM_OC1_SetConfig+0xd8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d003      	beq.n	80037aa <TIM_OC1_SetConfig+0x8e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a14      	ldr	r2, [pc, #80]	; (80037f8 <TIM_OC1_SetConfig+0xdc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d111      	bne.n	80037ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40010400 	.word	0x40010400

080037fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f023 0210 	bic.w	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f023 0320 	bic.w	r3, r3, #32
 8003846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <TIM_OC2_SetConfig+0xe4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d003      	beq.n	8003864 <TIM_OC2_SetConfig+0x68>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a21      	ldr	r2, [pc, #132]	; (80038e4 <TIM_OC2_SetConfig+0xe8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d10d      	bne.n	8003880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800386a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800387e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <TIM_OC2_SetConfig+0xe4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_OC2_SetConfig+0x94>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <TIM_OC2_SetConfig+0xe8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d113      	bne.n	80038b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800389e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40010000 	.word	0x40010000
 80038e4:	40010400 	.word	0x40010400

080038e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0303 	bic.w	r3, r3, #3
 800391e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a21      	ldr	r2, [pc, #132]	; (80039c8 <TIM_OC3_SetConfig+0xe0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_OC3_SetConfig+0x66>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a20      	ldr	r2, [pc, #128]	; (80039cc <TIM_OC3_SetConfig+0xe4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d10d      	bne.n	800396a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <TIM_OC3_SetConfig+0xe0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_OC3_SetConfig+0x92>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <TIM_OC3_SetConfig+0xe4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d113      	bne.n	80039a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	621a      	str	r2, [r3, #32]
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40010400 	.word	0x40010400

080039d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	031b      	lsls	r3, r3, #12
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <TIM_OC4_SetConfig+0xa4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_OC4_SetConfig+0x68>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <TIM_OC4_SetConfig+0xa8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d109      	bne.n	8003a4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	019b      	lsls	r3, r3, #6
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40010000 	.word	0x40010000
 8003a78:	40010400 	.word	0x40010400

08003a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f023 0201 	bic.w	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f023 030a 	bic.w	r3, r3, #10
 8003ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	621a      	str	r2, [r3, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b087      	sub	sp, #28
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f023 0210 	bic.w	r2, r3, #16
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	031b      	lsls	r3, r3, #12
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f043 0307 	orr.w	r3, r3, #7
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	609a      	str	r2, [r3, #8]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	021a      	lsls	r2, r3, #8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	609a      	str	r2, [r3, #8]
}
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1a      	ldr	r2, [r3, #32]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e05a      	b.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d022      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d01d      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d018      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00e      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d009      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a17      	ldr	r2, [pc, #92]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d004      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40010400 	.word	0x40010400
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	40001800 	.word	0x40001800

08003cf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e03d      	b.n	8003d8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e03f      	b.n	8003e2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fd fcf4 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2224      	movs	r2, #36	; 0x24
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fddb 	bl	8004998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b08a      	sub	sp, #40	; 0x28
 8003e36:	af02      	add	r7, sp, #8
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d17c      	bne.n	8003f4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_UART_Transmit+0x2c>
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e075      	b.n	8003f4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_UART_Transmit+0x3e>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e06e      	b.n	8003f4e <HAL_UART_Transmit+0x11c>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2221      	movs	r2, #33	; 0x21
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e86:	f7fd fde7 	bl	8001a58 <HAL_GetTick>
 8003e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea0:	d108      	bne.n	8003eb4 <HAL_UART_Transmit+0x82>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d104      	bne.n	8003eb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e003      	b.n	8003ebc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ec4:	e02a      	b.n	8003f1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2180      	movs	r1, #128	; 0x80
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fb1f 	bl	8004514 <UART_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e036      	b.n	8003f4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10b      	bne.n	8003efe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	3302      	adds	r3, #2
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	e007      	b.n	8003f0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	781a      	ldrb	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1cf      	bne.n	8003ec6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2140      	movs	r1, #64	; 0x40
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 faef 	bl	8004514 <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e006      	b.n	8003f4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e000      	b.n	8003f4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
  }
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	4613      	mov	r3, r2
 8003f62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d11d      	bne.n	8003fac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_UART_Receive_IT+0x26>
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e016      	b.n	8003fae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Receive_IT+0x38>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e00f      	b.n	8003fae <HAL_UART_Receive_IT+0x58>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fb24 	bl	80045f0 <UART_Start_Receive_IT>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	e000      	b.n	8003fae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
  }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b0ba      	sub	sp, #232	; 0xe8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10f      	bne.n	800401e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <HAL_UART_IRQHandler+0x66>
 800400a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fc03 	bl	8004822 <UART_Receive_IT>
      return;
 800401c:	e256      	b.n	80044cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800401e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 80de 	beq.w	80041e4 <HAL_UART_IRQHandler+0x22c>
 8004028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004038:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80d1 	beq.w	80041e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <HAL_UART_IRQHandler+0xae>
 800404e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f043 0201 	orr.w	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_UART_IRQHandler+0xd2>
 8004072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f043 0202 	orr.w	r2, r3, #2
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <HAL_UART_IRQHandler+0xf6>
 8004096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f043 0204 	orr.w	r2, r3, #4
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d011      	beq.n	80040de <HAL_UART_IRQHandler+0x126>
 80040ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d105      	bne.n	80040d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f043 0208 	orr.w	r2, r3, #8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 81ed 	beq.w	80044c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_UART_IRQHandler+0x14e>
 80040f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fb8e 	bl	8004822 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <HAL_UART_IRQHandler+0x17a>
 800412a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d04f      	beq.n	80041d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fa96 	bl	8004664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	d141      	bne.n	80041ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3314      	adds	r3, #20
 800414c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800415c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3314      	adds	r3, #20
 800416e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004172:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800417e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800418a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1d9      	bne.n	8004146 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	2b00      	cmp	r3, #0
 8004198:	d013      	beq.n	80041c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	4a7d      	ldr	r2, [pc, #500]	; (8004394 <HAL_UART_IRQHandler+0x3dc>)
 80041a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe f869 	bl	800227e <HAL_DMA_Abort_IT>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d016      	beq.n	80041e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041bc:	4610      	mov	r0, r2
 80041be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	e00e      	b.n	80041e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f990 	bl	80044e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	e00a      	b.n	80041e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f98c 	bl	80044e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d0:	e006      	b.n	80041e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f988 	bl	80044e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041de:	e170      	b.n	80044c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e0:	bf00      	nop
    return;
 80041e2:	e16e      	b.n	80044c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	f040 814a 	bne.w	8004482 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8143 	beq.w	8004482 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 813c 	beq.w	8004482 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	f040 80b4 	bne.w	8004398 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800423c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8140 	beq.w	80044c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800424a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800424e:	429a      	cmp	r2, r3
 8004250:	f080 8139 	bcs.w	80044c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800425a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004266:	f000 8088 	beq.w	800437a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	330c      	adds	r3, #12
 8004292:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004296:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800429a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1d9      	bne.n	800426a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3314      	adds	r3, #20
 80042bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3314      	adds	r3, #20
 80042d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e1      	bne.n	80042b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3314      	adds	r3, #20
 80042f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3314      	adds	r3, #20
 8004312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004316:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004318:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800431c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e3      	bne.n	80042f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434a:	f023 0310 	bic.w	r3, r3, #16
 800434e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800435c:	65ba      	str	r2, [r7, #88]	; 0x58
 800435e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004362:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800436a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e3      	bne.n	8004338 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	4618      	mov	r0, r3
 8004376:	f7fd ff12 	bl	800219e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004382:	b29b      	uxth	r3, r3
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	b29b      	uxth	r3, r3
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8b6 	bl	80044fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004390:	e099      	b.n	80044c6 <HAL_UART_IRQHandler+0x50e>
 8004392:	bf00      	nop
 8004394:	0800472b 	.word	0x0800472b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 808b 	beq.w	80044ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80043b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8086 	beq.w	80044ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	330c      	adds	r3, #12
 80043c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80043e2:	647a      	str	r2, [r7, #68]	; 0x44
 80043e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e3      	bne.n	80043be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3314      	adds	r3, #20
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	623b      	str	r3, [r7, #32]
   return(result);
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3314      	adds	r3, #20
 8004416:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800441a:	633a      	str	r2, [r7, #48]	; 0x30
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e3      	bne.n	80043f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	60fb      	str	r3, [r7, #12]
   return(result);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0310 	bic.w	r3, r3, #16
 8004452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	330c      	adds	r3, #12
 800445c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004460:	61fa      	str	r2, [r7, #28]
 8004462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	69b9      	ldr	r1, [r7, #24]
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	617b      	str	r3, [r7, #20]
   return(result);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e3      	bne.n	800443c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f83e 	bl	80044fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004480:	e023      	b.n	80044ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <HAL_UART_IRQHandler+0x4ea>
 800448e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f959 	bl	8004752 <UART_Transmit_IT>
    return;
 80044a0:	e014      	b.n	80044cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00e      	beq.n	80044cc <HAL_UART_IRQHandler+0x514>
 80044ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f999 	bl	80047f2 <UART_EndTransmit_IT>
    return;
 80044c0:	e004      	b.n	80044cc <HAL_UART_IRQHandler+0x514>
    return;
 80044c2:	bf00      	nop
 80044c4:	e002      	b.n	80044cc <HAL_UART_IRQHandler+0x514>
      return;
 80044c6:	bf00      	nop
 80044c8:	e000      	b.n	80044cc <HAL_UART_IRQHandler+0x514>
      return;
 80044ca:	bf00      	nop
  }
}
 80044cc:	37e8      	adds	r7, #232	; 0xe8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop

080044d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b090      	sub	sp, #64	; 0x40
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004524:	e050      	b.n	80045c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d04c      	beq.n	80045c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800452e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <UART_WaitOnFlagUntilTimeout+0x30>
 8004534:	f7fd fa90 	bl	8001a58 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004540:	429a      	cmp	r2, r3
 8004542:	d241      	bcs.n	80045c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004564:	637a      	str	r2, [r7, #52]	; 0x34
 8004566:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800456a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e5      	bne.n	8004544 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3314      	adds	r3, #20
 800457e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	613b      	str	r3, [r7, #16]
   return(result);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3314      	adds	r3, #20
 8004596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004598:	623a      	str	r2, [r7, #32]
 800459a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	69f9      	ldr	r1, [r7, #28]
 800459e:	6a3a      	ldr	r2, [r7, #32]
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e00f      	b.n	80045e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4013      	ands	r3, r2
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d09f      	beq.n	8004526 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3740      	adds	r7, #64	; 0x40
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	4613      	mov	r3, r2
 80045fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	88fa      	ldrh	r2, [r7, #6]
 800460e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2222      	movs	r2, #34	; 0x22
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004634:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0220 	orr.w	r2, r2, #32
 8004654:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004664:	b480      	push	{r7}
 8004666:	b095      	sub	sp, #84	; 0x54
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	330c      	adds	r3, #12
 800468a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800468c:	643a      	str	r2, [r7, #64]	; 0x40
 800468e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e5      	bne.n	800466c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3314      	adds	r3, #20
 80046a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3314      	adds	r3, #20
 80046be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e5      	bne.n	80046a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d119      	bne.n	8004710 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f023 0310 	bic.w	r3, r3, #16
 80046f2:	647b      	str	r3, [r7, #68]	; 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046fc:	61ba      	str	r2, [r7, #24]
 80046fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6979      	ldr	r1, [r7, #20]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	613b      	str	r3, [r7, #16]
   return(result);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e5      	bne.n	80046dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800471e:	bf00      	nop
 8004720:	3754      	adds	r7, #84	; 0x54
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff fecf 	bl	80044e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b21      	cmp	r3, #33	; 0x21
 8004764:	d13e      	bne.n	80047e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476e:	d114      	bne.n	800479a <UART_Transmit_IT+0x48>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d110      	bne.n	800479a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800478c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	1c9a      	adds	r2, r3, #2
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	621a      	str	r2, [r3, #32]
 8004798:	e008      	b.n	80047ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	1c59      	adds	r1, r3, #1
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6211      	str	r1, [r2, #32]
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4619      	mov	r1, r3
 80047ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10f      	bne.n	80047e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e000      	b.n	80047e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
  }
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004808:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff fe5e 	bl	80044d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b08c      	sub	sp, #48	; 0x30
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b22      	cmp	r3, #34	; 0x22
 8004834:	f040 80ab 	bne.w	800498e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004840:	d117      	bne.n	8004872 <UART_Receive_IT+0x50>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d113      	bne.n	8004872 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004860:	b29a      	uxth	r2, r3
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	1c9a      	adds	r2, r3, #2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	629a      	str	r2, [r3, #40]	; 0x28
 8004870:	e026      	b.n	80048c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004878:	2300      	movs	r3, #0
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004884:	d007      	beq.n	8004896 <UART_Receive_IT+0x74>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <UART_Receive_IT+0x82>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	b2da      	uxtb	r2, r3
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	e008      	b.n	80048b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4619      	mov	r1, r3
 80048ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d15a      	bne.n	800498a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0220 	bic.w	r2, r2, #32
 80048e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	2b01      	cmp	r3, #1
 8004912:	d135      	bne.n	8004980 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	613b      	str	r3, [r7, #16]
   return(result);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f023 0310 	bic.w	r3, r3, #16
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493a:	623a      	str	r2, [r7, #32]
 800493c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	69f9      	ldr	r1, [r7, #28]
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	61bb      	str	r3, [r7, #24]
   return(result);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e5      	bne.n	800491a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b10      	cmp	r3, #16
 800495a:	d10a      	bne.n	8004972 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff fdbf 	bl	80044fc <HAL_UARTEx_RxEventCallback>
 800497e:	e002      	b.n	8004986 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fc fa6d 	bl	8000e60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e002      	b.n	8004990 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	e000      	b.n	8004990 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800498e:	2302      	movs	r3, #2
  }
}
 8004990:	4618      	mov	r0, r3
 8004992:	3730      	adds	r7, #48	; 0x30
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	b09f      	sub	sp, #124	; 0x7c
 800499e:	af00      	add	r7, sp, #0
 80049a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ae:	68d9      	ldr	r1, [r3, #12]
 80049b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	ea40 0301 	orr.w	r3, r0, r1
 80049b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80049d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049dc:	f021 010c 	bic.w	r1, r1, #12
 80049e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e6:	430b      	orrs	r3, r1
 80049e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f6:	6999      	ldr	r1, [r3, #24]
 80049f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	ea40 0301 	orr.w	r3, r0, r1
 8004a00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4bc5      	ldr	r3, [pc, #788]	; (8004d1c <UART_SetConfig+0x384>)
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d004      	beq.n	8004a16 <UART_SetConfig+0x7e>
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4bc3      	ldr	r3, [pc, #780]	; (8004d20 <UART_SetConfig+0x388>)
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d103      	bne.n	8004a1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a16:	f7fe fa67 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 8004a1a:	6778      	str	r0, [r7, #116]	; 0x74
 8004a1c:	e002      	b.n	8004a24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a1e:	f7fe fa4f 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8004a22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a2c:	f040 80b6 	bne.w	8004b9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a32:	461c      	mov	r4, r3
 8004a34:	f04f 0500 	mov.w	r5, #0
 8004a38:	4622      	mov	r2, r4
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	6439      	str	r1, [r7, #64]	; 0x40
 8004a40:	415b      	adcs	r3, r3
 8004a42:	647b      	str	r3, [r7, #68]	; 0x44
 8004a44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a48:	1912      	adds	r2, r2, r4
 8004a4a:	eb45 0303 	adc.w	r3, r5, r3
 8004a4e:	f04f 0000 	mov.w	r0, #0
 8004a52:	f04f 0100 	mov.w	r1, #0
 8004a56:	00d9      	lsls	r1, r3, #3
 8004a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a5c:	00d0      	lsls	r0, r2, #3
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	1911      	adds	r1, r2, r4
 8004a64:	6639      	str	r1, [r7, #96]	; 0x60
 8004a66:	416b      	adcs	r3, r5
 8004a68:	667b      	str	r3, [r7, #100]	; 0x64
 8004a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	1891      	adds	r1, r2, r2
 8004a76:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a78:	415b      	adcs	r3, r3
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a84:	f7fb fbf4 	bl	8000270 <__aeabi_uldivmod>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4ba5      	ldr	r3, [pc, #660]	; (8004d24 <UART_SetConfig+0x38c>)
 8004a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	011e      	lsls	r6, r3, #4
 8004a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a98:	461c      	mov	r4, r3
 8004a9a:	f04f 0500 	mov.w	r5, #0
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	1891      	adds	r1, r2, r2
 8004aa4:	6339      	str	r1, [r7, #48]	; 0x30
 8004aa6:	415b      	adcs	r3, r3
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aae:	1912      	adds	r2, r2, r4
 8004ab0:	eb45 0303 	adc.w	r3, r5, r3
 8004ab4:	f04f 0000 	mov.w	r0, #0
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	00d9      	lsls	r1, r3, #3
 8004abe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ac2:	00d0      	lsls	r0, r2, #3
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	1911      	adds	r1, r2, r4
 8004aca:	65b9      	str	r1, [r7, #88]	; 0x58
 8004acc:	416b      	adcs	r3, r5
 8004ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	1891      	adds	r1, r2, r2
 8004adc:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ade:	415b      	adcs	r3, r3
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ae6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004aea:	f7fb fbc1 	bl	8000270 <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4b8c      	ldr	r3, [pc, #560]	; (8004d24 <UART_SetConfig+0x38c>)
 8004af4:	fba3 1302 	umull	r1, r3, r3, r2
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	2164      	movs	r1, #100	; 0x64
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	3332      	adds	r3, #50	; 0x32
 8004b06:	4a87      	ldr	r2, [pc, #540]	; (8004d24 <UART_SetConfig+0x38c>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b14:	441e      	add	r6, r3
 8004b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f04f 0100 	mov.w	r1, #0
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	1894      	adds	r4, r2, r2
 8004b24:	623c      	str	r4, [r7, #32]
 8004b26:	415b      	adcs	r3, r3
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b2e:	1812      	adds	r2, r2, r0
 8004b30:	eb41 0303 	adc.w	r3, r1, r3
 8004b34:	f04f 0400 	mov.w	r4, #0
 8004b38:	f04f 0500 	mov.w	r5, #0
 8004b3c:	00dd      	lsls	r5, r3, #3
 8004b3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b42:	00d4      	lsls	r4, r2, #3
 8004b44:	4622      	mov	r2, r4
 8004b46:	462b      	mov	r3, r5
 8004b48:	1814      	adds	r4, r2, r0
 8004b4a:	653c      	str	r4, [r7, #80]	; 0x50
 8004b4c:	414b      	adcs	r3, r1
 8004b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	461a      	mov	r2, r3
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	1891      	adds	r1, r2, r2
 8004b5c:	61b9      	str	r1, [r7, #24]
 8004b5e:	415b      	adcs	r3, r3
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b6a:	f7fb fb81 	bl	8000270 <__aeabi_uldivmod>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4b6c      	ldr	r3, [pc, #432]	; (8004d24 <UART_SetConfig+0x38c>)
 8004b74:	fba3 1302 	umull	r1, r3, r3, r2
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	2164      	movs	r1, #100	; 0x64
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	3332      	adds	r3, #50	; 0x32
 8004b86:	4a67      	ldr	r2, [pc, #412]	; (8004d24 <UART_SetConfig+0x38c>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	f003 0207 	and.w	r2, r3, #7
 8004b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4432      	add	r2, r6
 8004b98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b9a:	e0b9      	b.n	8004d10 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9e:	461c      	mov	r4, r3
 8004ba0:	f04f 0500 	mov.w	r5, #0
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	462b      	mov	r3, r5
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	6139      	str	r1, [r7, #16]
 8004bac:	415b      	adcs	r3, r3
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bb4:	1912      	adds	r2, r2, r4
 8004bb6:	eb45 0303 	adc.w	r3, r5, r3
 8004bba:	f04f 0000 	mov.w	r0, #0
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	00d9      	lsls	r1, r3, #3
 8004bc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bc8:	00d0      	lsls	r0, r2, #3
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	eb12 0804 	adds.w	r8, r2, r4
 8004bd2:	eb43 0905 	adc.w	r9, r3, r5
 8004bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	008b      	lsls	r3, r1, #2
 8004bea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bee:	0082      	lsls	r2, r0, #2
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	f7fb fb3c 	bl	8000270 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4b49      	ldr	r3, [pc, #292]	; (8004d24 <UART_SetConfig+0x38c>)
 8004bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	011e      	lsls	r6, r3, #4
 8004c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	1894      	adds	r4, r2, r2
 8004c14:	60bc      	str	r4, [r7, #8]
 8004c16:	415b      	adcs	r3, r3
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c1e:	1812      	adds	r2, r2, r0
 8004c20:	eb41 0303 	adc.w	r3, r1, r3
 8004c24:	f04f 0400 	mov.w	r4, #0
 8004c28:	f04f 0500 	mov.w	r5, #0
 8004c2c:	00dd      	lsls	r5, r3, #3
 8004c2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c32:	00d4      	lsls	r4, r2, #3
 8004c34:	4622      	mov	r2, r4
 8004c36:	462b      	mov	r3, r5
 8004c38:	1814      	adds	r4, r2, r0
 8004c3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c3c:	414b      	adcs	r3, r1
 8004c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f04f 0100 	mov.w	r1, #0
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	008b      	lsls	r3, r1, #2
 8004c54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c58:	0082      	lsls	r2, r0, #2
 8004c5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c5e:	f7fb fb07 	bl	8000270 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <UART_SetConfig+0x38c>)
 8004c68:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2164      	movs	r1, #100	; 0x64
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	3332      	adds	r3, #50	; 0x32
 8004c7a:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <UART_SetConfig+0x38c>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c86:	441e      	add	r6, r3
 8004c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f04f 0100 	mov.w	r1, #0
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	1894      	adds	r4, r2, r2
 8004c96:	603c      	str	r4, [r7, #0]
 8004c98:	415b      	adcs	r3, r3
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca0:	1812      	adds	r2, r2, r0
 8004ca2:	eb41 0303 	adc.w	r3, r1, r3
 8004ca6:	f04f 0400 	mov.w	r4, #0
 8004caa:	f04f 0500 	mov.w	r5, #0
 8004cae:	00dd      	lsls	r5, r3, #3
 8004cb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cb4:	00d4      	lsls	r4, r2, #3
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	eb12 0a00 	adds.w	sl, r2, r0
 8004cbe:	eb43 0b01 	adc.w	fp, r3, r1
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f04f 0100 	mov.w	r1, #0
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	008b      	lsls	r3, r1, #2
 8004cd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cda:	0082      	lsls	r2, r0, #2
 8004cdc:	4650      	mov	r0, sl
 8004cde:	4659      	mov	r1, fp
 8004ce0:	f7fb fac6 	bl	8000270 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <UART_SetConfig+0x38c>)
 8004cea:	fba3 1302 	umull	r1, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2164      	movs	r1, #100	; 0x64
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	3332      	adds	r3, #50	; 0x32
 8004cfc:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <UART_SetConfig+0x38c>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	f003 020f 	and.w	r2, r3, #15
 8004d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4432      	add	r2, r6
 8004d0e:	609a      	str	r2, [r3, #8]
}
 8004d10:	bf00      	nop
 8004d12:	377c      	adds	r7, #124	; 0x7c
 8004d14:	46bd      	mov	sp, r7
 8004d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40011000 	.word	0x40011000
 8004d20:	40011400 	.word	0x40011400
 8004d24:	51eb851f 	.word	0x51eb851f

08004d28 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b089      	sub	sp, #36	; 0x24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	fa93 f3a3 	rbit	r3, r3
 8004d42:	613b      	str	r3, [r7, #16]
  return result;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	2103      	movs	r1, #3
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	43db      	mvns	r3, r3
 8004d56:	401a      	ands	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	fa93 f3a3 	rbit	r3, r3
 8004d62:	61bb      	str	r3, [r7, #24]
  return result;
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	fab3 f383 	clz	r3, r3
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	fa01 f303 	lsl.w	r3, r1, r3
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	3724      	adds	r7, #36	; 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	431a      	orrs	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	605a      	str	r2, [r3, #4]
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b089      	sub	sp, #36	; 0x24
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	fa93 f3a3 	rbit	r3, r3
 8004dd0:	613b      	str	r3, [r7, #16]
  return result;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	fab3 f383 	clz	r3, r3
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	2103      	movs	r1, #3
 8004dde:	fa01 f303 	lsl.w	r3, r1, r3
 8004de2:	43db      	mvns	r3, r3
 8004de4:	401a      	ands	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa93 f3a3 	rbit	r3, r3
 8004df0:	61bb      	str	r3, [r7, #24]
  return result;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	fab3 f383 	clz	r3, r3
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004e02:	431a      	orrs	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004e08:	bf00      	nop
 8004e0a:	3724      	adds	r7, #36	; 0x24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b089      	sub	sp, #36	; 0x24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	fa93 f3a3 	rbit	r3, r3
 8004e2e:	613b      	str	r3, [r7, #16]
  return result;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	fab3 f383 	clz	r3, r3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	2103      	movs	r1, #3
 8004e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e40:	43db      	mvns	r3, r3
 8004e42:	401a      	ands	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	fa93 f3a3 	rbit	r3, r3
 8004e4e:	61bb      	str	r3, [r7, #24]
  return result;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	fab3 f383 	clz	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	431a      	orrs	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	60da      	str	r2, [r3, #12]
}
 8004e66:	bf00      	nop
 8004e68:	3724      	adds	r7, #36	; 0x24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b089      	sub	sp, #36	; 0x24
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	fa93 f3a3 	rbit	r3, r3
 8004e8c:	613b      	str	r3, [r7, #16]
  return result;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	fab3 f383 	clz	r3, r3
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	210f      	movs	r1, #15
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	fa93 f3a3 	rbit	r3, r3
 8004eac:	61bb      	str	r3, [r7, #24]
  return result;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	fab3 f383 	clz	r3, r3
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004ec4:	bf00      	nop
 8004ec6:	3724      	adds	r7, #36	; 0x24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b089      	sub	sp, #36	; 0x24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	fa93 f3a3 	rbit	r3, r3
 8004eec:	613b      	str	r3, [r7, #16]
  return result;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	fab3 f383 	clz	r3, r3
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	210f      	movs	r1, #15
 8004efa:	fa01 f303 	lsl.w	r3, r1, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	401a      	ands	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	0a1b      	lsrs	r3, r3, #8
 8004f06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	fa93 f3a3 	rbit	r3, r3
 8004f0e:	61bb      	str	r3, [r7, #24]
  return result;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	fab3 f383 	clz	r3, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f20:	431a      	orrs	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004f26:	bf00      	nop
 8004f28:	3724      	adds	r7, #36	; 0x24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b088      	sub	sp, #32
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	fa93 f3a3 	rbit	r3, r3
 8004f50:	613b      	str	r3, [r7, #16]
  return result;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	fab3 f383 	clz	r3, r3
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004f5c:	e050      	b.n	8005000 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	2101      	movs	r1, #1
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d042      	beq.n	8004ffa <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d003      	beq.n	8004f84 <LL_GPIO_Init+0x52>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d10d      	bne.n	8004fa0 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	69b9      	ldr	r1, [r7, #24]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff ff12 	bl	8004db6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	461a      	mov	r2, r3
 8004f98:	69b9      	ldr	r1, [r7, #24]
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fef3 	bl	8004d86 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	69b9      	ldr	r1, [r7, #24]
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff ff33 	bl	8004e14 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d11a      	bne.n	8004fec <LL_GPIO_Init+0xba>
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	fa93 f3a3 	rbit	r3, r3
 8004fc0:	60bb      	str	r3, [r7, #8]
  return result;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004fc4:	fab3 f383 	clz	r3, r3
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b07      	cmp	r3, #7
 8004fcc:	d807      	bhi.n	8004fde <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	69b9      	ldr	r1, [r7, #24]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff ff4b 	bl	8004e72 <LL_GPIO_SetAFPin_0_7>
 8004fdc:	e006      	b.n	8004fec <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	69b9      	ldr	r1, [r7, #24]
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff ff72 	bl	8004ed0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	69b9      	ldr	r1, [r7, #24]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff fe97 	bl	8004d28 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	fa22 f303 	lsr.w	r3, r2, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1a7      	bne.n	8004f5e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3720      	adds	r7, #32
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <LL_I2C_Enable>:
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f043 0201 	orr.w	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	601a      	str	r2, [r3, #0]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <LL_I2C_Disable>:
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f023 0201 	bic.w	r2, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	601a      	str	r2, [r3, #0]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <LL_I2C_SetOwnAddress1>:
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800506c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	430a      	orrs	r2, r1
 8005076:	431a      	orrs	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4a42      	ldr	r2, [pc, #264]	; (80051ac <LL_I2C_ConfigSpeed+0x124>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	0c9b      	lsrs	r3, r3, #18
 80050a8:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	431a      	orrs	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	493a      	ldr	r1, [pc, #232]	; (80051b0 <LL_I2C_ConfigSpeed+0x128>)
 80050c6:	428b      	cmp	r3, r1
 80050c8:	d802      	bhi.n	80050d0 <LL_I2C_ConfigSpeed+0x48>
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	3301      	adds	r3, #1
 80050ce:	e009      	b.n	80050e4 <LL_I2C_ConfigSpeed+0x5c>
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80050d6:	fb01 f303 	mul.w	r3, r1, r3
 80050da:	4936      	ldr	r1, [pc, #216]	; (80051b4 <LL_I2C_ConfigSpeed+0x12c>)
 80050dc:	fba1 1303 	umull	r1, r3, r1, r3
 80050e0:	099b      	lsrs	r3, r3, #6
 80050e2:	3301      	adds	r3, #1
 80050e4:	431a      	orrs	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a30      	ldr	r2, [pc, #192]	; (80051b0 <LL_I2C_ConfigSpeed+0x128>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d939      	bls.n	8005166 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d117      	bne.n	8005128 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	4413      	add	r3, r2
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	4413      	add	r3, r2
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800511c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005120:	e01d      	b.n	800515e <LL_I2C_ConfigSpeed+0xd6>
 8005122:	f248 0301 	movw	r3, #32769	; 0x8001
 8005126:	e01a      	b.n	800515e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	009a      	lsls	r2, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009a      	lsls	r2, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005158:	e001      	b.n	800515e <LL_I2C_ConfigSpeed+0xd6>
 800515a:	f248 0301 	movw	r3, #32769	; 0x8001
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	e011      	b.n	800518a <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005170:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005174:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8005176:	2b00      	cmp	r3, #0
 8005178:	d005      	beq.n	8005186 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	e000      	b.n	8005188 <LL_I2C_ConfigSpeed+0x100>
 8005186:	2304      	movs	r3, #4
 8005188:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8005192:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	431a      	orrs	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	61da      	str	r2, [r3, #28]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	431bde83 	.word	0x431bde83
 80051b0:	000186a0 	.word	0x000186a0
 80051b4:	10624dd3 	.word	0x10624dd3

080051b8 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f023 021a 	bic.w	r2, r3, #26
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	601a      	str	r2, [r3, #0]
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	601a      	str	r2, [r3, #0]
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff ff12 	bl	8005038 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005214:	f107 0308 	add.w	r3, r7, #8
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f895 	bl	8005348 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800521e:	6939      	ldr	r1, [r7, #16]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff ff2d 	bl	8005088 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68d9      	ldr	r1, [r3, #12]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	461a      	mov	r2, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff0d 	bl	8005058 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ffb7 	bl	80051b8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff fee4 	bl	8005018 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff ffc1 	bl	80051de <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800526c:	4b04      	ldr	r3, [pc, #16]	; (8005280 <LL_RCC_GetSysClkSource+0x18>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 030c 	and.w	r3, r3, #12
}
 8005274:	4618      	mov	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40023800 	.word	0x40023800

08005284 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <LL_RCC_GetAHBPrescaler+0x18>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40023800 	.word	0x40023800

080052a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80052a4:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800

080052bc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80052c0:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40023800 	.word	0x40023800

080052d8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80052dc:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <LL_RCC_PLL_GetMainSource+0x18>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40023800 	.word	0x40023800

080052f4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80052f8:	4b04      	ldr	r3, [pc, #16]	; (800530c <LL_RCC_PLL_GetN+0x18>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	099b      	lsrs	r3, r3, #6
 80052fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005302:	4618      	mov	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40023800 	.word	0x40023800

08005310 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005314:	4b04      	ldr	r3, [pc, #16]	; (8005328 <LL_RCC_PLL_GetP+0x18>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40023800 	.word	0x40023800

0800532c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <LL_RCC_PLL_GetDivider+0x18>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800

08005348 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005350:	f000 f820 	bl	8005394 <RCC_GetSystemClockFreq>
 8005354:	4602      	mov	r2, r0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f840 	bl	80053e4 <RCC_GetHCLKClockFreq>
 8005364:	4602      	mov	r2, r0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f84e 	bl	8005410 <RCC_GetPCLK1ClockFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f85a 	bl	8005438 <RCC_GetPCLK2ClockFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60da      	str	r2, [r3, #12]
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800539e:	f7ff ff63 	bl	8005268 <LL_RCC_GetSysClkSource>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d00c      	beq.n	80053c2 <RCC_GetSystemClockFreq+0x2e>
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d80f      	bhi.n	80053cc <RCC_GetSystemClockFreq+0x38>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <RCC_GetSystemClockFreq+0x22>
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d003      	beq.n	80053bc <RCC_GetSystemClockFreq+0x28>
 80053b4:	e00a      	b.n	80053cc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <RCC_GetSystemClockFreq+0x48>)
 80053b8:	607b      	str	r3, [r7, #4]
      break;
 80053ba:	e00a      	b.n	80053d2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80053bc:	4b08      	ldr	r3, [pc, #32]	; (80053e0 <RCC_GetSystemClockFreq+0x4c>)
 80053be:	607b      	str	r3, [r7, #4]
      break;
 80053c0:	e007      	b.n	80053d2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80053c2:	2008      	movs	r0, #8
 80053c4:	f000 f84c 	bl	8005460 <RCC_PLL_GetFreqDomain_SYS>
 80053c8:	6078      	str	r0, [r7, #4]
      break;
 80053ca:	e002      	b.n	80053d2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <RCC_GetSystemClockFreq+0x48>)
 80053ce:	607b      	str	r3, [r7, #4]
      break;
 80053d0:	bf00      	nop
  }

  return frequency;
 80053d2:	687b      	ldr	r3, [r7, #4]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	017d7840 	.word	0x017d7840

080053e4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80053ec:	f7ff ff4a 	bl	8005284 <LL_RCC_GetAHBPrescaler>
 80053f0:	4603      	mov	r3, r0
 80053f2:	091b      	lsrs	r3, r3, #4
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	4a04      	ldr	r2, [pc, #16]	; (800540c <RCC_GetHCLKClockFreq+0x28>)
 80053fa:	5cd3      	ldrb	r3, [r2, r3]
 80053fc:	461a      	mov	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	40d3      	lsrs	r3, r2
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	08009424 	.word	0x08009424

08005410 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005418:	f7ff ff42 	bl	80052a0 <LL_RCC_GetAPB1Prescaler>
 800541c:	4603      	mov	r3, r0
 800541e:	0a9b      	lsrs	r3, r3, #10
 8005420:	4a04      	ldr	r2, [pc, #16]	; (8005434 <RCC_GetPCLK1ClockFreq+0x24>)
 8005422:	5cd3      	ldrb	r3, [r2, r3]
 8005424:	461a      	mov	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	40d3      	lsrs	r3, r2
}
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	08009434 	.word	0x08009434

08005438 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005440:	f7ff ff3c 	bl	80052bc <LL_RCC_GetAPB2Prescaler>
 8005444:	4603      	mov	r3, r0
 8005446:	0b5b      	lsrs	r3, r3, #13
 8005448:	4a04      	ldr	r2, [pc, #16]	; (800545c <RCC_GetPCLK2ClockFreq+0x24>)
 800544a:	5cd3      	ldrb	r3, [r2, r3]
 800544c:	461a      	mov	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	40d3      	lsrs	r3, r2
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	08009434 	.word	0x08009434

08005460 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005474:	f7ff ff30 	bl	80052d8 <LL_RCC_PLL_GetMainSource>
 8005478:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005486:	d003      	beq.n	8005490 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005488:	e005      	b.n	8005496 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800548c:	617b      	str	r3, [r7, #20]
      break;
 800548e:	e005      	b.n	800549c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005492:	617b      	str	r3, [r7, #20]
      break;
 8005494:	e002      	b.n	800549c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005498:	617b      	str	r3, [r7, #20]
      break;
 800549a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d113      	bne.n	80054ca <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80054a2:	f7ff ff43 	bl	800532c <LL_RCC_PLL_GetDivider>
 80054a6:	4602      	mov	r2, r0
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	fbb3 f4f2 	udiv	r4, r3, r2
 80054ae:	f7ff ff21 	bl	80052f4 <LL_RCC_PLL_GetN>
 80054b2:	4603      	mov	r3, r0
 80054b4:	fb03 f404 	mul.w	r4, r3, r4
 80054b8:	f7ff ff2a 	bl	8005310 <LL_RCC_PLL_GetP>
 80054bc:	4603      	mov	r3, r0
 80054be:	0c1b      	lsrs	r3, r3, #16
 80054c0:	3301      	adds	r3, #1
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	fbb4 f3f3 	udiv	r3, r4, r3
 80054c8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80054ca:	693b      	ldr	r3, [r7, #16]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd90      	pop	{r4, r7, pc}
 80054d4:	00f42400 	.word	0x00f42400
 80054d8:	017d7840 	.word	0x017d7840

080054dc <__NVIC_SetPriority>:
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	6039      	str	r1, [r7, #0]
 80054e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	db0a      	blt.n	8005506 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	490c      	ldr	r1, [pc, #48]	; (8005528 <__NVIC_SetPriority+0x4c>)
 80054f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fa:	0112      	lsls	r2, r2, #4
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	440b      	add	r3, r1
 8005500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005504:	e00a      	b.n	800551c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	4908      	ldr	r1, [pc, #32]	; (800552c <__NVIC_SetPriority+0x50>)
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	3b04      	subs	r3, #4
 8005514:	0112      	lsls	r2, r2, #4
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	440b      	add	r3, r1
 800551a:	761a      	strb	r2, [r3, #24]
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	e000e100 	.word	0xe000e100
 800552c:	e000ed00 	.word	0xe000ed00

08005530 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005534:	2100      	movs	r1, #0
 8005536:	f06f 0004 	mvn.w	r0, #4
 800553a:	f7ff ffcf 	bl	80054dc <__NVIC_SetPriority>
#endif
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800554a:	f3ef 8305 	mrs	r3, IPSR
 800554e:	603b      	str	r3, [r7, #0]
  return(result);
 8005550:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005556:	f06f 0305 	mvn.w	r3, #5
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	e00c      	b.n	8005578 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <osKernelInitialize+0x44>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005566:	4b08      	ldr	r3, [pc, #32]	; (8005588 <osKernelInitialize+0x44>)
 8005568:	2201      	movs	r2, #1
 800556a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800556c:	2300      	movs	r3, #0
 800556e:	607b      	str	r3, [r7, #4]
 8005570:	e002      	b.n	8005578 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005572:	f04f 33ff 	mov.w	r3, #4294967295
 8005576:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005578:	687b      	ldr	r3, [r7, #4]
}
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20000094 	.word	0x20000094

0800558c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005592:	f3ef 8305 	mrs	r3, IPSR
 8005596:	603b      	str	r3, [r7, #0]
  return(result);
 8005598:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800559e:	f06f 0305 	mvn.w	r3, #5
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	e010      	b.n	80055c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <osKernelStart+0x48>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d109      	bne.n	80055c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80055ae:	f7ff ffbf 	bl	8005530 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <osKernelStart+0x48>)
 80055b4:	2202      	movs	r2, #2
 80055b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80055b8:	f001 f866 	bl	8006688 <vTaskStartScheduler>
      stat = osOK;
 80055bc:	2300      	movs	r3, #0
 80055be:	607b      	str	r3, [r7, #4]
 80055c0:	e002      	b.n	80055c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80055c2:	f04f 33ff 	mov.w	r3, #4294967295
 80055c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055c8:	687b      	ldr	r3, [r7, #4]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000094 	.word	0x20000094

080055d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08e      	sub	sp, #56	; 0x38
 80055dc:	af04      	add	r7, sp, #16
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e8:	f3ef 8305 	mrs	r3, IPSR
 80055ec:	617b      	str	r3, [r7, #20]
  return(result);
 80055ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d17e      	bne.n	80056f2 <osThreadNew+0x11a>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d07b      	beq.n	80056f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80055fa:	2380      	movs	r3, #128	; 0x80
 80055fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055fe:	2318      	movs	r3, #24
 8005600:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005606:	f04f 33ff 	mov.w	r3, #4294967295
 800560a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d045      	beq.n	800569e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <osThreadNew+0x48>
        name = attr->name;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <osThreadNew+0x6e>
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b38      	cmp	r3, #56	; 0x38
 8005638:	d805      	bhi.n	8005646 <osThreadNew+0x6e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <osThreadNew+0x72>
        return (NULL);
 8005646:	2300      	movs	r3, #0
 8005648:	e054      	b.n	80056f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	089b      	lsrs	r3, r3, #2
 8005658:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00e      	beq.n	8005680 <osThreadNew+0xa8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	2b5b      	cmp	r3, #91	; 0x5b
 8005668:	d90a      	bls.n	8005680 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800566e:	2b00      	cmp	r3, #0
 8005670:	d006      	beq.n	8005680 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <osThreadNew+0xa8>
        mem = 1;
 800567a:	2301      	movs	r3, #1
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	e010      	b.n	80056a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10c      	bne.n	80056a2 <osThreadNew+0xca>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d108      	bne.n	80056a2 <osThreadNew+0xca>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d104      	bne.n	80056a2 <osThreadNew+0xca>
          mem = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	e001      	b.n	80056a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d110      	bne.n	80056ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056b0:	9202      	str	r2, [sp, #8]
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	6a3a      	ldr	r2, [r7, #32]
 80056bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fe0c 	bl	80062dc <xTaskCreateStatic>
 80056c4:	4603      	mov	r3, r0
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	e013      	b.n	80056f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d110      	bne.n	80056f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	f107 0310 	add.w	r3, r7, #16
 80056d8:	9301      	str	r3, [sp, #4]
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 fe57 	bl	8006396 <xTaskCreate>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d001      	beq.n	80056f2 <osThreadNew+0x11a>
            hTask = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056f2:	693b      	ldr	r3, [r7, #16]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3728      	adds	r7, #40	; 0x28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005704:	f3ef 8305 	mrs	r3, IPSR
 8005708:	60bb      	str	r3, [r7, #8]
  return(result);
 800570a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <osDelay+0x1c>
    stat = osErrorISR;
 8005710:	f06f 0305 	mvn.w	r3, #5
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e007      	b.n	8005728 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 ff7c 	bl	8006620 <vTaskDelay>
    }
  }

  return (stat);
 8005728:	68fb      	ldr	r3, [r7, #12]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a07      	ldr	r2, [pc, #28]	; (8005760 <vApplicationGetIdleTaskMemory+0x2c>)
 8005744:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4a06      	ldr	r2, [pc, #24]	; (8005764 <vApplicationGetIdleTaskMemory+0x30>)
 800574a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2280      	movs	r2, #128	; 0x80
 8005750:	601a      	str	r2, [r3, #0]
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000098 	.word	0x20000098
 8005764:	200000f4 	.word	0x200000f4

08005768 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a07      	ldr	r2, [pc, #28]	; (8005794 <vApplicationGetTimerTaskMemory+0x2c>)
 8005778:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4a06      	ldr	r2, [pc, #24]	; (8005798 <vApplicationGetTimerTaskMemory+0x30>)
 800577e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005786:	601a      	str	r2, [r3, #0]
}
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	200002f4 	.word	0x200002f4
 8005798:	20000350 	.word	0x20000350

0800579c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f103 0208 	add.w	r2, r3, #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f04f 32ff 	mov.w	r2, #4294967295
 80057b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f103 0208 	add.w	r2, r3, #8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f103 0208 	add.w	r2, r3, #8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	601a      	str	r2, [r3, #0]
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d103      	bne.n	800585e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	e00c      	b.n	8005878 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3308      	adds	r3, #8
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e002      	b.n	800586c <vListInsert+0x2e>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	d2f6      	bcs.n	8005866 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6892      	ldr	r2, [r2, #8]
 80058c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6852      	ldr	r2, [r2, #4]
 80058d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d103      	bne.n	80058e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	1e5a      	subs	r2, r3, #1
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800592e:	f002 f851 	bl	80079d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	441a      	add	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595e:	3b01      	subs	r3, #1
 8005960:	68f9      	ldr	r1, [r7, #12]
 8005962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	441a      	add	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	22ff      	movs	r2, #255	; 0xff
 800597a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d114      	bne.n	80059ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01a      	beq.n	80059c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3310      	adds	r3, #16
 8005990:	4618      	mov	r0, r3
 8005992:	f001 f903 	bl	8006b9c <xTaskRemoveFromEventList>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d012      	beq.n	80059c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <xQueueGenericReset+0xcc>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	e009      	b.n	80059c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3310      	adds	r3, #16
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fef2 	bl	800579c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3324      	adds	r3, #36	; 0x24
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff feed 	bl	800579c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059c2:	f002 f837 	bl	8007a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059c6:	2301      	movs	r3, #1
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08e      	sub	sp, #56	; 0x38
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <xQueueGenericCreateStatic+0x52>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <xQueueGenericCreateStatic+0x56>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <xQueueGenericCreateStatic+0x58>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	623b      	str	r3, [r7, #32]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d102      	bne.n	8005a52 <xQueueGenericCreateStatic+0x7e>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <xQueueGenericCreateStatic+0x82>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <xQueueGenericCreateStatic+0x84>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	61fb      	str	r3, [r7, #28]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a72:	2350      	movs	r3, #80	; 0x50
 8005a74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b50      	cmp	r3, #80	; 0x50
 8005a7a:	d00a      	beq.n	8005a92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	61bb      	str	r3, [r7, #24]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00d      	beq.n	8005aba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005aa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f805 	bl	8005ac4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3730      	adds	r7, #48	; 0x30
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d103      	bne.n	8005ae0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e002      	b.n	8005ae6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005af2:	2101      	movs	r1, #1
 8005af4:	69b8      	ldr	r0, [r7, #24]
 8005af6:	f7ff ff05 	bl	8005904 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	78fa      	ldrb	r2, [r7, #3]
 8005afe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b02:	bf00      	nop
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08e      	sub	sp, #56	; 0x38
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <xQueueGenericSend+0x32>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <xQueueGenericSend+0x40>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <xQueueGenericSend+0x44>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <xQueueGenericSend+0x46>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <xQueueGenericSend+0x60>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d103      	bne.n	8005b7a <xQueueGenericSend+0x6e>
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <xQueueGenericSend+0x72>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <xQueueGenericSend+0x74>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10a      	bne.n	8005b9a <xQueueGenericSend+0x8e>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	623b      	str	r3, [r7, #32]
}
 8005b96:	bf00      	nop
 8005b98:	e7fe      	b.n	8005b98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b9a:	f001 f9bd 	bl	8006f18 <xTaskGetSchedulerState>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <xQueueGenericSend+0x9e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <xQueueGenericSend+0xa2>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <xQueueGenericSend+0xa4>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <xQueueGenericSend+0xbe>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	61fb      	str	r3, [r7, #28]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bca:	f001 ff03 	bl	80079d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <xQueueGenericSend+0xd4>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d129      	bne.n	8005c34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005be6:	f000 fa0b 	bl	8006000 <prvCopyDataToQueue>
 8005bea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d010      	beq.n	8005c16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	3324      	adds	r3, #36	; 0x24
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 ffcf 	bl	8006b9c <xTaskRemoveFromEventList>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d013      	beq.n	8005c2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c04:	4b3f      	ldr	r3, [pc, #252]	; (8005d04 <xQueueGenericSend+0x1f8>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	e00a      	b.n	8005c2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c1c:	4b39      	ldr	r3, [pc, #228]	; (8005d04 <xQueueGenericSend+0x1f8>)
 8005c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c2c:	f001 ff02 	bl	8007a34 <vPortExitCritical>
				return pdPASS;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e063      	b.n	8005cfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c3a:	f001 fefb 	bl	8007a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e05c      	b.n	8005cfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c48:	f107 0314 	add.w	r3, r7, #20
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 f809 	bl	8006c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c52:	2301      	movs	r3, #1
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c56:	f001 feed 	bl	8007a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c5a:	f000 fd7b 	bl	8006754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c5e:	f001 feb9 	bl	80079d4 <vPortEnterCritical>
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c68:	b25b      	sxtb	r3, r3
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d103      	bne.n	8005c78 <xQueueGenericSend+0x16c>
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c7e:	b25b      	sxtb	r3, r3
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d103      	bne.n	8005c8e <xQueueGenericSend+0x182>
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c8e:	f001 fed1 	bl	8007a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c92:	1d3a      	adds	r2, r7, #4
 8005c94:	f107 0314 	add.w	r3, r7, #20
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fff8 	bl	8006c90 <xTaskCheckForTimeOut>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d124      	bne.n	8005cf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ca8:	f000 faa2 	bl	80061f0 <prvIsQueueFull>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d018      	beq.n	8005ce4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	3310      	adds	r3, #16
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 ff1e 	bl	8006afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cc2:	f000 fa2d 	bl	8006120 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cc6:	f000 fd53 	bl	8006770 <xTaskResumeAll>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f47f af7c 	bne.w	8005bca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <xQueueGenericSend+0x1f8>)
 8005cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	e772      	b.n	8005bca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ce6:	f000 fa1b 	bl	8006120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cea:	f000 fd41 	bl	8006770 <xTaskResumeAll>
 8005cee:	e76c      	b.n	8005bca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cf2:	f000 fa15 	bl	8006120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cf6:	f000 fd3b 	bl	8006770 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005cfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3738      	adds	r7, #56	; 0x38
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b090      	sub	sp, #64	; 0x40
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d103      	bne.n	8005d44 <xQueueGenericSendFromISR+0x3c>
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <xQueueGenericSendFromISR+0x40>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <xQueueGenericSendFromISR+0x42>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d103      	bne.n	8005d72 <xQueueGenericSendFromISR+0x6a>
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <xQueueGenericSendFromISR+0x6e>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <xQueueGenericSendFromISR+0x70>
 8005d76:	2300      	movs	r3, #0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	623b      	str	r3, [r7, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d92:	f001 ff01 	bl	8007b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d96:	f3ef 8211 	mrs	r2, BASEPRI
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	61fa      	str	r2, [r7, #28]
 8005dac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005dae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005db0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d302      	bcc.n	8005dc4 <xQueueGenericSendFromISR+0xbc>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d12f      	bne.n	8005e24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dda:	f000 f911 	bl	8006000 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de6:	d112      	bne.n	8005e0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d016      	beq.n	8005e1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	3324      	adds	r3, #36	; 0x24
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fed1 	bl	8006b9c <xTaskRemoveFromEventList>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00e      	beq.n	8005e1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00b      	beq.n	8005e1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e007      	b.n	8005e1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e12:	3301      	adds	r3, #1
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	b25a      	sxtb	r2, r3
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e22:	e001      	b.n	8005e28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e24:	2300      	movs	r3, #0
 8005e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3740      	adds	r7, #64	; 0x40
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	; 0x30
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <xQueueReceive+0x30>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	623b      	str	r3, [r7, #32]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d103      	bne.n	8005e7e <xQueueReceive+0x3e>
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <xQueueReceive+0x42>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <xQueueReceive+0x44>
 8005e82:	2300      	movs	r3, #0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xQueueReceive+0x5e>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	61fb      	str	r3, [r7, #28]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e9e:	f001 f83b 	bl	8006f18 <xTaskGetSchedulerState>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <xQueueReceive+0x6e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <xQueueReceive+0x72>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <xQueueReceive+0x74>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <xQueueReceive+0x8e>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	61bb      	str	r3, [r7, #24]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ece:	f001 fd81 	bl	80079d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01f      	beq.n	8005f1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ee2:	f000 f8f7 	bl	80060d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	1e5a      	subs	r2, r3, #1
 8005eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00f      	beq.n	8005f16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	3310      	adds	r3, #16
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fe4e 	bl	8006b9c <xTaskRemoveFromEventList>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f06:	4b3d      	ldr	r3, [pc, #244]	; (8005ffc <xQueueReceive+0x1bc>)
 8005f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f16:	f001 fd8d 	bl	8007a34 <vPortExitCritical>
				return pdPASS;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e069      	b.n	8005ff2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d103      	bne.n	8005f2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f24:	f001 fd86 	bl	8007a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e062      	b.n	8005ff2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f32:	f107 0310 	add.w	r3, r7, #16
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fe94 	bl	8006c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f40:	f001 fd78 	bl	8007a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f44:	f000 fc06 	bl	8006754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f48:	f001 fd44 	bl	80079d4 <vPortEnterCritical>
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f52:	b25b      	sxtb	r3, r3
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f58:	d103      	bne.n	8005f62 <xQueueReceive+0x122>
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d103      	bne.n	8005f78 <xQueueReceive+0x138>
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f78:	f001 fd5c 	bl	8007a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f7c:	1d3a      	adds	r2, r7, #4
 8005f7e:	f107 0310 	add.w	r3, r7, #16
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fe83 	bl	8006c90 <xTaskCheckForTimeOut>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d123      	bne.n	8005fd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f92:	f000 f917 	bl	80061c4 <prvIsQueueEmpty>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d017      	beq.n	8005fcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	3324      	adds	r3, #36	; 0x24
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fda9 	bl	8006afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fac:	f000 f8b8 	bl	8006120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fb0:	f000 fbde 	bl	8006770 <xTaskResumeAll>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d189      	bne.n	8005ece <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005fba:	4b10      	ldr	r3, [pc, #64]	; (8005ffc <xQueueReceive+0x1bc>)
 8005fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	e780      	b.n	8005ece <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fce:	f000 f8a7 	bl	8006120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fd2:	f000 fbcd 	bl	8006770 <xTaskResumeAll>
 8005fd6:	e77a      	b.n	8005ece <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fda:	f000 f8a1 	bl	8006120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fde:	f000 fbc7 	bl	8006770 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fe4:	f000 f8ee 	bl	80061c4 <prvIsQueueEmpty>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f43f af6f 	beq.w	8005ece <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ff0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3730      	adds	r7, #48	; 0x30
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10d      	bne.n	800603a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d14d      	bne.n	80060c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 ff92 	bl	8006f54 <xTaskPriorityDisinherit>
 8006030:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	609a      	str	r2, [r3, #8]
 8006038:	e043      	b.n	80060c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d119      	bne.n	8006074 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6858      	ldr	r0, [r3, #4]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	461a      	mov	r2, r3
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	f001 fff8 	bl	8008040 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	441a      	add	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	429a      	cmp	r2, r3
 8006068:	d32b      	bcc.n	80060c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	605a      	str	r2, [r3, #4]
 8006072:	e026      	b.n	80060c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68d8      	ldr	r0, [r3, #12]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	461a      	mov	r2, r3
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	f001 ffde 	bl	8008040 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	425b      	negs	r3, r3
 800608e:	441a      	add	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d207      	bcs.n	80060b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	425b      	negs	r3, r3
 80060aa:	441a      	add	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d105      	bne.n	80060c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	3b01      	subs	r3, #1
 80060c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060ca:	697b      	ldr	r3, [r7, #20]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d018      	beq.n	8006118 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	441a      	add	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d303      	bcc.n	8006108 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68d9      	ldr	r1, [r3, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	461a      	mov	r2, r3
 8006112:	6838      	ldr	r0, [r7, #0]
 8006114:	f001 ff94 	bl	8008040 <memcpy>
	}
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006128:	f001 fc54 	bl	80079d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006132:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006134:	e011      	b.n	800615a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	2b00      	cmp	r3, #0
 800613c:	d012      	beq.n	8006164 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3324      	adds	r3, #36	; 0x24
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fd2a 	bl	8006b9c <xTaskRemoveFromEventList>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800614e:	f000 fe01 	bl	8006d54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	3b01      	subs	r3, #1
 8006156:	b2db      	uxtb	r3, r3
 8006158:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800615a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615e:	2b00      	cmp	r3, #0
 8006160:	dce9      	bgt.n	8006136 <prvUnlockQueue+0x16>
 8006162:	e000      	b.n	8006166 <prvUnlockQueue+0x46>
					break;
 8006164:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	22ff      	movs	r2, #255	; 0xff
 800616a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800616e:	f001 fc61 	bl	8007a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006172:	f001 fc2f 	bl	80079d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800617c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800617e:	e011      	b.n	80061a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d012      	beq.n	80061ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3310      	adds	r3, #16
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fd05 	bl	8006b9c <xTaskRemoveFromEventList>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006198:	f000 fddc 	bl	8006d54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	3b01      	subs	r3, #1
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	dce9      	bgt.n	8006180 <prvUnlockQueue+0x60>
 80061ac:	e000      	b.n	80061b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	22ff      	movs	r2, #255	; 0xff
 80061b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061b8:	f001 fc3c 	bl	8007a34 <vPortExitCritical>
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061cc:	f001 fc02 	bl	80079d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d102      	bne.n	80061de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061d8:	2301      	movs	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e001      	b.n	80061e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061e2:	f001 fc27 	bl	8007a34 <vPortExitCritical>

	return xReturn;
 80061e6:	68fb      	ldr	r3, [r7, #12]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061f8:	f001 fbec 	bl	80079d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006204:	429a      	cmp	r2, r3
 8006206:	d102      	bne.n	800620e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006208:	2301      	movs	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	e001      	b.n	8006212 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006212:	f001 fc0f 	bl	8007a34 <vPortExitCritical>

	return xReturn;
 8006216:	68fb      	ldr	r3, [r7, #12]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	e014      	b.n	800625a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006230:	4a0f      	ldr	r2, [pc, #60]	; (8006270 <vQueueAddToRegistry+0x50>)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800623c:	490c      	ldr	r1, [pc, #48]	; (8006270 <vQueueAddToRegistry+0x50>)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006246:	4a0a      	ldr	r2, [pc, #40]	; (8006270 <vQueueAddToRegistry+0x50>)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	4413      	add	r3, r2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006252:	e006      	b.n	8006262 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3301      	adds	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b07      	cmp	r3, #7
 800625e:	d9e7      	bls.n	8006230 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	20004f80 	.word	0x20004f80

08006274 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006284:	f001 fba6 	bl	80079d4 <vPortEnterCritical>
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800628e:	b25b      	sxtb	r3, r3
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d103      	bne.n	800629e <vQueueWaitForMessageRestricted+0x2a>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062a4:	b25b      	sxtb	r3, r3
 80062a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062aa:	d103      	bne.n	80062b4 <vQueueWaitForMessageRestricted+0x40>
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062b4:	f001 fbbe 	bl	8007a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	3324      	adds	r3, #36	; 0x24
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fc3b 	bl	8006b44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062ce:	6978      	ldr	r0, [r7, #20]
 80062d0:	f7ff ff26 	bl	8006120 <prvUnlockQueue>
	}
 80062d4:	bf00      	nop
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08e      	sub	sp, #56	; 0x38
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xTaskCreateStatic+0x2a>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	623b      	str	r3, [r7, #32]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <xTaskCreateStatic+0x46>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	61fb      	str	r3, [r7, #28]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006322:	235c      	movs	r3, #92	; 0x5c
 8006324:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b5c      	cmp	r3, #92	; 0x5c
 800632a:	d00a      	beq.n	8006342 <xTaskCreateStatic+0x66>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	61bb      	str	r3, [r7, #24]
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006342:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01e      	beq.n	8006388 <xTaskCreateStatic+0xac>
 800634a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01b      	beq.n	8006388 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006358:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	2202      	movs	r2, #2
 800635e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006362:	2300      	movs	r3, #0
 8006364:	9303      	str	r3, [sp, #12]
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	9302      	str	r3, [sp, #8]
 800636a:	f107 0314 	add.w	r3, r7, #20
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	68b9      	ldr	r1, [r7, #8]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f850 	bl	8006420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006382:	f000 f8dd 	bl	8006540 <prvAddNewTaskToReadyList>
 8006386:	e001      	b.n	800638c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006388:	2300      	movs	r3, #0
 800638a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800638c:	697b      	ldr	r3, [r7, #20]
	}
 800638e:	4618      	mov	r0, r3
 8006390:	3728      	adds	r7, #40	; 0x28
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006396:	b580      	push	{r7, lr}
 8006398:	b08c      	sub	sp, #48	; 0x30
 800639a:	af04      	add	r7, sp, #16
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 fc34 	bl	8007c18 <pvPortMalloc>
 80063b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00e      	beq.n	80063d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063b8:	205c      	movs	r0, #92	; 0x5c
 80063ba:	f001 fc2d 	bl	8007c18 <pvPortMalloc>
 80063be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
 80063cc:	e005      	b.n	80063da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063ce:	6978      	ldr	r0, [r7, #20]
 80063d0:	f001 fcee 	bl	8007db0 <vPortFree>
 80063d4:	e001      	b.n	80063da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d017      	beq.n	8006410 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	2300      	movs	r3, #0
 80063ec:	9303      	str	r3, [sp, #12]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	9302      	str	r3, [sp, #8]
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 f80e 	bl	8006420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006404:	69f8      	ldr	r0, [r7, #28]
 8006406:	f000 f89b 	bl	8006540 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800640a:	2301      	movs	r3, #1
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e002      	b.n	8006416 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006410:	f04f 33ff 	mov.w	r3, #4294967295
 8006414:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006416:	69bb      	ldr	r3, [r7, #24]
	}
 8006418:	4618      	mov	r0, r3
 800641a:	3720      	adds	r7, #32
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	461a      	mov	r2, r3
 8006438:	21a5      	movs	r1, #165	; 0xa5
 800643a:	f001 fe0f 	bl	800805c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006448:	3b01      	subs	r3, #1
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f023 0307 	bic.w	r3, r3, #7
 8006456:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	617b      	str	r3, [r7, #20]
}
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d01f      	beq.n	80064be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
 8006482:	e012      	b.n	80064aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	7819      	ldrb	r1, [r3, #0]
 800648c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	3334      	adds	r3, #52	; 0x34
 8006494:	460a      	mov	r2, r1
 8006496:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d006      	beq.n	80064b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	3301      	adds	r3, #1
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	2b0f      	cmp	r3, #15
 80064ae:	d9e9      	bls.n	8006484 <prvInitialiseNewTask+0x64>
 80064b0:	e000      	b.n	80064b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80064b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064bc:	e003      	b.n	80064c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	2b37      	cmp	r3, #55	; 0x37
 80064ca:	d901      	bls.n	80064d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064cc:	2337      	movs	r3, #55	; 0x37
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	2200      	movs	r2, #0
 80064e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	3304      	adds	r3, #4
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff f978 	bl	80057dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	3318      	adds	r3, #24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff f973 	bl	80057dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	2200      	movs	r2, #0
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	68f9      	ldr	r1, [r7, #12]
 800651e:	69b8      	ldr	r0, [r7, #24]
 8006520:	f001 f928 	bl	8007774 <pxPortInitialiseStack>
 8006524:	4602      	mov	r2, r0
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006536:	bf00      	nop
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006548:	f001 fa44 	bl	80079d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800654c:	4b2d      	ldr	r3, [pc, #180]	; (8006604 <prvAddNewTaskToReadyList+0xc4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3301      	adds	r3, #1
 8006552:	4a2c      	ldr	r2, [pc, #176]	; (8006604 <prvAddNewTaskToReadyList+0xc4>)
 8006554:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006556:	4b2c      	ldr	r3, [pc, #176]	; (8006608 <prvAddNewTaskToReadyList+0xc8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800655e:	4a2a      	ldr	r2, [pc, #168]	; (8006608 <prvAddNewTaskToReadyList+0xc8>)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006564:	4b27      	ldr	r3, [pc, #156]	; (8006604 <prvAddNewTaskToReadyList+0xc4>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d110      	bne.n	800658e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800656c:	f000 fc16 	bl	8006d9c <prvInitialiseTaskLists>
 8006570:	e00d      	b.n	800658e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006572:	4b26      	ldr	r3, [pc, #152]	; (800660c <prvAddNewTaskToReadyList+0xcc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800657a:	4b23      	ldr	r3, [pc, #140]	; (8006608 <prvAddNewTaskToReadyList+0xc8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	429a      	cmp	r2, r3
 8006586:	d802      	bhi.n	800658e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006588:	4a1f      	ldr	r2, [pc, #124]	; (8006608 <prvAddNewTaskToReadyList+0xc8>)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800658e:	4b20      	ldr	r3, [pc, #128]	; (8006610 <prvAddNewTaskToReadyList+0xd0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	4a1e      	ldr	r2, [pc, #120]	; (8006610 <prvAddNewTaskToReadyList+0xd0>)
 8006596:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006598:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <prvAddNewTaskToReadyList+0xd0>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a4:	4b1b      	ldr	r3, [pc, #108]	; (8006614 <prvAddNewTaskToReadyList+0xd4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d903      	bls.n	80065b4 <prvAddNewTaskToReadyList+0x74>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	4a18      	ldr	r2, [pc, #96]	; (8006614 <prvAddNewTaskToReadyList+0xd4>)
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4a15      	ldr	r2, [pc, #84]	; (8006618 <prvAddNewTaskToReadyList+0xd8>)
 80065c2:	441a      	add	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4619      	mov	r1, r3
 80065ca:	4610      	mov	r0, r2
 80065cc:	f7ff f913 	bl	80057f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065d0:	f001 fa30 	bl	8007a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065d4:	4b0d      	ldr	r3, [pc, #52]	; (800660c <prvAddNewTaskToReadyList+0xcc>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00e      	beq.n	80065fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <prvAddNewTaskToReadyList+0xc8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d207      	bcs.n	80065fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065ea:	4b0c      	ldr	r3, [pc, #48]	; (800661c <prvAddNewTaskToReadyList+0xdc>)
 80065ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000c24 	.word	0x20000c24
 8006608:	20000750 	.word	0x20000750
 800660c:	20000c30 	.word	0x20000c30
 8006610:	20000c40 	.word	0x20000c40
 8006614:	20000c2c 	.word	0x20000c2c
 8006618:	20000754 	.word	0x20000754
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d017      	beq.n	8006662 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006632:	4b13      	ldr	r3, [pc, #76]	; (8006680 <vTaskDelay+0x60>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <vTaskDelay+0x30>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	60bb      	str	r3, [r7, #8]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006650:	f000 f880 	bl	8006754 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006654:	2100      	movs	r1, #0
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fcea 	bl	8007030 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800665c:	f000 f888 	bl	8006770 <xTaskResumeAll>
 8006660:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d107      	bne.n	8006678 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <vTaskDelay+0x64>)
 800666a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000c4c 	.word	0x20000c4c
 8006684:	e000ed04 	.word	0xe000ed04

08006688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006696:	463a      	mov	r2, r7
 8006698:	1d39      	adds	r1, r7, #4
 800669a:	f107 0308 	add.w	r3, r7, #8
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff f848 	bl	8005734 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	9202      	str	r2, [sp, #8]
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	2300      	movs	r3, #0
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	2300      	movs	r3, #0
 80066b4:	460a      	mov	r2, r1
 80066b6:	4921      	ldr	r1, [pc, #132]	; (800673c <vTaskStartScheduler+0xb4>)
 80066b8:	4821      	ldr	r0, [pc, #132]	; (8006740 <vTaskStartScheduler+0xb8>)
 80066ba:	f7ff fe0f 	bl	80062dc <xTaskCreateStatic>
 80066be:	4603      	mov	r3, r0
 80066c0:	4a20      	ldr	r2, [pc, #128]	; (8006744 <vTaskStartScheduler+0xbc>)
 80066c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80066c4:	4b1f      	ldr	r3, [pc, #124]	; (8006744 <vTaskStartScheduler+0xbc>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80066cc:	2301      	movs	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e001      	b.n	80066d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d102      	bne.n	80066e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80066dc:	f000 fcfc 	bl	80070d8 <xTimerCreateTimerTask>
 80066e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d116      	bne.n	8006716 <vTaskStartScheduler+0x8e>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	613b      	str	r3, [r7, #16]
}
 80066fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066fc:	4b12      	ldr	r3, [pc, #72]	; (8006748 <vTaskStartScheduler+0xc0>)
 80066fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006702:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006704:	4b11      	ldr	r3, [pc, #68]	; (800674c <vTaskStartScheduler+0xc4>)
 8006706:	2201      	movs	r2, #1
 8006708:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <vTaskStartScheduler+0xc8>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006710:	f001 f8be 	bl	8007890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006714:	e00e      	b.n	8006734 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d10a      	bne.n	8006734 <vTaskStartScheduler+0xac>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	60fb      	str	r3, [r7, #12]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <vTaskStartScheduler+0xaa>
}
 8006734:	bf00      	nop
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	08008918 	.word	0x08008918
 8006740:	08006d6d 	.word	0x08006d6d
 8006744:	20000c48 	.word	0x20000c48
 8006748:	20000c44 	.word	0x20000c44
 800674c:	20000c30 	.word	0x20000c30
 8006750:	20000c28 	.word	0x20000c28

08006754 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006758:	4b04      	ldr	r3, [pc, #16]	; (800676c <vTaskSuspendAll+0x18>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	4a03      	ldr	r2, [pc, #12]	; (800676c <vTaskSuspendAll+0x18>)
 8006760:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006762:	bf00      	nop
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	20000c4c 	.word	0x20000c4c

08006770 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800677a:	2300      	movs	r3, #0
 800677c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800677e:	4b42      	ldr	r3, [pc, #264]	; (8006888 <xTaskResumeAll+0x118>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10a      	bne.n	800679c <xTaskResumeAll+0x2c>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	603b      	str	r3, [r7, #0]
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800679c:	f001 f91a 	bl	80079d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067a0:	4b39      	ldr	r3, [pc, #228]	; (8006888 <xTaskResumeAll+0x118>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	4a38      	ldr	r2, [pc, #224]	; (8006888 <xTaskResumeAll+0x118>)
 80067a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067aa:	4b37      	ldr	r3, [pc, #220]	; (8006888 <xTaskResumeAll+0x118>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d162      	bne.n	8006878 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067b2:	4b36      	ldr	r3, [pc, #216]	; (800688c <xTaskResumeAll+0x11c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d05e      	beq.n	8006878 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067ba:	e02f      	b.n	800681c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067bc:	4b34      	ldr	r3, [pc, #208]	; (8006890 <xTaskResumeAll+0x120>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3318      	adds	r3, #24
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff f871 	bl	80058b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff f86c 	bl	80058b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067dc:	4b2d      	ldr	r3, [pc, #180]	; (8006894 <xTaskResumeAll+0x124>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d903      	bls.n	80067ec <xTaskResumeAll+0x7c>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	4a2a      	ldr	r2, [pc, #168]	; (8006894 <xTaskResumeAll+0x124>)
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4a27      	ldr	r2, [pc, #156]	; (8006898 <xTaskResumeAll+0x128>)
 80067fa:	441a      	add	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f7fe fff7 	bl	80057f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	4b23      	ldr	r3, [pc, #140]	; (800689c <xTaskResumeAll+0x12c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	429a      	cmp	r2, r3
 8006814:	d302      	bcc.n	800681c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006816:	4b22      	ldr	r3, [pc, #136]	; (80068a0 <xTaskResumeAll+0x130>)
 8006818:	2201      	movs	r2, #1
 800681a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800681c:	4b1c      	ldr	r3, [pc, #112]	; (8006890 <xTaskResumeAll+0x120>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1cb      	bne.n	80067bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800682a:	f000 fb55 	bl	8006ed8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800682e:	4b1d      	ldr	r3, [pc, #116]	; (80068a4 <xTaskResumeAll+0x134>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800683a:	f000 f847 	bl	80068cc <xTaskIncrementTick>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006844:	4b16      	ldr	r3, [pc, #88]	; (80068a0 <xTaskResumeAll+0x130>)
 8006846:	2201      	movs	r2, #1
 8006848:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3b01      	subs	r3, #1
 800684e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1f1      	bne.n	800683a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006856:	4b13      	ldr	r3, [pc, #76]	; (80068a4 <xTaskResumeAll+0x134>)
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800685c:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <xTaskResumeAll+0x130>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d009      	beq.n	8006878 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006864:	2301      	movs	r3, #1
 8006866:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006868:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <xTaskResumeAll+0x138>)
 800686a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006878:	f001 f8dc 	bl	8007a34 <vPortExitCritical>

	return xAlreadyYielded;
 800687c:	68bb      	ldr	r3, [r7, #8]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000c4c 	.word	0x20000c4c
 800688c:	20000c24 	.word	0x20000c24
 8006890:	20000be4 	.word	0x20000be4
 8006894:	20000c2c 	.word	0x20000c2c
 8006898:	20000754 	.word	0x20000754
 800689c:	20000750 	.word	0x20000750
 80068a0:	20000c38 	.word	0x20000c38
 80068a4:	20000c34 	.word	0x20000c34
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80068b2:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <xTaskGetTickCount+0x1c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80068b8:	687b      	ldr	r3, [r7, #4]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	20000c28 	.word	0x20000c28

080068cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d6:	4b4f      	ldr	r3, [pc, #316]	; (8006a14 <xTaskIncrementTick+0x148>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f040 808f 	bne.w	80069fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068e0:	4b4d      	ldr	r3, [pc, #308]	; (8006a18 <xTaskIncrementTick+0x14c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068e8:	4a4b      	ldr	r2, [pc, #300]	; (8006a18 <xTaskIncrementTick+0x14c>)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d120      	bne.n	8006936 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80068f4:	4b49      	ldr	r3, [pc, #292]	; (8006a1c <xTaskIncrementTick+0x150>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <xTaskIncrementTick+0x48>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	603b      	str	r3, [r7, #0]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <xTaskIncrementTick+0x46>
 8006914:	4b41      	ldr	r3, [pc, #260]	; (8006a1c <xTaskIncrementTick+0x150>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	4b41      	ldr	r3, [pc, #260]	; (8006a20 <xTaskIncrementTick+0x154>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a3f      	ldr	r2, [pc, #252]	; (8006a1c <xTaskIncrementTick+0x150>)
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	4a3f      	ldr	r2, [pc, #252]	; (8006a20 <xTaskIncrementTick+0x154>)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	4b3e      	ldr	r3, [pc, #248]	; (8006a24 <xTaskIncrementTick+0x158>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	4a3d      	ldr	r2, [pc, #244]	; (8006a24 <xTaskIncrementTick+0x158>)
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	f000 fad1 	bl	8006ed8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006936:	4b3c      	ldr	r3, [pc, #240]	; (8006a28 <xTaskIncrementTick+0x15c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	429a      	cmp	r2, r3
 800693e:	d349      	bcc.n	80069d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006940:	4b36      	ldr	r3, [pc, #216]	; (8006a1c <xTaskIncrementTick+0x150>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800694a:	4b37      	ldr	r3, [pc, #220]	; (8006a28 <xTaskIncrementTick+0x15c>)
 800694c:	f04f 32ff 	mov.w	r2, #4294967295
 8006950:	601a      	str	r2, [r3, #0]
					break;
 8006952:	e03f      	b.n	80069d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006954:	4b31      	ldr	r3, [pc, #196]	; (8006a1c <xTaskIncrementTick+0x150>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	429a      	cmp	r2, r3
 800696a:	d203      	bcs.n	8006974 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800696c:	4a2e      	ldr	r2, [pc, #184]	; (8006a28 <xTaskIncrementTick+0x15c>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006972:	e02f      	b.n	80069d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	3304      	adds	r3, #4
 8006978:	4618      	mov	r0, r3
 800697a:	f7fe ff99 	bl	80058b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	2b00      	cmp	r3, #0
 8006984:	d004      	beq.n	8006990 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	3318      	adds	r3, #24
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe ff90 	bl	80058b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4b25      	ldr	r3, [pc, #148]	; (8006a2c <xTaskIncrementTick+0x160>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d903      	bls.n	80069a4 <xTaskIncrementTick+0xd8>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	4a22      	ldr	r2, [pc, #136]	; (8006a2c <xTaskIncrementTick+0x160>)
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <xTaskIncrementTick+0x164>)
 80069b2:	441a      	add	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f7fe ff1b 	bl	80057f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c4:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <xTaskIncrementTick+0x168>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d3b8      	bcc.n	8006940 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80069ce:	2301      	movs	r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d2:	e7b5      	b.n	8006940 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069d4:	4b17      	ldr	r3, [pc, #92]	; (8006a34 <xTaskIncrementTick+0x168>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069da:	4915      	ldr	r1, [pc, #84]	; (8006a30 <xTaskIncrementTick+0x164>)
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d901      	bls.n	80069f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80069ec:	2301      	movs	r3, #1
 80069ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80069f0:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <xTaskIncrementTick+0x16c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80069f8:	2301      	movs	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e004      	b.n	8006a08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069fe:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <xTaskIncrementTick+0x170>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	4a0d      	ldr	r2, [pc, #52]	; (8006a3c <xTaskIncrementTick+0x170>)
 8006a06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a08:	697b      	ldr	r3, [r7, #20]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000c4c 	.word	0x20000c4c
 8006a18:	20000c28 	.word	0x20000c28
 8006a1c:	20000bdc 	.word	0x20000bdc
 8006a20:	20000be0 	.word	0x20000be0
 8006a24:	20000c3c 	.word	0x20000c3c
 8006a28:	20000c44 	.word	0x20000c44
 8006a2c:	20000c2c 	.word	0x20000c2c
 8006a30:	20000754 	.word	0x20000754
 8006a34:	20000750 	.word	0x20000750
 8006a38:	20000c38 	.word	0x20000c38
 8006a3c:	20000c34 	.word	0x20000c34

08006a40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a46:	4b28      	ldr	r3, [pc, #160]	; (8006ae8 <vTaskSwitchContext+0xa8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a4e:	4b27      	ldr	r3, [pc, #156]	; (8006aec <vTaskSwitchContext+0xac>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a54:	e041      	b.n	8006ada <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006a56:	4b25      	ldr	r3, [pc, #148]	; (8006aec <vTaskSwitchContext+0xac>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a5c:	4b24      	ldr	r3, [pc, #144]	; (8006af0 <vTaskSwitchContext+0xb0>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	e010      	b.n	8006a86 <vTaskSwitchContext+0x46>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <vTaskSwitchContext+0x40>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	607b      	str	r3, [r7, #4]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <vTaskSwitchContext+0x3e>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	491b      	ldr	r1, [pc, #108]	; (8006af4 <vTaskSwitchContext+0xb4>)
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0e4      	beq.n	8006a64 <vTaskSwitchContext+0x24>
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <vTaskSwitchContext+0xb4>)
 8006aa6:	4413      	add	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	605a      	str	r2, [r3, #4]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	3308      	adds	r3, #8
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d104      	bne.n	8006aca <vTaskSwitchContext+0x8a>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	605a      	str	r2, [r3, #4]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <vTaskSwitchContext+0xb8>)
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	4a06      	ldr	r2, [pc, #24]	; (8006af0 <vTaskSwitchContext+0xb0>)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6013      	str	r3, [r2, #0]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	20000c4c 	.word	0x20000c4c
 8006aec:	20000c38 	.word	0x20000c38
 8006af0:	20000c2c 	.word	0x20000c2c
 8006af4:	20000754 	.word	0x20000754
 8006af8:	20000750 	.word	0x20000750

08006afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	60fb      	str	r3, [r7, #12]
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b22:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <vTaskPlaceOnEventList+0x44>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3318      	adds	r3, #24
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fe fe87 	bl	800583e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b30:	2101      	movs	r1, #1
 8006b32:	6838      	ldr	r0, [r7, #0]
 8006b34:	f000 fa7c 	bl	8007030 <prvAddCurrentTaskToDelayedList>
}
 8006b38:	bf00      	nop
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20000750 	.word	0x20000750

08006b44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10a      	bne.n	8006b6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	617b      	str	r3, [r7, #20]
}
 8006b68:	bf00      	nop
 8006b6a:	e7fe      	b.n	8006b6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b6c:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <vTaskPlaceOnEventListRestricted+0x54>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3318      	adds	r3, #24
 8006b72:	4619      	mov	r1, r3
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7fe fe3e 	bl	80057f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b80:	f04f 33ff 	mov.w	r3, #4294967295
 8006b84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	68b8      	ldr	r0, [r7, #8]
 8006b8a:	f000 fa51 	bl	8007030 <prvAddCurrentTaskToDelayedList>
	}
 8006b8e:	bf00      	nop
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000750 	.word	0x20000750

08006b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	60fb      	str	r3, [r7, #12]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	3318      	adds	r3, #24
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fe6f 	bl	80058b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd2:	4b1e      	ldr	r3, [pc, #120]	; (8006c4c <xTaskRemoveFromEventList+0xb0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d11d      	bne.n	8006c16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fe66 	bl	80058b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be8:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <xTaskRemoveFromEventList+0xb4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d903      	bls.n	8006bf8 <xTaskRemoveFromEventList+0x5c>
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a16      	ldr	r2, [pc, #88]	; (8006c50 <xTaskRemoveFromEventList+0xb4>)
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4a13      	ldr	r2, [pc, #76]	; (8006c54 <xTaskRemoveFromEventList+0xb8>)
 8006c06:	441a      	add	r2, r3
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f7fe fdf1 	bl	80057f6 <vListInsertEnd>
 8006c14:	e005      	b.n	8006c22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	3318      	adds	r3, #24
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	480e      	ldr	r0, [pc, #56]	; (8006c58 <xTaskRemoveFromEventList+0xbc>)
 8006c1e:	f7fe fdea 	bl	80057f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c26:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <xTaskRemoveFromEventList+0xc0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d905      	bls.n	8006c3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c30:	2301      	movs	r3, #1
 8006c32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c34:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <xTaskRemoveFromEventList+0xc4>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e001      	b.n	8006c40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c40:	697b      	ldr	r3, [r7, #20]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000c4c 	.word	0x20000c4c
 8006c50:	20000c2c 	.word	0x20000c2c
 8006c54:	20000754 	.word	0x20000754
 8006c58:	20000be4 	.word	0x20000be4
 8006c5c:	20000750 	.word	0x20000750
 8006c60:	20000c38 	.word	0x20000c38

08006c64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <vTaskInternalSetTimeOutState+0x24>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c74:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <vTaskInternalSetTimeOutState+0x28>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	605a      	str	r2, [r3, #4]
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	20000c3c 	.word	0x20000c3c
 8006c8c:	20000c28 	.word	0x20000c28

08006c90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	613b      	str	r3, [r7, #16]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	60fb      	str	r3, [r7, #12]
}
 8006cce:	bf00      	nop
 8006cd0:	e7fe      	b.n	8006cd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006cd2:	f000 fe7f 	bl	80079d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cd6:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <xTaskCheckForTimeOut+0xbc>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cee:	d102      	bne.n	8006cf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	e023      	b.n	8006d3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <xTaskCheckForTimeOut+0xc0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d007      	beq.n	8006d12 <xTaskCheckForTimeOut+0x82>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d302      	bcc.n	8006d12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	61fb      	str	r3, [r7, #28]
 8006d10:	e015      	b.n	8006d3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d20b      	bcs.n	8006d34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	1ad2      	subs	r2, r2, r3
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff ff9b 	bl	8006c64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61fb      	str	r3, [r7, #28]
 8006d32:	e004      	b.n	8006d3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d3e:	f000 fe79 	bl	8007a34 <vPortExitCritical>

	return xReturn;
 8006d42:	69fb      	ldr	r3, [r7, #28]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3720      	adds	r7, #32
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20000c28 	.word	0x20000c28
 8006d50:	20000c3c 	.word	0x20000c3c

08006d54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d58:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <vTaskMissedYield+0x14>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]
}
 8006d5e:	bf00      	nop
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	20000c38 	.word	0x20000c38

08006d6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d74:	f000 f852 	bl	8006e1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <prvIdleTask+0x28>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d9f9      	bls.n	8006d74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <prvIdleTask+0x2c>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d90:	e7f0      	b.n	8006d74 <prvIdleTask+0x8>
 8006d92:	bf00      	nop
 8006d94:	20000754 	.word	0x20000754
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006da2:	2300      	movs	r3, #0
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	e00c      	b.n	8006dc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4a12      	ldr	r2, [pc, #72]	; (8006dfc <prvInitialiseTaskLists+0x60>)
 8006db4:	4413      	add	r3, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fcf0 	bl	800579c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	607b      	str	r3, [r7, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b37      	cmp	r3, #55	; 0x37
 8006dc6:	d9ef      	bls.n	8006da8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dc8:	480d      	ldr	r0, [pc, #52]	; (8006e00 <prvInitialiseTaskLists+0x64>)
 8006dca:	f7fe fce7 	bl	800579c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006dce:	480d      	ldr	r0, [pc, #52]	; (8006e04 <prvInitialiseTaskLists+0x68>)
 8006dd0:	f7fe fce4 	bl	800579c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dd4:	480c      	ldr	r0, [pc, #48]	; (8006e08 <prvInitialiseTaskLists+0x6c>)
 8006dd6:	f7fe fce1 	bl	800579c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dda:	480c      	ldr	r0, [pc, #48]	; (8006e0c <prvInitialiseTaskLists+0x70>)
 8006ddc:	f7fe fcde 	bl	800579c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006de0:	480b      	ldr	r0, [pc, #44]	; (8006e10 <prvInitialiseTaskLists+0x74>)
 8006de2:	f7fe fcdb 	bl	800579c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <prvInitialiseTaskLists+0x78>)
 8006de8:	4a05      	ldr	r2, [pc, #20]	; (8006e00 <prvInitialiseTaskLists+0x64>)
 8006dea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dec:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <prvInitialiseTaskLists+0x7c>)
 8006dee:	4a05      	ldr	r2, [pc, #20]	; (8006e04 <prvInitialiseTaskLists+0x68>)
 8006df0:	601a      	str	r2, [r3, #0]
}
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000754 	.word	0x20000754
 8006e00:	20000bb4 	.word	0x20000bb4
 8006e04:	20000bc8 	.word	0x20000bc8
 8006e08:	20000be4 	.word	0x20000be4
 8006e0c:	20000bf8 	.word	0x20000bf8
 8006e10:	20000c10 	.word	0x20000c10
 8006e14:	20000bdc 	.word	0x20000bdc
 8006e18:	20000be0 	.word	0x20000be0

08006e1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e22:	e019      	b.n	8006e58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e24:	f000 fdd6 	bl	80079d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e28:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <prvCheckTasksWaitingTermination+0x50>)
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe fd3b 	bl	80058b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <prvCheckTasksWaitingTermination+0x54>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	4a0b      	ldr	r2, [pc, #44]	; (8006e70 <prvCheckTasksWaitingTermination+0x54>)
 8006e42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e44:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <prvCheckTasksWaitingTermination+0x58>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	4a0a      	ldr	r2, [pc, #40]	; (8006e74 <prvCheckTasksWaitingTermination+0x58>)
 8006e4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e4e:	f000 fdf1 	bl	8007a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f810 	bl	8006e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e58:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <prvCheckTasksWaitingTermination+0x58>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e1      	bne.n	8006e24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000bf8 	.word	0x20000bf8
 8006e70:	20000c24 	.word	0x20000c24
 8006e74:	20000c0c 	.word	0x20000c0c

08006e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d108      	bne.n	8006e9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 ff8e 	bl	8007db0 <vPortFree>
				vPortFree( pxTCB );
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 ff8b 	bl	8007db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e9a:	e018      	b.n	8006ece <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d103      	bne.n	8006eae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 ff82 	bl	8007db0 <vPortFree>
	}
 8006eac:	e00f      	b.n	8006ece <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d00a      	beq.n	8006ece <prvDeleteTCB+0x56>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	60fb      	str	r3, [r7, #12]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <prvDeleteTCB+0x54>
	}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <prvResetNextTaskUnblockTime+0x38>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <prvResetNextTaskUnblockTime+0x3c>)
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295
 8006eee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ef0:	e008      	b.n	8006f04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef2:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <prvResetNextTaskUnblockTime+0x38>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4a04      	ldr	r2, [pc, #16]	; (8006f14 <prvResetNextTaskUnblockTime+0x3c>)
 8006f02:	6013      	str	r3, [r2, #0]
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	20000bdc 	.word	0x20000bdc
 8006f14:	20000c44 	.word	0x20000c44

08006f18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <xTaskGetSchedulerState+0x34>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d102      	bne.n	8006f2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f26:	2301      	movs	r3, #1
 8006f28:	607b      	str	r3, [r7, #4]
 8006f2a:	e008      	b.n	8006f3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f2c:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <xTaskGetSchedulerState+0x38>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f34:	2302      	movs	r3, #2
 8006f36:	607b      	str	r3, [r7, #4]
 8006f38:	e001      	b.n	8006f3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f3e:	687b      	ldr	r3, [r7, #4]
	}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	20000c30 	.word	0x20000c30
 8006f50:	20000c4c 	.word	0x20000c4c

08006f54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f60:	2300      	movs	r3, #0
 8006f62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d056      	beq.n	8007018 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f6a:	4b2e      	ldr	r3, [pc, #184]	; (8007024 <xTaskPriorityDisinherit+0xd0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d00a      	beq.n	8006f8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	60fb      	str	r3, [r7, #12]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	60bb      	str	r3, [r7, #8]
}
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fac:	1e5a      	subs	r2, r3, #1
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d02c      	beq.n	8007018 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d128      	bne.n	8007018 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fc70 	bl	80058b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe8:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <xTaskPriorityDisinherit+0xd4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d903      	bls.n	8006ff8 <xTaskPriorityDisinherit+0xa4>
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	4a0c      	ldr	r2, [pc, #48]	; (8007028 <xTaskPriorityDisinherit+0xd4>)
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4a09      	ldr	r2, [pc, #36]	; (800702c <xTaskPriorityDisinherit+0xd8>)
 8007006:	441a      	add	r2, r3
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	3304      	adds	r3, #4
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f7fe fbf1 	bl	80057f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007014:	2301      	movs	r3, #1
 8007016:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007018:	697b      	ldr	r3, [r7, #20]
	}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000750 	.word	0x20000750
 8007028:	20000c2c 	.word	0x20000c2c
 800702c:	20000754 	.word	0x20000754

08007030 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800703a:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007040:	4b20      	ldr	r3, [pc, #128]	; (80070c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3304      	adds	r3, #4
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fc32 	bl	80058b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007052:	d10a      	bne.n	800706a <prvAddCurrentTaskToDelayedList+0x3a>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800705a:	4b1a      	ldr	r3, [pc, #104]	; (80070c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3304      	adds	r3, #4
 8007060:	4619      	mov	r1, r3
 8007062:	4819      	ldr	r0, [pc, #100]	; (80070c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007064:	f7fe fbc7 	bl	80057f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007068:	e026      	b.n	80070b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4413      	add	r3, r2
 8007070:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007072:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	429a      	cmp	r2, r3
 8007080:	d209      	bcs.n	8007096 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007082:	4b12      	ldr	r3, [pc, #72]	; (80070cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f7fe fbd5 	bl	800583e <vListInsert>
}
 8007094:	e010      	b.n	80070b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007096:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3304      	adds	r3, #4
 80070a0:	4619      	mov	r1, r3
 80070a2:	4610      	mov	r0, r2
 80070a4:	f7fe fbcb 	bl	800583e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d202      	bcs.n	80070b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070b2:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6013      	str	r3, [r2, #0]
}
 80070b8:	bf00      	nop
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20000c28 	.word	0x20000c28
 80070c4:	20000750 	.word	0x20000750
 80070c8:	20000c10 	.word	0x20000c10
 80070cc:	20000be0 	.word	0x20000be0
 80070d0:	20000bdc 	.word	0x20000bdc
 80070d4:	20000c44 	.word	0x20000c44

080070d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	; 0x28
 80070dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070de:	2300      	movs	r3, #0
 80070e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070e2:	f000 fb07 	bl	80076f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070e6:	4b1c      	ldr	r3, [pc, #112]	; (8007158 <xTimerCreateTimerTask+0x80>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d021      	beq.n	8007132 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070f6:	1d3a      	adds	r2, r7, #4
 80070f8:	f107 0108 	add.w	r1, r7, #8
 80070fc:	f107 030c 	add.w	r3, r7, #12
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe fb31 	bl	8005768 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	9202      	str	r2, [sp, #8]
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	2302      	movs	r3, #2
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	2300      	movs	r3, #0
 8007116:	460a      	mov	r2, r1
 8007118:	4910      	ldr	r1, [pc, #64]	; (800715c <xTimerCreateTimerTask+0x84>)
 800711a:	4811      	ldr	r0, [pc, #68]	; (8007160 <xTimerCreateTimerTask+0x88>)
 800711c:	f7ff f8de 	bl	80062dc <xTaskCreateStatic>
 8007120:	4603      	mov	r3, r0
 8007122:	4a10      	ldr	r2, [pc, #64]	; (8007164 <xTimerCreateTimerTask+0x8c>)
 8007124:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007126:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <xTimerCreateTimerTask+0x8c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800712e:	2301      	movs	r3, #1
 8007130:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	613b      	str	r3, [r7, #16]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800714e:	697b      	ldr	r3, [r7, #20]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000c80 	.word	0x20000c80
 800715c:	08008920 	.word	0x08008920
 8007160:	0800729d 	.word	0x0800729d
 8007164:	20000c84 	.word	0x20000c84

08007168 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	; 0x28
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007176:	2300      	movs	r3, #0
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	623b      	str	r3, [r7, #32]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007196:	4b1a      	ldr	r3, [pc, #104]	; (8007200 <xTimerGenericCommand+0x98>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d02a      	beq.n	80071f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b05      	cmp	r3, #5
 80071ae:	dc18      	bgt.n	80071e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071b0:	f7ff feb2 	bl	8006f18 <xTaskGetSchedulerState>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d109      	bne.n	80071ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071ba:	4b11      	ldr	r3, [pc, #68]	; (8007200 <xTimerGenericCommand+0x98>)
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	f107 0110 	add.w	r1, r7, #16
 80071c2:	2300      	movs	r3, #0
 80071c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c6:	f7fe fca1 	bl	8005b0c <xQueueGenericSend>
 80071ca:	6278      	str	r0, [r7, #36]	; 0x24
 80071cc:	e012      	b.n	80071f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071ce:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <xTimerGenericCommand+0x98>)
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f107 0110 	add.w	r1, r7, #16
 80071d6:	2300      	movs	r3, #0
 80071d8:	2200      	movs	r2, #0
 80071da:	f7fe fc97 	bl	8005b0c <xQueueGenericSend>
 80071de:	6278      	str	r0, [r7, #36]	; 0x24
 80071e0:	e008      	b.n	80071f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071e2:	4b07      	ldr	r3, [pc, #28]	; (8007200 <xTimerGenericCommand+0x98>)
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f107 0110 	add.w	r1, r7, #16
 80071ea:	2300      	movs	r3, #0
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	f7fe fd8b 	bl	8005d08 <xQueueGenericSendFromISR>
 80071f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3728      	adds	r7, #40	; 0x28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20000c80 	.word	0x20000c80

08007204 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af02      	add	r7, sp, #8
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800720e:	4b22      	ldr	r3, [pc, #136]	; (8007298 <prvProcessExpiredTimer+0x94>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	3304      	adds	r3, #4
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe fb47 	bl	80058b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	d022      	beq.n	8007276 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	18d1      	adds	r1, r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	6978      	ldr	r0, [r7, #20]
 800723e:	f000 f8d1 	bl	80073e4 <prvInsertTimerInActiveList>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01f      	beq.n	8007288 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007248:	2300      	movs	r3, #0
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	2300      	movs	r3, #0
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	2100      	movs	r1, #0
 8007252:	6978      	ldr	r0, [r7, #20]
 8007254:	f7ff ff88 	bl	8007168 <xTimerGenericCommand>
 8007258:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d113      	bne.n	8007288 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	60fb      	str	r3, [r7, #12]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	b2da      	uxtb	r2, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	6978      	ldr	r0, [r7, #20]
 800728e:	4798      	blx	r3
}
 8007290:	bf00      	nop
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	20000c78 	.word	0x20000c78

0800729c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072a4:	f107 0308 	add.w	r3, r7, #8
 80072a8:	4618      	mov	r0, r3
 80072aa:	f000 f857 	bl	800735c <prvGetNextExpireTime>
 80072ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4619      	mov	r1, r3
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f803 	bl	80072c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072ba:	f000 f8d5 	bl	8007468 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072be:	e7f1      	b.n	80072a4 <prvTimerTask+0x8>

080072c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072ca:	f7ff fa43 	bl	8006754 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072ce:	f107 0308 	add.w	r3, r7, #8
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 f866 	bl	80073a4 <prvSampleTimeNow>
 80072d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d130      	bne.n	8007342 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <prvProcessTimerOrBlockTask+0x3c>
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d806      	bhi.n	80072fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072ee:	f7ff fa3f 	bl	8006770 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff ff85 	bl	8007204 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072fa:	e024      	b.n	8007346 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d008      	beq.n	8007314 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007302:	4b13      	ldr	r3, [pc, #76]	; (8007350 <prvProcessTimerOrBlockTask+0x90>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <prvProcessTimerOrBlockTask+0x50>
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <prvProcessTimerOrBlockTask+0x52>
 8007310:	2300      	movs	r3, #0
 8007312:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007314:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <prvProcessTimerOrBlockTask+0x94>)
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	4619      	mov	r1, r3
 8007322:	f7fe ffa7 	bl	8006274 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007326:	f7ff fa23 	bl	8006770 <xTaskResumeAll>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007330:	4b09      	ldr	r3, [pc, #36]	; (8007358 <prvProcessTimerOrBlockTask+0x98>)
 8007332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	f3bf 8f6f 	isb	sy
}
 8007340:	e001      	b.n	8007346 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007342:	f7ff fa15 	bl	8006770 <xTaskResumeAll>
}
 8007346:	bf00      	nop
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20000c7c 	.word	0x20000c7c
 8007354:	20000c80 	.word	0x20000c80
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007364:	4b0e      	ldr	r3, [pc, #56]	; (80073a0 <prvGetNextExpireTime+0x44>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <prvGetNextExpireTime+0x16>
 800736e:	2201      	movs	r2, #1
 8007370:	e000      	b.n	8007374 <prvGetNextExpireTime+0x18>
 8007372:	2200      	movs	r2, #0
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d105      	bne.n	800738c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007380:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <prvGetNextExpireTime+0x44>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	e001      	b.n	8007390 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007390:	68fb      	ldr	r3, [r7, #12]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000c78 	.word	0x20000c78

080073a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073ac:	f7ff fa7e 	bl	80068ac <xTaskGetTickCount>
 80073b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073b2:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <prvSampleTimeNow+0x3c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d205      	bcs.n	80073c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073bc:	f000 f936 	bl	800762c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	e002      	b.n	80073ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073ce:	4a04      	ldr	r2, [pc, #16]	; (80073e0 <prvSampleTimeNow+0x3c>)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073d4:	68fb      	ldr	r3, [r7, #12]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000c88 	.word	0x20000c88

080073e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	429a      	cmp	r2, r3
 8007408:	d812      	bhi.n	8007430 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	1ad2      	subs	r2, r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	429a      	cmp	r2, r3
 8007416:	d302      	bcc.n	800741e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007418:	2301      	movs	r3, #1
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	e01b      	b.n	8007456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800741e:	4b10      	ldr	r3, [pc, #64]	; (8007460 <prvInsertTimerInActiveList+0x7c>)
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3304      	adds	r3, #4
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f7fe fa08 	bl	800583e <vListInsert>
 800742e:	e012      	b.n	8007456 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d206      	bcs.n	8007446 <prvInsertTimerInActiveList+0x62>
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d302      	bcc.n	8007446 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007440:	2301      	movs	r3, #1
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	e007      	b.n	8007456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007446:	4b07      	ldr	r3, [pc, #28]	; (8007464 <prvInsertTimerInActiveList+0x80>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fe f9f4 	bl	800583e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007456:	697b      	ldr	r3, [r7, #20]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20000c7c 	.word	0x20000c7c
 8007464:	20000c78 	.word	0x20000c78

08007468 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08e      	sub	sp, #56	; 0x38
 800746c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800746e:	e0ca      	b.n	8007606 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	da18      	bge.n	80074a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007476:	1d3b      	adds	r3, r7, #4
 8007478:	3304      	adds	r3, #4
 800747a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	61fb      	str	r3, [r7, #28]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800749e:	6850      	ldr	r0, [r2, #4]
 80074a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074a2:	6892      	ldr	r2, [r2, #8]
 80074a4:	4611      	mov	r1, r2
 80074a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f2c0 80aa 	blt.w	8007604 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	3304      	adds	r3, #4
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe f9f5 	bl	80058b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074c6:	463b      	mov	r3, r7
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff ff6b 	bl	80073a4 <prvSampleTimeNow>
 80074ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b09      	cmp	r3, #9
 80074d4:	f200 8097 	bhi.w	8007606 <prvProcessReceivedCommands+0x19e>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <prvProcessReceivedCommands+0x78>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	08007509 	.word	0x08007509
 80074e4:	08007509 	.word	0x08007509
 80074e8:	08007509 	.word	0x08007509
 80074ec:	0800757d 	.word	0x0800757d
 80074f0:	08007591 	.word	0x08007591
 80074f4:	080075db 	.word	0x080075db
 80074f8:	08007509 	.word	0x08007509
 80074fc:	08007509 	.word	0x08007509
 8007500:	0800757d 	.word	0x0800757d
 8007504:	08007591 	.word	0x08007591
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	b2da      	uxtb	r2, r3
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	18d1      	adds	r1, r2, r3
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007528:	f7ff ff5c 	bl	80073e4 <prvInsertTimerInActiveList>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d069      	beq.n	8007606 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007538:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d05e      	beq.n	8007606 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	441a      	add	r2, r3
 8007550:	2300      	movs	r3, #0
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	2300      	movs	r3, #0
 8007556:	2100      	movs	r1, #0
 8007558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800755a:	f7ff fe05 	bl	8007168 <xTimerGenericCommand>
 800755e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d14f      	bne.n	8007606 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	61bb      	str	r3, [r7, #24]
}
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	b2da      	uxtb	r2, r3
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800758e:	e03a      	b.n	8007606 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007596:	f043 0301 	orr.w	r3, r3, #1
 800759a:	b2da      	uxtb	r2, r3
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	617b      	str	r3, [r7, #20]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	18d1      	adds	r1, r2, r3
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d4:	f7ff ff06 	bl	80073e4 <prvInsertTimerInActiveList>
					break;
 80075d8:	e015      	b.n	8007606 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80075e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ea:	f000 fbe1 	bl	8007db0 <vPortFree>
 80075ee:	e00a      	b.n	8007606 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075f6:	f023 0301 	bic.w	r3, r3, #1
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007602:	e000      	b.n	8007606 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007604:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007606:	4b08      	ldr	r3, [pc, #32]	; (8007628 <prvProcessReceivedCommands+0x1c0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	1d39      	adds	r1, r7, #4
 800760c:	2200      	movs	r2, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe fc16 	bl	8005e40 <xQueueReceive>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	f47f af2a 	bne.w	8007470 <prvProcessReceivedCommands+0x8>
	}
}
 800761c:	bf00      	nop
 800761e:	bf00      	nop
 8007620:	3730      	adds	r7, #48	; 0x30
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000c80 	.word	0x20000c80

0800762c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007632:	e048      	b.n	80076c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007634:	4b2d      	ldr	r3, [pc, #180]	; (80076ec <prvSwitchTimerLists+0xc0>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800763e:	4b2b      	ldr	r3, [pc, #172]	; (80076ec <prvSwitchTimerLists+0xc0>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3304      	adds	r3, #4
 800764c:	4618      	mov	r0, r3
 800764e:	f7fe f92f 	bl	80058b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d02e      	beq.n	80076c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4413      	add	r3, r2
 8007670:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	429a      	cmp	r2, r3
 8007678:	d90e      	bls.n	8007698 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007686:	4b19      	ldr	r3, [pc, #100]	; (80076ec <prvSwitchTimerLists+0xc0>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3304      	adds	r3, #4
 800768e:	4619      	mov	r1, r3
 8007690:	4610      	mov	r0, r2
 8007692:	f7fe f8d4 	bl	800583e <vListInsert>
 8007696:	e016      	b.n	80076c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007698:	2300      	movs	r3, #0
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	2300      	movs	r3, #0
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	2100      	movs	r1, #0
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7ff fd60 	bl	8007168 <xTimerGenericCommand>
 80076a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10a      	bne.n	80076c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	603b      	str	r3, [r7, #0]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076c6:	4b09      	ldr	r3, [pc, #36]	; (80076ec <prvSwitchTimerLists+0xc0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1b1      	bne.n	8007634 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <prvSwitchTimerLists+0xc0>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076d6:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <prvSwitchTimerLists+0xc4>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a04      	ldr	r2, [pc, #16]	; (80076ec <prvSwitchTimerLists+0xc0>)
 80076dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076de:	4a04      	ldr	r2, [pc, #16]	; (80076f0 <prvSwitchTimerLists+0xc4>)
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	6013      	str	r3, [r2, #0]
}
 80076e4:	bf00      	nop
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000c78 	.word	0x20000c78
 80076f0:	20000c7c 	.word	0x20000c7c

080076f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076fa:	f000 f96b 	bl	80079d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076fe:	4b15      	ldr	r3, [pc, #84]	; (8007754 <prvCheckForValidListAndQueue+0x60>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d120      	bne.n	8007748 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007706:	4814      	ldr	r0, [pc, #80]	; (8007758 <prvCheckForValidListAndQueue+0x64>)
 8007708:	f7fe f848 	bl	800579c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800770c:	4813      	ldr	r0, [pc, #76]	; (800775c <prvCheckForValidListAndQueue+0x68>)
 800770e:	f7fe f845 	bl	800579c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007712:	4b13      	ldr	r3, [pc, #76]	; (8007760 <prvCheckForValidListAndQueue+0x6c>)
 8007714:	4a10      	ldr	r2, [pc, #64]	; (8007758 <prvCheckForValidListAndQueue+0x64>)
 8007716:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007718:	4b12      	ldr	r3, [pc, #72]	; (8007764 <prvCheckForValidListAndQueue+0x70>)
 800771a:	4a10      	ldr	r2, [pc, #64]	; (800775c <prvCheckForValidListAndQueue+0x68>)
 800771c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800771e:	2300      	movs	r3, #0
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	4b11      	ldr	r3, [pc, #68]	; (8007768 <prvCheckForValidListAndQueue+0x74>)
 8007724:	4a11      	ldr	r2, [pc, #68]	; (800776c <prvCheckForValidListAndQueue+0x78>)
 8007726:	2110      	movs	r1, #16
 8007728:	200a      	movs	r0, #10
 800772a:	f7fe f953 	bl	80059d4 <xQueueGenericCreateStatic>
 800772e:	4603      	mov	r3, r0
 8007730:	4a08      	ldr	r2, [pc, #32]	; (8007754 <prvCheckForValidListAndQueue+0x60>)
 8007732:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007734:	4b07      	ldr	r3, [pc, #28]	; (8007754 <prvCheckForValidListAndQueue+0x60>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800773c:	4b05      	ldr	r3, [pc, #20]	; (8007754 <prvCheckForValidListAndQueue+0x60>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	490b      	ldr	r1, [pc, #44]	; (8007770 <prvCheckForValidListAndQueue+0x7c>)
 8007742:	4618      	mov	r0, r3
 8007744:	f7fe fd6c 	bl	8006220 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007748:	f000 f974 	bl	8007a34 <vPortExitCritical>
}
 800774c:	bf00      	nop
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000c80 	.word	0x20000c80
 8007758:	20000c50 	.word	0x20000c50
 800775c:	20000c64 	.word	0x20000c64
 8007760:	20000c78 	.word	0x20000c78
 8007764:	20000c7c 	.word	0x20000c7c
 8007768:	20000d2c 	.word	0x20000d2c
 800776c:	20000c8c 	.word	0x20000c8c
 8007770:	08008928 	.word	0x08008928

08007774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3b04      	subs	r3, #4
 8007784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800778c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3b04      	subs	r3, #4
 8007792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f023 0201 	bic.w	r2, r3, #1
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3b04      	subs	r3, #4
 80077a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077a4:	4a0c      	ldr	r2, [pc, #48]	; (80077d8 <pxPortInitialiseStack+0x64>)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3b14      	subs	r3, #20
 80077ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3b04      	subs	r3, #4
 80077ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f06f 0202 	mvn.w	r2, #2
 80077c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3b20      	subs	r3, #32
 80077c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077ca:	68fb      	ldr	r3, [r7, #12]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	080077dd 	.word	0x080077dd

080077dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077e6:	4b12      	ldr	r3, [pc, #72]	; (8007830 <prvTaskExitError+0x54>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ee:	d00a      	beq.n	8007806 <prvTaskExitError+0x2a>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	60fb      	str	r3, [r7, #12]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <prvTaskExitError+0x28>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	60bb      	str	r3, [r7, #8]
}
 8007818:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800781a:	bf00      	nop
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0fc      	beq.n	800781c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	2000000c 	.word	0x2000000c
	...

08007840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007840:	4b07      	ldr	r3, [pc, #28]	; (8007860 <pxCurrentTCBConst2>)
 8007842:	6819      	ldr	r1, [r3, #0]
 8007844:	6808      	ldr	r0, [r1, #0]
 8007846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784a:	f380 8809 	msr	PSP, r0
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f04f 0000 	mov.w	r0, #0
 8007856:	f380 8811 	msr	BASEPRI, r0
 800785a:	4770      	bx	lr
 800785c:	f3af 8000 	nop.w

08007860 <pxCurrentTCBConst2>:
 8007860:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop

08007868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007868:	4808      	ldr	r0, [pc, #32]	; (800788c <prvPortStartFirstTask+0x24>)
 800786a:	6800      	ldr	r0, [r0, #0]
 800786c:	6800      	ldr	r0, [r0, #0]
 800786e:	f380 8808 	msr	MSP, r0
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8814 	msr	CONTROL, r0
 800787a:	b662      	cpsie	i
 800787c:	b661      	cpsie	f
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	df00      	svc	0
 8007888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800788a:	bf00      	nop
 800788c:	e000ed08 	.word	0xe000ed08

08007890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007896:	4b46      	ldr	r3, [pc, #280]	; (80079b0 <xPortStartScheduler+0x120>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a46      	ldr	r2, [pc, #280]	; (80079b4 <xPortStartScheduler+0x124>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10a      	bne.n	80078b6 <xPortStartScheduler+0x26>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	613b      	str	r3, [r7, #16]
}
 80078b2:	bf00      	nop
 80078b4:	e7fe      	b.n	80078b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078b6:	4b3e      	ldr	r3, [pc, #248]	; (80079b0 <xPortStartScheduler+0x120>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a3f      	ldr	r2, [pc, #252]	; (80079b8 <xPortStartScheduler+0x128>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d10a      	bne.n	80078d6 <xPortStartScheduler+0x46>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60fb      	str	r3, [r7, #12]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078d6:	4b39      	ldr	r3, [pc, #228]	; (80079bc <xPortStartScheduler+0x12c>)
 80078d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	22ff      	movs	r2, #255	; 0xff
 80078e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	4b31      	ldr	r3, [pc, #196]	; (80079c0 <xPortStartScheduler+0x130>)
 80078fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078fe:	4b31      	ldr	r3, [pc, #196]	; (80079c4 <xPortStartScheduler+0x134>)
 8007900:	2207      	movs	r2, #7
 8007902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007904:	e009      	b.n	800791a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007906:	4b2f      	ldr	r3, [pc, #188]	; (80079c4 <xPortStartScheduler+0x134>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3b01      	subs	r3, #1
 800790c:	4a2d      	ldr	r2, [pc, #180]	; (80079c4 <xPortStartScheduler+0x134>)
 800790e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	b2db      	uxtb	r3, r3
 8007918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007922:	2b80      	cmp	r3, #128	; 0x80
 8007924:	d0ef      	beq.n	8007906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007926:	4b27      	ldr	r3, [pc, #156]	; (80079c4 <xPortStartScheduler+0x134>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f1c3 0307 	rsb	r3, r3, #7
 800792e:	2b04      	cmp	r3, #4
 8007930:	d00a      	beq.n	8007948 <xPortStartScheduler+0xb8>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	60bb      	str	r3, [r7, #8]
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007948:	4b1e      	ldr	r3, [pc, #120]	; (80079c4 <xPortStartScheduler+0x134>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	4a1d      	ldr	r2, [pc, #116]	; (80079c4 <xPortStartScheduler+0x134>)
 8007950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007952:	4b1c      	ldr	r3, [pc, #112]	; (80079c4 <xPortStartScheduler+0x134>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800795a:	4a1a      	ldr	r2, [pc, #104]	; (80079c4 <xPortStartScheduler+0x134>)
 800795c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	b2da      	uxtb	r2, r3
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007966:	4b18      	ldr	r3, [pc, #96]	; (80079c8 <xPortStartScheduler+0x138>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a17      	ldr	r2, [pc, #92]	; (80079c8 <xPortStartScheduler+0x138>)
 800796c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007972:	4b15      	ldr	r3, [pc, #84]	; (80079c8 <xPortStartScheduler+0x138>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a14      	ldr	r2, [pc, #80]	; (80079c8 <xPortStartScheduler+0x138>)
 8007978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800797c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800797e:	f000 f8dd 	bl	8007b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007982:	4b12      	ldr	r3, [pc, #72]	; (80079cc <xPortStartScheduler+0x13c>)
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007988:	f000 f8fc 	bl	8007b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800798c:	4b10      	ldr	r3, [pc, #64]	; (80079d0 <xPortStartScheduler+0x140>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a0f      	ldr	r2, [pc, #60]	; (80079d0 <xPortStartScheduler+0x140>)
 8007992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007998:	f7ff ff66 	bl	8007868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800799c:	f7ff f850 	bl	8006a40 <vTaskSwitchContext>
	prvTaskExitError();
 80079a0:	f7ff ff1c 	bl	80077dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	e000ed00 	.word	0xe000ed00
 80079b4:	410fc271 	.word	0x410fc271
 80079b8:	410fc270 	.word	0x410fc270
 80079bc:	e000e400 	.word	0xe000e400
 80079c0:	20000d7c 	.word	0x20000d7c
 80079c4:	20000d80 	.word	0x20000d80
 80079c8:	e000ed20 	.word	0xe000ed20
 80079cc:	2000000c 	.word	0x2000000c
 80079d0:	e000ef34 	.word	0xe000ef34

080079d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	607b      	str	r3, [r7, #4]
}
 80079ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079ee:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <vPortEnterCritical+0x58>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	4a0d      	ldr	r2, [pc, #52]	; (8007a2c <vPortEnterCritical+0x58>)
 80079f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079f8:	4b0c      	ldr	r3, [pc, #48]	; (8007a2c <vPortEnterCritical+0x58>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d10f      	bne.n	8007a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <vPortEnterCritical+0x5c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	603b      	str	r3, [r7, #0]
}
 8007a1c:	bf00      	nop
 8007a1e:	e7fe      	b.n	8007a1e <vPortEnterCritical+0x4a>
	}
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	2000000c 	.word	0x2000000c
 8007a30:	e000ed04 	.word	0xe000ed04

08007a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a3a:	4b12      	ldr	r3, [pc, #72]	; (8007a84 <vPortExitCritical+0x50>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10a      	bne.n	8007a58 <vPortExitCritical+0x24>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	607b      	str	r3, [r7, #4]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a58:	4b0a      	ldr	r3, [pc, #40]	; (8007a84 <vPortExitCritical+0x50>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	4a09      	ldr	r2, [pc, #36]	; (8007a84 <vPortExitCritical+0x50>)
 8007a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a62:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <vPortExitCritical+0x50>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d105      	bne.n	8007a76 <vPortExitCritical+0x42>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	f383 8811 	msr	BASEPRI, r3
}
 8007a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	2000000c 	.word	0x2000000c
	...

08007a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a90:	f3ef 8009 	mrs	r0, PSP
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	4b15      	ldr	r3, [pc, #84]	; (8007af0 <pxCurrentTCBConst>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	f01e 0f10 	tst.w	lr, #16
 8007aa0:	bf08      	it	eq
 8007aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aaa:	6010      	str	r0, [r2, #0]
 8007aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ab4:	f380 8811 	msr	BASEPRI, r0
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f7fe ffbe 	bl	8006a40 <vTaskSwitchContext>
 8007ac4:	f04f 0000 	mov.w	r0, #0
 8007ac8:	f380 8811 	msr	BASEPRI, r0
 8007acc:	bc09      	pop	{r0, r3}
 8007ace:	6819      	ldr	r1, [r3, #0]
 8007ad0:	6808      	ldr	r0, [r1, #0]
 8007ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad6:	f01e 0f10 	tst.w	lr, #16
 8007ada:	bf08      	it	eq
 8007adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ae0:	f380 8809 	msr	PSP, r0
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	f3af 8000 	nop.w

08007af0 <pxCurrentTCBConst>:
 8007af0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop

08007af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	607b      	str	r3, [r7, #4]
}
 8007b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b12:	f7fe fedb 	bl	80068cc <xTaskIncrementTick>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b1c:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <xPortSysTickHandler+0x40>)
 8007b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	2300      	movs	r3, #0
 8007b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f383 8811 	msr	BASEPRI, r3
}
 8007b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b40:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <vPortSetupTimerInterrupt+0x34>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b46:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <vPortSetupTimerInterrupt+0x38>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <vPortSetupTimerInterrupt+0x3c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a0a      	ldr	r2, [pc, #40]	; (8007b7c <vPortSetupTimerInterrupt+0x40>)
 8007b52:	fba2 2303 	umull	r2, r3, r2, r3
 8007b56:	099b      	lsrs	r3, r3, #6
 8007b58:	4a09      	ldr	r2, [pc, #36]	; (8007b80 <vPortSetupTimerInterrupt+0x44>)
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b5e:	4b04      	ldr	r3, [pc, #16]	; (8007b70 <vPortSetupTimerInterrupt+0x34>)
 8007b60:	2207      	movs	r2, #7
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	e000e010 	.word	0xe000e010
 8007b74:	e000e018 	.word	0xe000e018
 8007b78:	20000000 	.word	0x20000000
 8007b7c:	10624dd3 	.word	0x10624dd3
 8007b80:	e000e014 	.word	0xe000e014

08007b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b94 <vPortEnableVFP+0x10>
 8007b88:	6801      	ldr	r1, [r0, #0]
 8007b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b8e:	6001      	str	r1, [r0, #0]
 8007b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b92:	bf00      	nop
 8007b94:	e000ed88 	.word	0xe000ed88

08007b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b9e:	f3ef 8305 	mrs	r3, IPSR
 8007ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b0f      	cmp	r3, #15
 8007ba8:	d914      	bls.n	8007bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007baa:	4a17      	ldr	r2, [pc, #92]	; (8007c08 <vPortValidateInterruptPriority+0x70>)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bb4:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <vPortValidateInterruptPriority+0x74>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	7afa      	ldrb	r2, [r7, #11]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d20a      	bcs.n	8007bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	607b      	str	r3, [r7, #4]
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bd4:	4b0e      	ldr	r3, [pc, #56]	; (8007c10 <vPortValidateInterruptPriority+0x78>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <vPortValidateInterruptPriority+0x7c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d90a      	bls.n	8007bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	603b      	str	r3, [r7, #0]
}
 8007bf6:	bf00      	nop
 8007bf8:	e7fe      	b.n	8007bf8 <vPortValidateInterruptPriority+0x60>
	}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	e000e3f0 	.word	0xe000e3f0
 8007c0c:	20000d7c 	.word	0x20000d7c
 8007c10:	e000ed0c 	.word	0xe000ed0c
 8007c14:	20000d80 	.word	0x20000d80

08007c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08a      	sub	sp, #40	; 0x28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c24:	f7fe fd96 	bl	8006754 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c28:	4b5b      	ldr	r3, [pc, #364]	; (8007d98 <pvPortMalloc+0x180>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c30:	f000 f920 	bl	8007e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c34:	4b59      	ldr	r3, [pc, #356]	; (8007d9c <pvPortMalloc+0x184>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f040 8093 	bne.w	8007d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01d      	beq.n	8007c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c48:	2208      	movs	r2, #8
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d014      	beq.n	8007c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f023 0307 	bic.w	r3, r3, #7
 8007c60:	3308      	adds	r3, #8
 8007c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <pvPortMalloc+0x6c>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	617b      	str	r3, [r7, #20]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d06e      	beq.n	8007d68 <pvPortMalloc+0x150>
 8007c8a:	4b45      	ldr	r3, [pc, #276]	; (8007da0 <pvPortMalloc+0x188>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d869      	bhi.n	8007d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c94:	4b43      	ldr	r3, [pc, #268]	; (8007da4 <pvPortMalloc+0x18c>)
 8007c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c98:	4b42      	ldr	r3, [pc, #264]	; (8007da4 <pvPortMalloc+0x18c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c9e:	e004      	b.n	8007caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d903      	bls.n	8007cbc <pvPortMalloc+0xa4>
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1f1      	bne.n	8007ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cbc:	4b36      	ldr	r3, [pc, #216]	; (8007d98 <pvPortMalloc+0x180>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d050      	beq.n	8007d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2208      	movs	r2, #8
 8007ccc:	4413      	add	r3, r2
 8007cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	1ad2      	subs	r2, r2, r3
 8007ce0:	2308      	movs	r3, #8
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d91f      	bls.n	8007d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4413      	add	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <pvPortMalloc+0xf8>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	613b      	str	r3, [r7, #16]
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	1ad2      	subs	r2, r2, r3
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d22:	69b8      	ldr	r0, [r7, #24]
 8007d24:	f000 f908 	bl	8007f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d28:	4b1d      	ldr	r3, [pc, #116]	; (8007da0 <pvPortMalloc+0x188>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	4a1b      	ldr	r2, [pc, #108]	; (8007da0 <pvPortMalloc+0x188>)
 8007d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d36:	4b1a      	ldr	r3, [pc, #104]	; (8007da0 <pvPortMalloc+0x188>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	4b1b      	ldr	r3, [pc, #108]	; (8007da8 <pvPortMalloc+0x190>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d203      	bcs.n	8007d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d42:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <pvPortMalloc+0x188>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a18      	ldr	r2, [pc, #96]	; (8007da8 <pvPortMalloc+0x190>)
 8007d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <pvPortMalloc+0x184>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	431a      	orrs	r2, r3
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d5e:	4b13      	ldr	r3, [pc, #76]	; (8007dac <pvPortMalloc+0x194>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3301      	adds	r3, #1
 8007d64:	4a11      	ldr	r2, [pc, #68]	; (8007dac <pvPortMalloc+0x194>)
 8007d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d68:	f7fe fd02 	bl	8006770 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	f003 0307 	and.w	r3, r3, #7
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <pvPortMalloc+0x174>
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	60fb      	str	r3, [r7, #12]
}
 8007d88:	bf00      	nop
 8007d8a:	e7fe      	b.n	8007d8a <pvPortMalloc+0x172>
	return pvReturn;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3728      	adds	r7, #40	; 0x28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	2000498c 	.word	0x2000498c
 8007d9c:	200049a0 	.word	0x200049a0
 8007da0:	20004990 	.word	0x20004990
 8007da4:	20004984 	.word	0x20004984
 8007da8:	20004994 	.word	0x20004994
 8007dac:	20004998 	.word	0x20004998

08007db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d04d      	beq.n	8007e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007dc2:	2308      	movs	r3, #8
 8007dc4:	425b      	negs	r3, r3
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	4413      	add	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	4b24      	ldr	r3, [pc, #144]	; (8007e68 <vPortFree+0xb8>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10a      	bne.n	8007df4 <vPortFree+0x44>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	60fb      	str	r3, [r7, #12]
}
 8007df0:	bf00      	nop
 8007df2:	e7fe      	b.n	8007df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <vPortFree+0x62>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	60bb      	str	r3, [r7, #8]
}
 8007e0e:	bf00      	nop
 8007e10:	e7fe      	b.n	8007e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <vPortFree+0xb8>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01e      	beq.n	8007e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d11a      	bne.n	8007e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	4b0e      	ldr	r3, [pc, #56]	; (8007e68 <vPortFree+0xb8>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	43db      	mvns	r3, r3
 8007e32:	401a      	ands	r2, r3
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e38:	f7fe fc8c 	bl	8006754 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <vPortFree+0xbc>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4413      	add	r3, r2
 8007e46:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <vPortFree+0xbc>)
 8007e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e4a:	6938      	ldr	r0, [r7, #16]
 8007e4c:	f000 f874 	bl	8007f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e50:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <vPortFree+0xc0>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3301      	adds	r3, #1
 8007e56:	4a06      	ldr	r2, [pc, #24]	; (8007e70 <vPortFree+0xc0>)
 8007e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e5a:	f7fe fc89 	bl	8006770 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e5e:	bf00      	nop
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	200049a0 	.word	0x200049a0
 8007e6c:	20004990 	.word	0x20004990
 8007e70:	2000499c 	.word	0x2000499c

08007e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e80:	4b27      	ldr	r3, [pc, #156]	; (8007f20 <prvHeapInit+0xac>)
 8007e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00c      	beq.n	8007ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3307      	adds	r3, #7
 8007e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0307 	bic.w	r3, r3, #7
 8007e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <prvHeapInit+0xac>)
 8007ea4:	4413      	add	r3, r2
 8007ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007eac:	4a1d      	ldr	r2, [pc, #116]	; (8007f24 <prvHeapInit+0xb0>)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007eb2:	4b1c      	ldr	r3, [pc, #112]	; (8007f24 <prvHeapInit+0xb0>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	1a9b      	subs	r3, r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0307 	bic.w	r3, r3, #7
 8007ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4a15      	ldr	r2, [pc, #84]	; (8007f28 <prvHeapInit+0xb4>)
 8007ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ed6:	4b14      	ldr	r3, [pc, #80]	; (8007f28 <prvHeapInit+0xb4>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2200      	movs	r2, #0
 8007edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ede:	4b12      	ldr	r3, [pc, #72]	; (8007f28 <prvHeapInit+0xb4>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	1ad2      	subs	r2, r2, r3
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ef4:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <prvHeapInit+0xb4>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <prvHeapInit+0xb8>)
 8007f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <prvHeapInit+0xbc>)
 8007f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f0c:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <prvHeapInit+0xc0>)
 8007f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f12:	601a      	str	r2, [r3, #0]
}
 8007f14:	bf00      	nop
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	20000d84 	.word	0x20000d84
 8007f24:	20004984 	.word	0x20004984
 8007f28:	2000498c 	.word	0x2000498c
 8007f2c:	20004994 	.word	0x20004994
 8007f30:	20004990 	.word	0x20004990
 8007f34:	200049a0 	.word	0x200049a0

08007f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f40:	4b28      	ldr	r3, [pc, #160]	; (8007fe4 <prvInsertBlockIntoFreeList+0xac>)
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	e002      	b.n	8007f4c <prvInsertBlockIntoFreeList+0x14>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d8f7      	bhi.n	8007f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	4413      	add	r3, r2
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d108      	bne.n	8007f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	441a      	add	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	441a      	add	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d118      	bne.n	8007fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4b15      	ldr	r3, [pc, #84]	; (8007fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d00d      	beq.n	8007fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	441a      	add	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	e008      	b.n	8007fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	e003      	b.n	8007fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d002      	beq.n	8007fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fd6:	bf00      	nop
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	20004984 	.word	0x20004984
 8007fe8:	2000498c 	.word	0x2000498c

08007fec <__errno>:
 8007fec:	4b01      	ldr	r3, [pc, #4]	; (8007ff4 <__errno+0x8>)
 8007fee:	6818      	ldr	r0, [r3, #0]
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	20000010 	.word	0x20000010

08007ff8 <__libc_init_array>:
 8007ff8:	b570      	push	{r4, r5, r6, lr}
 8007ffa:	4d0d      	ldr	r5, [pc, #52]	; (8008030 <__libc_init_array+0x38>)
 8007ffc:	4c0d      	ldr	r4, [pc, #52]	; (8008034 <__libc_init_array+0x3c>)
 8007ffe:	1b64      	subs	r4, r4, r5
 8008000:	10a4      	asrs	r4, r4, #2
 8008002:	2600      	movs	r6, #0
 8008004:	42a6      	cmp	r6, r4
 8008006:	d109      	bne.n	800801c <__libc_init_array+0x24>
 8008008:	4d0b      	ldr	r5, [pc, #44]	; (8008038 <__libc_init_array+0x40>)
 800800a:	4c0c      	ldr	r4, [pc, #48]	; (800803c <__libc_init_array+0x44>)
 800800c:	f000 fc4e 	bl	80088ac <_init>
 8008010:	1b64      	subs	r4, r4, r5
 8008012:	10a4      	asrs	r4, r4, #2
 8008014:	2600      	movs	r6, #0
 8008016:	42a6      	cmp	r6, r4
 8008018:	d105      	bne.n	8008026 <__libc_init_array+0x2e>
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008020:	4798      	blx	r3
 8008022:	3601      	adds	r6, #1
 8008024:	e7ee      	b.n	8008004 <__libc_init_array+0xc>
 8008026:	f855 3b04 	ldr.w	r3, [r5], #4
 800802a:	4798      	blx	r3
 800802c:	3601      	adds	r6, #1
 800802e:	e7f2      	b.n	8008016 <__libc_init_array+0x1e>
 8008030:	08009478 	.word	0x08009478
 8008034:	08009478 	.word	0x08009478
 8008038:	08009478 	.word	0x08009478
 800803c:	0800947c 	.word	0x0800947c

08008040 <memcpy>:
 8008040:	440a      	add	r2, r1
 8008042:	4291      	cmp	r1, r2
 8008044:	f100 33ff 	add.w	r3, r0, #4294967295
 8008048:	d100      	bne.n	800804c <memcpy+0xc>
 800804a:	4770      	bx	lr
 800804c:	b510      	push	{r4, lr}
 800804e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008056:	4291      	cmp	r1, r2
 8008058:	d1f9      	bne.n	800804e <memcpy+0xe>
 800805a:	bd10      	pop	{r4, pc}

0800805c <memset>:
 800805c:	4402      	add	r2, r0
 800805e:	4603      	mov	r3, r0
 8008060:	4293      	cmp	r3, r2
 8008062:	d100      	bne.n	8008066 <memset+0xa>
 8008064:	4770      	bx	lr
 8008066:	f803 1b01 	strb.w	r1, [r3], #1
 800806a:	e7f9      	b.n	8008060 <memset+0x4>

0800806c <siprintf>:
 800806c:	b40e      	push	{r1, r2, r3}
 800806e:	b500      	push	{lr}
 8008070:	b09c      	sub	sp, #112	; 0x70
 8008072:	ab1d      	add	r3, sp, #116	; 0x74
 8008074:	9002      	str	r0, [sp, #8]
 8008076:	9006      	str	r0, [sp, #24]
 8008078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800807c:	4809      	ldr	r0, [pc, #36]	; (80080a4 <siprintf+0x38>)
 800807e:	9107      	str	r1, [sp, #28]
 8008080:	9104      	str	r1, [sp, #16]
 8008082:	4909      	ldr	r1, [pc, #36]	; (80080a8 <siprintf+0x3c>)
 8008084:	f853 2b04 	ldr.w	r2, [r3], #4
 8008088:	9105      	str	r1, [sp, #20]
 800808a:	6800      	ldr	r0, [r0, #0]
 800808c:	9301      	str	r3, [sp, #4]
 800808e:	a902      	add	r1, sp, #8
 8008090:	f000 f868 	bl	8008164 <_svfiprintf_r>
 8008094:	9b02      	ldr	r3, [sp, #8]
 8008096:	2200      	movs	r2, #0
 8008098:	701a      	strb	r2, [r3, #0]
 800809a:	b01c      	add	sp, #112	; 0x70
 800809c:	f85d eb04 	ldr.w	lr, [sp], #4
 80080a0:	b003      	add	sp, #12
 80080a2:	4770      	bx	lr
 80080a4:	20000010 	.word	0x20000010
 80080a8:	ffff0208 	.word	0xffff0208

080080ac <__ssputs_r>:
 80080ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b0:	688e      	ldr	r6, [r1, #8]
 80080b2:	429e      	cmp	r6, r3
 80080b4:	4682      	mov	sl, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	4690      	mov	r8, r2
 80080ba:	461f      	mov	r7, r3
 80080bc:	d838      	bhi.n	8008130 <__ssputs_r+0x84>
 80080be:	898a      	ldrh	r2, [r1, #12]
 80080c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080c4:	d032      	beq.n	800812c <__ssputs_r+0x80>
 80080c6:	6825      	ldr	r5, [r4, #0]
 80080c8:	6909      	ldr	r1, [r1, #16]
 80080ca:	eba5 0901 	sub.w	r9, r5, r1
 80080ce:	6965      	ldr	r5, [r4, #20]
 80080d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080d8:	3301      	adds	r3, #1
 80080da:	444b      	add	r3, r9
 80080dc:	106d      	asrs	r5, r5, #1
 80080de:	429d      	cmp	r5, r3
 80080e0:	bf38      	it	cc
 80080e2:	461d      	movcc	r5, r3
 80080e4:	0553      	lsls	r3, r2, #21
 80080e6:	d531      	bpl.n	800814c <__ssputs_r+0xa0>
 80080e8:	4629      	mov	r1, r5
 80080ea:	f000 fb39 	bl	8008760 <_malloc_r>
 80080ee:	4606      	mov	r6, r0
 80080f0:	b950      	cbnz	r0, 8008108 <__ssputs_r+0x5c>
 80080f2:	230c      	movs	r3, #12
 80080f4:	f8ca 3000 	str.w	r3, [sl]
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080fe:	81a3      	strh	r3, [r4, #12]
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008108:	6921      	ldr	r1, [r4, #16]
 800810a:	464a      	mov	r2, r9
 800810c:	f7ff ff98 	bl	8008040 <memcpy>
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811a:	81a3      	strh	r3, [r4, #12]
 800811c:	6126      	str	r6, [r4, #16]
 800811e:	6165      	str	r5, [r4, #20]
 8008120:	444e      	add	r6, r9
 8008122:	eba5 0509 	sub.w	r5, r5, r9
 8008126:	6026      	str	r6, [r4, #0]
 8008128:	60a5      	str	r5, [r4, #8]
 800812a:	463e      	mov	r6, r7
 800812c:	42be      	cmp	r6, r7
 800812e:	d900      	bls.n	8008132 <__ssputs_r+0x86>
 8008130:	463e      	mov	r6, r7
 8008132:	4632      	mov	r2, r6
 8008134:	6820      	ldr	r0, [r4, #0]
 8008136:	4641      	mov	r1, r8
 8008138:	f000 faa8 	bl	800868c <memmove>
 800813c:	68a3      	ldr	r3, [r4, #8]
 800813e:	6822      	ldr	r2, [r4, #0]
 8008140:	1b9b      	subs	r3, r3, r6
 8008142:	4432      	add	r2, r6
 8008144:	60a3      	str	r3, [r4, #8]
 8008146:	6022      	str	r2, [r4, #0]
 8008148:	2000      	movs	r0, #0
 800814a:	e7db      	b.n	8008104 <__ssputs_r+0x58>
 800814c:	462a      	mov	r2, r5
 800814e:	f000 fb61 	bl	8008814 <_realloc_r>
 8008152:	4606      	mov	r6, r0
 8008154:	2800      	cmp	r0, #0
 8008156:	d1e1      	bne.n	800811c <__ssputs_r+0x70>
 8008158:	6921      	ldr	r1, [r4, #16]
 800815a:	4650      	mov	r0, sl
 800815c:	f000 fab0 	bl	80086c0 <_free_r>
 8008160:	e7c7      	b.n	80080f2 <__ssputs_r+0x46>
	...

08008164 <_svfiprintf_r>:
 8008164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008168:	4698      	mov	r8, r3
 800816a:	898b      	ldrh	r3, [r1, #12]
 800816c:	061b      	lsls	r3, r3, #24
 800816e:	b09d      	sub	sp, #116	; 0x74
 8008170:	4607      	mov	r7, r0
 8008172:	460d      	mov	r5, r1
 8008174:	4614      	mov	r4, r2
 8008176:	d50e      	bpl.n	8008196 <_svfiprintf_r+0x32>
 8008178:	690b      	ldr	r3, [r1, #16]
 800817a:	b963      	cbnz	r3, 8008196 <_svfiprintf_r+0x32>
 800817c:	2140      	movs	r1, #64	; 0x40
 800817e:	f000 faef 	bl	8008760 <_malloc_r>
 8008182:	6028      	str	r0, [r5, #0]
 8008184:	6128      	str	r0, [r5, #16]
 8008186:	b920      	cbnz	r0, 8008192 <_svfiprintf_r+0x2e>
 8008188:	230c      	movs	r3, #12
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	e0d1      	b.n	8008336 <_svfiprintf_r+0x1d2>
 8008192:	2340      	movs	r3, #64	; 0x40
 8008194:	616b      	str	r3, [r5, #20]
 8008196:	2300      	movs	r3, #0
 8008198:	9309      	str	r3, [sp, #36]	; 0x24
 800819a:	2320      	movs	r3, #32
 800819c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80081a4:	2330      	movs	r3, #48	; 0x30
 80081a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008350 <_svfiprintf_r+0x1ec>
 80081aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081ae:	f04f 0901 	mov.w	r9, #1
 80081b2:	4623      	mov	r3, r4
 80081b4:	469a      	mov	sl, r3
 80081b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ba:	b10a      	cbz	r2, 80081c0 <_svfiprintf_r+0x5c>
 80081bc:	2a25      	cmp	r2, #37	; 0x25
 80081be:	d1f9      	bne.n	80081b4 <_svfiprintf_r+0x50>
 80081c0:	ebba 0b04 	subs.w	fp, sl, r4
 80081c4:	d00b      	beq.n	80081de <_svfiprintf_r+0x7a>
 80081c6:	465b      	mov	r3, fp
 80081c8:	4622      	mov	r2, r4
 80081ca:	4629      	mov	r1, r5
 80081cc:	4638      	mov	r0, r7
 80081ce:	f7ff ff6d 	bl	80080ac <__ssputs_r>
 80081d2:	3001      	adds	r0, #1
 80081d4:	f000 80aa 	beq.w	800832c <_svfiprintf_r+0x1c8>
 80081d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081da:	445a      	add	r2, fp
 80081dc:	9209      	str	r2, [sp, #36]	; 0x24
 80081de:	f89a 3000 	ldrb.w	r3, [sl]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 80a2 	beq.w	800832c <_svfiprintf_r+0x1c8>
 80081e8:	2300      	movs	r3, #0
 80081ea:	f04f 32ff 	mov.w	r2, #4294967295
 80081ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081f2:	f10a 0a01 	add.w	sl, sl, #1
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	9307      	str	r3, [sp, #28]
 80081fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008200:	4654      	mov	r4, sl
 8008202:	2205      	movs	r2, #5
 8008204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008208:	4851      	ldr	r0, [pc, #324]	; (8008350 <_svfiprintf_r+0x1ec>)
 800820a:	f7f7 ffe1 	bl	80001d0 <memchr>
 800820e:	9a04      	ldr	r2, [sp, #16]
 8008210:	b9d8      	cbnz	r0, 800824a <_svfiprintf_r+0xe6>
 8008212:	06d0      	lsls	r0, r2, #27
 8008214:	bf44      	itt	mi
 8008216:	2320      	movmi	r3, #32
 8008218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800821c:	0711      	lsls	r1, r2, #28
 800821e:	bf44      	itt	mi
 8008220:	232b      	movmi	r3, #43	; 0x2b
 8008222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008226:	f89a 3000 	ldrb.w	r3, [sl]
 800822a:	2b2a      	cmp	r3, #42	; 0x2a
 800822c:	d015      	beq.n	800825a <_svfiprintf_r+0xf6>
 800822e:	9a07      	ldr	r2, [sp, #28]
 8008230:	4654      	mov	r4, sl
 8008232:	2000      	movs	r0, #0
 8008234:	f04f 0c0a 	mov.w	ip, #10
 8008238:	4621      	mov	r1, r4
 800823a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800823e:	3b30      	subs	r3, #48	; 0x30
 8008240:	2b09      	cmp	r3, #9
 8008242:	d94e      	bls.n	80082e2 <_svfiprintf_r+0x17e>
 8008244:	b1b0      	cbz	r0, 8008274 <_svfiprintf_r+0x110>
 8008246:	9207      	str	r2, [sp, #28]
 8008248:	e014      	b.n	8008274 <_svfiprintf_r+0x110>
 800824a:	eba0 0308 	sub.w	r3, r0, r8
 800824e:	fa09 f303 	lsl.w	r3, r9, r3
 8008252:	4313      	orrs	r3, r2
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	46a2      	mov	sl, r4
 8008258:	e7d2      	b.n	8008200 <_svfiprintf_r+0x9c>
 800825a:	9b03      	ldr	r3, [sp, #12]
 800825c:	1d19      	adds	r1, r3, #4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	9103      	str	r1, [sp, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	bfbb      	ittet	lt
 8008266:	425b      	neglt	r3, r3
 8008268:	f042 0202 	orrlt.w	r2, r2, #2
 800826c:	9307      	strge	r3, [sp, #28]
 800826e:	9307      	strlt	r3, [sp, #28]
 8008270:	bfb8      	it	lt
 8008272:	9204      	strlt	r2, [sp, #16]
 8008274:	7823      	ldrb	r3, [r4, #0]
 8008276:	2b2e      	cmp	r3, #46	; 0x2e
 8008278:	d10c      	bne.n	8008294 <_svfiprintf_r+0x130>
 800827a:	7863      	ldrb	r3, [r4, #1]
 800827c:	2b2a      	cmp	r3, #42	; 0x2a
 800827e:	d135      	bne.n	80082ec <_svfiprintf_r+0x188>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	1d1a      	adds	r2, r3, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	9203      	str	r2, [sp, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfb8      	it	lt
 800828c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008290:	3402      	adds	r4, #2
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008360 <_svfiprintf_r+0x1fc>
 8008298:	7821      	ldrb	r1, [r4, #0]
 800829a:	2203      	movs	r2, #3
 800829c:	4650      	mov	r0, sl
 800829e:	f7f7 ff97 	bl	80001d0 <memchr>
 80082a2:	b140      	cbz	r0, 80082b6 <_svfiprintf_r+0x152>
 80082a4:	2340      	movs	r3, #64	; 0x40
 80082a6:	eba0 000a 	sub.w	r0, r0, sl
 80082aa:	fa03 f000 	lsl.w	r0, r3, r0
 80082ae:	9b04      	ldr	r3, [sp, #16]
 80082b0:	4303      	orrs	r3, r0
 80082b2:	3401      	adds	r4, #1
 80082b4:	9304      	str	r3, [sp, #16]
 80082b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ba:	4826      	ldr	r0, [pc, #152]	; (8008354 <_svfiprintf_r+0x1f0>)
 80082bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082c0:	2206      	movs	r2, #6
 80082c2:	f7f7 ff85 	bl	80001d0 <memchr>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d038      	beq.n	800833c <_svfiprintf_r+0x1d8>
 80082ca:	4b23      	ldr	r3, [pc, #140]	; (8008358 <_svfiprintf_r+0x1f4>)
 80082cc:	bb1b      	cbnz	r3, 8008316 <_svfiprintf_r+0x1b2>
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	3307      	adds	r3, #7
 80082d2:	f023 0307 	bic.w	r3, r3, #7
 80082d6:	3308      	adds	r3, #8
 80082d8:	9303      	str	r3, [sp, #12]
 80082da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082dc:	4433      	add	r3, r6
 80082de:	9309      	str	r3, [sp, #36]	; 0x24
 80082e0:	e767      	b.n	80081b2 <_svfiprintf_r+0x4e>
 80082e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80082e6:	460c      	mov	r4, r1
 80082e8:	2001      	movs	r0, #1
 80082ea:	e7a5      	b.n	8008238 <_svfiprintf_r+0xd4>
 80082ec:	2300      	movs	r3, #0
 80082ee:	3401      	adds	r4, #1
 80082f0:	9305      	str	r3, [sp, #20]
 80082f2:	4619      	mov	r1, r3
 80082f4:	f04f 0c0a 	mov.w	ip, #10
 80082f8:	4620      	mov	r0, r4
 80082fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082fe:	3a30      	subs	r2, #48	; 0x30
 8008300:	2a09      	cmp	r2, #9
 8008302:	d903      	bls.n	800830c <_svfiprintf_r+0x1a8>
 8008304:	2b00      	cmp	r3, #0
 8008306:	d0c5      	beq.n	8008294 <_svfiprintf_r+0x130>
 8008308:	9105      	str	r1, [sp, #20]
 800830a:	e7c3      	b.n	8008294 <_svfiprintf_r+0x130>
 800830c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008310:	4604      	mov	r4, r0
 8008312:	2301      	movs	r3, #1
 8008314:	e7f0      	b.n	80082f8 <_svfiprintf_r+0x194>
 8008316:	ab03      	add	r3, sp, #12
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	462a      	mov	r2, r5
 800831c:	4b0f      	ldr	r3, [pc, #60]	; (800835c <_svfiprintf_r+0x1f8>)
 800831e:	a904      	add	r1, sp, #16
 8008320:	4638      	mov	r0, r7
 8008322:	f3af 8000 	nop.w
 8008326:	1c42      	adds	r2, r0, #1
 8008328:	4606      	mov	r6, r0
 800832a:	d1d6      	bne.n	80082da <_svfiprintf_r+0x176>
 800832c:	89ab      	ldrh	r3, [r5, #12]
 800832e:	065b      	lsls	r3, r3, #25
 8008330:	f53f af2c 	bmi.w	800818c <_svfiprintf_r+0x28>
 8008334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008336:	b01d      	add	sp, #116	; 0x74
 8008338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833c:	ab03      	add	r3, sp, #12
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	462a      	mov	r2, r5
 8008342:	4b06      	ldr	r3, [pc, #24]	; (800835c <_svfiprintf_r+0x1f8>)
 8008344:	a904      	add	r1, sp, #16
 8008346:	4638      	mov	r0, r7
 8008348:	f000 f87a 	bl	8008440 <_printf_i>
 800834c:	e7eb      	b.n	8008326 <_svfiprintf_r+0x1c2>
 800834e:	bf00      	nop
 8008350:	0800943c 	.word	0x0800943c
 8008354:	08009446 	.word	0x08009446
 8008358:	00000000 	.word	0x00000000
 800835c:	080080ad 	.word	0x080080ad
 8008360:	08009442 	.word	0x08009442

08008364 <_printf_common>:
 8008364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008368:	4616      	mov	r6, r2
 800836a:	4699      	mov	r9, r3
 800836c:	688a      	ldr	r2, [r1, #8]
 800836e:	690b      	ldr	r3, [r1, #16]
 8008370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008374:	4293      	cmp	r3, r2
 8008376:	bfb8      	it	lt
 8008378:	4613      	movlt	r3, r2
 800837a:	6033      	str	r3, [r6, #0]
 800837c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008380:	4607      	mov	r7, r0
 8008382:	460c      	mov	r4, r1
 8008384:	b10a      	cbz	r2, 800838a <_printf_common+0x26>
 8008386:	3301      	adds	r3, #1
 8008388:	6033      	str	r3, [r6, #0]
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	0699      	lsls	r1, r3, #26
 800838e:	bf42      	ittt	mi
 8008390:	6833      	ldrmi	r3, [r6, #0]
 8008392:	3302      	addmi	r3, #2
 8008394:	6033      	strmi	r3, [r6, #0]
 8008396:	6825      	ldr	r5, [r4, #0]
 8008398:	f015 0506 	ands.w	r5, r5, #6
 800839c:	d106      	bne.n	80083ac <_printf_common+0x48>
 800839e:	f104 0a19 	add.w	sl, r4, #25
 80083a2:	68e3      	ldr	r3, [r4, #12]
 80083a4:	6832      	ldr	r2, [r6, #0]
 80083a6:	1a9b      	subs	r3, r3, r2
 80083a8:	42ab      	cmp	r3, r5
 80083aa:	dc26      	bgt.n	80083fa <_printf_common+0x96>
 80083ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083b0:	1e13      	subs	r3, r2, #0
 80083b2:	6822      	ldr	r2, [r4, #0]
 80083b4:	bf18      	it	ne
 80083b6:	2301      	movne	r3, #1
 80083b8:	0692      	lsls	r2, r2, #26
 80083ba:	d42b      	bmi.n	8008414 <_printf_common+0xb0>
 80083bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083c0:	4649      	mov	r1, r9
 80083c2:	4638      	mov	r0, r7
 80083c4:	47c0      	blx	r8
 80083c6:	3001      	adds	r0, #1
 80083c8:	d01e      	beq.n	8008408 <_printf_common+0xa4>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	68e5      	ldr	r5, [r4, #12]
 80083ce:	6832      	ldr	r2, [r6, #0]
 80083d0:	f003 0306 	and.w	r3, r3, #6
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	bf08      	it	eq
 80083d8:	1aad      	subeq	r5, r5, r2
 80083da:	68a3      	ldr	r3, [r4, #8]
 80083dc:	6922      	ldr	r2, [r4, #16]
 80083de:	bf0c      	ite	eq
 80083e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083e4:	2500      	movne	r5, #0
 80083e6:	4293      	cmp	r3, r2
 80083e8:	bfc4      	itt	gt
 80083ea:	1a9b      	subgt	r3, r3, r2
 80083ec:	18ed      	addgt	r5, r5, r3
 80083ee:	2600      	movs	r6, #0
 80083f0:	341a      	adds	r4, #26
 80083f2:	42b5      	cmp	r5, r6
 80083f4:	d11a      	bne.n	800842c <_printf_common+0xc8>
 80083f6:	2000      	movs	r0, #0
 80083f8:	e008      	b.n	800840c <_printf_common+0xa8>
 80083fa:	2301      	movs	r3, #1
 80083fc:	4652      	mov	r2, sl
 80083fe:	4649      	mov	r1, r9
 8008400:	4638      	mov	r0, r7
 8008402:	47c0      	blx	r8
 8008404:	3001      	adds	r0, #1
 8008406:	d103      	bne.n	8008410 <_printf_common+0xac>
 8008408:	f04f 30ff 	mov.w	r0, #4294967295
 800840c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008410:	3501      	adds	r5, #1
 8008412:	e7c6      	b.n	80083a2 <_printf_common+0x3e>
 8008414:	18e1      	adds	r1, r4, r3
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	2030      	movs	r0, #48	; 0x30
 800841a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800841e:	4422      	add	r2, r4
 8008420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008428:	3302      	adds	r3, #2
 800842a:	e7c7      	b.n	80083bc <_printf_common+0x58>
 800842c:	2301      	movs	r3, #1
 800842e:	4622      	mov	r2, r4
 8008430:	4649      	mov	r1, r9
 8008432:	4638      	mov	r0, r7
 8008434:	47c0      	blx	r8
 8008436:	3001      	adds	r0, #1
 8008438:	d0e6      	beq.n	8008408 <_printf_common+0xa4>
 800843a:	3601      	adds	r6, #1
 800843c:	e7d9      	b.n	80083f2 <_printf_common+0x8e>
	...

08008440 <_printf_i>:
 8008440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008444:	460c      	mov	r4, r1
 8008446:	4691      	mov	r9, r2
 8008448:	7e27      	ldrb	r7, [r4, #24]
 800844a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800844c:	2f78      	cmp	r7, #120	; 0x78
 800844e:	4680      	mov	r8, r0
 8008450:	469a      	mov	sl, r3
 8008452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008456:	d807      	bhi.n	8008468 <_printf_i+0x28>
 8008458:	2f62      	cmp	r7, #98	; 0x62
 800845a:	d80a      	bhi.n	8008472 <_printf_i+0x32>
 800845c:	2f00      	cmp	r7, #0
 800845e:	f000 80d8 	beq.w	8008612 <_printf_i+0x1d2>
 8008462:	2f58      	cmp	r7, #88	; 0x58
 8008464:	f000 80a3 	beq.w	80085ae <_printf_i+0x16e>
 8008468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800846c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008470:	e03a      	b.n	80084e8 <_printf_i+0xa8>
 8008472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008476:	2b15      	cmp	r3, #21
 8008478:	d8f6      	bhi.n	8008468 <_printf_i+0x28>
 800847a:	a001      	add	r0, pc, #4	; (adr r0, 8008480 <_printf_i+0x40>)
 800847c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008480:	080084d9 	.word	0x080084d9
 8008484:	080084ed 	.word	0x080084ed
 8008488:	08008469 	.word	0x08008469
 800848c:	08008469 	.word	0x08008469
 8008490:	08008469 	.word	0x08008469
 8008494:	08008469 	.word	0x08008469
 8008498:	080084ed 	.word	0x080084ed
 800849c:	08008469 	.word	0x08008469
 80084a0:	08008469 	.word	0x08008469
 80084a4:	08008469 	.word	0x08008469
 80084a8:	08008469 	.word	0x08008469
 80084ac:	080085f9 	.word	0x080085f9
 80084b0:	0800851d 	.word	0x0800851d
 80084b4:	080085db 	.word	0x080085db
 80084b8:	08008469 	.word	0x08008469
 80084bc:	08008469 	.word	0x08008469
 80084c0:	0800861b 	.word	0x0800861b
 80084c4:	08008469 	.word	0x08008469
 80084c8:	0800851d 	.word	0x0800851d
 80084cc:	08008469 	.word	0x08008469
 80084d0:	08008469 	.word	0x08008469
 80084d4:	080085e3 	.word	0x080085e3
 80084d8:	680b      	ldr	r3, [r1, #0]
 80084da:	1d1a      	adds	r2, r3, #4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	600a      	str	r2, [r1, #0]
 80084e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084e8:	2301      	movs	r3, #1
 80084ea:	e0a3      	b.n	8008634 <_printf_i+0x1f4>
 80084ec:	6825      	ldr	r5, [r4, #0]
 80084ee:	6808      	ldr	r0, [r1, #0]
 80084f0:	062e      	lsls	r6, r5, #24
 80084f2:	f100 0304 	add.w	r3, r0, #4
 80084f6:	d50a      	bpl.n	800850e <_printf_i+0xce>
 80084f8:	6805      	ldr	r5, [r0, #0]
 80084fa:	600b      	str	r3, [r1, #0]
 80084fc:	2d00      	cmp	r5, #0
 80084fe:	da03      	bge.n	8008508 <_printf_i+0xc8>
 8008500:	232d      	movs	r3, #45	; 0x2d
 8008502:	426d      	negs	r5, r5
 8008504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008508:	485e      	ldr	r0, [pc, #376]	; (8008684 <_printf_i+0x244>)
 800850a:	230a      	movs	r3, #10
 800850c:	e019      	b.n	8008542 <_printf_i+0x102>
 800850e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008512:	6805      	ldr	r5, [r0, #0]
 8008514:	600b      	str	r3, [r1, #0]
 8008516:	bf18      	it	ne
 8008518:	b22d      	sxthne	r5, r5
 800851a:	e7ef      	b.n	80084fc <_printf_i+0xbc>
 800851c:	680b      	ldr	r3, [r1, #0]
 800851e:	6825      	ldr	r5, [r4, #0]
 8008520:	1d18      	adds	r0, r3, #4
 8008522:	6008      	str	r0, [r1, #0]
 8008524:	0628      	lsls	r0, r5, #24
 8008526:	d501      	bpl.n	800852c <_printf_i+0xec>
 8008528:	681d      	ldr	r5, [r3, #0]
 800852a:	e002      	b.n	8008532 <_printf_i+0xf2>
 800852c:	0669      	lsls	r1, r5, #25
 800852e:	d5fb      	bpl.n	8008528 <_printf_i+0xe8>
 8008530:	881d      	ldrh	r5, [r3, #0]
 8008532:	4854      	ldr	r0, [pc, #336]	; (8008684 <_printf_i+0x244>)
 8008534:	2f6f      	cmp	r7, #111	; 0x6f
 8008536:	bf0c      	ite	eq
 8008538:	2308      	moveq	r3, #8
 800853a:	230a      	movne	r3, #10
 800853c:	2100      	movs	r1, #0
 800853e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008542:	6866      	ldr	r6, [r4, #4]
 8008544:	60a6      	str	r6, [r4, #8]
 8008546:	2e00      	cmp	r6, #0
 8008548:	bfa2      	ittt	ge
 800854a:	6821      	ldrge	r1, [r4, #0]
 800854c:	f021 0104 	bicge.w	r1, r1, #4
 8008550:	6021      	strge	r1, [r4, #0]
 8008552:	b90d      	cbnz	r5, 8008558 <_printf_i+0x118>
 8008554:	2e00      	cmp	r6, #0
 8008556:	d04d      	beq.n	80085f4 <_printf_i+0x1b4>
 8008558:	4616      	mov	r6, r2
 800855a:	fbb5 f1f3 	udiv	r1, r5, r3
 800855e:	fb03 5711 	mls	r7, r3, r1, r5
 8008562:	5dc7      	ldrb	r7, [r0, r7]
 8008564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008568:	462f      	mov	r7, r5
 800856a:	42bb      	cmp	r3, r7
 800856c:	460d      	mov	r5, r1
 800856e:	d9f4      	bls.n	800855a <_printf_i+0x11a>
 8008570:	2b08      	cmp	r3, #8
 8008572:	d10b      	bne.n	800858c <_printf_i+0x14c>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	07df      	lsls	r7, r3, #31
 8008578:	d508      	bpl.n	800858c <_printf_i+0x14c>
 800857a:	6923      	ldr	r3, [r4, #16]
 800857c:	6861      	ldr	r1, [r4, #4]
 800857e:	4299      	cmp	r1, r3
 8008580:	bfde      	ittt	le
 8008582:	2330      	movle	r3, #48	; 0x30
 8008584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800858c:	1b92      	subs	r2, r2, r6
 800858e:	6122      	str	r2, [r4, #16]
 8008590:	f8cd a000 	str.w	sl, [sp]
 8008594:	464b      	mov	r3, r9
 8008596:	aa03      	add	r2, sp, #12
 8008598:	4621      	mov	r1, r4
 800859a:	4640      	mov	r0, r8
 800859c:	f7ff fee2 	bl	8008364 <_printf_common>
 80085a0:	3001      	adds	r0, #1
 80085a2:	d14c      	bne.n	800863e <_printf_i+0x1fe>
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	b004      	add	sp, #16
 80085aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ae:	4835      	ldr	r0, [pc, #212]	; (8008684 <_printf_i+0x244>)
 80085b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	680e      	ldr	r6, [r1, #0]
 80085b8:	061f      	lsls	r7, r3, #24
 80085ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80085be:	600e      	str	r6, [r1, #0]
 80085c0:	d514      	bpl.n	80085ec <_printf_i+0x1ac>
 80085c2:	07d9      	lsls	r1, r3, #31
 80085c4:	bf44      	itt	mi
 80085c6:	f043 0320 	orrmi.w	r3, r3, #32
 80085ca:	6023      	strmi	r3, [r4, #0]
 80085cc:	b91d      	cbnz	r5, 80085d6 <_printf_i+0x196>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	f023 0320 	bic.w	r3, r3, #32
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	2310      	movs	r3, #16
 80085d8:	e7b0      	b.n	800853c <_printf_i+0xfc>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	f043 0320 	orr.w	r3, r3, #32
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	2378      	movs	r3, #120	; 0x78
 80085e4:	4828      	ldr	r0, [pc, #160]	; (8008688 <_printf_i+0x248>)
 80085e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085ea:	e7e3      	b.n	80085b4 <_printf_i+0x174>
 80085ec:	065e      	lsls	r6, r3, #25
 80085ee:	bf48      	it	mi
 80085f0:	b2ad      	uxthmi	r5, r5
 80085f2:	e7e6      	b.n	80085c2 <_printf_i+0x182>
 80085f4:	4616      	mov	r6, r2
 80085f6:	e7bb      	b.n	8008570 <_printf_i+0x130>
 80085f8:	680b      	ldr	r3, [r1, #0]
 80085fa:	6826      	ldr	r6, [r4, #0]
 80085fc:	6960      	ldr	r0, [r4, #20]
 80085fe:	1d1d      	adds	r5, r3, #4
 8008600:	600d      	str	r5, [r1, #0]
 8008602:	0635      	lsls	r5, r6, #24
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	d501      	bpl.n	800860c <_printf_i+0x1cc>
 8008608:	6018      	str	r0, [r3, #0]
 800860a:	e002      	b.n	8008612 <_printf_i+0x1d2>
 800860c:	0671      	lsls	r1, r6, #25
 800860e:	d5fb      	bpl.n	8008608 <_printf_i+0x1c8>
 8008610:	8018      	strh	r0, [r3, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	6123      	str	r3, [r4, #16]
 8008616:	4616      	mov	r6, r2
 8008618:	e7ba      	b.n	8008590 <_printf_i+0x150>
 800861a:	680b      	ldr	r3, [r1, #0]
 800861c:	1d1a      	adds	r2, r3, #4
 800861e:	600a      	str	r2, [r1, #0]
 8008620:	681e      	ldr	r6, [r3, #0]
 8008622:	6862      	ldr	r2, [r4, #4]
 8008624:	2100      	movs	r1, #0
 8008626:	4630      	mov	r0, r6
 8008628:	f7f7 fdd2 	bl	80001d0 <memchr>
 800862c:	b108      	cbz	r0, 8008632 <_printf_i+0x1f2>
 800862e:	1b80      	subs	r0, r0, r6
 8008630:	6060      	str	r0, [r4, #4]
 8008632:	6863      	ldr	r3, [r4, #4]
 8008634:	6123      	str	r3, [r4, #16]
 8008636:	2300      	movs	r3, #0
 8008638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800863c:	e7a8      	b.n	8008590 <_printf_i+0x150>
 800863e:	6923      	ldr	r3, [r4, #16]
 8008640:	4632      	mov	r2, r6
 8008642:	4649      	mov	r1, r9
 8008644:	4640      	mov	r0, r8
 8008646:	47d0      	blx	sl
 8008648:	3001      	adds	r0, #1
 800864a:	d0ab      	beq.n	80085a4 <_printf_i+0x164>
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	079b      	lsls	r3, r3, #30
 8008650:	d413      	bmi.n	800867a <_printf_i+0x23a>
 8008652:	68e0      	ldr	r0, [r4, #12]
 8008654:	9b03      	ldr	r3, [sp, #12]
 8008656:	4298      	cmp	r0, r3
 8008658:	bfb8      	it	lt
 800865a:	4618      	movlt	r0, r3
 800865c:	e7a4      	b.n	80085a8 <_printf_i+0x168>
 800865e:	2301      	movs	r3, #1
 8008660:	4632      	mov	r2, r6
 8008662:	4649      	mov	r1, r9
 8008664:	4640      	mov	r0, r8
 8008666:	47d0      	blx	sl
 8008668:	3001      	adds	r0, #1
 800866a:	d09b      	beq.n	80085a4 <_printf_i+0x164>
 800866c:	3501      	adds	r5, #1
 800866e:	68e3      	ldr	r3, [r4, #12]
 8008670:	9903      	ldr	r1, [sp, #12]
 8008672:	1a5b      	subs	r3, r3, r1
 8008674:	42ab      	cmp	r3, r5
 8008676:	dcf2      	bgt.n	800865e <_printf_i+0x21e>
 8008678:	e7eb      	b.n	8008652 <_printf_i+0x212>
 800867a:	2500      	movs	r5, #0
 800867c:	f104 0619 	add.w	r6, r4, #25
 8008680:	e7f5      	b.n	800866e <_printf_i+0x22e>
 8008682:	bf00      	nop
 8008684:	0800944d 	.word	0x0800944d
 8008688:	0800945e 	.word	0x0800945e

0800868c <memmove>:
 800868c:	4288      	cmp	r0, r1
 800868e:	b510      	push	{r4, lr}
 8008690:	eb01 0402 	add.w	r4, r1, r2
 8008694:	d902      	bls.n	800869c <memmove+0x10>
 8008696:	4284      	cmp	r4, r0
 8008698:	4623      	mov	r3, r4
 800869a:	d807      	bhi.n	80086ac <memmove+0x20>
 800869c:	1e43      	subs	r3, r0, #1
 800869e:	42a1      	cmp	r1, r4
 80086a0:	d008      	beq.n	80086b4 <memmove+0x28>
 80086a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086aa:	e7f8      	b.n	800869e <memmove+0x12>
 80086ac:	4402      	add	r2, r0
 80086ae:	4601      	mov	r1, r0
 80086b0:	428a      	cmp	r2, r1
 80086b2:	d100      	bne.n	80086b6 <memmove+0x2a>
 80086b4:	bd10      	pop	{r4, pc}
 80086b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086be:	e7f7      	b.n	80086b0 <memmove+0x24>

080086c0 <_free_r>:
 80086c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086c2:	2900      	cmp	r1, #0
 80086c4:	d048      	beq.n	8008758 <_free_r+0x98>
 80086c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ca:	9001      	str	r0, [sp, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f1a1 0404 	sub.w	r4, r1, #4
 80086d2:	bfb8      	it	lt
 80086d4:	18e4      	addlt	r4, r4, r3
 80086d6:	f000 f8d3 	bl	8008880 <__malloc_lock>
 80086da:	4a20      	ldr	r2, [pc, #128]	; (800875c <_free_r+0x9c>)
 80086dc:	9801      	ldr	r0, [sp, #4]
 80086de:	6813      	ldr	r3, [r2, #0]
 80086e0:	4615      	mov	r5, r2
 80086e2:	b933      	cbnz	r3, 80086f2 <_free_r+0x32>
 80086e4:	6063      	str	r3, [r4, #4]
 80086e6:	6014      	str	r4, [r2, #0]
 80086e8:	b003      	add	sp, #12
 80086ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086ee:	f000 b8cd 	b.w	800888c <__malloc_unlock>
 80086f2:	42a3      	cmp	r3, r4
 80086f4:	d90b      	bls.n	800870e <_free_r+0x4e>
 80086f6:	6821      	ldr	r1, [r4, #0]
 80086f8:	1862      	adds	r2, r4, r1
 80086fa:	4293      	cmp	r3, r2
 80086fc:	bf04      	itt	eq
 80086fe:	681a      	ldreq	r2, [r3, #0]
 8008700:	685b      	ldreq	r3, [r3, #4]
 8008702:	6063      	str	r3, [r4, #4]
 8008704:	bf04      	itt	eq
 8008706:	1852      	addeq	r2, r2, r1
 8008708:	6022      	streq	r2, [r4, #0]
 800870a:	602c      	str	r4, [r5, #0]
 800870c:	e7ec      	b.n	80086e8 <_free_r+0x28>
 800870e:	461a      	mov	r2, r3
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	b10b      	cbz	r3, 8008718 <_free_r+0x58>
 8008714:	42a3      	cmp	r3, r4
 8008716:	d9fa      	bls.n	800870e <_free_r+0x4e>
 8008718:	6811      	ldr	r1, [r2, #0]
 800871a:	1855      	adds	r5, r2, r1
 800871c:	42a5      	cmp	r5, r4
 800871e:	d10b      	bne.n	8008738 <_free_r+0x78>
 8008720:	6824      	ldr	r4, [r4, #0]
 8008722:	4421      	add	r1, r4
 8008724:	1854      	adds	r4, r2, r1
 8008726:	42a3      	cmp	r3, r4
 8008728:	6011      	str	r1, [r2, #0]
 800872a:	d1dd      	bne.n	80086e8 <_free_r+0x28>
 800872c:	681c      	ldr	r4, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	6053      	str	r3, [r2, #4]
 8008732:	4421      	add	r1, r4
 8008734:	6011      	str	r1, [r2, #0]
 8008736:	e7d7      	b.n	80086e8 <_free_r+0x28>
 8008738:	d902      	bls.n	8008740 <_free_r+0x80>
 800873a:	230c      	movs	r3, #12
 800873c:	6003      	str	r3, [r0, #0]
 800873e:	e7d3      	b.n	80086e8 <_free_r+0x28>
 8008740:	6825      	ldr	r5, [r4, #0]
 8008742:	1961      	adds	r1, r4, r5
 8008744:	428b      	cmp	r3, r1
 8008746:	bf04      	itt	eq
 8008748:	6819      	ldreq	r1, [r3, #0]
 800874a:	685b      	ldreq	r3, [r3, #4]
 800874c:	6063      	str	r3, [r4, #4]
 800874e:	bf04      	itt	eq
 8008750:	1949      	addeq	r1, r1, r5
 8008752:	6021      	streq	r1, [r4, #0]
 8008754:	6054      	str	r4, [r2, #4]
 8008756:	e7c7      	b.n	80086e8 <_free_r+0x28>
 8008758:	b003      	add	sp, #12
 800875a:	bd30      	pop	{r4, r5, pc}
 800875c:	200049a4 	.word	0x200049a4

08008760 <_malloc_r>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	1ccd      	adds	r5, r1, #3
 8008764:	f025 0503 	bic.w	r5, r5, #3
 8008768:	3508      	adds	r5, #8
 800876a:	2d0c      	cmp	r5, #12
 800876c:	bf38      	it	cc
 800876e:	250c      	movcc	r5, #12
 8008770:	2d00      	cmp	r5, #0
 8008772:	4606      	mov	r6, r0
 8008774:	db01      	blt.n	800877a <_malloc_r+0x1a>
 8008776:	42a9      	cmp	r1, r5
 8008778:	d903      	bls.n	8008782 <_malloc_r+0x22>
 800877a:	230c      	movs	r3, #12
 800877c:	6033      	str	r3, [r6, #0]
 800877e:	2000      	movs	r0, #0
 8008780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008782:	f000 f87d 	bl	8008880 <__malloc_lock>
 8008786:	4921      	ldr	r1, [pc, #132]	; (800880c <_malloc_r+0xac>)
 8008788:	680a      	ldr	r2, [r1, #0]
 800878a:	4614      	mov	r4, r2
 800878c:	b99c      	cbnz	r4, 80087b6 <_malloc_r+0x56>
 800878e:	4f20      	ldr	r7, [pc, #128]	; (8008810 <_malloc_r+0xb0>)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	b923      	cbnz	r3, 800879e <_malloc_r+0x3e>
 8008794:	4621      	mov	r1, r4
 8008796:	4630      	mov	r0, r6
 8008798:	f000 f862 	bl	8008860 <_sbrk_r>
 800879c:	6038      	str	r0, [r7, #0]
 800879e:	4629      	mov	r1, r5
 80087a0:	4630      	mov	r0, r6
 80087a2:	f000 f85d 	bl	8008860 <_sbrk_r>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	d123      	bne.n	80087f2 <_malloc_r+0x92>
 80087aa:	230c      	movs	r3, #12
 80087ac:	6033      	str	r3, [r6, #0]
 80087ae:	4630      	mov	r0, r6
 80087b0:	f000 f86c 	bl	800888c <__malloc_unlock>
 80087b4:	e7e3      	b.n	800877e <_malloc_r+0x1e>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	1b5b      	subs	r3, r3, r5
 80087ba:	d417      	bmi.n	80087ec <_malloc_r+0x8c>
 80087bc:	2b0b      	cmp	r3, #11
 80087be:	d903      	bls.n	80087c8 <_malloc_r+0x68>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	441c      	add	r4, r3
 80087c4:	6025      	str	r5, [r4, #0]
 80087c6:	e004      	b.n	80087d2 <_malloc_r+0x72>
 80087c8:	6863      	ldr	r3, [r4, #4]
 80087ca:	42a2      	cmp	r2, r4
 80087cc:	bf0c      	ite	eq
 80087ce:	600b      	streq	r3, [r1, #0]
 80087d0:	6053      	strne	r3, [r2, #4]
 80087d2:	4630      	mov	r0, r6
 80087d4:	f000 f85a 	bl	800888c <__malloc_unlock>
 80087d8:	f104 000b 	add.w	r0, r4, #11
 80087dc:	1d23      	adds	r3, r4, #4
 80087de:	f020 0007 	bic.w	r0, r0, #7
 80087e2:	1ac2      	subs	r2, r0, r3
 80087e4:	d0cc      	beq.n	8008780 <_malloc_r+0x20>
 80087e6:	1a1b      	subs	r3, r3, r0
 80087e8:	50a3      	str	r3, [r4, r2]
 80087ea:	e7c9      	b.n	8008780 <_malloc_r+0x20>
 80087ec:	4622      	mov	r2, r4
 80087ee:	6864      	ldr	r4, [r4, #4]
 80087f0:	e7cc      	b.n	800878c <_malloc_r+0x2c>
 80087f2:	1cc4      	adds	r4, r0, #3
 80087f4:	f024 0403 	bic.w	r4, r4, #3
 80087f8:	42a0      	cmp	r0, r4
 80087fa:	d0e3      	beq.n	80087c4 <_malloc_r+0x64>
 80087fc:	1a21      	subs	r1, r4, r0
 80087fe:	4630      	mov	r0, r6
 8008800:	f000 f82e 	bl	8008860 <_sbrk_r>
 8008804:	3001      	adds	r0, #1
 8008806:	d1dd      	bne.n	80087c4 <_malloc_r+0x64>
 8008808:	e7cf      	b.n	80087aa <_malloc_r+0x4a>
 800880a:	bf00      	nop
 800880c:	200049a4 	.word	0x200049a4
 8008810:	200049a8 	.word	0x200049a8

08008814 <_realloc_r>:
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	4607      	mov	r7, r0
 8008818:	4614      	mov	r4, r2
 800881a:	460e      	mov	r6, r1
 800881c:	b921      	cbnz	r1, 8008828 <_realloc_r+0x14>
 800881e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008822:	4611      	mov	r1, r2
 8008824:	f7ff bf9c 	b.w	8008760 <_malloc_r>
 8008828:	b922      	cbnz	r2, 8008834 <_realloc_r+0x20>
 800882a:	f7ff ff49 	bl	80086c0 <_free_r>
 800882e:	4625      	mov	r5, r4
 8008830:	4628      	mov	r0, r5
 8008832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008834:	f000 f830 	bl	8008898 <_malloc_usable_size_r>
 8008838:	42a0      	cmp	r0, r4
 800883a:	d20f      	bcs.n	800885c <_realloc_r+0x48>
 800883c:	4621      	mov	r1, r4
 800883e:	4638      	mov	r0, r7
 8008840:	f7ff ff8e 	bl	8008760 <_malloc_r>
 8008844:	4605      	mov	r5, r0
 8008846:	2800      	cmp	r0, #0
 8008848:	d0f2      	beq.n	8008830 <_realloc_r+0x1c>
 800884a:	4631      	mov	r1, r6
 800884c:	4622      	mov	r2, r4
 800884e:	f7ff fbf7 	bl	8008040 <memcpy>
 8008852:	4631      	mov	r1, r6
 8008854:	4638      	mov	r0, r7
 8008856:	f7ff ff33 	bl	80086c0 <_free_r>
 800885a:	e7e9      	b.n	8008830 <_realloc_r+0x1c>
 800885c:	4635      	mov	r5, r6
 800885e:	e7e7      	b.n	8008830 <_realloc_r+0x1c>

08008860 <_sbrk_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4d06      	ldr	r5, [pc, #24]	; (800887c <_sbrk_r+0x1c>)
 8008864:	2300      	movs	r3, #0
 8008866:	4604      	mov	r4, r0
 8008868:	4608      	mov	r0, r1
 800886a:	602b      	str	r3, [r5, #0]
 800886c:	f7f9 f81c 	bl	80018a8 <_sbrk>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_sbrk_r+0x1a>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_sbrk_r+0x1a>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	20004fc0 	.word	0x20004fc0

08008880 <__malloc_lock>:
 8008880:	4801      	ldr	r0, [pc, #4]	; (8008888 <__malloc_lock+0x8>)
 8008882:	f000 b811 	b.w	80088a8 <__retarget_lock_acquire_recursive>
 8008886:	bf00      	nop
 8008888:	20004fc8 	.word	0x20004fc8

0800888c <__malloc_unlock>:
 800888c:	4801      	ldr	r0, [pc, #4]	; (8008894 <__malloc_unlock+0x8>)
 800888e:	f000 b80c 	b.w	80088aa <__retarget_lock_release_recursive>
 8008892:	bf00      	nop
 8008894:	20004fc8 	.word	0x20004fc8

08008898 <_malloc_usable_size_r>:
 8008898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800889c:	1f18      	subs	r0, r3, #4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	bfbc      	itt	lt
 80088a2:	580b      	ldrlt	r3, [r1, r0]
 80088a4:	18c0      	addlt	r0, r0, r3
 80088a6:	4770      	bx	lr

080088a8 <__retarget_lock_acquire_recursive>:
 80088a8:	4770      	bx	lr

080088aa <__retarget_lock_release_recursive>:
 80088aa:	4770      	bx	lr

080088ac <_init>:
 80088ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ae:	bf00      	nop
 80088b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b2:	bc08      	pop	{r3}
 80088b4:	469e      	mov	lr, r3
 80088b6:	4770      	bx	lr

080088b8 <_fini>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	bf00      	nop
 80088bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088be:	bc08      	pop	{r3}
 80088c0:	469e      	mov	lr, r3
 80088c2:	4770      	bx	lr
