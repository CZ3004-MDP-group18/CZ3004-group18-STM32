
MDP_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c44  0800cd14  0800cd14  0001cd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d958  0800d958  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d958  0800d958  0001d958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d960  0800d960  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d960  0800d960  0001d960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d964  0800d964  0001d964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00004fb4  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005030  20005030  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002356b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004976  00000000  00000000  00043617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc8  00000000  00000000  00047f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a10  00000000  00000000  00049b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000283a4  00000000  00000000  0004b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e2a1  00000000  00000000  0007390c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f166d  00000000  00000000  00091bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018321a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000082c8  00000000  00000000  00183270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ccfc 	.word	0x0800ccfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800ccfc 	.word	0x0800ccfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f043 0201 	orr.w	r2, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_I2C_IsEnabled>:
  * @rmtoll CR1          PE            LL_I2C_IsEnabled
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabled(I2C_TypeDef *I2Cx)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->CR1, I2C_CR1_PE) == (I2C_CR1_PE));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	bf0c      	ite	eq
 8000f14:	2301      	moveq	r3, #1
 8000f16:	2300      	movne	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_I2C_DisableDMAReq_RX>:
  * @rmtoll CR2          DMAEN         LL_I2C_DisableDMAReq_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableDMAReq_RX(I2C_TypeDef *I2Cx)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_DMAEN);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	605a      	str	r2, [r3, #4]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_I2C_DisableIT_TX>:
  *         CR2          ITBUFEN       LL_I2C_DisableIT_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_TX(I2C_TypeDef *I2Cx)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	605a      	str	r2, [r3, #4]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_I2C_DisableIT_RX>:
  *         CR2          ITBUFEN       LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	605a      	str	r2, [r3, #4]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	2b80      	cmp	r3, #128	; 0x80
 8000f98:	bf0c      	ite	eq
 8000f9a:	2301      	moveq	r3, #1
 8000f9c:	2300      	movne	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	bf0c      	ite	eq
 8000fc0:	2301      	moveq	r3, #1
 8000fc2:	2300      	movne	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe2:	2b40      	cmp	r3, #64	; 0x40
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2301      	moveq	r3, #1
 8000fe8:	2300      	movne	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b01      	cmp	r3, #1
 800100a:	bf0c      	ite	eq
 800100c:	2301      	moveq	r3, #1
 800100e:	2300      	movne	r3, #0
 8001010:	b2db      	uxtb	r3, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b02      	cmp	r3, #2
 8001030:	bf0c      	ite	eq
 8001032:	2301      	moveq	r3, #1
 8001034:	2300      	movne	r3, #0
 8001036:	b2db      	uxtb	r3, r3
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b02      	cmp	r3, #2
 8001056:	bf0c      	ite	eq
 8001058:	2301      	moveq	r3, #1
 800105a:	2300      	movne	r3, #0
 800105c:	b2db      	uxtb	r3, r3
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001078:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001080:	68fb      	ldr	r3, [r7, #12]
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	601a      	str	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	601a      	str	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	b2db      	uxtb	r3, r3
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	611a      	str	r2, [r3, #16]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <I2C_Transmit>:
	I2C->i2c_busy=0;
	I2C->i2c_IsRx=0;
}


void I2C_Transmit(I2C_struct* I2C, uint8_t address, uint8_t* data,uint16_t size){
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	461a      	mov	r2, r3
 8001162:	460b      	mov	r3, r1
 8001164:	72fb      	strb	r3, [r7, #11]
 8001166:	4613      	mov	r3, r2
 8001168:	813b      	strh	r3, [r7, #8]
	if(I2C->i2c_busy==1){
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	791b      	ldrb	r3, [r3, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d07b      	beq.n	800126a <I2C_Transmit+0x114>
		return;
	}
	I2C->i2c_busy=1;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	711a      	strb	r2, [r3, #4]
	I2C->i2c_IsRx=0;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	715a      	strb	r2, [r3, #5]
	LL_I2C_DisableDMAReq_RX(I2C->I2C);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fecf 	bl	8000f26 <LL_I2C_DisableDMAReq_RX>
	LL_I2C_DisableIT_TX(I2C->I2C);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff feda 	bl	8000f46 <LL_I2C_DisableIT_TX>


	if(!LL_I2C_IsEnabled(I2C->I2C)){
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff feb2 	bl	8000f00 <LL_I2C_IsEnabled>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d104      	bne.n	80011ac <I2C_Transmit+0x56>
		LL_I2C_Enable(I2C->I2C);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fe9a 	bl	8000ee0 <LL_I2C_Enable>
	}
	LL_I2C_DisableBitPOS(I2C->I2C);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff9f 	bl	80010f4 <LL_I2C_DisableBitPOS>

	while(LL_I2C_IsActiveFlag_BUSY(I2C->I2C));
 80011b6:	bf00      	nop
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff41 	bl	8001044 <LL_I2C_IsActiveFlag_BUSY>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f7      	bne.n	80011b8 <I2C_Transmit+0x62>

	LL_I2C_GenerateStartCondition(I2C->I2C);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff71 	bl	80010b4 <LL_I2C_GenerateStartCondition>


	while( !LL_I2C_IsActiveFlag_SB(I2C->I2C) );
 80011d2:	bf00      	nop
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff0d 	bl	8000ff8 <LL_I2C_IsActiveFlag_SB>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f7      	beq.n	80011d4 <I2C_Transmit+0x7e>
	LL_I2C_TransmitData8(I2C->I2C,address);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	7afa      	ldrb	r2, [r7, #11]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff9e 	bl	800112e <LL_I2C_TransmitData8>



	while( !LL_I2C_IsActiveFlag_ADDR(I2C->I2C));
 80011f2:	bf00      	nop
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff10 	bl	800101e <LL_I2C_IsActiveFlag_ADDR>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f7      	beq.n	80011f4 <I2C_Transmit+0x9e>
	LL_I2C_ClearFlag_ADDR(I2C->I2C);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff2e 	bl	800106a <LL_I2C_ClearFlag_ADDR>

	for(uint16_t i=0;i<size;i++){
 800120e:	2300      	movs	r3, #0
 8001210:	82fb      	strh	r3, [r7, #22]
 8001212:	e014      	b.n	800123e <I2C_Transmit+0xe8>
		LL_I2C_TransmitData8(I2C->I2C,data[i]);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	8afb      	ldrh	r3, [r7, #22]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff ff84 	bl	800112e <LL_I2C_TransmitData8>
		while(!LL_I2C_IsActiveFlag_TXE(I2C->I2C));
 8001226:	bf00      	nop
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff feaa 	bl	8000f86 <LL_I2C_IsActiveFlag_TXE>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f7      	beq.n	8001228 <I2C_Transmit+0xd2>
	for(uint16_t i=0;i<size;i++){
 8001238:	8afb      	ldrh	r3, [r7, #22]
 800123a:	3301      	adds	r3, #1
 800123c:	82fb      	strh	r3, [r7, #22]
 800123e:	8afa      	ldrh	r2, [r7, #22]
 8001240:	893b      	ldrh	r3, [r7, #8]
 8001242:	429a      	cmp	r2, r3
 8001244:	d3e6      	bcc.n	8001214 <I2C_Transmit+0xbe>
	}
	while(!LL_I2C_IsActiveFlag_BTF(I2C->I2C));
 8001246:	bf00      	nop
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fead 	bl	8000fac <LL_I2C_IsActiveFlag_BTF>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f7      	beq.n	8001248 <I2C_Transmit+0xf2>

	LL_I2C_GenerateStopCondition(I2C->I2C);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff39 	bl	80010d4 <LL_I2C_GenerateStopCondition>
	I2C->i2c_busy=0;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	711a      	strb	r2, [r3, #4]
 8001268:	e000      	b.n	800126c <I2C_Transmit+0x116>
		return;
 800126a:	bf00      	nop


}
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <I2C_Receive>:


void I2C_Receive(I2C_struct* I2C, uint8_t address, uint8_t* outputdata,uint16_t size){
 8001272:	b590      	push	{r4, r7, lr}
 8001274:	b087      	sub	sp, #28
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	461a      	mov	r2, r3
 800127e:	460b      	mov	r3, r1
 8001280:	72fb      	strb	r3, [r7, #11]
 8001282:	4613      	mov	r3, r2
 8001284:	813b      	strh	r3, [r7, #8]
	if(I2C->i2c_busy==1){
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	791b      	ldrb	r3, [r3, #4]
 800128a:	2b01      	cmp	r3, #1
 800128c:	f000 8094 	beq.w	80013b8 <I2C_Receive+0x146>
		return;
	}
	I2C->i2c_busy=1;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2201      	movs	r2, #1
 8001294:	711a      	strb	r2, [r3, #4]
	I2C->i2c_IsRx=1;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2201      	movs	r2, #1
 800129a:	715a      	strb	r2, [r3, #5]

	address |=(0x01);
 800129c:	7afb      	ldrb	r3, [r7, #11]
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	72fb      	strb	r3, [r7, #11]
	LL_I2C_DisableDMAReq_RX(I2C->I2C);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe3c 	bl	8000f26 <LL_I2C_DisableDMAReq_RX>
	LL_I2C_DisableIT_RX(I2C->I2C);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe57 	bl	8000f66 <LL_I2C_DisableIT_RX>

	if(!LL_I2C_IsEnabled(I2C->I2C)){
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe1f 	bl	8000f00 <LL_I2C_IsEnabled>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d104      	bne.n	80012d2 <I2C_Receive+0x60>
		LL_I2C_Enable(I2C->I2C);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe07 	bl	8000ee0 <LL_I2C_Enable>
	}
	LL_I2C_DisableBitPOS(I2C->I2C);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff0c 	bl	80010f4 <LL_I2C_DisableBitPOS>


	while(LL_I2C_IsActiveFlag_BUSY(I2C->I2C));
 80012dc:	bf00      	nop
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff feae 	bl	8001044 <LL_I2C_IsActiveFlag_BUSY>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f7      	bne.n	80012de <I2C_Receive+0x6c>

	if(size==1)
 80012ee:	893b      	ldrh	r3, [r7, #8]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d106      	bne.n	8001302 <I2C_Receive+0x90>
		LL_I2C_AcknowledgeNextData(I2C->I2C,LL_I2C_NACK);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fec7 	bl	800108e <LL_I2C_AcknowledgeNextData>
 8001300:	e006      	b.n	8001310 <I2C_Receive+0x9e>
	else
		LL_I2C_AcknowledgeNextData(I2C->I2C,LL_I2C_ACK);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff febf 	bl	800108e <LL_I2C_AcknowledgeNextData>



	LL_I2C_GenerateStartCondition(I2C->I2C);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fecd 	bl	80010b4 <LL_I2C_GenerateStartCondition>


	while( !LL_I2C_IsActiveFlag_SB(I2C->I2C) );
 800131a:	bf00      	nop
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe69 	bl	8000ff8 <LL_I2C_IsActiveFlag_SB>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f7      	beq.n	800131c <I2C_Receive+0xaa>
	LL_I2C_TransmitData8(I2C->I2C,address);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	7afa      	ldrb	r2, [r7, #11]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fefa 	bl	800112e <LL_I2C_TransmitData8>

	while( !LL_I2C_IsActiveFlag_ADDR(I2C->I2C));
 800133a:	bf00      	nop
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fe6c 	bl	800101e <LL_I2C_IsActiveFlag_ADDR>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f7      	beq.n	800133c <I2C_Receive+0xca>
	LL_I2C_ClearFlag_ADDR(I2C->I2C);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe8a 	bl	800106a <LL_I2C_ClearFlag_ADDR>


	for(uint16_t i=0;i<size;i++){
 8001356:	2300      	movs	r3, #0
 8001358:	82fb      	strh	r3, [r7, #22]
 800135a:	e020      	b.n	800139e <I2C_Receive+0x12c>
		if(i==(size-1))
 800135c:	8afa      	ldrh	r2, [r7, #22]
 800135e:	893b      	ldrh	r3, [r7, #8]
 8001360:	3b01      	subs	r3, #1
 8001362:	429a      	cmp	r2, r3
 8001364:	d105      	bne.n	8001372 <I2C_Receive+0x100>
			LL_I2C_AcknowledgeNextData(I2C->I2C,LL_I2C_NACK);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe8e 	bl	800108e <LL_I2C_AcknowledgeNextData>
		while(!LL_I2C_IsActiveFlag_RXNE(I2C->I2C));
 8001372:	bf00      	nop
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe2a 	bl	8000fd2 <LL_I2C_IsActiveFlag_RXNE>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f7      	beq.n	8001374 <I2C_Receive+0x102>
		outputdata[i]=LL_I2C_ReceiveData8(I2C->I2C);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6819      	ldr	r1, [r3, #0]
 8001388:	8afb      	ldrh	r3, [r7, #22]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	18d4      	adds	r4, r2, r3
 800138e:	4608      	mov	r0, r1
 8001390:	f7ff fec0 	bl	8001114 <LL_I2C_ReceiveData8>
 8001394:	4603      	mov	r3, r0
 8001396:	7023      	strb	r3, [r4, #0]
	for(uint16_t i=0;i<size;i++){
 8001398:	8afb      	ldrh	r3, [r7, #22]
 800139a:	3301      	adds	r3, #1
 800139c:	82fb      	strh	r3, [r7, #22]
 800139e:	8afa      	ldrh	r2, [r7, #22]
 80013a0:	893b      	ldrh	r3, [r7, #8]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d3da      	bcc.n	800135c <I2C_Receive+0xea>
	}

	LL_I2C_GenerateStopCondition(I2C->I2C);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fe92 	bl	80010d4 <LL_I2C_GenerateStopCondition>

	I2C->i2c_busy=0;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	711a      	strb	r2, [r3, #4]
 80013b6:	e000      	b.n	80013ba <I2C_Receive+0x148>
		return;
 80013b8:	bf00      	nop

 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd90      	pop	{r4, r7, pc}

080013c0 <Gyro_Writebyte>:

//========================================================================================= GYRO

static uint8_t BANK=0;

void Gyro_Writebyte(ICM20948 * icm20948,uint8_t register_address,uint8_t data){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
 80013cc:	4613      	mov	r3, r2
 80013ce:	70bb      	strb	r3, [r7, #2]
	uint8_t Trans[2]={register_address, data};
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	733b      	strb	r3, [r7, #12]
 80013d4:	78bb      	ldrb	r3, [r7, #2]
 80013d6:	737b      	strb	r3, [r7, #13]
	I2C_Transmit(&icm20948->i2c,icm20948->gyro_address,Trans,2);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7a19      	ldrb	r1, [r3, #8]
 80013de:	f107 020c 	add.w	r2, r7, #12
 80013e2:	2302      	movs	r3, #2
 80013e4:	f7ff feb7 	bl	8001156 <I2C_Transmit>

}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <Gyro_Readbyte>:
uint8_t Gyro_Readbyte(ICM20948 * icm20948,uint8_t register_address){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[1]={register_address};
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	733b      	strb	r3, [r7, #12]
	uint8_t Receive[1];
	I2C_Transmit(&icm20948->i2c,icm20948->gyro_address,Trans,1);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7a19      	ldrb	r1, [r3, #8]
 8001406:	f107 020c 	add.w	r2, r7, #12
 800140a:	2301      	movs	r3, #1
 800140c:	f7ff fea3 	bl	8001156 <I2C_Transmit>
	I2C_Receive(&icm20948->i2c,icm20948->gyro_address,Receive,1);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7a19      	ldrb	r1, [r3, #8]
 8001416:	f107 0208 	add.w	r2, r7, #8
 800141a:	2301      	movs	r3, #1
 800141c:	f7ff ff29 	bl	8001272 <I2C_Receive>
	return Receive[0];
 8001420:	7a3b      	ldrb	r3, [r7, #8]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <bank_select>:

void bank_select(ICM20948* icm20948,uint8_t bank){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	70fb      	strb	r3, [r7, #3]
	if(BANK!=bank && bank<4){
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <bank_select+0x3c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	429a      	cmp	r2, r3
 8001440:	d00d      	beq.n	800145e <bank_select+0x32>
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d80a      	bhi.n	800145e <bank_select+0x32>
		Gyro_Writebyte(icm20948,REG_BANK_SEL,bank<<4);
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	217f      	movs	r1, #127	; 0x7f
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffb4 	bl	80013c0 <Gyro_Writebyte>
		BANK=bank;
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <bank_select+0x3c>)
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	7013      	strb	r3, [r2, #0]
	}
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000098 	.word	0x20000098

0800146c <ICM_who_am_i>:

uint8_t ICM_who_am_i(ICM20948* icm20948){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if(BANK!=0X00){
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <ICM_who_am_i+0x2c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <ICM_who_am_i+0x18>
		bank_select(icm20948,0x00);
 800147c:	2100      	movs	r1, #0
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffd4 	bl	800142c <bank_select>
	}
	return Gyro_Readbyte(icm20948,WHO_AM_I_ICM20948);
 8001484:	2100      	movs	r1, #0
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffb2 	bl	80013f0 <Gyro_Readbyte>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000098 	.word	0x20000098

0800149c <init_ICM20948>:

void init_ICM20948(ICM20948* icm20948,I2C_TypeDef* I2C){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	icm20948->i2c.I2C=I2C;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	601a      	str	r2, [r3, #0]
	icm20948->gyro_address=ICM20948_ADDRESS<<1;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	22d0      	movs	r2, #208	; 0xd0
 80014b0:	721a      	strb	r2, [r3, #8]
	icm20948->magneto_address=AK09916_ADDRESS<<1;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2218      	movs	r2, #24
 80014b6:	725a      	strb	r2, [r3, #9]
	LL_mDelay(1000);
 80014b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014bc:	f006 fd7c 	bl	8007fb8 <LL_mDelay>
	bank_select(icm20948,0);
 80014c0:	2100      	movs	r1, #0
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffb2 	bl	800142c <bank_select>
	Gyro_Writebyte(icm20948,PWR_MGMT_1,0x80);
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	2106      	movs	r1, #6
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff77 	bl	80013c0 <Gyro_Writebyte>

	LL_mDelay(100);
 80014d2:	2064      	movs	r0, #100	; 0x64
 80014d4:	f006 fd70 	bl	8007fb8 <LL_mDelay>
	Gyro_Writebyte(icm20948,PWR_MGMT_1,0x09);
 80014d8:	2209      	movs	r2, #9
 80014da:	2106      	movs	r1, #6
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff6f 	bl	80013c0 <Gyro_Writebyte>

	bank_select(icm20948,2);
 80014e2:	2102      	movs	r1, #2
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffa1 	bl	800142c <bank_select>
	Gyro_Writebyte(icm20948,GYRO_SMPLRT_DIV,0x01);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2100      	movs	r1, #0
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff66 	bl	80013c0 <Gyro_Writebyte>
	Gyro_Writebyte(icm20948,GYRO_CONFIG_1,0x03);
 80014f4:	2203      	movs	r2, #3
 80014f6:	2101      	movs	r1, #1
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff61 	bl	80013c0 <Gyro_Writebyte>

	Gyro_Writebyte(icm20948,ACCEL_SMPLRT_DIV_2,0x01);
 80014fe:	2201      	movs	r2, #1
 8001500:	2111      	movs	r1, #17
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff5c 	bl	80013c0 <Gyro_Writebyte>
	Gyro_Writebyte(icm20948,ACCEL_CONFIG,0x03);
 8001508:	2203      	movs	r2, #3
 800150a:	2114      	movs	r1, #20
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff57 	bl	80013c0 <Gyro_Writebyte>
	bank_select(icm20948,0);
 8001512:	2100      	movs	r1, #0
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff89 	bl	800142c <bank_select>
	Gyro_Writebyte(icm20948,INT_PIN_CFG,0x02);		//bypass enable
 800151a:	2202      	movs	r2, #2
 800151c:	210f      	movs	r1, #15
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff4e 	bl	80013c0 <Gyro_Writebyte>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <ICM_Readaccgyro>:

void ICM_Readaccgyro(ICM20948* icm20948){
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	int16_t temp[3];
	int16_t tempaccx,tempaccy,tempaccz;
	uint8_t databuf[12];
	uint8_t reg;
	bank_select(icm20948,0);
 8001534:	2100      	movs	r1, #0
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff78 	bl	800142c <bank_select>
	reg=ACCEL_XOUT_H;
 800153c:	232d      	movs	r3, #45	; 0x2d
 800153e:	73fb      	strb	r3, [r7, #15]
	I2C_Transmit(&icm20948->i2c,icm20948->gyro_address,&reg,1);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7a19      	ldrb	r1, [r3, #8]
 8001546:	f107 020f 	add.w	r2, r7, #15
 800154a:	2301      	movs	r3, #1
 800154c:	f7ff fe03 	bl	8001156 <I2C_Transmit>
	I2C_Receive(&icm20948->i2c,icm20948->gyro_address,databuf,12);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7a19      	ldrb	r1, [r3, #8]
 8001556:	f107 0210 	add.w	r2, r7, #16
 800155a:	230c      	movs	r3, #12
 800155c:	f7ff fe89 	bl	8001272 <I2C_Receive>
	tempaccx=(int16_t)(databuf[0]<<8 | databuf[1]);
 8001560:	7c3b      	ldrb	r3, [r7, #16]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	7c7b      	ldrb	r3, [r7, #17]
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	84fb      	strh	r3, [r7, #38]	; 0x26
	tempaccy=(int16_t)(databuf[2]<<8 | databuf[3]);
 800156e:	7cbb      	ldrb	r3, [r7, #18]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	7cfb      	ldrb	r3, [r7, #19]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	84bb      	strh	r3, [r7, #36]	; 0x24
	tempaccz=(int16_t)(databuf[4]<<8 | databuf[5]);
 800157c:	7d3b      	ldrb	r3, [r7, #20]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	7d7b      	ldrb	r3, [r7, #21]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	847b      	strh	r3, [r7, #34]	; 0x22
	temp[0]=(int16_t)(databuf[6]<<8 | databuf[7]);
 800158a:	7dbb      	ldrb	r3, [r7, #22]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	b21b      	sxth	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b21b      	sxth	r3, r3
 8001598:	83bb      	strh	r3, [r7, #28]
	temp[1]=(int16_t)(databuf[8]<<8 | databuf[9]);
 800159a:	7e3b      	ldrb	r3, [r7, #24]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b21a      	sxth	r2, r3
 80015a0:	7e7b      	ldrb	r3, [r7, #25]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	83fb      	strh	r3, [r7, #30]
	temp[2]=(int16_t)(databuf[10]<<8 | databuf[11]);
 80015aa:	7ebb      	ldrb	r3, [r7, #26]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	7efb      	ldrb	r3, [r7, #27]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	843b      	strh	r3, [r7, #32]
	icm20948->getaccx=tempaccx;
 80015ba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	60da      	str	r2, [r3, #12]
	icm20948->getaccy=tempaccy;
 80015c2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	611a      	str	r2, [r3, #16]
	icm20948->getaccz=tempaccz;
 80015ca:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	615a      	str	r2, [r3, #20]
	icm20948->temp[0]=temp[0];
 80015d2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	icm20948->temp[1]=temp[1];
 80015dc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	icm20948->temp[2]=temp[2];
 80015e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	icm20948->f_gyx=((float)(temp[0]-icm20948->gyro_offset[0]))/65.5;
 80015f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015f4:	461a      	mov	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001606:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001664 <ICM_Readaccgyro+0x138>
 800160a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	edc3 7a06 	vstr	s15, [r3, #24]
	icm20948->f_gyy=((float)(temp[1]-icm20948->gyro_offset[1]))/65.5;
 8001614:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001664 <ICM_Readaccgyro+0x138>
 800162e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	edc3 7a07 	vstr	s15, [r3, #28]
	icm20948->f_gyz=((float)(temp[2]-icm20948->gyro_offset[2]))/65.5;
 8001638:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800163c:	461a      	mov	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001664 <ICM_Readaccgyro+0x138>
 8001652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	edc3 7a08 	vstr	s15, [r3, #32]
	/*printf("%d %d %d\r\n",icm20948->getmpuaccx,icm20948->getmpuaccy,icm20948->getmpuaccz);
	printf("%.1f %.1f %.1f\r\n\n\r",icm20948->f_gyx,icm20948->f_gyy,icm20948->f_gyz);*/
}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	42830000 	.word	0x42830000

08001668 <ICM_Gyrocali>:

void ICM_Gyrocali(ICM20948* icm20948){
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	int32_t temp32[3]={0,0,0};
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t temp16[3];
	uint8_t databuf[12];
	uint8_t reg;
	LL_mDelay(100);
 800167c:	2064      	movs	r0, #100	; 0x64
 800167e:	f006 fc9b 	bl	8007fb8 <LL_mDelay>
	bank_select(icm20948,0);
 8001682:	2100      	movs	r1, #0
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fed1 	bl	800142c <bank_select>
	for(uint32_t i=0;i<1000;i++){
 800168a:	2300      	movs	r3, #0
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800168e:	e04a      	b.n	8001726 <ICM_Gyrocali+0xbe>
		if(i%100==0)
 8001690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001692:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <ICM_Gyrocali+0x128>)
 8001694:	fba3 1302 	umull	r1, r3, r3, r2
 8001698:	095b      	lsrs	r3, r3, #5
 800169a:	2164      	movs	r1, #100	; 0x64
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <ICM_Gyrocali+0x46>
			printf("%d\r\n",i);
 80016a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016a8:	483a      	ldr	r0, [pc, #232]	; (8001794 <ICM_Gyrocali+0x12c>)
 80016aa:	f009 fd19 	bl	800b0e0 <iprintf>
		reg=ACCEL_XOUT_H;
 80016ae:	232d      	movs	r3, #45	; 0x2d
 80016b0:	72fb      	strb	r3, [r7, #11]
		I2C_Transmit(&icm20948->i2c,icm20948->gyro_address,&reg,1);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7a19      	ldrb	r1, [r3, #8]
 80016b8:	f107 020b 	add.w	r2, r7, #11
 80016bc:	2301      	movs	r3, #1
 80016be:	f7ff fd4a 	bl	8001156 <I2C_Transmit>
		I2C_Receive(&icm20948->i2c,icm20948->gyro_address,databuf,12);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7a19      	ldrb	r1, [r3, #8]
 80016c8:	f107 020c 	add.w	r2, r7, #12
 80016cc:	230c      	movs	r3, #12
 80016ce:	f7ff fdd0 	bl	8001272 <I2C_Receive>
		temp16[0]=(int16_t)(databuf[6]<<8 | databuf[7]);
 80016d2:	7cbb      	ldrb	r3, [r7, #18]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	7cfb      	ldrb	r3, [r7, #19]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b21b      	sxth	r3, r3
 80016e0:	833b      	strh	r3, [r7, #24]
		temp16[1]=(int16_t)(databuf[8]<<8 | databuf[9]);
 80016e2:	7d3b      	ldrb	r3, [r7, #20]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	7d7b      	ldrb	r3, [r7, #21]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	837b      	strh	r3, [r7, #26]
		temp16[2]=(int16_t)(databuf[10]<<8 | databuf[11]);
 80016f2:	7dbb      	ldrb	r3, [r7, #22]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b21b      	sxth	r3, r3
 8001700:	83bb      	strh	r3, [r7, #28]
		temp32[0]+=temp16[0];
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001708:	4413      	add	r3, r2
 800170a:	623b      	str	r3, [r7, #32]
		temp32[1]+=temp16[1];
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001712:	4413      	add	r3, r2
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
		temp32[2]+=temp16[2];
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001718:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(uint32_t i=0;i<1000;i++){
 8001720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001722:	3301      	adds	r3, #1
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800172c:	d3b0      	bcc.n	8001690 <ICM_Gyrocali+0x28>

	}
	icm20948->gyro_offset[0]=temp32[0]/1000;
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <ICM_Gyrocali+0x130>)
 8001732:	fb82 1203 	smull	r1, r2, r2, r3
 8001736:	1192      	asrs	r2, r2, #6
 8001738:	17db      	asrs	r3, r3, #31
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	b21a      	sxth	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	861a      	strh	r2, [r3, #48]	; 0x30
	icm20948->gyro_offset[1]=temp32[1]/1000;
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <ICM_Gyrocali+0x130>)
 8001746:	fb82 1203 	smull	r1, r2, r2, r3
 800174a:	1192      	asrs	r2, r2, #6
 800174c:	17db      	asrs	r3, r3, #31
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b21a      	sxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	865a      	strh	r2, [r3, #50]	; 0x32
	icm20948->gyro_offset[2]=temp32[2]/1000;
 8001756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <ICM_Gyrocali+0x130>)
 800175a:	fb82 1203 	smull	r1, r2, r2, r3
 800175e:	1192      	asrs	r2, r2, #6
 8001760:	17db      	asrs	r3, r3, #31
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b21a      	sxth	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	869a      	strh	r2, [r3, #52]	; 0x34
	printf("gy %d %d %d\r\n",icm20948->gyro_offset[0],icm20948->gyro_offset[1],icm20948->gyro_offset[2]);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001770:	4619      	mov	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <ICM_Gyrocali+0x134>)
 8001782:	f009 fcad 	bl	800b0e0 <iprintf>
}
 8001786:	bf00      	nop
 8001788:	3730      	adds	r7, #48	; 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	51eb851f 	.word	0x51eb851f
 8001794:	0800cd14 	.word	0x0800cd14
 8001798:	10624dd3 	.word	0x10624dd3
 800179c:	0800cd1c 	.word	0x0800cd1c

080017a0 <ICM_Angcali>:

void ICM_Angcali(ICM20948* icm20948){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b098      	sub	sp, #96	; 0x60
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	int16_t temp[6];
	int32_t gettemp[6];
	uint8_t reg;
	float temp_offset[3];
	float acctotvec,accdegx,accdegy,accdegz;
	bank_select(icm20948,0);
 80017a8:	2100      	movs	r1, #0
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fe3e 	bl	800142c <bank_select>
	for(uint32_t i=0;i<1000;i++){
 80017b0:	2300      	movs	r3, #0
 80017b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017b4:	e14d      	b.n	8001a52 <ICM_Angcali+0x2b2>
		if(i%100==0)
 80017b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80017b8:	4bc1      	ldr	r3, [pc, #772]	; (8001ac0 <ICM_Angcali+0x320>)
 80017ba:	fba3 1302 	umull	r1, r3, r3, r2
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2164      	movs	r1, #100	; 0x64
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <ICM_Angcali+0x34>
			printf("%d\r\n",i);
 80017cc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80017ce:	48bd      	ldr	r0, [pc, #756]	; (8001ac4 <ICM_Angcali+0x324>)
 80017d0:	f009 fc86 	bl	800b0e0 <iprintf>
		reg=ACCEL_XOUT_H;
 80017d4:	232d      	movs	r3, #45	; 0x2d
 80017d6:	76fb      	strb	r3, [r7, #27]
		I2C_Transmit(&icm20948->i2c,icm20948->gyro_address,&reg,1);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7a19      	ldrb	r1, [r3, #8]
 80017de:	f107 021b 	add.w	r2, r7, #27
 80017e2:	2301      	movs	r3, #1
 80017e4:	f7ff fcb7 	bl	8001156 <I2C_Transmit>
		I2C_Receive(&icm20948->i2c,icm20948->gyro_address,databuf,12);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7a19      	ldrb	r1, [r3, #8]
 80017ee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80017f2:	230c      	movs	r3, #12
 80017f4:	f7ff fd3d 	bl	8001272 <I2C_Receive>
		temp[0]=((databuf[0]<<8)|databuf[1]);
 80017f8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	b21a      	sxth	r2, r3
 8001800:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001804:	b21b      	sxth	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	b21b      	sxth	r3, r3
 800180a:	86bb      	strh	r3, [r7, #52]	; 0x34
		temp[1]=((databuf[2]<<8)|databuf[3]);
 800180c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21a      	sxth	r2, r3
 8001814:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001818:	b21b      	sxth	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b21b      	sxth	r3, r3
 800181e:	86fb      	strh	r3, [r7, #54]	; 0x36
		temp[2]=((databuf[4]<<8)|databuf[5]);
 8001820:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	b21a      	sxth	r2, r3
 8001828:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800182c:	b21b      	sxth	r3, r3
 800182e:	4313      	orrs	r3, r2
 8001830:	b21b      	sxth	r3, r3
 8001832:	873b      	strh	r3, [r7, #56]	; 0x38
		temp[3]=((databuf[6]<<8)|databuf[7]);
 8001834:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	b21a      	sxth	r2, r3
 800183c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001840:	b21b      	sxth	r3, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	b21b      	sxth	r3, r3
 8001846:	877b      	strh	r3, [r7, #58]	; 0x3a
		temp[4]=((databuf[8]<<8)|databuf[9]);
 8001848:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b21a      	sxth	r2, r3
 8001850:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001854:	b21b      	sxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b21b      	sxth	r3, r3
 800185a:	87bb      	strh	r3, [r7, #60]	; 0x3c
		temp[5]=((databuf[10]<<8)|databuf[11]);
 800185c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b21a      	sxth	r2, r3
 8001864:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001868:	b21b      	sxth	r3, r3
 800186a:	4313      	orrs	r3, r2
 800186c:	b21b      	sxth	r3, r3
 800186e:	87fb      	strh	r3, [r7, #62]	; 0x3e
		gettemp[0]=temp[0];
 8001870:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001874:	61fb      	str	r3, [r7, #28]
		gettemp[1]=temp[1];
 8001876:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800187a:	623b      	str	r3, [r7, #32]
		gettemp[2]=temp[2];
 800187c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
		gettemp[3]=(temp[3]-icm20948->gyro_offset[0])/65;
 8001882:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001886:	461a      	mov	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4a8d      	ldr	r2, [pc, #564]	; (8001ac8 <ICM_Angcali+0x328>)
 8001892:	fb82 1203 	smull	r1, r2, r2, r3
 8001896:	1152      	asrs	r2, r2, #5
 8001898:	17db      	asrs	r3, r3, #31
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
		gettemp[4]=(temp[4]-icm20948->gyro_offset[0])/65;
 800189e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80018a2:	461a      	mov	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	4a86      	ldr	r2, [pc, #536]	; (8001ac8 <ICM_Angcali+0x328>)
 80018ae:	fb82 1203 	smull	r1, r2, r2, r3
 80018b2:	1152      	asrs	r2, r2, #5
 80018b4:	17db      	asrs	r3, r3, #31
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		gettemp[5]=(temp[5]-icm20948->gyro_offset[0])/65;
 80018ba:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4a7f      	ldr	r2, [pc, #508]	; (8001ac8 <ICM_Angcali+0x328>)
 80018ca:	fb82 1203 	smull	r1, r2, r2, r3
 80018ce:	1152      	asrs	r2, r2, #5
 80018d0:	17db      	asrs	r3, r3, #31
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30

		acctotvec=sqrt((float)(gettemp[0]*gettemp[0]/100+gettemp[1]*gettemp[1]/100+gettemp[2]*gettemp[2]/100))*10;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	4a78      	ldr	r2, [pc, #480]	; (8001ac0 <ICM_Angcali+0x320>)
 80018e0:	fb82 1203 	smull	r1, r2, r2, r3
 80018e4:	1152      	asrs	r2, r2, #5
 80018e6:	17db      	asrs	r3, r3, #31
 80018e8:	1ad2      	subs	r2, r2, r3
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	6a39      	ldr	r1, [r7, #32]
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4973      	ldr	r1, [pc, #460]	; (8001ac0 <ICM_Angcali+0x320>)
 80018f4:	fb81 0103 	smull	r0, r1, r1, r3
 80018f8:	1149      	asrs	r1, r1, #5
 80018fa:	17db      	asrs	r3, r3, #31
 80018fc:	1acb      	subs	r3, r1, r3
 80018fe:	441a      	add	r2, r3
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	496d      	ldr	r1, [pc, #436]	; (8001ac0 <ICM_Angcali+0x320>)
 800190a:	fb81 0103 	smull	r0, r1, r1, r3
 800190e:	1149      	asrs	r1, r1, #5
 8001910:	17db      	asrs	r3, r3, #31
 8001912:	1acb      	subs	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191e:	ee17 0a90 	vmov	r0, s15
 8001922:	f7fe fe09 	bl	8000538 <__aeabi_f2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	ec43 2b10 	vmov	d0, r2, r3
 800192e:	f00a fd87 	bl	800c440 <sqrt>
 8001932:	ec51 0b10 	vmov	r0, r1, d0
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4b64      	ldr	r3, [pc, #400]	; (8001acc <ICM_Angcali+0x32c>)
 800193c:	f7fe fe54 	bl	80005e8 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff f8fe 	bl	8000b48 <__aeabi_d2f>
 800194c:	4603      	mov	r3, r0
 800194e:	65bb      	str	r3, [r7, #88]	; 0x58
		accdegx=asin((float)gettemp[0]/acctotvec)*(57.29577951);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800195e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001962:	ee16 0a90 	vmov	r0, s13
 8001966:	f7fe fde7 	bl	8000538 <__aeabi_f2d>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	ec43 2b10 	vmov	d0, r2, r3
 8001972:	f00a fd2b 	bl	800c3cc <asin>
 8001976:	ec51 0b10 	vmov	r0, r1, d0
 800197a:	a34f      	add	r3, pc, #316	; (adr r3, 8001ab8 <ICM_Angcali+0x318>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe32 	bl	80005e8 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f8dc 	bl	8000b48 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	657b      	str	r3, [r7, #84]	; 0x54
		accdegy=asin((float)gettemp[1]/acctotvec)*(57.29577951);
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019a6:	ee16 0a90 	vmov	r0, s13
 80019aa:	f7fe fdc5 	bl	8000538 <__aeabi_f2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	ec43 2b10 	vmov	d0, r2, r3
 80019b6:	f00a fd09 	bl	800c3cc <asin>
 80019ba:	ec51 0b10 	vmov	r0, r1, d0
 80019be:	a33e      	add	r3, pc, #248	; (adr r3, 8001ab8 <ICM_Angcali+0x318>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe fe10 	bl	80005e8 <__aeabi_dmul>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f8ba 	bl	8000b48 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	653b      	str	r3, [r7, #80]	; 0x50
		accdegz=asin((float)gettemp[2]/acctotvec)*(57.29577951);
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019ea:	ee16 0a90 	vmov	r0, s13
 80019ee:	f7fe fda3 	bl	8000538 <__aeabi_f2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	ec43 2b10 	vmov	d0, r2, r3
 80019fa:	f00a fce7 	bl	800c3cc <asin>
 80019fe:	ec51 0b10 	vmov	r0, r1, d0
 8001a02:	a32d      	add	r3, pc, #180	; (adr r3, 8001ab8 <ICM_Angcali+0x318>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdee 	bl	80005e8 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7ff f898 	bl	8000b48 <__aeabi_d2f>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
		temp_offset[0]+=accdegx;
 8001a1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a20:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a28:	edc7 7a03 	vstr	s15, [r7, #12]
		temp_offset[1]+=accdegy;
 8001a2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a30:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a38:	edc7 7a04 	vstr	s15, [r7, #16]
		temp_offset[2]+=accdegz;
 8001a3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a40:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	edc7 7a05 	vstr	s15, [r7, #20]
	for(uint32_t i=0;i<1000;i++){
 8001a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a4e:	3301      	adds	r3, #1
 8001a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a58:	f4ff aead 	bcc.w	80017b6 <ICM_Angcali+0x16>
	}
	icm20948->pitch_offset=temp_offset[0]/1000;
 8001a5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a60:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001ad0 <ICM_Angcali+0x330>
 8001a64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	icm20948->roll_offset=temp_offset[1]/1000;
 8001a6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a72:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001ad0 <ICM_Angcali+0x330>
 8001a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	icm20948->yaw_offset=temp_offset[2]/1000;
 8001a80:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a84:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001ad0 <ICM_Angcali+0x330>
 8001a88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	icm20948->pitch=icm20948->pitch_offset;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	639a      	str	r2, [r3, #56]	; 0x38
	icm20948->roll=icm20948->roll_offset;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	63da      	str	r2, [r3, #60]	; 0x3c
	icm20948->yaw=icm20948->yaw_offset;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
//	printf("p:%.1f r:%.1f\r\n",icm20948->pitch_offset,icm20948->roll_offset);
}
 8001aaa:	bf00      	nop
 8001aac:	3760      	adds	r7, #96	; 0x60
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	1a5d2372 	.word	0x1a5d2372
 8001abc:	404ca5dc 	.word	0x404ca5dc
 8001ac0:	51eb851f 	.word	0x51eb851f
 8001ac4:	0800cd14 	.word	0x0800cd14
 8001ac8:	7e07e07f 	.word	0x7e07e07f
 8001acc:	40240000 	.word	0x40240000
 8001ad0:	447a0000 	.word	0x447a0000
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <ICM_ComplementaryFilter>:

void ICM_ComplementaryFilter(ICM20948* icm20948){
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	float accdegx,accdegy,accdegz,acctotvec;
	ICM_Readaccgyro(icm20948);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fd23 	bl	800152c <ICM_Readaccgyro>

	acctotvec=sqrtf((float)(icm20948->getaccx*icm20948->getaccx/100
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68d2      	ldr	r2, [r2, #12]
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	4aa7      	ldr	r2, [pc, #668]	; (8001d90 <ICM_ComplementaryFilter+0x2b8>)
 8001af4:	fb82 1203 	smull	r1, r2, r2, r3
 8001af8:	1152      	asrs	r2, r2, #5
 8001afa:	17db      	asrs	r3, r3, #31
 8001afc:	1ad2      	subs	r2, r2, r3
			+icm20948->getaccy*icm20948->getaccy/100
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	6909      	ldr	r1, [r1, #16]
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	49a1      	ldr	r1, [pc, #644]	; (8001d90 <ICM_ComplementaryFilter+0x2b8>)
 8001b0c:	fb81 0103 	smull	r0, r1, r1, r3
 8001b10:	1149      	asrs	r1, r1, #5
 8001b12:	17db      	asrs	r3, r3, #31
 8001b14:	1acb      	subs	r3, r1, r3
 8001b16:	441a      	add	r2, r3
			+icm20948->getaccz*icm20948->getaccz/100))*10;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	6949      	ldr	r1, [r1, #20]
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	499a      	ldr	r1, [pc, #616]	; (8001d90 <ICM_ComplementaryFilter+0x2b8>)
 8001b26:	fb81 0103 	smull	r0, r1, r1, r3
 8001b2a:	1149      	asrs	r1, r1, #5
 8001b2c:	17db      	asrs	r3, r3, #31
 8001b2e:	1acb      	subs	r3, r1, r3
 8001b30:	4413      	add	r3, r2
	acctotvec=sqrtf((float)(icm20948->getaccx*icm20948->getaccx/100
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3e:	f00a fce5 	bl	800c50c <sqrtf>
 8001b42:	eef0 7a40 	vmov.f32	s15, s0
 8001b46:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4e:	edc7 7a05 	vstr	s15, [r7, #20]
	accdegx=asinf((float)icm20948->getaccx/acctotvec)*(57.29577951);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b66:	eeb0 0a66 	vmov.f32	s0, s13
 8001b6a:	f00a fc9d 	bl	800c4a8 <asinf>
 8001b6e:	ee10 3a10 	vmov	r3, s0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fce0 	bl	8000538 <__aeabi_f2d>
 8001b78:	a37d      	add	r3, pc, #500	; (adr r3, 8001d70 <ICM_ComplementaryFilter+0x298>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fd33 	bl	80005e8 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7fe ffdd 	bl	8000b48 <__aeabi_d2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	613b      	str	r3, [r7, #16]
	accdegy=asinf((float)icm20948->getaccy/acctotvec)*(57.29577951);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ba6:	eeb0 0a66 	vmov.f32	s0, s13
 8001baa:	f00a fc7d 	bl	800c4a8 <asinf>
 8001bae:	ee10 3a10 	vmov	r3, s0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fcc0 	bl	8000538 <__aeabi_f2d>
 8001bb8:	a36d      	add	r3, pc, #436	; (adr r3, 8001d70 <ICM_ComplementaryFilter+0x298>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe fd13 	bl	80005e8 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe ffbd 	bl	8000b48 <__aeabi_d2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	60fb      	str	r3, [r7, #12]
	accdegz=asinf((float)icm20948->getaccz/acctotvec)*(57.29577951);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bde:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001be6:	eeb0 0a66 	vmov.f32	s0, s13
 8001bea:	f00a fc5d 	bl	800c4a8 <asinf>
 8001bee:	ee10 3a10 	vmov	r3, s0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fca0 	bl	8000538 <__aeabi_f2d>
 8001bf8:	a35d      	add	r3, pc, #372	; (adr r3, 8001d70 <ICM_ComplementaryFilter+0x298>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fcf3 	bl	80005e8 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe ff9d 	bl	8000b48 <__aeabi_d2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	60bb      	str	r3, [r7, #8]

	icm20948->pitch=(alpha)*(icm20948->pitch-(icm20948->f_gyy)*dt)+(1-alpha)*(accdegx);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc8e 	bl	8000538 <__aeabi_f2d>
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	460d      	mov	r5, r1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc87 	bl	8000538 <__aeabi_f2d>
 8001c2a:	a353      	add	r3, pc, #332	; (adr r3, 8001d78 <ICM_ComplementaryFilter+0x2a0>)
 8001c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c30:	f7fe fcda 	bl	80005e8 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	f7fe fb1c 	bl	8000278 <__aeabi_dsub>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	a34d      	add	r3, pc, #308	; (adr r3, 8001d80 <ICM_ComplementaryFilter+0x2a8>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fccb 	bl	80005e8 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	6938      	ldr	r0, [r7, #16]
 8001c5c:	f7fe fc6c 	bl	8000538 <__aeabi_f2d>
 8001c60:	a349      	add	r3, pc, #292	; (adr r3, 8001d88 <ICM_ComplementaryFilter+0x2b0>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	f7fe fcbf 	bl	80005e8 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4620      	mov	r0, r4
 8001c70:	4629      	mov	r1, r5
 8001c72:	f7fe fb03 	bl	800027c <__adddf3>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ff63 	bl	8000b48 <__aeabi_d2f>
 8001c82:	4602      	mov	r2, r0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
	icm20948->roll=(alpha)*(icm20948->roll-(icm20948->f_gyx)*dt)-(1-alpha)*(accdegy);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc53 	bl	8000538 <__aeabi_f2d>
 8001c92:	4604      	mov	r4, r0
 8001c94:	460d      	mov	r5, r1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc4c 	bl	8000538 <__aeabi_f2d>
 8001ca0:	a335      	add	r3, pc, #212	; (adr r3, 8001d78 <ICM_ComplementaryFilter+0x2a0>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fc9f 	bl	80005e8 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4620      	mov	r0, r4
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	f7fe fae1 	bl	8000278 <__aeabi_dsub>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	a330      	add	r3, pc, #192	; (adr r3, 8001d80 <ICM_ComplementaryFilter+0x2a8>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fc90 	bl	80005e8 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4614      	mov	r4, r2
 8001cce:	461d      	mov	r5, r3
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7fe fc31 	bl	8000538 <__aeabi_f2d>
 8001cd6:	a32c      	add	r3, pc, #176	; (adr r3, 8001d88 <ICM_ComplementaryFilter+0x2b0>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fc84 	bl	80005e8 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	f7fe fac6 	bl	8000278 <__aeabi_dsub>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe ff28 	bl	8000b48 <__aeabi_d2f>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	63da      	str	r2, [r3, #60]	; 0x3c
	icm20948->yaw=(alpha2)*(icm20948->yaw-(icm20948->f_gyz)*dt)-(1-alpha2)*(accdegz);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc18 	bl	8000538 <__aeabi_f2d>
 8001d08:	4604      	mov	r4, r0
 8001d0a:	460d      	mov	r5, r1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc11 	bl	8000538 <__aeabi_f2d>
 8001d16:	a318      	add	r3, pc, #96	; (adr r3, 8001d78 <ICM_ComplementaryFilter+0x2a0>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	f7fe fc64 	bl	80005e8 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4620      	mov	r0, r4
 8001d26:	4629      	mov	r1, r5
 8001d28:	f7fe faa6 	bl	8000278 <__aeabi_dsub>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4614      	mov	r4, r2
 8001d32:	461d      	mov	r5, r3
 8001d34:	68b8      	ldr	r0, [r7, #8]
 8001d36:	f7fe fbff 	bl	8000538 <__aeabi_f2d>
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	f7fe fc51 	bl	80005e8 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f7fe fa93 	bl	8000278 <__aeabi_dsub>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe fef5 	bl	8000b48 <__aeabi_d2f>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40
	/*printf("%d %d %d\r\n",icm20948->getmpuaccx,icm20948->getmpuaccy,icm20948->getmpuaccz);
	printf("%.1f %.1f %.1f\r\n",icm20948->f_gyx,icm20948->f_gyy,icm20948->f_gyz);
	printf("%.1f %.1f\n\n\r",icm20948->pitch,icm20948->roll);
*/
}
 8001d64:	bf00      	nop
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6c:	f3af 8000 	nop.w
 8001d70:	1a5d2372 	.word	0x1a5d2372
 8001d74:	404ca5dc 	.word	0x404ca5dc
 8001d78:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d7c:	3f60624d 	.word	0x3f60624d
 8001d80:	91d14e3c 	.word	0x91d14e3c
 8001d84:	3feffe5c 	.word	0x3feffe5c
 8001d88:	eb1c4000 	.word	0xeb1c4000
 8001d8c:	3f2a36e2 	.word	0x3f2a36e2
 8001d90:	51eb851f 	.word	0x51eb851f

08001d94 <Mag_Writebyte>:


//========================================================================================= MAG

void Mag_Writebyte(ICM20948 * icm20948,uint8_t register_address,uint8_t data){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
 8001da0:	4613      	mov	r3, r2
 8001da2:	70bb      	strb	r3, [r7, #2]
	uint8_t Trans[2]={register_address, data};
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	733b      	strb	r3, [r7, #12]
 8001da8:	78bb      	ldrb	r3, [r7, #2]
 8001daa:	737b      	strb	r3, [r7, #13]
	I2C_Transmit(&icm20948->i2c,icm20948->magneto_address,Trans,2);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7a59      	ldrb	r1, [r3, #9]
 8001db2:	f107 020c 	add.w	r2, r7, #12
 8001db6:	2302      	movs	r3, #2
 8001db8:	f7ff f9cd 	bl	8001156 <I2C_Transmit>
}
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <Mag_Readbyte>:
uint8_t Mag_Readbyte(ICM20948 * icm20948,uint8_t register_address){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[1]={register_address};
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	733b      	strb	r3, [r7, #12]
	uint8_t Receive[1];
	I2C_Transmit(&icm20948->i2c,icm20948->magneto_address,Trans,1);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7a59      	ldrb	r1, [r3, #9]
 8001dda:	f107 020c 	add.w	r2, r7, #12
 8001dde:	2301      	movs	r3, #1
 8001de0:	f7ff f9b9 	bl	8001156 <I2C_Transmit>
	I2C_Receive(&icm20948->i2c,icm20948->magneto_address,Receive,1);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7a59      	ldrb	r1, [r3, #9]
 8001dea:	f107 0208 	add.w	r2, r7, #8
 8001dee:	2301      	movs	r3, #1
 8001df0:	f7ff fa3f 	bl	8001272 <I2C_Receive>
	return Receive[0];
 8001df4:	7a3b      	ldrb	r3, [r7, #8]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <AK_Company_ID>:



uint8_t AK_Company_ID(ICM20948* icm20948){
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
	return Mag_Readbyte(icm20948,0x00);
 8001e06:	2100      	movs	r1, #0
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ffdb 	bl	8001dc4 <Mag_Readbyte>
 8001e0e:	4603      	mov	r3, r0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <AK_Device_ID>:

uint8_t AK_Device_ID(ICM20948* icm20948){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	return Mag_Readbyte(icm20948,0x01);
 8001e20:	2101      	movs	r1, #1
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffce 	bl	8001dc4 <Mag_Readbyte>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <init_AK09916>:

void init_AK09916(ICM20948* icm20948){
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
	LL_mDelay(300);
 8001e3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e3e:	f006 f8bb 	bl	8007fb8 <LL_mDelay>
	Mag_Writebyte(icm20948,AK09916_CNTL2,0x08);	//mode4
 8001e42:	2208      	movs	r2, #8
 8001e44:	2131      	movs	r1, #49	; 0x31
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa4 	bl	8001d94 <Mag_Writebyte>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <AK_ReadData>:

void AK_ReadData(ICM20948* icm20948,float* data,int16_t* data_int){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	uint8_t receive[6];
	int16_t temp[3];
	uint8_t reg;
	if(!(Mag_Readbyte(icm20948,AK09916_ST1) & 0x01)){
 8001e60:	2110      	movs	r1, #16
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f7ff ffae 	bl	8001dc4 <Mag_Readbyte>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d042      	beq.n	8001ef8 <AK_ReadData+0xa4>
		return;
	}

	reg=AK09916_XOUT_L;
 8001e72:	2311      	movs	r3, #17
 8001e74:	75fb      	strb	r3, [r7, #23]
	I2C_Transmit(&icm20948->i2c,icm20948->gyro_address,&reg,1);
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	7a19      	ldrb	r1, [r3, #8]
 8001e7c:	f107 0217 	add.w	r2, r7, #23
 8001e80:	2301      	movs	r3, #1
 8001e82:	f7ff f968 	bl	8001156 <I2C_Transmit>
	I2C_Receive(&icm20948->i2c,icm20948->magneto_address,receive,6);
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	7a59      	ldrb	r1, [r3, #9]
 8001e8c:	f107 0220 	add.w	r2, r7, #32
 8001e90:	2306      	movs	r3, #6
 8001e92:	f7ff f9ee 	bl	8001272 <I2C_Receive>

	temp[0]=(int16_t)(receive[1]<<8 | receive[0]);
 8001e96:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	b21b      	sxth	r3, r3
 8001ea8:	833b      	strh	r3, [r7, #24]
	temp[1]=(int16_t)(receive[3]<<8 | receive[2]);
 8001eaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	b21a      	sxth	r2, r3
 8001eb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	837b      	strh	r3, [r7, #26]
	temp[2]=(int16_t)(receive[5]<<8 | receive[4]);
 8001ebe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	b21a      	sxth	r2, r3
 8001ec6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	83bb      	strh	r3, [r7, #28]
	//data[0]=((float)temp[0])/6.66;
	//data[1]=((float)temp[1])/6.66;
	//data[2]=((float)temp[2])/6.66;
	data_int[0]=temp[0];
 8001ed2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	801a      	strh	r2, [r3, #0]
	data_int[1]=temp[1];
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3302      	adds	r3, #2
 8001ede:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001ee2:	801a      	strh	r2, [r3, #0]
	data_int[2]=temp[2];
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001eec:	801a      	strh	r2, [r3, #0]
	Mag_Readbyte(icm20948,AK09916_ST2);
 8001eee:	2118      	movs	r1, #24
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff ff67 	bl	8001dc4 <Mag_Readbyte>
 8001ef6:	e000      	b.n	8001efa <AK_ReadData+0xa6>
		return;
 8001ef8:	bf00      	nop
}
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <LL_I2C_EnableClockStretching>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	601a      	str	r2, [r3, #0]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_I2C_DisableGeneralCall>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	601a      	str	r2, [r3, #0]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_I2C_SetOwnAddress2>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60da      	str	r2, [r3, #12]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_I2C_DisableOwnAddress2>:
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f023 0201 	bic.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60da      	str	r2, [r3, #12]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f94:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc4:	4907      	ldr	r1, [pc, #28]	; (8001fe4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fec:	f002 f80a 	bl	8004004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff0:	f000 f860 	bl	80020b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff4:	f000 fb80 	bl	80026f8 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001ff8:	f000 faaa 	bl	8002550 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001ffc:	f000 fa00 	bl	8002400 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002000:	f000 f960 	bl	80022c4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8002004:	f000 fb4e 	bl	80026a4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002008:	f000 f904 	bl	8002214 <MX_I2C1_Init>
  MX_ADC1_Init();
 800200c:	f000 f8b0 	bl	8002170 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002010:	f000 fa4a 	bl	80024a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	OLED_Init();
 8002014:	f001 fc6a 	bl	80038ec <OLED_Init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 10);
 8002018:	220a      	movs	r2, #10
 800201a:	4917      	ldr	r1, [pc, #92]	; (8002078 <main+0x90>)
 800201c:	4817      	ldr	r0, [pc, #92]	; (800207c <main+0x94>)
 800201e:	f004 fd08 	bl	8006a32 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002022:	f006 f823 	bl	800806c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add Mutexes, ... */
	Mutex = xSemaphoreCreateMutex();
 8002026:	2001      	movs	r0, #1
 8002028:	f006 fb57 	bl	80086da <xQueueCreateMutex>
 800202c:	4603      	mov	r3, r0
 800202e:	4a14      	ldr	r2, [pc, #80]	; (8002080 <main+0x98>)
 8002030:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002032:	4a14      	ldr	r2, [pc, #80]	; (8002084 <main+0x9c>)
 8002034:	2100      	movs	r1, #0
 8002036:	4814      	ldr	r0, [pc, #80]	; (8002088 <main+0xa0>)
 8002038:	f006 f862 	bl	8008100 <osThreadNew>
 800203c:	4603      	mov	r3, r0
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <main+0xa4>)
 8002040:	6013      	str	r3, [r2, #0]

  /* creation of encoder */
  encoderHandle = osThreadNew(Encoder, NULL, &encoder_attributes);
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <main+0xa8>)
 8002044:	2100      	movs	r1, #0
 8002046:	4813      	ldr	r0, [pc, #76]	; (8002094 <main+0xac>)
 8002048:	f006 f85a 	bl	8008100 <osThreadNew>
 800204c:	4603      	mov	r3, r0
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <main+0xb0>)
 8002050:	6013      	str	r3, [r2, #0]

  /* creation of display */
  displayHandle = osThreadNew(Display, NULL, &display_attributes);
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <main+0xb4>)
 8002054:	2100      	movs	r1, #0
 8002056:	4812      	ldr	r0, [pc, #72]	; (80020a0 <main+0xb8>)
 8002058:	f006 f852 	bl	8008100 <osThreadNew>
 800205c:	4603      	mov	r3, r0
 800205e:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <main+0xbc>)
 8002060:	6013      	str	r3, [r2, #0]

  /* creation of gyroscope */
  gyroscopeHandle = osThreadNew(Gyroscope, NULL, &gyroscope_attributes);
 8002062:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <main+0xc0>)
 8002064:	2100      	movs	r1, #0
 8002066:	4811      	ldr	r0, [pc, #68]	; (80020ac <main+0xc4>)
 8002068:	f006 f84a 	bl	8008100 <osThreadNew>
 800206c:	4603      	mov	r3, r0
 800206e:	4a10      	ldr	r2, [pc, #64]	; (80020b0 <main+0xc8>)
 8002070:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002072:	f006 f81f 	bl	80080b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002076:	e7fe      	b.n	8002076 <main+0x8e>
 8002078:	20004b7c 	.word	0x20004b7c
 800207c:	20004a58 	.word	0x20004a58
 8002080:	2000009c 	.word	0x2000009c
 8002084:	0800cdb4 	.word	0x0800cdb4
 8002088:	08002955 	.word	0x08002955
 800208c:	20004a0c 	.word	0x20004a0c
 8002090:	0800cdd8 	.word	0x0800cdd8
 8002094:	08002cd5 	.word	0x08002cd5
 8002098:	20004b78 	.word	0x20004b78
 800209c:	0800cdfc 	.word	0x0800cdfc
 80020a0:	08002dcd 	.word	0x08002dcd
 80020a4:	20004bd8 	.word	0x20004bd8
 80020a8:	0800ce20 	.word	0x0800ce20
 80020ac:	08002e49 	.word	0x08002e49
 80020b0:	20004b2c 	.word	0x20004b2c

080020b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b094      	sub	sp, #80	; 0x50
 80020b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ba:	f107 0320 	add.w	r3, r7, #32
 80020be:	2230      	movs	r2, #48	; 0x30
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f009 f804 	bl	800b0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <SystemClock_Config+0xb4>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	4a21      	ldr	r2, [pc, #132]	; (8002168 <SystemClock_Config+0xb4>)
 80020e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e6:	6413      	str	r3, [r2, #64]	; 0x40
 80020e8:	4b1f      	ldr	r3, [pc, #124]	; (8002168 <SystemClock_Config+0xb4>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f4:	2300      	movs	r3, #0
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	4b1c      	ldr	r3, [pc, #112]	; (800216c <SystemClock_Config+0xb8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1b      	ldr	r2, [pc, #108]	; (800216c <SystemClock_Config+0xb8>)
 80020fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <SystemClock_Config+0xb8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002110:	2302      	movs	r3, #2
 8002112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002114:	2301      	movs	r3, #1
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002118:	2310      	movs	r3, #16
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800211c:	2300      	movs	r3, #0
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002120:	f107 0320 	add.w	r3, r7, #32
 8002124:	4618      	mov	r0, r3
 8002126:	f002 ff51 	bl	8004fcc <HAL_RCC_OscConfig>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002130:	f001 fa30 	bl	8003594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002134:	230f      	movs	r3, #15
 8002136:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f003 f9b4 	bl	80054bc <HAL_RCC_ClockConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800215a:	f001 fa1b 	bl	8003594 <Error_Handler>
  }
}
 800215e:	bf00      	nop
 8002160:	3750      	adds	r7, #80	; 0x50
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40007000 	.word	0x40007000

08002170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002176:	463b      	mov	r3, r7
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002182:	4b21      	ldr	r3, [pc, #132]	; (8002208 <MX_ADC1_Init+0x98>)
 8002184:	4a21      	ldr	r2, [pc, #132]	; (800220c <MX_ADC1_Init+0x9c>)
 8002186:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002188:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <MX_ADC1_Init+0x98>)
 800218a:	2200      	movs	r2, #0
 800218c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <MX_ADC1_Init+0x98>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <MX_ADC1_Init+0x98>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <MX_ADC1_Init+0x98>)
 800219c:	2200      	movs	r2, #0
 800219e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <MX_ADC1_Init+0x98>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <MX_ADC1_Init+0x98>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <MX_ADC1_Init+0x98>)
 80021b0:	4a17      	ldr	r2, [pc, #92]	; (8002210 <MX_ADC1_Init+0xa0>)
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <MX_ADC1_Init+0x98>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <MX_ADC1_Init+0x98>)
 80021bc:	2201      	movs	r2, #1
 80021be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_ADC1_Init+0x98>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MX_ADC1_Init+0x98>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021ce:	480e      	ldr	r0, [pc, #56]	; (8002208 <MX_ADC1_Init+0x98>)
 80021d0:	f001 ffae 	bl	8004130 <HAL_ADC_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80021da:	f001 f9db 	bl	8003594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80021de:	230b      	movs	r3, #11
 80021e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ea:	463b      	mov	r3, r7
 80021ec:	4619      	mov	r1, r3
 80021ee:	4806      	ldr	r0, [pc, #24]	; (8002208 <MX_ADC1_Init+0x98>)
 80021f0:	f002 f94c 	bl	800448c <HAL_ADC_ConfigChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80021fa:	f001 f9cb 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20004ae4 	.word	0x20004ae4
 800220c:	40012000 	.word	0x40012000
 8002210:	0f000001 	.word	0x0f000001

08002214 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	; 0x30
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800221a:	f107 0318 	add.w	r3, r7, #24
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
 8002228:	611a      	str	r2, [r3, #16]
 800222a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	463b      	mov	r3, r7
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]
 800223a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800223c:	2002      	movs	r0, #2
 800223e:	f7ff fea3 	bl	8001f88 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8002242:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002246:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002248:	2302      	movs	r3, #2
 800224a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002250:	2301      	movs	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002258:	2304      	movs	r3, #4
 800225a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225c:	463b      	mov	r3, r7
 800225e:	4619      	mov	r1, r3
 8002260:	4815      	ldr	r0, [pc, #84]	; (80022b8 <MX_I2C1_Init+0xa4>)
 8002262:	f005 fbd4 	bl	8007a0e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002266:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800226a:	f7ff fea5 	bl	8001fb8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800226e:	4813      	ldr	r0, [pc, #76]	; (80022bc <MX_I2C1_Init+0xa8>)
 8002270:	f7ff fe79 	bl	8001f66 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002274:	4811      	ldr	r0, [pc, #68]	; (80022bc <MX_I2C1_Init+0xa8>)
 8002276:	f7ff fe53 	bl	8001f20 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800227a:	4810      	ldr	r0, [pc, #64]	; (80022bc <MX_I2C1_Init+0xa8>)
 800227c:	f7ff fe40 	bl	8001f00 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <MX_I2C1_Init+0xac>)
 8002286:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002296:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800229c:	f107 0318 	add.w	r3, r7, #24
 80022a0:	4619      	mov	r1, r3
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <MX_I2C1_Init+0xa8>)
 80022a4:	f005 fd1c 	bl	8007ce0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80022a8:	2100      	movs	r1, #0
 80022aa:	4804      	ldr	r0, [pc, #16]	; (80022bc <MX_I2C1_Init+0xa8>)
 80022ac:	f7ff fe48 	bl	8001f40 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022b0:	bf00      	nop
 80022b2:	3730      	adds	r7, #48	; 0x30
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40005400 	.word	0x40005400
 80022c0:	000186a0 	.word	0x000186a0

080022c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b096      	sub	sp, #88	; 0x58
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]
 80022f2:	615a      	str	r2, [r3, #20]
 80022f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	2220      	movs	r2, #32
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f008 fee7 	bl	800b0d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002302:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <MX_TIM1_Init+0x134>)
 8002304:	4a3d      	ldr	r2, [pc, #244]	; (80023fc <MX_TIM1_Init+0x138>)
 8002306:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8002308:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <MX_TIM1_Init+0x134>)
 800230a:	22a0      	movs	r2, #160	; 0xa0
 800230c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230e:	4b3a      	ldr	r3, [pc, #232]	; (80023f8 <MX_TIM1_Init+0x134>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002314:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <MX_TIM1_Init+0x134>)
 8002316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800231a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231c:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <MX_TIM1_Init+0x134>)
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002322:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <MX_TIM1_Init+0x134>)
 8002324:	2200      	movs	r2, #0
 8002326:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002328:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <MX_TIM1_Init+0x134>)
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800232e:	4832      	ldr	r0, [pc, #200]	; (80023f8 <MX_TIM1_Init+0x134>)
 8002330:	f003 fa94 	bl	800585c <HAL_TIM_Base_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800233a:	f001 f92b 	bl	8003594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002342:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002344:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002348:	4619      	mov	r1, r3
 800234a:	482b      	ldr	r0, [pc, #172]	; (80023f8 <MX_TIM1_Init+0x134>)
 800234c:	f003 fdec 	bl	8005f28 <HAL_TIM_ConfigClockSource>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002356:	f001 f91d 	bl	8003594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800235a:	4827      	ldr	r0, [pc, #156]	; (80023f8 <MX_TIM1_Init+0x134>)
 800235c:	f003 facd 	bl	80058fa <HAL_TIM_PWM_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002366:	f001 f915 	bl	8003594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002372:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002376:	4619      	mov	r1, r3
 8002378:	481f      	ldr	r0, [pc, #124]	; (80023f8 <MX_TIM1_Init+0x134>)
 800237a:	f004 f9ad 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002384:	f001 f906 	bl	8003594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002388:	2360      	movs	r3, #96	; 0x60
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a4:	220c      	movs	r2, #12
 80023a6:	4619      	mov	r1, r3
 80023a8:	4813      	ldr	r0, [pc, #76]	; (80023f8 <MX_TIM1_Init+0x134>)
 80023aa:	f003 fcfb 	bl	8005da4 <HAL_TIM_PWM_ConfigChannel>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80023b4:	f001 f8ee 	bl	8003594 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4807      	ldr	r0, [pc, #28]	; (80023f8 <MX_TIM1_Init+0x134>)
 80023dc:	f004 f9f8 	bl	80067d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80023e6:	f001 f8d5 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023ea:	4803      	ldr	r0, [pc, #12]	; (80023f8 <MX_TIM1_Init+0x134>)
 80023ec:	f001 fc72 	bl	8003cd4 <HAL_TIM_MspPostInit>

}
 80023f0:	bf00      	nop
 80023f2:	3758      	adds	r7, #88	; 0x58
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20004b30 	.word	0x20004b30
 80023fc:	40010000 	.word	0x40010000

08002400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f008 fe5e 	bl	800b0d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <MX_TIM2_Init+0xa4>)
 800241e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002422:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <MX_TIM2_Init+0xa4>)
 8002426:	2200      	movs	r2, #0
 8002428:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <MX_TIM2_Init+0xa4>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <MX_TIM2_Init+0xa4>)
 8002432:	f04f 32ff 	mov.w	r2, #4294967295
 8002436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <MX_TIM2_Init+0xa4>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <MX_TIM2_Init+0xa4>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002444:	2303      	movs	r3, #3
 8002446:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800244c:	2301      	movs	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800245c:	2301      	movs	r3, #1
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002460:	2300      	movs	r3, #0
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002468:	f107 030c 	add.w	r3, r7, #12
 800246c:	4619      	mov	r1, r3
 800246e:	480d      	ldr	r0, [pc, #52]	; (80024a4 <MX_TIM2_Init+0xa4>)
 8002470:	f003 fb64 	bl	8005b3c <HAL_TIM_Encoder_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800247a:	f001 f88b 	bl	8003594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	4619      	mov	r1, r3
 800248a:	4806      	ldr	r0, [pc, #24]	; (80024a4 <MX_TIM2_Init+0xa4>)
 800248c:	f004 f924 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002496:	f001 f87d 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800249a:	bf00      	nop
 800249c:	3730      	adds	r7, #48	; 0x30
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20004b90 	.word	0x20004b90

080024a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024ae:	f107 030c 	add.w	r3, r7, #12
 80024b2:	2224      	movs	r2, #36	; 0x24
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f008 fe0a 	bl	800b0d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024c4:	4b20      	ldr	r3, [pc, #128]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024c6:	4a21      	ldr	r2, [pc, #132]	; (800254c <MX_TIM3_Init+0xa4>)
 80024c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <MX_TIM3_Init+0xa0>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024ea:	2303      	movs	r3, #3
 80024ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024f2:	2301      	movs	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002502:	2301      	movs	r3, #1
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	4619      	mov	r1, r3
 8002514:	480c      	ldr	r0, [pc, #48]	; (8002548 <MX_TIM3_Init+0xa0>)
 8002516:	f003 fb11 	bl	8005b3c <HAL_TIM_Encoder_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002520:	f001 f838 	bl	8003594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_TIM3_Init+0xa0>)
 8002532:	f004 f8d1 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800253c:	f001 f82a 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002540:	bf00      	nop
 8002542:	3730      	adds	r7, #48	; 0x30
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20004a9c 	.word	0x20004a9c
 800254c:	40000400 	.word	0x40000400

08002550 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b096      	sub	sp, #88	; 0x58
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002556:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002564:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800256e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]
 800257c:	611a      	str	r2, [r3, #16]
 800257e:	615a      	str	r2, [r3, #20]
 8002580:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	2220      	movs	r2, #32
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f008 fda1 	bl	800b0d0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800258e:	4b43      	ldr	r3, [pc, #268]	; (800269c <MX_TIM8_Init+0x14c>)
 8002590:	4a43      	ldr	r2, [pc, #268]	; (80026a0 <MX_TIM8_Init+0x150>)
 8002592:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002594:	4b41      	ldr	r3, [pc, #260]	; (800269c <MX_TIM8_Init+0x14c>)
 8002596:	2200      	movs	r2, #0
 8002598:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b40      	ldr	r3, [pc, #256]	; (800269c <MX_TIM8_Init+0x14c>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80025a0:	4b3e      	ldr	r3, [pc, #248]	; (800269c <MX_TIM8_Init+0x14c>)
 80025a2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80025a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <MX_TIM8_Init+0x14c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80025ae:	4b3b      	ldr	r3, [pc, #236]	; (800269c <MX_TIM8_Init+0x14c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b4:	4b39      	ldr	r3, [pc, #228]	; (800269c <MX_TIM8_Init+0x14c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80025ba:	4838      	ldr	r0, [pc, #224]	; (800269c <MX_TIM8_Init+0x14c>)
 80025bc:	f003 f94e 	bl	800585c <HAL_TIM_Base_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80025c6:	f000 ffe5 	bl	8003594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80025d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025d4:	4619      	mov	r1, r3
 80025d6:	4831      	ldr	r0, [pc, #196]	; (800269c <MX_TIM8_Init+0x14c>)
 80025d8:	f003 fca6 	bl	8005f28 <HAL_TIM_ConfigClockSource>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80025e2:	f000 ffd7 	bl	8003594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80025e6:	482d      	ldr	r0, [pc, #180]	; (800269c <MX_TIM8_Init+0x14c>)
 80025e8:	f003 f987 	bl	80058fa <HAL_TIM_PWM_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80025f2:	f000 ffcf 	bl	8003594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80025fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002602:	4619      	mov	r1, r3
 8002604:	4825      	ldr	r0, [pc, #148]	; (800269c <MX_TIM8_Init+0x14c>)
 8002606:	f004 f867 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002610:	f000 ffc0 	bl	8003594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002614:	2360      	movs	r3, #96	; 0x60
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002620:	2300      	movs	r3, #0
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002628:	2300      	movs	r3, #0
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800262c:	2300      	movs	r3, #0
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002634:	2200      	movs	r2, #0
 8002636:	4619      	mov	r1, r3
 8002638:	4818      	ldr	r0, [pc, #96]	; (800269c <MX_TIM8_Init+0x14c>)
 800263a:	f003 fbb3 	bl	8005da4 <HAL_TIM_PWM_ConfigChannel>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002644:	f000 ffa6 	bl	8003594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264c:	2204      	movs	r2, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4812      	ldr	r0, [pc, #72]	; (800269c <MX_TIM8_Init+0x14c>)
 8002652:	f003 fba7 	bl	8005da4 <HAL_TIM_PWM_ConfigChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800265c:	f000 ff9a 	bl	8003594 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002678:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	4619      	mov	r1, r3
 8002682:	4806      	ldr	r0, [pc, #24]	; (800269c <MX_TIM8_Init+0x14c>)
 8002684:	f004 f8a4 	bl	80067d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800268e:	f000 ff81 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	3758      	adds	r7, #88	; 0x58
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20004a10 	.word	0x20004a10
 80026a0:	40010400 	.word	0x40010400

080026a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <MX_USART3_UART_Init+0x50>)
 80026ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026ca:	220c      	movs	r2, #12
 80026cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026da:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026dc:	f004 f8ca 	bl	8006874 <HAL_UART_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026e6:	f000 ff55 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20004a58 	.word	0x20004a58
 80026f4:	40004800 	.word	0x40004800

080026f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <MX_GPIO_Init+0xe0>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a30      	ldr	r2, [pc, #192]	; (80027d8 <MX_GPIO_Init+0xe0>)
 8002718:	f043 0310 	orr.w	r3, r3, #16
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <MX_GPIO_Init+0xe0>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <MX_GPIO_Init+0xe0>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a29      	ldr	r2, [pc, #164]	; (80027d8 <MX_GPIO_Init+0xe0>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <MX_GPIO_Init+0xe0>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <MX_GPIO_Init+0xe0>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <MX_GPIO_Init+0xe0>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <MX_GPIO_Init+0xe0>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
 8002766:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <MX_GPIO_Init+0xe0>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <MX_GPIO_Init+0xe0>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <MX_GPIO_Init+0xe0>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002784:	4815      	ldr	r0, [pc, #84]	; (80027dc <MX_GPIO_Init+0xe4>)
 8002786:	f002 fbdf 	bl	8004f48 <HAL_GPIO_WritePin>
                          |ICM_INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800278a:	2200      	movs	r2, #0
 800278c:	213c      	movs	r1, #60	; 0x3c
 800278e:	4814      	ldr	r0, [pc, #80]	; (80027e0 <MX_GPIO_Init+0xe8>)
 8002790:	f002 fbda 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           ICM_INT_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002794:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8002798:	617b      	str	r3, [r7, #20]
                          |ICM_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279a:	2301      	movs	r3, #1
 800279c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	480b      	ldr	r0, [pc, #44]	; (80027dc <MX_GPIO_Init+0xe4>)
 80027ae:	f002 fa2f 	bl	8004c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80027b2:	233c      	movs	r3, #60	; 0x3c
 80027b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027be:	2302      	movs	r3, #2
 80027c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <MX_GPIO_Init+0xe8>)
 80027ca:	f002 fa21 	bl	8004c10 <HAL_GPIO_Init>

}
 80027ce:	bf00      	nop
 80027d0:	3728      	adds	r7, #40	; 0x28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40020000 	.word	0x40020000

080027e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning*/
	UNUSED(huart);

//	HAL_UART_Transmit(&huart3, (uint8_t*) aRxBuffer, 10, 0xFFFF);
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <IR>:
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */

//IR sensor function
int IR(ADC_HandleTypeDef hadc1){
 80027f8:	b084      	sub	sp, #16
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	f107 0c18 	add.w	ip, r7, #24
 8002804:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int distance;
	double temp;

	///////IR Sensor Code////////////
	//Set GPIO pin to high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002808:	2201      	movs	r2, #1
 800280a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800280e:	484f      	ldr	r0, [pc, #316]	; (800294c <IR+0x154>)
 8002810:	f002 fb9a 	bl	8004f48 <HAL_GPIO_WritePin>

	//Get ADC value
	HAL_ADC_Start(&hadc1);
 8002814:	f107 0018 	add.w	r0, r7, #24
 8002818:	f001 fcce 	bl	80041b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	f107 0018 	add.w	r0, r7, #24
 8002824:	f001 fd9a 	bl	800435c <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 8002828:	f107 0018 	add.w	r0, r7, #24
 800282c:	f001 fe21 	bl	8004472 <HAL_ADC_GetValue>
 8002830:	4603      	mov	r3, r0
 8002832:	817b      	strh	r3, [r7, #10]

	//Set GPIO pin to low
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002834:	2200      	movs	r2, #0
 8002836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800283a:	4844      	ldr	r0, [pc, #272]	; (800294c <IR+0x154>)
 800283c:	f002 fb84 	bl	8004f48 <HAL_GPIO_WritePin>

//	//Convert to string and display on OLED
	voltage = (int)raw;
 8002840:	897b      	ldrh	r3, [r7, #10]
 8002842:	607b      	str	r3, [r7, #4]

	if (voltage <= 2960 && voltage > 2500)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 800284a:	dc07      	bgt.n	800285c <IR+0x64>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002852:	4293      	cmp	r3, r2
 8002854:	dd02      	ble.n	800285c <IR+0x64>
		distance = 1;
 8002856:	2301      	movs	r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	e06c      	b.n	8002936 <IR+0x13e>
	else if (voltage <= 2500 && voltage > 1845)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002862:	4293      	cmp	r3, r2
 8002864:	dc07      	bgt.n	8002876 <IR+0x7e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f240 7235 	movw	r2, #1845	; 0x735
 800286c:	4293      	cmp	r3, r2
 800286e:	dd02      	ble.n	8002876 <IR+0x7e>
		distance = 2;
 8002870:	2302      	movs	r3, #2
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e05f      	b.n	8002936 <IR+0x13e>
	else if (voltage <= 1845 && voltage > 1460)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f240 7235 	movw	r2, #1845	; 0x735
 800287c:	4293      	cmp	r3, r2
 800287e:	dc07      	bgt.n	8002890 <IR+0x98>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8002886:	4293      	cmp	r3, r2
 8002888:	dd02      	ble.n	8002890 <IR+0x98>
		distance = 3;
 800288a:	2303      	movs	r3, #3
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e052      	b.n	8002936 <IR+0x13e>
	else if (voltage <= 1460 && voltage > 1275)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8002896:	4293      	cmp	r3, r2
 8002898:	dc07      	bgt.n	80028aa <IR+0xb2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f240 42fb 	movw	r2, #1275	; 0x4fb
 80028a0:	4293      	cmp	r3, r2
 80028a2:	dd02      	ble.n	80028aa <IR+0xb2>
		distance = 4;
 80028a4:	2304      	movs	r3, #4
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e045      	b.n	8002936 <IR+0x13e>
	else if (voltage <= 1275 && voltage > 1135)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f240 42fb 	movw	r2, #1275	; 0x4fb
 80028b0:	4293      	cmp	r3, r2
 80028b2:	dc06      	bgt.n	80028c2 <IR+0xca>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 80028ba:	db02      	blt.n	80028c2 <IR+0xca>
		distance = 5;
 80028bc:	2305      	movs	r3, #5
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e039      	b.n	8002936 <IR+0x13e>
	else if (voltage <= 1135 && voltage > 1020)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 80028c8:	da06      	bge.n	80028d8 <IR+0xe0>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80028d0:	dd02      	ble.n	80028d8 <IR+0xe0>
		distance = 6;
 80028d2:	2306      	movs	r3, #6
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	e02e      	b.n	8002936 <IR+0x13e>
	else if (voltage <= 1020 && voltage > 925)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80028de:	dc07      	bgt.n	80028f0 <IR+0xf8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f240 329d 	movw	r2, #925	; 0x39d
 80028e6:	4293      	cmp	r3, r2
 80028e8:	dd02      	ble.n	80028f0 <IR+0xf8>
		distance = 7;
 80028ea:	2307      	movs	r3, #7
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	e022      	b.n	8002936 <IR+0x13e>
	else if (voltage <= 925 && voltage > 815)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f240 329d 	movw	r2, #925	; 0x39d
 80028f6:	4293      	cmp	r3, r2
 80028f8:	dc06      	bgt.n	8002908 <IR+0x110>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f5b3 7f4c 	cmp.w	r3, #816	; 0x330
 8002900:	db02      	blt.n	8002908 <IR+0x110>
		distance = 8;
 8002902:	2308      	movs	r3, #8
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	e016      	b.n	8002936 <IR+0x13e>
	else if (voltage <= 815 && voltage > 710)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f5b3 7f4c 	cmp.w	r3, #816	; 0x330
 800290e:	da07      	bge.n	8002920 <IR+0x128>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f240 22c6 	movw	r2, #710	; 0x2c6
 8002916:	4293      	cmp	r3, r2
 8002918:	dd02      	ble.n	8002920 <IR+0x128>
		distance = 9;
 800291a:	2309      	movs	r3, #9
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e00a      	b.n	8002936 <IR+0x13e>
	// Nothing within 50cm
	else if (voltage <= 710)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f240 22c6 	movw	r2, #710	; 0x2c6
 8002926:	4293      	cmp	r3, r2
 8002928:	dc02      	bgt.n	8002930 <IR+0x138>
		distance = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	e002      	b.n	8002936 <IR+0x13e>
	// Too close
	else
		distance = -1;
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
 8002934:	60fb      	str	r3, [r7, #12]

	IR_READ = distance;
 8002936:	4a06      	ldr	r2, [pc, #24]	; (8002950 <IR+0x158>)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6013      	str	r3, [r2, #0]
//	IR_READ = voltage;

//	return voltage;
	return distance;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002948:	b004      	add	sp, #16
 800294a:	4770      	bx	lr
 800294c:	40020000 	.word	0x40020000
 8002950:	20000000 	.word	0x20000000

08002954 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	b097      	sub	sp, #92	; 0x5c
 8002958:	af0e      	add	r7, sp, #56	; 0x38
 800295a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
		uint8_t receiveBuffer[4];
		uint8_t ch;
		uint8_t char2;
		bool have_var = false;
 800295c:	2300      	movs	r3, #0
 800295e:	77fb      	strb	r3, [r7, #31]
		bool two_digits = false;
 8002960:	2300      	movs	r3, #0
 8002962:	77bb      	strb	r3, [r7, #30]
		int count = 1;
 8002964:	2301      	movs	r3, #1
 8002966:	61bb      	str	r3, [r7, #24]
		int var2;

		/* Infinite loop */
		for (;;) {

			IR(hadc1);
 8002968:	4ecf      	ldr	r6, [pc, #828]	; (8002ca8 <StartDefaultTask+0x354>)
 800296a:	466d      	mov	r5, sp
 800296c:	f106 0410 	add.w	r4, r6, #16
 8002970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002980:	e885 0003 	stmia.w	r5, {r0, r1}
 8002984:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002988:	f7ff ff36 	bl	80027f8 <IR>

			HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 1);
 800298c:	2201      	movs	r2, #1
 800298e:	49c7      	ldr	r1, [pc, #796]	; (8002cac <StartDefaultTask+0x358>)
 8002990:	48c7      	ldr	r0, [pc, #796]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002992:	f004 f84e 	bl	8006a32 <HAL_UART_Receive_IT>
 8002996:	4bc5      	ldr	r3, [pc, #788]	; (8002cac <StartDefaultTask+0x358>)
 8002998:	781b      	ldrb	r3, [r3, #0]
			memcpy(receiveBuffer, aRxBuffer, sizeof(char));
 800299a:	733b      	strb	r3, [r7, #12]
			switch(receiveBuffer[0]){
 800299c:	7b3b      	ldrb	r3, [r7, #12]
 800299e:	3b30      	subs	r3, #48	; 0x30
 80029a0:	2b2a      	cmp	r3, #42	; 0x2a
 80029a2:	f200 8187 	bhi.w	8002cb4 <StartDefaultTask+0x360>
 80029a6:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <StartDefaultTask+0x58>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	08002c59 	.word	0x08002c59
 80029b0:	08002c59 	.word	0x08002c59
 80029b4:	08002c59 	.word	0x08002c59
 80029b8:	08002c59 	.word	0x08002c59
 80029bc:	08002c59 	.word	0x08002c59
 80029c0:	08002c59 	.word	0x08002c59
 80029c4:	08002c59 	.word	0x08002c59
 80029c8:	08002c59 	.word	0x08002c59
 80029cc:	08002c59 	.word	0x08002c59
 80029d0:	08002c59 	.word	0x08002c59
 80029d4:	08002cb5 	.word	0x08002cb5
 80029d8:	08002cb5 	.word	0x08002cb5
 80029dc:	08002cb5 	.word	0x08002cb5
 80029e0:	08002cb5 	.word	0x08002cb5
 80029e4:	08002cb5 	.word	0x08002cb5
 80029e8:	08002cb5 	.word	0x08002cb5
 80029ec:	08002cb5 	.word	0x08002cb5
 80029f0:	08002bc9 	.word	0x08002bc9
 80029f4:	08002cb5 	.word	0x08002cb5
 80029f8:	08002cb5 	.word	0x08002cb5
 80029fc:	08002be9 	.word	0x08002be9
 8002a00:	08002b6b 	.word	0x08002b6b
 8002a04:	08002cb5 	.word	0x08002cb5
 8002a08:	08002cb5 	.word	0x08002cb5
 8002a0c:	08002cb5 	.word	0x08002cb5
 8002a10:	08002cb5 	.word	0x08002cb5
 8002a14:	08002cb5 	.word	0x08002cb5
 8002a18:	08002cb5 	.word	0x08002cb5
 8002a1c:	08002cb5 	.word	0x08002cb5
 8002a20:	08002cb5 	.word	0x08002cb5
 8002a24:	08002cb5 	.word	0x08002cb5
 8002a28:	08002c23 	.word	0x08002c23
 8002a2c:	08002cb5 	.word	0x08002cb5
 8002a30:	08002b0d 	.word	0x08002b0d
 8002a34:	08002cb5 	.word	0x08002cb5
 8002a38:	08002ab3 	.word	0x08002ab3
 8002a3c:	08002cb5 	.word	0x08002cb5
 8002a40:	08002c3f 	.word	0x08002c3f
 8002a44:	08002cb5 	.word	0x08002cb5
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002cb5 	.word	0x08002cb5
 8002a50:	08002cb5 	.word	0x08002cb5
 8002a54:	08002c09 	.word	0x08002c09
				case 'W':
					if (have_var){
 8002a58:	7ffb      	ldrb	r3, [r7, #31]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d014      	beq.n	8002a88 <StartDefaultTask+0x134>
						if (two_digits) {
 8002a5e:	7fbb      	ldrb	r3, [r7, #30]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <StartDefaultTask+0x122>
							var = (var * 10) + var2;
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	461a      	mov	r2, r3
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
						}
						ch = Straight_Move(true, var);
 8002a76:	6979      	ldr	r1, [r7, #20]
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f000 fac5 	bl	8003008 <Straight_Move>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	72fb      	strb	r3, [r7, #11]
						have_var = false;
 8002a82:	2300      	movs	r3, #0
 8002a84:	77fb      	strb	r3, [r7, #31]
 8002a86:	e005      	b.n	8002a94 <StartDefaultTask+0x140>
					} else {
						ch = Straight_Move(true, 1);
 8002a88:	2101      	movs	r1, #1
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f000 fabc 	bl	8003008 <Straight_Move>
 8002a90:	4603      	mov	r3, r0
 8002a92:	72fb      	strb	r3, [r7, #11]
					}
					// reset var
					two_digits = false;
 8002a94:	2300      	movs	r3, #0
 8002a96:	77bb      	strb	r3, [r7, #30]
					count = 1;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	61bb      	str	r3, [r7, #24]
					ch = 'R';
 8002a9c:	2352      	movs	r3, #82	; 0x52
 8002a9e:	72fb      	strb	r3, [r7, #11]
					HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002aa0:	f107 010b 	add.w	r1, r7, #11
 8002aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4881      	ldr	r0, [pc, #516]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002aac:	f003 ff2f 	bl	800690e <HAL_UART_Transmit>
					break;
 8002ab0:	e101      	b.n	8002cb6 <StartDefaultTask+0x362>
				case 'S':
					if (have_var){
 8002ab2:	7ffb      	ldrb	r3, [r7, #31]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d014      	beq.n	8002ae2 <StartDefaultTask+0x18e>
						if (two_digits) {
 8002ab8:	7fbb      	ldrb	r3, [r7, #30]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <StartDefaultTask+0x17c>
							var = (var * 10) + var2;
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	461a      	mov	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4413      	add	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
						}
						ch = Straight_Move(false, var);
 8002ad0:	6979      	ldr	r1, [r7, #20]
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f000 fa98 	bl	8003008 <Straight_Move>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	72fb      	strb	r3, [r7, #11]
						have_var = false;
 8002adc:	2300      	movs	r3, #0
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	e005      	b.n	8002aee <StartDefaultTask+0x19a>
					} else {
						ch = Straight_Move(false, 1);
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f000 fa8f 	bl	8003008 <Straight_Move>
 8002aea:	4603      	mov	r3, r0
 8002aec:	72fb      	strb	r3, [r7, #11]
					}
					// reset var
					two_digits = false;
 8002aee:	2300      	movs	r3, #0
 8002af0:	77bb      	strb	r3, [r7, #30]
					count = 1;
 8002af2:	2301      	movs	r3, #1
 8002af4:	61bb      	str	r3, [r7, #24]
					ch = 'R';
 8002af6:	2352      	movs	r3, #82	; 0x52
 8002af8:	72fb      	strb	r3, [r7, #11]
					HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002afa:	f107 010b 	add.w	r1, r7, #11
 8002afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b02:	2201      	movs	r2, #1
 8002b04:	486a      	ldr	r0, [pc, #424]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002b06:	f003 ff02 	bl	800690e <HAL_UART_Transmit>
					break;
 8002b0a:	e0d4      	b.n	8002cb6 <StartDefaultTask+0x362>
				case 'Q':
	//				ch = Turning(true, true, 90);
	//				HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
	//				break;

					if (have_var){
 8002b0c:	7ffb      	ldrb	r3, [r7, #31]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d015      	beq.n	8002b3e <StartDefaultTask+0x1ea>
						if (two_digits) {
 8002b12:	7fbb      	ldrb	r3, [r7, #30]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <StartDefaultTask+0x1d6>
							var = (var * 10) + var2;
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	461a      	mov	r2, r3
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]
						}
						ch = Turning(true, true, var);
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f000 fb18 	bl	8003164 <Turning>
 8002b34:	4603      	mov	r3, r0
 8002b36:	72fb      	strb	r3, [r7, #11]
						have_var = false;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	77fb      	strb	r3, [r7, #31]
 8002b3c:	e006      	b.n	8002b4c <StartDefaultTask+0x1f8>
					} else {
						ch = Turning(true, true, 9);
 8002b3e:	2209      	movs	r2, #9
 8002b40:	2101      	movs	r1, #1
 8002b42:	2001      	movs	r0, #1
 8002b44:	f000 fb0e 	bl	8003164 <Turning>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	72fb      	strb	r3, [r7, #11]
					}
					// reset var
					two_digits = false;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	77bb      	strb	r3, [r7, #30]
					count = 1;
 8002b50:	2301      	movs	r3, #1
 8002b52:	61bb      	str	r3, [r7, #24]
					ch = 'R';
 8002b54:	2352      	movs	r3, #82	; 0x52
 8002b56:	72fb      	strb	r3, [r7, #11]
					HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002b58:	f107 010b 	add.w	r1, r7, #11
 8002b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b60:	2201      	movs	r2, #1
 8002b62:	4853      	ldr	r0, [pc, #332]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002b64:	f003 fed3 	bl	800690e <HAL_UART_Transmit>
					break;
 8002b68:	e0a5      	b.n	8002cb6 <StartDefaultTask+0x362>
				case 'E':
	//				ch = Turning(true, false, 9);
	//				HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
	//				break;

					if (have_var){
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d015      	beq.n	8002b9c <StartDefaultTask+0x248>
						if (two_digits) {
 8002b70:	7fbb      	ldrb	r3, [r7, #30]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <StartDefaultTask+0x234>
							var = (var * 10) + var2;
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	461a      	mov	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
						}
						ch = Turning(true, false, var);
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f000 fae9 	bl	8003164 <Turning>
 8002b92:	4603      	mov	r3, r0
 8002b94:	72fb      	strb	r3, [r7, #11]
						have_var = false;
 8002b96:	2300      	movs	r3, #0
 8002b98:	77fb      	strb	r3, [r7, #31]
 8002b9a:	e006      	b.n	8002baa <StartDefaultTask+0x256>
					} else {
						ch = Turning(true, false, 9);
 8002b9c:	2209      	movs	r2, #9
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f000 fadf 	bl	8003164 <Turning>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	72fb      	strb	r3, [r7, #11]
					}
					// reset var
					two_digits = false;
 8002baa:	2300      	movs	r3, #0
 8002bac:	77bb      	strb	r3, [r7, #30]
					count = 1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61bb      	str	r3, [r7, #24]
					ch = 'R';
 8002bb2:	2352      	movs	r3, #82	; 0x52
 8002bb4:	72fb      	strb	r3, [r7, #11]
					HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002bb6:	f107 010b 	add.w	r1, r7, #11
 8002bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	483b      	ldr	r0, [pc, #236]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002bc2:	f003 fea4 	bl	800690e <HAL_UART_Transmit>
					break;
 8002bc6:	e076      	b.n	8002cb6 <StartDefaultTask+0x362>
				case 'A':
					ch = Turning(false, true, 9);
 8002bc8:	2209      	movs	r2, #9
 8002bca:	2101      	movs	r1, #1
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f000 fac9 	bl	8003164 <Turning>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	72fb      	strb	r3, [r7, #11]
					HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002bd6:	f107 010b 	add.w	r1, r7, #11
 8002bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bde:	2201      	movs	r2, #1
 8002be0:	4833      	ldr	r0, [pc, #204]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002be2:	f003 fe94 	bl	800690e <HAL_UART_Transmit>
					break;
 8002be6:	e066      	b.n	8002cb6 <StartDefaultTask+0x362>
				case 'D':
					ch = Turning(false, false, 9);
 8002be8:	2209      	movs	r2, #9
 8002bea:	2100      	movs	r1, #0
 8002bec:	2000      	movs	r0, #0
 8002bee:	f000 fab9 	bl	8003164 <Turning>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	72fb      	strb	r3, [r7, #11]
					HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002bf6:	f107 010b 	add.w	r1, r7, #11
 8002bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bfe:	2201      	movs	r2, #1
 8002c00:	482b      	ldr	r0, [pc, #172]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002c02:	f003 fe84 	bl	800690e <HAL_UART_Transmit>
					break;
 8002c06:	e056      	b.n	8002cb6 <StartDefaultTask+0x362>
	//			case 8:
	//				HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 1);
	//				if (aRxBuffer[0] == 'W')
	//					Straight_Move(false, 8);
				case 'Z':
					ch = Obstacle_Straight_Move();
 8002c08:	f000 f988 	bl	8002f1c <Obstacle_Straight_Move>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	72fb      	strb	r3, [r7, #11]
					HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002c10:	f107 010b 	add.w	r1, r7, #11
 8002c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4825      	ldr	r0, [pc, #148]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002c1c:	f003 fe77 	bl	800690e <HAL_UART_Transmit>
					break;
 8002c20:	e049      	b.n	8002cb6 <StartDefaultTask+0x362>
				case 'O':
					ch = Spot_Rotate(true);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f000 fc2c 	bl	8003480 <Spot_Rotate>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	72fb      	strb	r3, [r7, #11]
					HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002c2c:	f107 010b 	add.w	r1, r7, #11
 8002c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c34:	2201      	movs	r2, #1
 8002c36:	481e      	ldr	r0, [pc, #120]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002c38:	f003 fe69 	bl	800690e <HAL_UART_Transmit>
					break;
 8002c3c:	e03b      	b.n	8002cb6 <StartDefaultTask+0x362>
				case 'U':
					ch = U_Turn();
 8002c3e:	f000 fb73 	bl	8003328 <U_Turn>
 8002c42:	4603      	mov	r3, r0
 8002c44:	72fb      	strb	r3, [r7, #11]
					HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002c46:	f107 010b 	add.w	r1, r7, #11
 8002c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4817      	ldr	r0, [pc, #92]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002c52:	f003 fe5c 	bl	800690e <HAL_UART_Transmit>
					break;
 8002c56:	e02e      	b.n	8002cb6 <StartDefaultTask+0x362>
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					ch = '1';
 8002c58:	2331      	movs	r3, #49	; 0x31
 8002c5a:	72fb      	strb	r3, [r7, #11]
					HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002c5c:	f107 010b 	add.w	r1, r7, #11
 8002c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c64:	2201      	movs	r2, #1
 8002c66:	4812      	ldr	r0, [pc, #72]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002c68:	f003 fe51 	bl	800690e <HAL_UART_Transmit>
					have_var = true;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	77fb      	strb	r3, [r7, #31]
					// if second digit
					if (count == 2) {
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d111      	bne.n	8002c9a <StartDefaultTask+0x346>
						ch = '2';
 8002c76:	2332      	movs	r3, #50	; 0x32
 8002c78:	72fb      	strb	r3, [r7, #11]
						HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002c7a:	f107 010b 	add.w	r1, r7, #11
 8002c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c82:	2201      	movs	r2, #1
 8002c84:	480a      	ldr	r0, [pc, #40]	; (8002cb0 <StartDefaultTask+0x35c>)
 8002c86:	f003 fe42 	bl	800690e <HAL_UART_Transmit>
						var2 = receiveBuffer[0]-'0';
 8002c8a:	7b3b      	ldrb	r3, [r7, #12]
 8002c8c:	3b30      	subs	r3, #48	; 0x30
 8002c8e:	613b      	str	r3, [r7, #16]
						two_digits = true;
 8002c90:	2301      	movs	r3, #1
 8002c92:	77bb      	strb	r3, [r7, #30]
						count = 1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	61bb      	str	r3, [r7, #24]
					else {
						var = receiveBuffer[0]-'0';
						count++;
					}

					break;
 8002c98:	e00d      	b.n	8002cb6 <StartDefaultTask+0x362>
						var = receiveBuffer[0]-'0';
 8002c9a:	7b3b      	ldrb	r3, [r7, #12]
 8002c9c:	3b30      	subs	r3, #48	; 0x30
 8002c9e:	617b      	str	r3, [r7, #20]
						count++;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
					break;
 8002ca6:	e006      	b.n	8002cb6 <StartDefaultTask+0x362>
 8002ca8:	20004ae4 	.word	0x20004ae4
 8002cac:	20004b7c 	.word	0x20004b7c
 8002cb0:	20004a58 	.word	0x20004a58
				default:
					break;
 8002cb4:	bf00      	nop
			}
			memmove(aRxBuffer, aRxBuffer+1, sizeof(aRxBuffer)-1);
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <StartDefaultTask+0x378>)
 8002cb8:	2213      	movs	r2, #19
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4804      	ldr	r0, [pc, #16]	; (8002cd0 <StartDefaultTask+0x37c>)
 8002cbe:	f008 f9ed 	bl	800b09c <memmove>
	//		if (ch < 'Z')
	//			ch++;
	//		else
	//			ch = 'A';

			osDelay(100);
 8002cc2:	2064      	movs	r0, #100	; 0x64
 8002cc4:	f005 faae 	bl	8008224 <osDelay>
			IR(hadc1);
 8002cc8:	e64e      	b.n	8002968 <StartDefaultTask+0x14>
 8002cca:	bf00      	nop
 8002ccc:	20004b7d 	.word	0x20004b7d
 8002cd0:	20004b7c 	.word	0x20004b7c

08002cd4 <Encoder>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Encoder */
void Encoder(void *argument)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08c      	sub	sp, #48	; 0x30
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Encoder */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002cdc:	213c      	movs	r1, #60	; 0x3c
 8002cde:	4838      	ldr	r0, [pc, #224]	; (8002dc0 <Encoder+0xec>)
 8002ce0:	f002 ffd2 	bl	8005c88 <HAL_TIM_Encoder_Start>

	int cnt1, cnt2, diff;
	uint32_t tick;

	cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8002ce4:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <Encoder+0xec>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
	tick = HAL_GetTick();
 8002cec:	f001 f9f0 	bl	80040d0 <HAL_GetTick>
 8002cf0:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t hello[20];
	uint16_t dir;
	/* Infinite loop */

	for (;;) {
		if (HAL_GetTick() - tick > 1000L) {
 8002cf2:	f001 f9ed 	bl	80040d0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d00:	d959      	bls.n	8002db6 <Encoder+0xe2>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002d02:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <Encoder+0xec>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	623b      	str	r3, [r7, #32]
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <Encoder+0xec>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d110      	bne.n	8002d3a <Encoder+0x66>
				if (cnt2 < cnt1)
 8002d18:	6a3a      	ldr	r2, [r7, #32]
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	da04      	bge.n	8002d2a <Encoder+0x56>
					diff = cnt1 - cnt2;
 8002d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d28:	e017      	b.n	8002d5a <Encoder+0x86>
				else
					diff = (65535 - cnt2) + cnt1;
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002d30:	33ff      	adds	r3, #255	; 0xff
 8002d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d34:	4413      	add	r3, r2
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d38:	e00f      	b.n	8002d5a <Encoder+0x86>
			} else {
				if (cnt2 > cnt1)
 8002d3a:	6a3a      	ldr	r2, [r7, #32]
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	dd04      	ble.n	8002d4c <Encoder+0x78>
					diff = cnt2 - cnt1;
 8002d42:	6a3a      	ldr	r2, [r7, #32]
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d4a:	e006      	b.n	8002d5a <Encoder+0x86>
				else
					diff = (65535 - cnt1) + cnt2;
 8002d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002d52:	33ff      	adds	r3, #255	; 0xff
 8002d54:	6a3a      	ldr	r2, [r7, #32]
 8002d56:	4413      	add	r3, r2
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			sprintf(hello, "Speed:%5d\0", diff);
 8002d5a:	f107 0308 	add.w	r3, r7, #8
 8002d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d60:	4918      	ldr	r1, [pc, #96]	; (8002dc4 <Encoder+0xf0>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f008 fa4a 	bl	800b1fc <siprintf>
			OLED_ShowString(10, 20, hello);
 8002d68:	f107 0308 	add.w	r3, r7, #8
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2114      	movs	r1, #20
 8002d70:	200a      	movs	r0, #10
 8002d72:	f000 fd89 	bl	8003888 <OLED_ShowString>
//			HAL_UART_Transmit(&huart3, hello, strlen((char*)hello), HAL_MAX_DELAY);
			dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <Encoder+0xec>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	83fb      	strh	r3, [r7, #30]
			sprintf(hello, "Dir:%5d\0", dir);
 8002d8c:	8bfa      	ldrh	r2, [r7, #30]
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	490d      	ldr	r1, [pc, #52]	; (8002dc8 <Encoder+0xf4>)
 8002d94:	4618      	mov	r0, r3
 8002d96:	f008 fa31 	bl	800b1fc <siprintf>
			OLED_ShowString(10, 30, hello);
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	461a      	mov	r2, r3
 8002da0:	211e      	movs	r1, #30
 8002da2:	200a      	movs	r0, #10
 8002da4:	f000 fd70 	bl	8003888 <OLED_ShowString>
			cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <Encoder+0xec>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
			tick = HAL_GetTick();
 8002db0:	f001 f98e 	bl	80040d0 <HAL_GetTick>
 8002db4:	6278      	str	r0, [r7, #36]	; 0x24
		}
		osDelay(1);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f005 fa34 	bl	8008224 <osDelay>
		if (HAL_GetTick() - tick > 1000L) {
 8002dbc:	e799      	b.n	8002cf2 <Encoder+0x1e>
 8002dbe:	bf00      	nop
 8002dc0:	20004b90 	.word	0x20004b90
 8002dc4:	0800cd54 	.word	0x0800cd54
 8002dc8:	0800cd60 	.word	0x0800cd60

08002dcc <Display>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display */
	uint8_t display_buf[20] = "Hello World!\0";
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <Display+0x68>)
 8002dd6:	f107 040c 	add.w	r4, r7, #12
 8002dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ddc:	c407      	stmia	r4!, {r0, r1, r2}
 8002dde:	8023      	strh	r3, [r4, #0]
 8002de0:	f107 031a 	add.w	r3, r7, #26
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	809a      	strh	r2, [r3, #4]
	/* Infinite loop */
	for (;;) {
		sprintf(display_buf, "%s\0", aRxBuffer);
 8002dea:	f107 030c 	add.w	r3, r7, #12
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <Display+0x6c>)
 8002df0:	4912      	ldr	r1, [pc, #72]	; (8002e3c <Display+0x70>)
 8002df2:	4618      	mov	r0, r3
 8002df4:	f008 fa02 	bl	800b1fc <siprintf>
		OLED_ShowString(10, 10, display_buf);
 8002df8:	f107 030c 	add.w	r3, r7, #12
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	210a      	movs	r1, #10
 8002e00:	200a      	movs	r0, #10
 8002e02:	f000 fd41 	bl	8003888 <OLED_ShowString>

		// IR display
		sprintf(display_buf, "%hu\r\n", IR_READ);
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <Display+0x74>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	490d      	ldr	r1, [pc, #52]	; (8002e44 <Display+0x78>)
 8002e10:	4618      	mov	r0, r3
 8002e12:	f008 f9f3 	bl	800b1fc <siprintf>
		OLED_ShowString(10, 40, display_buf);
 8002e16:	f107 030c 	add.w	r3, r7, #12
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2128      	movs	r1, #40	; 0x28
 8002e1e:	200a      	movs	r0, #10
 8002e20:	f000 fd32 	bl	8003888 <OLED_ShowString>

		OLED_Refresh_Gram();
 8002e24:	f000 fbbc 	bl	80035a0 <OLED_Refresh_Gram>
		osDelay(1000);
 8002e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e2c:	f005 f9fa 	bl	8008224 <osDelay>
		sprintf(display_buf, "%s\0", aRxBuffer);
 8002e30:	e7db      	b.n	8002dea <Display+0x1e>
 8002e32:	bf00      	nop
 8002e34:	0800cd78 	.word	0x0800cd78
 8002e38:	20004b7c 	.word	0x20004b7c
 8002e3c:	0800cd6c 	.word	0x0800cd6c
 8002e40:	20000000 	.word	0x20000000
 8002e44:	0800cd70 	.word	0x0800cd70

08002e48 <Gyroscope>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Gyroscope */
void Gyroscope(void *argument)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	int16_t magdata_int[3];
	float magdata[3];
//	uint8_t buf[200];
	uint8_t ch;

	LL_mDelay(1000);
 8002e50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e54:	f005 f8b0 	bl	8007fb8 <LL_mDelay>
	printf("start\r\n");
 8002e58:	4829      	ldr	r0, [pc, #164]	; (8002f00 <Gyroscope+0xb8>)
 8002e5a:	f008 f9c7 	bl	800b1ec <puts>
	init_ICM20948(&icm20948, I2C1);
 8002e5e:	4929      	ldr	r1, [pc, #164]	; (8002f04 <Gyroscope+0xbc>)
 8002e60:	4829      	ldr	r0, [pc, #164]	; (8002f08 <Gyroscope+0xc0>)
 8002e62:	f7fe fb1b 	bl	800149c <init_ICM20948>
	printf("%.2X\r\n", ICM_who_am_i(&icm20948));
 8002e66:	4828      	ldr	r0, [pc, #160]	; (8002f08 <Gyroscope+0xc0>)
 8002e68:	f7fe fb00 	bl	800146c <ICM_who_am_i>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4826      	ldr	r0, [pc, #152]	; (8002f0c <Gyroscope+0xc4>)
 8002e72:	f008 f935 	bl	800b0e0 <iprintf>
	init_AK09916(&icm20948);
 8002e76:	4824      	ldr	r0, [pc, #144]	; (8002f08 <Gyroscope+0xc0>)
 8002e78:	f7fe ffdb 	bl	8001e32 <init_AK09916>
	printf("%.2X\r\n", AK_Company_ID(&icm20948));
 8002e7c:	4822      	ldr	r0, [pc, #136]	; (8002f08 <Gyroscope+0xc0>)
 8002e7e:	f7fe ffbe 	bl	8001dfe <AK_Company_ID>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4619      	mov	r1, r3
 8002e86:	4821      	ldr	r0, [pc, #132]	; (8002f0c <Gyroscope+0xc4>)
 8002e88:	f008 f92a 	bl	800b0e0 <iprintf>
	printf("%.2X\r\n", AK_Device_ID(&icm20948));
 8002e8c:	481e      	ldr	r0, [pc, #120]	; (8002f08 <Gyroscope+0xc0>)
 8002e8e:	f7fe ffc3 	bl	8001e18 <AK_Device_ID>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4619      	mov	r1, r3
 8002e96:	481d      	ldr	r0, [pc, #116]	; (8002f0c <Gyroscope+0xc4>)
 8002e98:	f008 f922 	bl	800b0e0 <iprintf>
	ICM_Gyrocali(&icm20948);
 8002e9c:	481a      	ldr	r0, [pc, #104]	; (8002f08 <Gyroscope+0xc0>)
 8002e9e:	f7fe fbe3 	bl	8001668 <ICM_Gyrocali>
	ICM_Angcali(&icm20948);
 8002ea2:	4819      	ldr	r0, [pc, #100]	; (8002f08 <Gyroscope+0xc0>)
 8002ea4:	f7fe fc7c 	bl	80017a0 <ICM_Angcali>

	ch = 'R';
 8002ea8:	2352      	movs	r3, #82	; 0x52
 8002eaa:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, 0xFFFF);
 8002eac:	f107 010b 	add.w	r1, r7, #11
 8002eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4816      	ldr	r0, [pc, #88]	; (8002f10 <Gyroscope+0xc8>)
 8002eb8:	f003 fd29 	bl	800690e <HAL_UART_Transmit>

	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8002ebc:	2064      	movs	r0, #100	; 0x64
 8002ebe:	f005 f9b1 	bl	8008224 <osDelay>
		ICM_ComplementaryFilter(&icm20948);
 8002ec2:	4811      	ldr	r0, [pc, #68]	; (8002f08 <Gyroscope+0xc0>)
 8002ec4:	f7fe fe08 	bl	8001ad8 <ICM_ComplementaryFilter>
		AK_ReadData(&icm20948, magdata, magdata_int);
 8002ec8:	f107 0218 	add.w	r2, r7, #24
 8002ecc:	f107 030c 	add.w	r3, r7, #12
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	480d      	ldr	r0, [pc, #52]	; (8002f08 <Gyroscope+0xc0>)
 8002ed4:	f7fe ffbe 	bl	8001e54 <AK_ReadData>
//		sprintf((char*) buf, "ptc:%.2f rol:%.2f yaw:%.2f\n\r", icm20948.pitch,
//				icm20948.roll, icm20948.yaw);
//		HAL_UART_Transmit(&huart3, buf, strlen((char*) buf), HAL_MAX_DELAY);

		// write, make sure that other tasks are not reading
		xSemaphoreTake(Mutex, portMAX_DELAY);
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <Gyroscope+0xcc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f005 fe8d 	bl	8008c00 <xQueueSemaphoreTake>
		YAW = icm20948.yaw;
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <Gyroscope+0xc0>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <Gyroscope+0xd0>)
 8002eec:	6013      	str	r3, [r2, #0]
		xSemaphoreGive(Mutex);
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <Gyroscope+0xcc>)
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f005 fc08 	bl	800870c <xQueueGenericSend>
		osDelay(100);
 8002efc:	e7de      	b.n	8002ebc <Gyroscope+0x74>
 8002efe:	bf00      	nop
 8002f00:	0800cd8c 	.word	0x0800cd8c
 8002f04:	40005400 	.word	0x40005400
 8002f08:	200049c0 	.word	0x200049c0
 8002f0c:	0800cd94 	.word	0x0800cd94
 8002f10:	20004a58 	.word	0x20004a58
 8002f14:	2000009c 	.word	0x2000009c
 8002f18:	200000a0 	.word	0x200000a0

08002f1c <Obstacle_Straight_Move>:
	}
  /* USER CODE END Gyroscope */
}

//IR(hadc1);
char Obstacle_Straight_Move() {
 8002f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1e:	b091      	sub	sp, #68	; 0x44
 8002f20:	af0e      	add	r7, sp, #56	; 0x38

	uint16_t pwmVal = 1200;
 8002f22:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002f26:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4833      	ldr	r0, [pc, #204]	; (8002ff8 <Obstacle_Straight_Move+0xdc>)
 8002f2c:	f002 fd3e 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002f30:	2104      	movs	r1, #4
 8002f32:	4831      	ldr	r0, [pc, #196]	; (8002ff8 <Obstacle_Straight_Move+0xdc>)
 8002f34:	f002 fd3a 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002f38:	210c      	movs	r1, #12
 8002f3a:	4830      	ldr	r0, [pc, #192]	; (8002ffc <Obstacle_Straight_Move+0xe0>)
 8002f3c:	f002 fd36 	bl	80059ac <HAL_TIM_PWM_Start>

//	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);

//	int16_t cnt;

	int dist = IR(hadc1);
 8002f40:	4e2f      	ldr	r6, [pc, #188]	; (8003000 <Obstacle_Straight_Move+0xe4>)
 8002f42:	466d      	mov	r5, sp
 8002f44:	f106 0410 	add.w	r4, r6, #16
 8002f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f5c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f60:	f7ff fc4a 	bl	80027f8 <IR>
 8002f64:	6038      	str	r0, [r7, #0]

	for (;;) {
		htim1.Instance->CCR4 = 148;	//center
 8002f66:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <Obstacle_Straight_Move+0xe0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2294      	movs	r2, #148	; 0x94
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40

		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2104      	movs	r1, #4
 8002f72:	4824      	ldr	r0, [pc, #144]	; (8003004 <Obstacle_Straight_Move+0xe8>)
 8002f74:	f001 ffe8 	bl	8004f48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2108      	movs	r1, #8
 8002f7c:	4821      	ldr	r0, [pc, #132]	; (8003004 <Obstacle_Straight_Move+0xe8>)
 8002f7e:	f001 ffe3 	bl	8004f48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002f82:	2201      	movs	r2, #1
 8002f84:	2120      	movs	r1, #32
 8002f86:	481f      	ldr	r0, [pc, #124]	; (8003004 <Obstacle_Straight_Move+0xe8>)
 8002f88:	f001 ffde 	bl	8004f48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2110      	movs	r1, #16
 8002f90:	481c      	ldr	r0, [pc, #112]	; (8003004 <Obstacle_Straight_Move+0xe8>)
 8002f92:	f001 ffd9 	bl	8004f48 <HAL_GPIO_WritePin>

		osDelay(10);
 8002f96:	200a      	movs	r0, #10
 8002f98:	f005 f944 	bl	8008224 <osDelay>
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8002f9c:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <Obstacle_Straight_Move+0xdc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	88fa      	ldrh	r2, [r7, #6]
 8002fa2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 8002fa4:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <Obstacle_Straight_Move+0xdc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	88fa      	ldrh	r2, [r7, #6]
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38

		if (IR(hadc1) < 1300)
 8002fac:	4e14      	ldr	r6, [pc, #80]	; (8003000 <Obstacle_Straight_Move+0xe4>)
 8002fae:	466d      	mov	r5, sp
 8002fb0:	f106 0410 	add.w	r4, r6, #16
 8002fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002fcc:	f7ff fc14 	bl	80027f8 <IR>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f240 5213 	movw	r2, #1299	; 0x513
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	dd00      	ble.n	8002fdc <Obstacle_Straight_Move+0xc0>
		htim1.Instance->CCR4 = 148;	//center
 8002fda:	e7c4      	b.n	8002f66 <Obstacle_Straight_Move+0x4a>
			break;
 8002fdc:	bf00      	nop
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <Obstacle_Straight_Move+0xdc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <Obstacle_Straight_Move+0xdc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2200      	movs	r2, #0
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38

	return 'R';
 8002fee:	2352      	movs	r3, #82	; 0x52
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff8:	20004a10 	.word	0x20004a10
 8002ffc:	20004b30 	.word	0x20004b30
 8003000:	20004ae4 	.word	0x20004ae4
 8003004:	40020000 	.word	0x40020000

08003008 <Straight_Move>:

char Straight_Move(bool forward, int steps) {
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	71fb      	strb	r3, [r7, #7]

	uint16_t pwmVal = 1200;
 8003014:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8003018:	82fb      	strh	r3, [r7, #22]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800301a:	2100      	movs	r1, #0
 800301c:	484d      	ldr	r0, [pc, #308]	; (8003154 <Straight_Move+0x14c>)
 800301e:	f002 fcc5 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003022:	2104      	movs	r1, #4
 8003024:	484b      	ldr	r0, [pc, #300]	; (8003154 <Straight_Move+0x14c>)
 8003026:	f002 fcc1 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800302a:	210c      	movs	r1, #12
 800302c:	484a      	ldr	r0, [pc, #296]	; (8003158 <Straight_Move+0x150>)
 800302e:	f002 fcbd 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003032:	213c      	movs	r1, #60	; 0x3c
 8003034:	4849      	ldr	r0, [pc, #292]	; (800315c <Straight_Move+0x154>)
 8003036:	f002 fe27 	bl	8005c88 <HAL_TIM_Encoder_Start>

	int16_t cnt1, cnt2;
	int target;
	cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 800303a:	4b48      	ldr	r3, [pc, #288]	; (800315c <Straight_Move+0x154>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	82bb      	strh	r3, [r7, #20]
	for (;;) {
		htim1.Instance->CCR4 = 148;	//center
 8003042:	4b45      	ldr	r3, [pc, #276]	; (8003158 <Straight_Move+0x150>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2294      	movs	r2, #148	; 0x94
 8003048:	641a      	str	r2, [r3, #64]	; 0x40

		if (forward == true) {
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d014      	beq.n	800307a <Straight_Move+0x72>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8003050:	2201      	movs	r2, #1
 8003052:	2104      	movs	r1, #4
 8003054:	4842      	ldr	r0, [pc, #264]	; (8003160 <Straight_Move+0x158>)
 8003056:	f001 ff77 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800305a:	2200      	movs	r2, #0
 800305c:	2108      	movs	r1, #8
 800305e:	4840      	ldr	r0, [pc, #256]	; (8003160 <Straight_Move+0x158>)
 8003060:	f001 ff72 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8003064:	2201      	movs	r2, #1
 8003066:	2120      	movs	r1, #32
 8003068:	483d      	ldr	r0, [pc, #244]	; (8003160 <Straight_Move+0x158>)
 800306a:	f001 ff6d 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800306e:	2200      	movs	r2, #0
 8003070:	2110      	movs	r1, #16
 8003072:	483b      	ldr	r0, [pc, #236]	; (8003160 <Straight_Move+0x158>)
 8003074:	f001 ff68 	bl	8004f48 <HAL_GPIO_WritePin>
 8003078:	e013      	b.n	80030a2 <Straight_Move+0x9a>
		} else {
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800307a:	2201      	movs	r2, #1
 800307c:	2108      	movs	r1, #8
 800307e:	4838      	ldr	r0, [pc, #224]	; (8003160 <Straight_Move+0x158>)
 8003080:	f001 ff62 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003084:	2200      	movs	r2, #0
 8003086:	2104      	movs	r1, #4
 8003088:	4835      	ldr	r0, [pc, #212]	; (8003160 <Straight_Move+0x158>)
 800308a:	f001 ff5d 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800308e:	2201      	movs	r2, #1
 8003090:	2110      	movs	r1, #16
 8003092:	4833      	ldr	r0, [pc, #204]	; (8003160 <Straight_Move+0x158>)
 8003094:	f001 ff58 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8003098:	2200      	movs	r2, #0
 800309a:	2120      	movs	r1, #32
 800309c:	4830      	ldr	r0, [pc, #192]	; (8003160 <Straight_Move+0x158>)
 800309e:	f001 ff53 	bl	8004f48 <HAL_GPIO_WritePin>
		}

		osDelay(10);
 80030a2:	200a      	movs	r0, #10
 80030a4:	f005 f8be 	bl	8008224 <osDelay>
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 80030a8:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <Straight_Move+0x14c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	8afa      	ldrh	r2, [r7, #22]
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 80030b0:	4b28      	ldr	r3, [pc, #160]	; (8003154 <Straight_Move+0x14c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	8afa      	ldrh	r2, [r7, #22]
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38

		target = 370*steps - 48;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	3b30      	subs	r3, #48	; 0x30
 80030c4:	613b      	str	r3, [r7, #16]
		cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 80030c6:	4b25      	ldr	r3, [pc, #148]	; (800315c <Straight_Move+0x154>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	81fb      	strh	r3, [r7, #14]

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <Straight_Move+0x154>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d110      	bne.n	80030fe <Straight_Move+0xf6>
			if ((cnt1-cnt2) >= target) {
 80030dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80030e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	dd19      	ble.n	8003120 <Straight_Move+0x118>
//				if (cnt > target/2 && pwmVal < 2000)
//					pwmVal += 40;
//				else if (cnt < target/2 && pwmVal > 1200)
//					pwmVal -= 40;

				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <Straight_Move+0x14c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	8afa      	ldrh	r2, [r7, #22]
 80030f2:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 80030f4:	4b17      	ldr	r3, [pc, #92]	; (8003154 <Straight_Move+0x14c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	8afa      	ldrh	r2, [r7, #22]
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38
 80030fc:	e7a1      	b.n	8003042 <Straight_Move+0x3a>
			}
		}
		else {
			if ((cnt2-cnt1) >= target) {
 80030fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003102:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	429a      	cmp	r2, r3
 800310c:	dd0a      	ble.n	8003124 <Straight_Move+0x11c>
//				if (cnt < target/2 && pwmVal < 2000)
//					pwmVal += 40;
//				else if (cnt > target/2 && pwmVal > 1200)
//					pwmVal -= 40;

				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <Straight_Move+0x14c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	8afa      	ldrh	r2, [r7, #22]
 8003114:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <Straight_Move+0x14c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	8afa      	ldrh	r2, [r7, #22]
 800311c:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR4 = 148;	//center
 800311e:	e790      	b.n	8003042 <Straight_Move+0x3a>
				break;
 8003120:	bf00      	nop
 8003122:	e000      	b.n	8003126 <Straight_Move+0x11e>
				break;
 8003124:	bf00      	nop
			}
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <Straight_Move+0x14c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <Straight_Move+0x14c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	639a      	str	r2, [r3, #56]	; 0x38

	// Reset Timer Val
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <Straight_Move+0x154>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f06f 0201 	mvn.w	r2, #1
 800313e:	611a      	str	r2, [r3, #16]
	TIM2->CNT = 0;
 8003140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003144:	2200      	movs	r2, #0
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
	return 'R';
 8003148:	2352      	movs	r3, #82	; 0x52
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20004a10 	.word	0x20004a10
 8003158:	20004b30 	.word	0x20004b30
 800315c:	20004a9c 	.word	0x20004a9c
 8003160:	40020000 	.word	0x40020000

08003164 <Turning>:
//	return 'R';
//}


// For turning with encoder
char Turning(bool forward, bool left, int angle) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b08c      	sub	sp, #48	; 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	603a      	str	r2, [r7, #0]
 800316e:	71fb      	strb	r3, [r7, #7]
 8003170:	460b      	mov	r3, r1
 8003172:	71bb      	strb	r3, [r7, #6]
	uint16_t pwmVal = 1200;
 8003174:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8003178:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t buf[20];
	int16_t cnt;
	float yaw = 0;
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int target;
	bool stopTurning = false;
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	// Reset Timer Val
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8003186:	4b61      	ldr	r3, [pc, #388]	; (800330c <Turning+0x1a8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 0201 	mvn.w	r2, #1
 800318e:	611a      	str	r2, [r3, #16]
	TIM2->CNT = 0;
 8003190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003194:	2200      	movs	r2, #0
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003198:	2100      	movs	r1, #0
 800319a:	485d      	ldr	r0, [pc, #372]	; (8003310 <Turning+0x1ac>)
 800319c:	f002 fc06 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80031a0:	2104      	movs	r1, #4
 80031a2:	485b      	ldr	r0, [pc, #364]	; (8003310 <Turning+0x1ac>)
 80031a4:	f002 fc02 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80031a8:	210c      	movs	r1, #12
 80031aa:	485a      	ldr	r0, [pc, #360]	; (8003314 <Turning+0x1b0>)
 80031ac:	f002 fbfe 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80031b0:	213c      	movs	r1, #60	; 0x3c
 80031b2:	4856      	ldr	r0, [pc, #344]	; (800330c <Turning+0x1a8>)
 80031b4:	f002 fd68 	bl	8005c88 <HAL_TIM_Encoder_Start>

	if (left == true) {
 80031b8:	79bb      	ldrb	r3, [r7, #6]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00e      	beq.n	80031dc <Turning+0x78>
		htim1.Instance->CCR4 = 100; // Turning Left
 80031be:	4b55      	ldr	r3, [pc, #340]	; (8003314 <Turning+0x1b0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2264      	movs	r2, #100	; 0x64
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
		if (forward == true)
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <Turning+0x70>
			target = 1825;
 80031cc:	f240 7321 	movw	r3, #1825	; 0x721
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d2:	e011      	b.n	80031f8 <Turning+0x94>
		else
			target = 1835;
 80031d4:	f240 732b 	movw	r3, #1835	; 0x72b
 80031d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031da:	e00d      	b.n	80031f8 <Turning+0x94>
	} else {
		htim1.Instance->CCR4 = 230; // Turning Right
 80031dc:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <Turning+0x1b0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	22e6      	movs	r2, #230	; 0xe6
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40
		if (forward == true)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <Turning+0x8e>
			target = 1825;
 80031ea:	f240 7321 	movw	r3, #1825	; 0x721
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f0:	e002      	b.n	80031f8 <Turning+0x94>
		else
			target = 1835;
 80031f2:	f240 732b 	movw	r3, #1835	; 0x72b
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	for (;;) {
		xSemaphoreTake(Mutex, portMAX_DELAY);
 80031f8:	4b47      	ldr	r3, [pc, #284]	; (8003318 <Turning+0x1b4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003200:	4618      	mov	r0, r3
 8003202:	f005 fcfd 	bl	8008c00 <xQueueSemaphoreTake>
		if (yaw == 0)
 8003206:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800320a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	d102      	bne.n	800321a <Turning+0xb6>
			yaw = YAW;
 8003214:	4b41      	ldr	r3, [pc, #260]	; (800331c <Turning+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
		xSemaphoreGive(Mutex);
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <Turning+0x1b4>)
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	2300      	movs	r3, #0
 8003220:	2200      	movs	r2, #0
 8003222:	2100      	movs	r1, #0
 8003224:	f005 fa72 	bl	800870c <xQueueGenericSend>

		if (forward == true) {
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d014      	beq.n	8003258 <Turning+0xf4>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800322e:	2201      	movs	r2, #1
 8003230:	2104      	movs	r1, #4
 8003232:	483b      	ldr	r0, [pc, #236]	; (8003320 <Turning+0x1bc>)
 8003234:	f001 fe88 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8003238:	2200      	movs	r2, #0
 800323a:	2108      	movs	r1, #8
 800323c:	4838      	ldr	r0, [pc, #224]	; (8003320 <Turning+0x1bc>)
 800323e:	f001 fe83 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8003242:	2201      	movs	r2, #1
 8003244:	2120      	movs	r1, #32
 8003246:	4836      	ldr	r0, [pc, #216]	; (8003320 <Turning+0x1bc>)
 8003248:	f001 fe7e 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800324c:	2200      	movs	r2, #0
 800324e:	2110      	movs	r1, #16
 8003250:	4833      	ldr	r0, [pc, #204]	; (8003320 <Turning+0x1bc>)
 8003252:	f001 fe79 	bl	8004f48 <HAL_GPIO_WritePin>
 8003256:	e013      	b.n	8003280 <Turning+0x11c>
		} else {
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003258:	2201      	movs	r2, #1
 800325a:	2108      	movs	r1, #8
 800325c:	4830      	ldr	r0, [pc, #192]	; (8003320 <Turning+0x1bc>)
 800325e:	f001 fe73 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003262:	2200      	movs	r2, #0
 8003264:	2104      	movs	r1, #4
 8003266:	482e      	ldr	r0, [pc, #184]	; (8003320 <Turning+0x1bc>)
 8003268:	f001 fe6e 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800326c:	2201      	movs	r2, #1
 800326e:	2110      	movs	r1, #16
 8003270:	482b      	ldr	r0, [pc, #172]	; (8003320 <Turning+0x1bc>)
 8003272:	f001 fe69 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8003276:	2200      	movs	r2, #0
 8003278:	2120      	movs	r1, #32
 800327a:	4829      	ldr	r0, [pc, #164]	; (8003320 <Turning+0x1bc>)
 800327c:	f001 fe64 	bl	8004f48 <HAL_GPIO_WritePin>
		}


		osDelay(500);
 8003280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003284:	f004 ffce 	bl	8008224 <osDelay>
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <Turning+0x1ac>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800328e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 8003290:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <Turning+0x1ac>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003296:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(10); // Move on top
 8003298:	200a      	movs	r0, #10
 800329a:	f004 ffc3 	bl	8008224 <osDelay>

		// for 90deg left turn
		cnt = __HAL_TIM_GET_COUNTER(&htim3);
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <Turning+0x1a8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	847b      	strh	r3, [r7, #34]	; 0x22

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <Turning+0x1a8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d106      	bne.n	80032c2 <Turning+0x15e>
			if (cnt <= 0-target) {
 80032b4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	425b      	negs	r3, r3
 80032bc:	429a      	cmp	r2, r3
 80032be:	dc9b      	bgt.n	80031f8 <Turning+0x94>
				break;
 80032c0:	e006      	b.n	80032d0 <Turning+0x16c>
//				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
//				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
//			}
		}
		else {
			if (cnt >= target) {
 80032c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80032c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c8:	429a      	cmp	r2, r3
 80032ca:	dd00      	ble.n	80032ce <Turning+0x16a>
		xSemaphoreTake(Mutex, portMAX_DELAY);
 80032cc:	e794      	b.n	80031f8 <Turning+0x94>
				break;
 80032ce:	bf00      	nop
//				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
//			}
		}

	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <Turning+0x1ac>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2200      	movs	r2, #0
 80032d6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <Turning+0x1ac>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2200      	movs	r2, #0
 80032de:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(10);
 80032e0:	200a      	movs	r0, #10
 80032e2:	f004 ff9f 	bl	8008224 <osDelay>
	htim1.Instance->CCR4 = 148; // Forward
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <Turning+0x1b0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2294      	movs	r2, #148	; 0x94
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40

	// Reset Timer Val
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <Turning+0x1a8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f06f 0201 	mvn.w	r2, #1
 80032f6:	611a      	str	r2, [r3, #16]
	TIM2->CNT = 0;
 80032f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032fc:	2200      	movs	r2, #0
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24
	return 'R';
 8003300:	2352      	movs	r3, #82	; 0x52
}
 8003302:	4618      	mov	r0, r3
 8003304:	3730      	adds	r7, #48	; 0x30
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20004a9c 	.word	0x20004a9c
 8003310:	20004a10 	.word	0x20004a10
 8003314:	20004b30 	.word	0x20004b30
 8003318:	2000009c 	.word	0x2000009c
 800331c:	200000a0 	.word	0x200000a0
 8003320:	40020000 	.word	0x40020000
 8003324:	00000000 	.word	0x00000000

08003328 <U_Turn>:

char U_Turn() {
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
	uint16_t pwmVal = 1200;
 800332e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8003332:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t buf[20];
	int16_t cnt;
	float yaw = 0;
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
	float diff = 0;
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
	bool stopTurning = false;
 8003340:	2300      	movs	r3, #0
 8003342:	76fb      	strb	r3, [r7, #27]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003344:	2100      	movs	r1, #0
 8003346:	4848      	ldr	r0, [pc, #288]	; (8003468 <U_Turn+0x140>)
 8003348:	f002 fb30 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800334c:	2104      	movs	r1, #4
 800334e:	4846      	ldr	r0, [pc, #280]	; (8003468 <U_Turn+0x140>)
 8003350:	f002 fb2c 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003354:	210c      	movs	r1, #12
 8003356:	4845      	ldr	r0, [pc, #276]	; (800346c <U_Turn+0x144>)
 8003358:	f002 fb28 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800335c:	213c      	movs	r1, #60	; 0x3c
 800335e:	4844      	ldr	r0, [pc, #272]	; (8003470 <U_Turn+0x148>)
 8003360:	f002 fc92 	bl	8005c88 <HAL_TIM_Encoder_Start>

	for (;;) {
		xSemaphoreTake(Mutex, portMAX_DELAY);
 8003364:	4b43      	ldr	r3, [pc, #268]	; (8003474 <U_Turn+0x14c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f04f 31ff 	mov.w	r1, #4294967295
 800336c:	4618      	mov	r0, r3
 800336e:	f005 fc47 	bl	8008c00 <xQueueSemaphoreTake>
		if (yaw == 0)
 8003372:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003376:	eef5 7a40 	vcmp.f32	s15, #0.0
 800337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337e:	d102      	bne.n	8003386 <U_Turn+0x5e>
			yaw = YAW;
 8003380:	4b3d      	ldr	r3, [pc, #244]	; (8003478 <U_Turn+0x150>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
		xSemaphoreGive(Mutex);
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <U_Turn+0x14c>)
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	2300      	movs	r3, #0
 800338c:	2200      	movs	r2, #0
 800338e:	2100      	movs	r1, #0
 8003390:	f005 f9bc 	bl	800870c <xQueueGenericSend>

		htim1.Instance->CCR4 = 100; // Turning Left
 8003394:	4b35      	ldr	r3, [pc, #212]	; (800346c <U_Turn+0x144>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2264      	movs	r2, #100	; 0x64
 800339a:	641a      	str	r2, [r3, #64]	; 0x40


		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800339c:	2201      	movs	r2, #1
 800339e:	2104      	movs	r1, #4
 80033a0:	4836      	ldr	r0, [pc, #216]	; (800347c <U_Turn+0x154>)
 80033a2:	f001 fdd1 	bl	8004f48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80033a6:	2200      	movs	r2, #0
 80033a8:	2108      	movs	r1, #8
 80033aa:	4834      	ldr	r0, [pc, #208]	; (800347c <U_Turn+0x154>)
 80033ac:	f001 fdcc 	bl	8004f48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80033b0:	2201      	movs	r2, #1
 80033b2:	2120      	movs	r1, #32
 80033b4:	4831      	ldr	r0, [pc, #196]	; (800347c <U_Turn+0x154>)
 80033b6:	f001 fdc7 	bl	8004f48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2110      	movs	r1, #16
 80033be:	482f      	ldr	r0, [pc, #188]	; (800347c <U_Turn+0x154>)
 80033c0:	f001 fdc2 	bl	8004f48 <HAL_GPIO_WritePin>

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 80033c4:	4b28      	ldr	r3, [pc, #160]	; (8003468 <U_Turn+0x140>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80033ca:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 80033cc:	4b26      	ldr	r3, [pc, #152]	; (8003468 <U_Turn+0x140>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(10); // Move on top
 80033d4:	200a      	movs	r0, #10
 80033d6:	f004 ff25 	bl	8008224 <osDelay>

		// for 180deg left turn
		xSemaphoreTake(Mutex, portMAX_DELAY);
 80033da:	4b26      	ldr	r3, [pc, #152]	; (8003474 <U_Turn+0x14c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f04f 31ff 	mov.w	r1, #4294967295
 80033e2:	4618      	mov	r0, r3
 80033e4:	f005 fc0c 	bl	8008c00 <xQueueSemaphoreTake>
		diff = yaw - YAW;
 80033e8:	4b23      	ldr	r3, [pc, #140]	; (8003478 <U_Turn+0x150>)
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80033f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f6:	edc7 7a07 	vstr	s15, [r7, #28]
		xSemaphoreGive(Mutex);
 80033fa:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <U_Turn+0x14c>)
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	2300      	movs	r3, #0
 8003400:	2200      	movs	r2, #0
 8003402:	2100      	movs	r1, #0
 8003404:	f005 f982 	bl	800870c <xQueueGenericSend>
		if (diff >= 3.40) {
 8003408:	69f8      	ldr	r0, [r7, #28]
 800340a:	f7fd f895 	bl	8000538 <__aeabi_f2d>
 800340e:	a314      	add	r3, pc, #80	; (adr r3, 8003460 <U_Turn+0x138>)
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f7fd fb6e 	bl	8000af4 <__aeabi_dcmpge>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <U_Turn+0x100>
			// 1.68 is the gyroscope value for 90deg left turn
			htim1.Instance->CCR4 = 148;
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <U_Turn+0x144>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2294      	movs	r2, #148	; 0x94
 8003424:	641a      	str	r2, [r3, #64]	; 0x40

			break;
 8003426:	e000      	b.n	800342a <U_Turn+0x102>
		xSemaphoreTake(Mutex, portMAX_DELAY);
 8003428:	e79c      	b.n	8003364 <U_Turn+0x3c>
		}

	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <U_Turn+0x140>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <U_Turn+0x140>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(10);
 800343a:	200a      	movs	r0, #10
 800343c:	f004 fef2 	bl	8008224 <osDelay>

	// Reset Timer Val
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <U_Turn+0x148>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0201 	mvn.w	r2, #1
 8003448:	611a      	str	r2, [r3, #16]
	TIM2->CNT = 0;
 800344a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800344e:	2200      	movs	r2, #0
 8003450:	625a      	str	r2, [r3, #36]	; 0x24
	return 'R';
 8003452:	2352      	movs	r3, #82	; 0x52
}
 8003454:	4618      	mov	r0, r3
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	f3af 8000 	nop.w
 8003460:	33333333 	.word	0x33333333
 8003464:	400b3333 	.word	0x400b3333
 8003468:	20004a10 	.word	0x20004a10
 800346c:	20004b30 	.word	0x20004b30
 8003470:	20004b90 	.word	0x20004b90
 8003474:	2000009c 	.word	0x2000009c
 8003478:	200000a0 	.word	0x200000a0
 800347c:	40020000 	.word	0x40020000

08003480 <Spot_Rotate>:

char Spot_Rotate(bool left) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]

	uint16_t pwmVal = 1200;
 800348a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800348e:	81fb      	strh	r3, [r7, #14]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003490:	2100      	movs	r1, #0
 8003492:	483c      	ldr	r0, [pc, #240]	; (8003584 <Spot_Rotate+0x104>)
 8003494:	f002 fa8a 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003498:	2104      	movs	r1, #4
 800349a:	483a      	ldr	r0, [pc, #232]	; (8003584 <Spot_Rotate+0x104>)
 800349c:	f002 fa86 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80034a0:	210c      	movs	r1, #12
 80034a2:	4839      	ldr	r0, [pc, #228]	; (8003588 <Spot_Rotate+0x108>)
 80034a4:	f002 fa82 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80034a8:	213c      	movs	r1, #60	; 0x3c
 80034aa:	4838      	ldr	r0, [pc, #224]	; (800358c <Spot_Rotate+0x10c>)
 80034ac:	f002 fbec 	bl	8005c88 <HAL_TIM_Encoder_Start>

	int16_t cnt;

	for (;;) {
		htim1.Instance->CCR4 = 148;	//center
 80034b0:	4b35      	ldr	r3, [pc, #212]	; (8003588 <Spot_Rotate+0x108>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2294      	movs	r2, #148	; 0x94
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

		if (left == true) {
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d014      	beq.n	80034e8 <Spot_Rotate+0x68>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80034be:	2201      	movs	r2, #1
 80034c0:	2104      	movs	r1, #4
 80034c2:	4833      	ldr	r0, [pc, #204]	; (8003590 <Spot_Rotate+0x110>)
 80034c4:	f001 fd40 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2108      	movs	r1, #8
 80034cc:	4830      	ldr	r0, [pc, #192]	; (8003590 <Spot_Rotate+0x110>)
 80034ce:	f001 fd3b 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80034d2:	2201      	movs	r2, #1
 80034d4:	2110      	movs	r1, #16
 80034d6:	482e      	ldr	r0, [pc, #184]	; (8003590 <Spot_Rotate+0x110>)
 80034d8:	f001 fd36 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80034dc:	2200      	movs	r2, #0
 80034de:	2120      	movs	r1, #32
 80034e0:	482b      	ldr	r0, [pc, #172]	; (8003590 <Spot_Rotate+0x110>)
 80034e2:	f001 fd31 	bl	8004f48 <HAL_GPIO_WritePin>
 80034e6:	e013      	b.n	8003510 <Spot_Rotate+0x90>
		} else {
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80034e8:	2201      	movs	r2, #1
 80034ea:	2108      	movs	r1, #8
 80034ec:	4828      	ldr	r0, [pc, #160]	; (8003590 <Spot_Rotate+0x110>)
 80034ee:	f001 fd2b 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2104      	movs	r1, #4
 80034f6:	4826      	ldr	r0, [pc, #152]	; (8003590 <Spot_Rotate+0x110>)
 80034f8:	f001 fd26 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80034fc:	2201      	movs	r2, #1
 80034fe:	2120      	movs	r1, #32
 8003500:	4823      	ldr	r0, [pc, #140]	; (8003590 <Spot_Rotate+0x110>)
 8003502:	f001 fd21 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8003506:	2200      	movs	r2, #0
 8003508:	2110      	movs	r1, #16
 800350a:	4821      	ldr	r0, [pc, #132]	; (8003590 <Spot_Rotate+0x110>)
 800350c:	f001 fd1c 	bl	8004f48 <HAL_GPIO_WritePin>
		}

		osDelay(10);
 8003510:	200a      	movs	r0, #10
 8003512:	f004 fe87 	bl	8008224 <osDelay>
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); // Modify the comparison value for the duty cycle
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <Spot_Rotate+0x104>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	89fa      	ldrh	r2, [r7, #14]
 800351c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); // Modify the comparison value for the duty cycle
 800351e:	4b19      	ldr	r3, [pc, #100]	; (8003584 <Spot_Rotate+0x104>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	89fa      	ldrh	r2, [r7, #14]
 8003524:	639a      	str	r2, [r3, #56]	; 0x38

		cnt = __HAL_TIM_GET_COUNTER(&htim2);
 8003526:	4b19      	ldr	r3, [pc, #100]	; (800358c <Spot_Rotate+0x10c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	81bb      	strh	r3, [r7, #12]

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 800352e:	4b17      	ldr	r3, [pc, #92]	; (800358c <Spot_Rotate+0x10c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b10      	cmp	r3, #16
 800353a:	d105      	bne.n	8003548 <Spot_Rotate+0xc8>
			if (cnt <= -322) {
 800353c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003540:	f513 7fa1 	cmn.w	r3, #322	; 0x142
 8003544:	dcb4      	bgt.n	80034b0 <Spot_Rotate+0x30>
				break;
 8003546:	e006      	b.n	8003556 <Spot_Rotate+0xd6>
			}
		}
		else {
			if (cnt >= 322) {
 8003548:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800354c:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8003550:	da00      	bge.n	8003554 <Spot_Rotate+0xd4>
		htim1.Instance->CCR4 = 148;	//center
 8003552:	e7ad      	b.n	80034b0 <Spot_Rotate+0x30>
				break;
 8003554:	bf00      	nop
			}
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0); // Modify the comparison value for the duty cycle
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <Spot_Rotate+0x104>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2200      	movs	r2, #0
 800355c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0); // Modify the comparison value for the duty cycle
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <Spot_Rotate+0x104>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2200      	movs	r2, #0
 8003564:	639a      	str	r2, [r3, #56]	; 0x38

	// Reset Timer Val
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <Spot_Rotate+0x10c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f06f 0201 	mvn.w	r2, #1
 800356e:	611a      	str	r2, [r3, #16]
	TIM2->CNT = 0;
 8003570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003574:	2200      	movs	r2, #0
 8003576:	625a      	str	r2, [r3, #36]	; 0x24
	return 'R';
 8003578:	2352      	movs	r3, #82	; 0x52
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20004a10 	.word	0x20004a10
 8003588:	20004b30 	.word	0x20004b30
 800358c:	20004b90 	.word	0x20004b90
 8003590:	40020000 	.word	0x40020000

08003594 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003598:	b672      	cpsid	i
}
 800359a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800359c:	e7fe      	b.n	800359c <Error_Handler+0x8>
	...

080035a0 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80035a6:	2300      	movs	r3, #0
 80035a8:	71fb      	strb	r3, [r7, #7]
 80035aa:	e026      	b.n	80035fa <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	3b50      	subs	r3, #80	; 0x50
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f82b 	bl	8003610 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80035ba:	2100      	movs	r1, #0
 80035bc:	2000      	movs	r0, #0
 80035be:	f000 f827 	bl	8003610 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80035c2:	2100      	movs	r1, #0
 80035c4:	2010      	movs	r0, #16
 80035c6:	f000 f823 	bl	8003610 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80035ca:	2300      	movs	r3, #0
 80035cc:	71bb      	strb	r3, [r7, #6]
 80035ce:	e00d      	b.n	80035ec <OLED_Refresh_Gram+0x4c>
 80035d0:	79ba      	ldrb	r2, [r7, #6]
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	490d      	ldr	r1, [pc, #52]	; (800360c <OLED_Refresh_Gram+0x6c>)
 80035d6:	00d2      	lsls	r2, r2, #3
 80035d8:	440a      	add	r2, r1
 80035da:	4413      	add	r3, r2
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2101      	movs	r1, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f815 	bl	8003610 <OLED_WR_Byte>
 80035e6:	79bb      	ldrb	r3, [r7, #6]
 80035e8:	3301      	adds	r3, #1
 80035ea:	71bb      	strb	r3, [r7, #6]
 80035ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	daed      	bge.n	80035d0 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	3301      	adds	r3, #1
 80035f8:	71fb      	strb	r3, [r7, #7]
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	2b07      	cmp	r3, #7
 80035fe:	d9d5      	bls.n	80035ac <OLED_Refresh_Gram+0xc>
	}   
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20004bdc 	.word	0x20004bdc

08003610 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	460a      	mov	r2, r1
 800361a:	71fb      	strb	r3, [r7, #7]
 800361c:	4613      	mov	r3, r2
 800361e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8003620:	79bb      	ldrb	r3, [r7, #6]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8003626:	2201      	movs	r2, #1
 8003628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800362c:	481c      	ldr	r0, [pc, #112]	; (80036a0 <OLED_WR_Byte+0x90>)
 800362e:	f001 fc8b 	bl	8004f48 <HAL_GPIO_WritePin>
 8003632:	e005      	b.n	8003640 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8003634:	2200      	movs	r2, #0
 8003636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800363a:	4819      	ldr	r0, [pc, #100]	; (80036a0 <OLED_WR_Byte+0x90>)
 800363c:	f001 fc84 	bl	8004f48 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e01e      	b.n	8003684 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8003646:	2200      	movs	r2, #0
 8003648:	2120      	movs	r1, #32
 800364a:	4815      	ldr	r0, [pc, #84]	; (80036a0 <OLED_WR_Byte+0x90>)
 800364c:	f001 fc7c 	bl	8004f48 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8003650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003654:	2b00      	cmp	r3, #0
 8003656:	da05      	bge.n	8003664 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8003658:	2201      	movs	r2, #1
 800365a:	2140      	movs	r1, #64	; 0x40
 800365c:	4810      	ldr	r0, [pc, #64]	; (80036a0 <OLED_WR_Byte+0x90>)
 800365e:	f001 fc73 	bl	8004f48 <HAL_GPIO_WritePin>
 8003662:	e004      	b.n	800366e <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8003664:	2200      	movs	r2, #0
 8003666:	2140      	movs	r1, #64	; 0x40
 8003668:	480d      	ldr	r0, [pc, #52]	; (80036a0 <OLED_WR_Byte+0x90>)
 800366a:	f001 fc6d 	bl	8004f48 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800366e:	2201      	movs	r2, #1
 8003670:	2120      	movs	r1, #32
 8003672:	480b      	ldr	r0, [pc, #44]	; (80036a0 <OLED_WR_Byte+0x90>)
 8003674:	f001 fc68 	bl	8004f48 <HAL_GPIO_WritePin>
		dat<<=1;   
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	3301      	adds	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b07      	cmp	r3, #7
 8003688:	d9dd      	bls.n	8003646 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800368a:	2201      	movs	r2, #1
 800368c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003690:	4803      	ldr	r0, [pc, #12]	; (80036a0 <OLED_WR_Byte+0x90>)
 8003692:	f001 fc59 	bl	8004f48 <HAL_GPIO_WritePin>
} 
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000

080036a4 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80036aa:	2300      	movs	r3, #0
 80036ac:	71fb      	strb	r3, [r7, #7]
 80036ae:	e014      	b.n	80036da <OLED_Clear+0x36>
 80036b0:	2300      	movs	r3, #0
 80036b2:	71bb      	strb	r3, [r7, #6]
 80036b4:	e00a      	b.n	80036cc <OLED_Clear+0x28>
 80036b6:	79ba      	ldrb	r2, [r7, #6]
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	490c      	ldr	r1, [pc, #48]	; (80036ec <OLED_Clear+0x48>)
 80036bc:	00d2      	lsls	r2, r2, #3
 80036be:	440a      	add	r2, r1
 80036c0:	4413      	add	r3, r2
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	79bb      	ldrb	r3, [r7, #6]
 80036c8:	3301      	adds	r3, #1
 80036ca:	71bb      	strb	r3, [r7, #6]
 80036cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	daf0      	bge.n	80036b6 <OLED_Clear+0x12>
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	3301      	adds	r3, #1
 80036d8:	71fb      	strb	r3, [r7, #7]
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	2b07      	cmp	r3, #7
 80036de:	d9e7      	bls.n	80036b0 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80036e0:	f7ff ff5e 	bl	80035a0 <OLED_Refresh_Gram>
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20004bdc 	.word	0x20004bdc

080036f0 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
 80036fa:	460b      	mov	r3, r1
 80036fc:	71bb      	strb	r3, [r7, #6]
 80036fe:	4613      	mov	r3, r2
 8003700:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	2b00      	cmp	r3, #0
 800370c:	db41      	blt.n	8003792 <OLED_DrawPoint+0xa2>
 800370e:	79bb      	ldrb	r3, [r7, #6]
 8003710:	2b3f      	cmp	r3, #63	; 0x3f
 8003712:	d83e      	bhi.n	8003792 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003714:	79bb      	ldrb	r3, [r7, #6]
 8003716:	08db      	lsrs	r3, r3, #3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f1c3 0307 	rsb	r3, r3, #7
 800371e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003720:	79bb      	ldrb	r3, [r7, #6]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003728:	7b7b      	ldrb	r3, [r7, #13]
 800372a:	f1c3 0307 	rsb	r3, r3, #7
 800372e:	2201      	movs	r2, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8003736:	797b      	ldrb	r3, [r7, #5]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <OLED_DrawPoint+0x72>
 800373c:	79fa      	ldrb	r2, [r7, #7]
 800373e:	7bbb      	ldrb	r3, [r7, #14]
 8003740:	4917      	ldr	r1, [pc, #92]	; (80037a0 <OLED_DrawPoint+0xb0>)
 8003742:	00d2      	lsls	r2, r2, #3
 8003744:	440a      	add	r2, r1
 8003746:	4413      	add	r3, r2
 8003748:	7818      	ldrb	r0, [r3, #0]
 800374a:	79fa      	ldrb	r2, [r7, #7]
 800374c:	7bbb      	ldrb	r3, [r7, #14]
 800374e:	7bf9      	ldrb	r1, [r7, #15]
 8003750:	4301      	orrs	r1, r0
 8003752:	b2c8      	uxtb	r0, r1
 8003754:	4912      	ldr	r1, [pc, #72]	; (80037a0 <OLED_DrawPoint+0xb0>)
 8003756:	00d2      	lsls	r2, r2, #3
 8003758:	440a      	add	r2, r1
 800375a:	4413      	add	r3, r2
 800375c:	4602      	mov	r2, r0
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e018      	b.n	8003794 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003762:	79fa      	ldrb	r2, [r7, #7]
 8003764:	7bbb      	ldrb	r3, [r7, #14]
 8003766:	490e      	ldr	r1, [pc, #56]	; (80037a0 <OLED_DrawPoint+0xb0>)
 8003768:	00d2      	lsls	r2, r2, #3
 800376a:	440a      	add	r2, r1
 800376c:	4413      	add	r3, r2
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b25a      	sxtb	r2, r3
 8003772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003776:	43db      	mvns	r3, r3
 8003778:	b25b      	sxtb	r3, r3
 800377a:	4013      	ands	r3, r2
 800377c:	b259      	sxtb	r1, r3
 800377e:	79fa      	ldrb	r2, [r7, #7]
 8003780:	7bbb      	ldrb	r3, [r7, #14]
 8003782:	b2c8      	uxtb	r0, r1
 8003784:	4906      	ldr	r1, [pc, #24]	; (80037a0 <OLED_DrawPoint+0xb0>)
 8003786:	00d2      	lsls	r2, r2, #3
 8003788:	440a      	add	r2, r1
 800378a:	4413      	add	r3, r2
 800378c:	4602      	mov	r2, r0
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	e000      	b.n	8003794 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003792:	bf00      	nop
}
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20004bdc 	.word	0x20004bdc

080037a4 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4604      	mov	r4, r0
 80037ac:	4608      	mov	r0, r1
 80037ae:	4611      	mov	r1, r2
 80037b0:	461a      	mov	r2, r3
 80037b2:	4623      	mov	r3, r4
 80037b4:	71fb      	strb	r3, [r7, #7]
 80037b6:	4603      	mov	r3, r0
 80037b8:	71bb      	strb	r3, [r7, #6]
 80037ba:	460b      	mov	r3, r1
 80037bc:	717b      	strb	r3, [r7, #5]
 80037be:	4613      	mov	r3, r2
 80037c0:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80037c2:	79bb      	ldrb	r3, [r7, #6]
 80037c4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80037c6:	797b      	ldrb	r3, [r7, #5]
 80037c8:	3b20      	subs	r3, #32
 80037ca:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	73bb      	strb	r3, [r7, #14]
 80037d0:	e04d      	b.n	800386e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80037d2:	793b      	ldrb	r3, [r7, #4]
 80037d4:	2b0c      	cmp	r3, #12
 80037d6:	d10b      	bne.n	80037f0 <OLED_ShowChar+0x4c>
 80037d8:	797a      	ldrb	r2, [r7, #5]
 80037da:	7bb9      	ldrb	r1, [r7, #14]
 80037dc:	4828      	ldr	r0, [pc, #160]	; (8003880 <OLED_ShowChar+0xdc>)
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4403      	add	r3, r0
 80037e8:	440b      	add	r3, r1
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	73fb      	strb	r3, [r7, #15]
 80037ee:	e007      	b.n	8003800 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80037f0:	797a      	ldrb	r2, [r7, #5]
 80037f2:	7bbb      	ldrb	r3, [r7, #14]
 80037f4:	4923      	ldr	r1, [pc, #140]	; (8003884 <OLED_ShowChar+0xe0>)
 80037f6:	0112      	lsls	r2, r2, #4
 80037f8:	440a      	add	r2, r1
 80037fa:	4413      	add	r3, r2
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003800:	2300      	movs	r3, #0
 8003802:	737b      	strb	r3, [r7, #13]
 8003804:	e02d      	b.n	8003862 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	da07      	bge.n	800381e <OLED_ShowChar+0x7a>
 800380e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003812:	79b9      	ldrb	r1, [r7, #6]
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff ff6a 	bl	80036f0 <OLED_DrawPoint>
 800381c:	e00c      	b.n	8003838 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800381e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	79b9      	ldrb	r1, [r7, #6]
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ff5c 	bl	80036f0 <OLED_DrawPoint>
			temp<<=1;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
			y++;
 800383e:	79bb      	ldrb	r3, [r7, #6]
 8003840:	3301      	adds	r3, #1
 8003842:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003844:	79ba      	ldrb	r2, [r7, #6]
 8003846:	7b3b      	ldrb	r3, [r7, #12]
 8003848:	1ad2      	subs	r2, r2, r3
 800384a:	793b      	ldrb	r3, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d105      	bne.n	800385c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003850:	7b3b      	ldrb	r3, [r7, #12]
 8003852:	71bb      	strb	r3, [r7, #6]
				x++;
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	3301      	adds	r3, #1
 8003858:	71fb      	strb	r3, [r7, #7]
				break;
 800385a:	e005      	b.n	8003868 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800385c:	7b7b      	ldrb	r3, [r7, #13]
 800385e:	3301      	adds	r3, #1
 8003860:	737b      	strb	r3, [r7, #13]
 8003862:	7b7b      	ldrb	r3, [r7, #13]
 8003864:	2b07      	cmp	r3, #7
 8003866:	d9ce      	bls.n	8003806 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8003868:	7bbb      	ldrb	r3, [r7, #14]
 800386a:	3301      	adds	r3, #1
 800386c:	73bb      	strb	r3, [r7, #14]
 800386e:	7bba      	ldrb	r2, [r7, #14]
 8003870:	793b      	ldrb	r3, [r7, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	d3ad      	bcc.n	80037d2 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}
 8003880:	0800ce44 	.word	0x0800ce44
 8003884:	0800d2b8 	.word	0x0800d2b8

08003888 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af02      	add	r7, sp, #8
 800388e:	4603      	mov	r3, r0
 8003890:	603a      	str	r2, [r7, #0]
 8003892:	71fb      	strb	r3, [r7, #7]
 8003894:	460b      	mov	r3, r1
 8003896:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003898:	e01f      	b.n	80038da <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b7a      	cmp	r3, #122	; 0x7a
 800389e:	d904      	bls.n	80038aa <OLED_ShowString+0x22>
 80038a0:	2300      	movs	r3, #0
 80038a2:	71fb      	strb	r3, [r7, #7]
 80038a4:	79bb      	ldrb	r3, [r7, #6]
 80038a6:	3310      	adds	r3, #16
 80038a8:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80038aa:	79bb      	ldrb	r3, [r7, #6]
 80038ac:	2b3a      	cmp	r3, #58	; 0x3a
 80038ae:	d905      	bls.n	80038bc <OLED_ShowString+0x34>
 80038b0:	2300      	movs	r3, #0
 80038b2:	71fb      	strb	r3, [r7, #7]
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	71bb      	strb	r3, [r7, #6]
 80038b8:	f7ff fef4 	bl	80036a4 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	79b9      	ldrb	r1, [r7, #6]
 80038c2:	79f8      	ldrb	r0, [r7, #7]
 80038c4:	2301      	movs	r3, #1
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	230c      	movs	r3, #12
 80038ca:	f7ff ff6b 	bl	80037a4 <OLED_ShowChar>
        x+=8;
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	3308      	adds	r3, #8
 80038d2:	71fb      	strb	r3, [r7, #7]
        p++;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	3301      	adds	r3, #1
 80038d8:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1db      	bne.n	800389a <OLED_ShowString+0x12>
    }  
}	 
 80038e2:	bf00      	nop
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <OLED_Init>:

void OLED_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80038f0:	f001 fb44 	bl	8004f7c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80038f4:	4b41      	ldr	r3, [pc, #260]	; (80039fc <OLED_Init+0x110>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	4a40      	ldr	r2, [pc, #256]	; (80039fc <OLED_Init+0x110>)
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003900:	4b3e      	ldr	r3, [pc, #248]	; (80039fc <OLED_Init+0x110>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	4a3d      	ldr	r2, [pc, #244]	; (80039fc <OLED_Init+0x110>)
 8003906:	f023 0304 	bic.w	r3, r3, #4
 800390a:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800390c:	f001 fb4a 	bl	8004fa4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003910:	2200      	movs	r2, #0
 8003912:	2180      	movs	r1, #128	; 0x80
 8003914:	483a      	ldr	r0, [pc, #232]	; (8003a00 <OLED_Init+0x114>)
 8003916:	f001 fb17 	bl	8004f48 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800391a:	2064      	movs	r0, #100	; 0x64
 800391c:	f000 fbe4 	bl	80040e8 <HAL_Delay>
	OLED_RST_Set();
 8003920:	2201      	movs	r2, #1
 8003922:	2180      	movs	r1, #128	; 0x80
 8003924:	4836      	ldr	r0, [pc, #216]	; (8003a00 <OLED_Init+0x114>)
 8003926:	f001 fb0f 	bl	8004f48 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800392a:	2100      	movs	r1, #0
 800392c:	20ae      	movs	r0, #174	; 0xae
 800392e:	f7ff fe6f 	bl	8003610 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003932:	2100      	movs	r1, #0
 8003934:	20d5      	movs	r0, #213	; 0xd5
 8003936:	f7ff fe6b 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800393a:	2100      	movs	r1, #0
 800393c:	2050      	movs	r0, #80	; 0x50
 800393e:	f7ff fe67 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003942:	2100      	movs	r1, #0
 8003944:	20a8      	movs	r0, #168	; 0xa8
 8003946:	f7ff fe63 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800394a:	2100      	movs	r1, #0
 800394c:	203f      	movs	r0, #63	; 0x3f
 800394e:	f7ff fe5f 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003952:	2100      	movs	r1, #0
 8003954:	20d3      	movs	r0, #211	; 0xd3
 8003956:	f7ff fe5b 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800395a:	2100      	movs	r1, #0
 800395c:	2000      	movs	r0, #0
 800395e:	f7ff fe57 	bl	8003610 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003962:	2100      	movs	r1, #0
 8003964:	2040      	movs	r0, #64	; 0x40
 8003966:	f7ff fe53 	bl	8003610 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800396a:	2100      	movs	r1, #0
 800396c:	208d      	movs	r0, #141	; 0x8d
 800396e:	f7ff fe4f 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003972:	2100      	movs	r1, #0
 8003974:	2014      	movs	r0, #20
 8003976:	f7ff fe4b 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800397a:	2100      	movs	r1, #0
 800397c:	2020      	movs	r0, #32
 800397e:	f7ff fe47 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003982:	2100      	movs	r1, #0
 8003984:	2002      	movs	r0, #2
 8003986:	f7ff fe43 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800398a:	2100      	movs	r1, #0
 800398c:	20a1      	movs	r0, #161	; 0xa1
 800398e:	f7ff fe3f 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003992:	2100      	movs	r1, #0
 8003994:	20c0      	movs	r0, #192	; 0xc0
 8003996:	f7ff fe3b 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800399a:	2100      	movs	r1, #0
 800399c:	20da      	movs	r0, #218	; 0xda
 800399e:	f7ff fe37 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80039a2:	2100      	movs	r1, #0
 80039a4:	2012      	movs	r0, #18
 80039a6:	f7ff fe33 	bl	8003610 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80039aa:	2100      	movs	r1, #0
 80039ac:	2081      	movs	r0, #129	; 0x81
 80039ae:	f7ff fe2f 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80039b2:	2100      	movs	r1, #0
 80039b4:	20ef      	movs	r0, #239	; 0xef
 80039b6:	f7ff fe2b 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80039ba:	2100      	movs	r1, #0
 80039bc:	20d9      	movs	r0, #217	; 0xd9
 80039be:	f7ff fe27 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80039c2:	2100      	movs	r1, #0
 80039c4:	20f1      	movs	r0, #241	; 0xf1
 80039c6:	f7ff fe23 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80039ca:	2100      	movs	r1, #0
 80039cc:	20db      	movs	r0, #219	; 0xdb
 80039ce:	f7ff fe1f 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80039d2:	2100      	movs	r1, #0
 80039d4:	2030      	movs	r0, #48	; 0x30
 80039d6:	f7ff fe1b 	bl	8003610 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80039da:	2100      	movs	r1, #0
 80039dc:	20a4      	movs	r0, #164	; 0xa4
 80039de:	f7ff fe17 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80039e2:	2100      	movs	r1, #0
 80039e4:	20a6      	movs	r0, #166	; 0xa6
 80039e6:	f7ff fe13 	bl	8003610 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80039ea:	2100      	movs	r1, #0
 80039ec:	20af      	movs	r0, #175	; 0xaf
 80039ee:	f7ff fe0f 	bl	8003610 <OLED_WR_Byte>
	OLED_Clear(); 
 80039f2:	f7ff fe57 	bl	80036a4 <OLED_Clear>
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40021000 	.word	0x40021000

08003a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_MspInit+0x54>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <HAL_MspInit+0x54>)
 8003a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a18:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1a:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_MspInit+0x54>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a22:	607b      	str	r3, [r7, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_MspInit+0x54>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <HAL_MspInit+0x54>)
 8003a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a34:	6413      	str	r3, [r2, #64]	; 0x40
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_MspInit+0x54>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a42:	2200      	movs	r2, #0
 8003a44:	210f      	movs	r1, #15
 8003a46:	f06f 0001 	mvn.w	r0, #1
 8003a4a:	f001 f818 	bl	8004a7e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800

08003a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	; 0x28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <HAL_ADC_MspInit+0x7c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d127      	bne.n	8003ace <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	4b16      	ldr	r3, [pc, #88]	; (8003adc <HAL_ADC_MspInit+0x80>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	4a15      	ldr	r2, [pc, #84]	; (8003adc <HAL_ADC_MspInit+0x80>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8e:	4b13      	ldr	r3, [pc, #76]	; (8003adc <HAL_ADC_MspInit+0x80>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <HAL_ADC_MspInit+0x80>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <HAL_ADC_MspInit+0x80>)
 8003aa4:	f043 0304 	orr.w	r3, r3, #4
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <HAL_ADC_MspInit+0x80>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aba:	2303      	movs	r3, #3
 8003abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ac2:	f107 0314 	add.w	r3, r7, #20
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4805      	ldr	r0, [pc, #20]	; (8003ae0 <HAL_ADC_MspInit+0x84>)
 8003aca:	f001 f8a1 	bl	8004c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ace:	bf00      	nop
 8003ad0:	3728      	adds	r7, #40	; 0x28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40012000 	.word	0x40012000
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40020800 	.word	0x40020800

08003ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	60da      	str	r2, [r3, #12]
 8003afa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a23      	ldr	r2, [pc, #140]	; (8003b90 <HAL_TIM_Base_MspInit+0xac>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d10e      	bne.n	8003b24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <HAL_TIM_Base_MspInit+0xb0>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	4a21      	ldr	r2, [pc, #132]	; (8003b94 <HAL_TIM_Base_MspInit+0xb0>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6453      	str	r3, [r2, #68]	; 0x44
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <HAL_TIM_Base_MspInit+0xb0>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003b22:	e030      	b.n	8003b86 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_TIM_Base_MspInit+0xb4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d12b      	bne.n	8003b86 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_TIM_Base_MspInit+0xb0>)
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_TIM_Base_MspInit+0xb0>)
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <HAL_TIM_Base_MspInit+0xb0>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_TIM_Base_MspInit+0xb0>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <HAL_TIM_Base_MspInit+0xb0>)
 8003b54:	f043 0304 	orr.w	r3, r3, #4
 8003b58:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <HAL_TIM_Base_MspInit+0xb0>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003b66:	23c0      	movs	r3, #192	; 0xc0
 8003b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b72:	2300      	movs	r3, #0
 8003b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003b76:	2303      	movs	r3, #3
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7a:	f107 0314 	add.w	r3, r7, #20
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4806      	ldr	r0, [pc, #24]	; (8003b9c <HAL_TIM_Base_MspInit+0xb8>)
 8003b82:	f001 f845 	bl	8004c10 <HAL_GPIO_Init>
}
 8003b86:	bf00      	nop
 8003b88:	3728      	adds	r7, #40	; 0x28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40010400 	.word	0x40010400
 8003b9c:	40020800 	.word	0x40020800

08003ba0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08c      	sub	sp, #48	; 0x30
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba8:	f107 031c 	add.w	r3, r7, #28
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d14b      	bne.n	8003c5a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	4b3f      	ldr	r3, [pc, #252]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	4a3e      	ldr	r2, [pc, #248]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd2:	4b3c      	ldr	r3, [pc, #240]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	4b38      	ldr	r3, [pc, #224]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	4a37      	ldr	r2, [pc, #220]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6313      	str	r3, [r2, #48]	; 0x30
 8003bee:	4b35      	ldr	r3, [pc, #212]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	4b31      	ldr	r3, [pc, #196]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	4a30      	ldr	r2, [pc, #192]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c04:	f043 0302 	orr.w	r3, r3, #2
 8003c08:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c24:	2300      	movs	r3, #0
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2c:	f107 031c 	add.w	r3, r7, #28
 8003c30:	4619      	mov	r1, r3
 8003c32:	4825      	ldr	r0, [pc, #148]	; (8003cc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8003c34:	f000 ffec 	bl	8004c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c38:	2308      	movs	r3, #8
 8003c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c44:	2300      	movs	r3, #0
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4c:	f107 031c 	add.w	r3, r7, #28
 8003c50:	4619      	mov	r1, r3
 8003c52:	481e      	ldr	r0, [pc, #120]	; (8003ccc <HAL_TIM_Encoder_MspInit+0x12c>)
 8003c54:	f000 ffdc 	bl	8004c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003c58:	e030      	b.n	8003cbc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <HAL_TIM_Encoder_MspInit+0x130>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d12b      	bne.n	8003cbc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c6e:	f043 0302 	orr.w	r3, r3, #2
 8003c72:	6413      	str	r3, [r2, #64]	; 0x40
 8003c74:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c80:	2300      	movs	r3, #0
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	4a0e      	ldr	r2, [pc, #56]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c9c:	23c0      	movs	r3, #192	; 0xc0
 8003c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cac:	2302      	movs	r3, #2
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb0:	f107 031c 	add.w	r3, r7, #28
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8003cb8:	f000 ffaa 	bl	8004c10 <HAL_GPIO_Init>
}
 8003cbc:	bf00      	nop
 8003cbe:	3730      	adds	r7, #48	; 0x30
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40020000 	.word	0x40020000
 8003ccc:	40020400 	.word	0x40020400
 8003cd0:	40000400 	.word	0x40000400

08003cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <HAL_TIM_MspPostInit+0x68>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d11e      	bne.n	8003d34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <HAL_TIM_MspPostInit+0x6c>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	4a10      	ldr	r2, [pc, #64]	; (8003d40 <HAL_TIM_MspPostInit+0x6c>)
 8003d00:	f043 0310 	orr.w	r3, r3, #16
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <HAL_TIM_MspPostInit+0x6c>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003d12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d24:	2301      	movs	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4805      	ldr	r0, [pc, #20]	; (8003d44 <HAL_TIM_MspPostInit+0x70>)
 8003d30:	f000 ff6e 	bl	8004c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003d34:	bf00      	nop
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40021000 	.word	0x40021000

08003d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	f107 0314 	add.w	r3, r7, #20
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <HAL_UART_MspInit+0x94>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d134      	bne.n	8003dd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <HAL_UART_MspInit+0x98>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	4a1b      	ldr	r2, [pc, #108]	; (8003de0 <HAL_UART_MspInit+0x98>)
 8003d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d78:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7a:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <HAL_UART_MspInit+0x98>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <HAL_UART_MspInit+0x98>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <HAL_UART_MspInit+0x98>)
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	6313      	str	r3, [r2, #48]	; 0x30
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <HAL_UART_MspInit+0x98>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003da2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da8:	2302      	movs	r3, #2
 8003daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db0:	2303      	movs	r3, #3
 8003db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003db4:	2307      	movs	r3, #7
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003db8:	f107 0314 	add.w	r3, r7, #20
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4809      	ldr	r0, [pc, #36]	; (8003de4 <HAL_UART_MspInit+0x9c>)
 8003dc0:	f000 ff26 	bl	8004c10 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2105      	movs	r1, #5
 8003dc8:	2027      	movs	r0, #39	; 0x27
 8003dca:	f000 fe58 	bl	8004a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003dce:	2027      	movs	r0, #39	; 0x27
 8003dd0:	f000 fe71 	bl	8004ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003dd4:	bf00      	nop
 8003dd6:	3728      	adds	r7, #40	; 0x28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40004800 	.word	0x40004800
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40020800 	.word	0x40020800

08003de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dec:	e7fe      	b.n	8003dec <NMI_Handler+0x4>

08003dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003df2:	e7fe      	b.n	8003df2 <HardFault_Handler+0x4>

08003df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003df8:	e7fe      	b.n	8003df8 <MemManage_Handler+0x4>

08003dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dfe:	e7fe      	b.n	8003dfe <BusFault_Handler+0x4>

08003e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e04:	e7fe      	b.n	8003e04 <UsageFault_Handler+0x4>

08003e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e18:	f000 f946 	bl	80040a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003e1c:	f005 ffa0 	bl	8009d60 <xTaskGetSchedulerState>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d001      	beq.n	8003e2a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003e26:	f006 fe87 	bl	800ab38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e34:	4802      	ldr	r0, [pc, #8]	; (8003e40 <USART3_IRQHandler+0x10>)
 8003e36:	f002 fe2d 	bl	8006a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20004a58 	.word	0x20004a58

08003e44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e00a      	b.n	8003e6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e56:	f3af 8000 	nop.w
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	60ba      	str	r2, [r7, #8]
 8003e62:	b2ca      	uxtb	r2, r1
 8003e64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	dbf0      	blt.n	8003e56 <_read+0x12>
	}

return len;
 8003e74:	687b      	ldr	r3, [r7, #4]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e009      	b.n	8003ea4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	60ba      	str	r2, [r7, #8]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	dbf1      	blt.n	8003e90 <_write+0x12>
	}
	return len;
 8003eac:	687b      	ldr	r3, [r7, #4]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <_close>:

int _close(int file)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
	return -1;
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ede:	605a      	str	r2, [r3, #4]
	return 0;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <_isatty>:

int _isatty(int file)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
	return 1;
 8003ef6:	2301      	movs	r3, #1
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
	return 0;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f28:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <_sbrk+0x5c>)
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <_sbrk+0x60>)
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <_sbrk+0x64>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d102      	bne.n	8003f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <_sbrk+0x64>)
 8003f3e:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <_sbrk+0x68>)
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <_sbrk+0x64>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d207      	bcs.n	8003f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f50:	f007 f86c 	bl	800b02c <__errno>
 8003f54:	4603      	mov	r3, r0
 8003f56:	220c      	movs	r2, #12
 8003f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	e009      	b.n	8003f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <_sbrk+0x64>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <_sbrk+0x64>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <_sbrk+0x64>)
 8003f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f72:	68fb      	ldr	r3, [r7, #12]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20020000 	.word	0x20020000
 8003f80:	00000400 	.word	0x00000400
 8003f84:	200000a4 	.word	0x200000a4
 8003f88:	20005030 	.word	0x20005030

08003f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f90:	4b06      	ldr	r3, [pc, #24]	; (8003fac <SystemInit+0x20>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	4a05      	ldr	r2, [pc, #20]	; (8003fac <SystemInit+0x20>)
 8003f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fe8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fb4:	480d      	ldr	r0, [pc, #52]	; (8003fec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fb6:	490e      	ldr	r1, [pc, #56]	; (8003ff0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fb8:	4a0e      	ldr	r2, [pc, #56]	; (8003ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fbc:	e002      	b.n	8003fc4 <LoopCopyDataInit>

08003fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fc2:	3304      	adds	r3, #4

08003fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fc8:	d3f9      	bcc.n	8003fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fca:	4a0b      	ldr	r2, [pc, #44]	; (8003ff8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fcc:	4c0b      	ldr	r4, [pc, #44]	; (8003ffc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fd0:	e001      	b.n	8003fd6 <LoopFillZerobss>

08003fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fd4:	3204      	adds	r2, #4

08003fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fd8:	d3fb      	bcc.n	8003fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003fda:	f7ff ffd7 	bl	8003f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fde:	f007 f82b 	bl	800b038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fe2:	f7fe f801 	bl	8001fe8 <main>
  bx  lr    
 8003fe6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ff0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003ff4:	0800d968 	.word	0x0800d968
  ldr r2, =_sbss
 8003ff8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003ffc:	20005030 	.word	0x20005030

08004000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004000:	e7fe      	b.n	8004000 <ADC_IRQHandler>
	...

08004004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004008:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <HAL_Init+0x40>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a0d      	ldr	r2, [pc, #52]	; (8004044 <HAL_Init+0x40>)
 800400e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_Init+0x40>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <HAL_Init+0x40>)
 800401a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800401e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_Init+0x40>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a07      	ldr	r2, [pc, #28]	; (8004044 <HAL_Init+0x40>)
 8004026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800402c:	2003      	movs	r0, #3
 800402e:	f000 fd1b 	bl	8004a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004032:	200f      	movs	r0, #15
 8004034:	f000 f808 	bl	8004048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004038:	f7ff fce4 	bl	8003a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40023c00 	.word	0x40023c00

08004048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <HAL_InitTick+0x54>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <HAL_InitTick+0x58>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800405e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fd33 	bl	8004ad2 <HAL_SYSTICK_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e00e      	b.n	8004094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b0f      	cmp	r3, #15
 800407a:	d80a      	bhi.n	8004092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800407c:	2200      	movs	r2, #0
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	f04f 30ff 	mov.w	r0, #4294967295
 8004084:	f000 fcfb 	bl	8004a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004088:	4a06      	ldr	r2, [pc, #24]	; (80040a4 <HAL_InitTick+0x5c>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000004 	.word	0x20000004
 80040a0:	2000000c 	.word	0x2000000c
 80040a4:	20000008 	.word	0x20000008

080040a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040ac:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <HAL_IncTick+0x20>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_IncTick+0x24>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4413      	add	r3, r2
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_IncTick+0x24>)
 80040ba:	6013      	str	r3, [r2, #0]
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	2000000c 	.word	0x2000000c
 80040cc:	20004fdc 	.word	0x20004fdc

080040d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return uwTick;
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <HAL_GetTick+0x14>)
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20004fdc 	.word	0x20004fdc

080040e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040f0:	f7ff ffee 	bl	80040d0 <HAL_GetTick>
 80040f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d005      	beq.n	800410e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_Delay+0x44>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800410e:	bf00      	nop
 8004110:	f7ff ffde 	bl	80040d0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	429a      	cmp	r2, r3
 800411e:	d8f7      	bhi.n	8004110 <HAL_Delay+0x28>
  {
  }
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	2000000c 	.word	0x2000000c

08004130 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e033      	b.n	80041ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff fc84 	bl	8003a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	d118      	bne.n	80041a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004176:	f023 0302 	bic.w	r3, r3, #2
 800417a:	f043 0202 	orr.w	r2, r3, #2
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 faa4 	bl	80046d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f023 0303 	bic.w	r3, r3, #3
 8004196:	f043 0201 	orr.w	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
 800419e:	e001      	b.n	80041a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_Start+0x1a>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e0b2      	b.n	8004338 <HAL_ADC_Start+0x180>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d018      	beq.n	800421a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041f8:	4b52      	ldr	r3, [pc, #328]	; (8004344 <HAL_ADC_Start+0x18c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a52      	ldr	r2, [pc, #328]	; (8004348 <HAL_ADC_Start+0x190>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	0c9a      	lsrs	r2, r3, #18
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800420c:	e002      	b.n	8004214 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	3b01      	subs	r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f9      	bne.n	800420e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d17a      	bne.n	800431e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004252:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	d106      	bne.n	8004276 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	f023 0206 	bic.w	r2, r3, #6
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	645a      	str	r2, [r3, #68]	; 0x44
 8004274:	e002      	b.n	800427c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004284:	4b31      	ldr	r3, [pc, #196]	; (800434c <HAL_ADC_Start+0x194>)
 8004286:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004290:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	2b00      	cmp	r3, #0
 800429c:	d12a      	bne.n	80042f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a2b      	ldr	r2, [pc, #172]	; (8004350 <HAL_ADC_Start+0x198>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d015      	beq.n	80042d4 <HAL_ADC_Start+0x11c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a29      	ldr	r2, [pc, #164]	; (8004354 <HAL_ADC_Start+0x19c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d105      	bne.n	80042be <HAL_ADC_Start+0x106>
 80042b2:	4b26      	ldr	r3, [pc, #152]	; (800434c <HAL_ADC_Start+0x194>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a25      	ldr	r2, [pc, #148]	; (8004358 <HAL_ADC_Start+0x1a0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d136      	bne.n	8004336 <HAL_ADC_Start+0x17e>
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_ADC_Start+0x194>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d130      	bne.n	8004336 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d129      	bne.n	8004336 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042f0:	609a      	str	r2, [r3, #8]
 80042f2:	e020      	b.n	8004336 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a15      	ldr	r2, [pc, #84]	; (8004350 <HAL_ADC_Start+0x198>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d11b      	bne.n	8004336 <HAL_ADC_Start+0x17e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d114      	bne.n	8004336 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800431a:	609a      	str	r2, [r3, #8]
 800431c:	e00b      	b.n	8004336 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f043 0210 	orr.w	r2, r3, #16
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	f043 0201 	orr.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	20000004 	.word	0x20000004
 8004348:	431bde83 	.word	0x431bde83
 800434c:	40012300 	.word	0x40012300
 8004350:	40012000 	.word	0x40012000
 8004354:	40012100 	.word	0x40012100
 8004358:	40012200 	.word	0x40012200

0800435c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004378:	d113      	bne.n	80043a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004388:	d10b      	bne.n	80043a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f043 0220 	orr.w	r2, r3, #32
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e063      	b.n	800446a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80043a2:	f7ff fe95 	bl	80040d0 <HAL_GetTick>
 80043a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043a8:	e021      	b.n	80043ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d01d      	beq.n	80043ee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_ADC_PollForConversion+0x6c>
 80043b8:	f7ff fe8a 	bl	80040d0 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d212      	bcs.n	80043ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d00b      	beq.n	80043ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0204 	orr.w	r2, r3, #4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e03d      	b.n	800446a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d1d6      	bne.n	80043aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0212 	mvn.w	r2, #18
 8004404:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d123      	bne.n	8004468 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004424:	2b00      	cmp	r3, #0
 8004426:	d11f      	bne.n	8004468 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004440:	2b00      	cmp	r3, #0
 8004442:	d111      	bne.n	8004468 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f043 0201 	orr.w	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x1c>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e105      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x228>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b09      	cmp	r3, #9
 80044b6:	d925      	bls.n	8004504 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68d9      	ldr	r1, [r3, #12]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	4613      	mov	r3, r2
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	4413      	add	r3, r2
 80044cc:	3b1e      	subs	r3, #30
 80044ce:	2207      	movs	r2, #7
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43da      	mvns	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	400a      	ands	r2, r1
 80044dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68d9      	ldr	r1, [r3, #12]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	4618      	mov	r0, r3
 80044f0:	4603      	mov	r3, r0
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4403      	add	r3, r0
 80044f6:	3b1e      	subs	r3, #30
 80044f8:	409a      	lsls	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	e022      	b.n	800454a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6919      	ldr	r1, [r3, #16]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	4613      	mov	r3, r2
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	4413      	add	r3, r2
 8004518:	2207      	movs	r2, #7
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43da      	mvns	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	400a      	ands	r2, r1
 8004526:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6919      	ldr	r1, [r3, #16]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	4618      	mov	r0, r3
 800453a:	4603      	mov	r3, r0
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4403      	add	r3, r0
 8004540:	409a      	lsls	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b06      	cmp	r3, #6
 8004550:	d824      	bhi.n	800459c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	3b05      	subs	r3, #5
 8004564:	221f      	movs	r2, #31
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43da      	mvns	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	400a      	ands	r2, r1
 8004572:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	b29b      	uxth	r3, r3
 8004580:	4618      	mov	r0, r3
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	3b05      	subs	r3, #5
 800458e:	fa00 f203 	lsl.w	r2, r0, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	635a      	str	r2, [r3, #52]	; 0x34
 800459a:	e04c      	b.n	8004636 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b0c      	cmp	r3, #12
 80045a2:	d824      	bhi.n	80045ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	3b23      	subs	r3, #35	; 0x23
 80045b6:	221f      	movs	r2, #31
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43da      	mvns	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	400a      	ands	r2, r1
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	4618      	mov	r0, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	3b23      	subs	r3, #35	; 0x23
 80045e0:	fa00 f203 	lsl.w	r2, r0, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
 80045ec:	e023      	b.n	8004636 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	3b41      	subs	r3, #65	; 0x41
 8004600:	221f      	movs	r2, #31
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43da      	mvns	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	400a      	ands	r2, r1
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	4618      	mov	r0, r3
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	3b41      	subs	r3, #65	; 0x41
 800462a:	fa00 f203 	lsl.w	r2, r0, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004636:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <HAL_ADC_ConfigChannel+0x234>)
 8004638:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a21      	ldr	r2, [pc, #132]	; (80046c4 <HAL_ADC_ConfigChannel+0x238>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d109      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x1cc>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b12      	cmp	r3, #18
 800464a:	d105      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <HAL_ADC_ConfigChannel+0x238>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d123      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x21e>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b10      	cmp	r3, #16
 8004668:	d003      	beq.n	8004672 <HAL_ADC_ConfigChannel+0x1e6>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b11      	cmp	r3, #17
 8004670:	d11b      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b10      	cmp	r3, #16
 8004684:	d111      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004686:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <HAL_ADC_ConfigChannel+0x23c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a10      	ldr	r2, [pc, #64]	; (80046cc <HAL_ADC_ConfigChannel+0x240>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	0c9a      	lsrs	r2, r3, #18
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800469c:	e002      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f9      	bne.n	800469e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40012300 	.word	0x40012300
 80046c4:	40012000 	.word	0x40012000
 80046c8:	20000004 	.word	0x20000004
 80046cc:	431bde83 	.word	0x431bde83

080046d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046d8:	4b79      	ldr	r3, [pc, #484]	; (80048c0 <ADC_Init+0x1f0>)
 80046da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6859      	ldr	r1, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	021a      	lsls	r2, r3, #8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800474a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	4a58      	ldr	r2, [pc, #352]	; (80048c4 <ADC_Init+0x1f4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d022      	beq.n	80047ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004776:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6899      	ldr	r1, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6899      	ldr	r1, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	e00f      	b.n	80047ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0202 	bic.w	r2, r2, #2
 80047dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6899      	ldr	r1, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	7e1b      	ldrb	r3, [r3, #24]
 80047e8:	005a      	lsls	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01b      	beq.n	8004834 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800480a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800481a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	3b01      	subs	r3, #1
 8004828:	035a      	lsls	r2, r3, #13
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	e007      	b.n	8004844 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004842:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	3b01      	subs	r3, #1
 8004860:	051a      	lsls	r2, r3, #20
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6899      	ldr	r1, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004886:	025a      	lsls	r2, r3, #9
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6899      	ldr	r1, [r3, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	029a      	lsls	r2, r3, #10
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40012300 	.word	0x40012300
 80048c4:	0f000001 	.word	0x0f000001

080048c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <__NVIC_SetPriorityGrouping+0x44>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048e4:	4013      	ands	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048fa:	4a04      	ldr	r2, [pc, #16]	; (800490c <__NVIC_SetPriorityGrouping+0x44>)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	60d3      	str	r3, [r2, #12]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <__NVIC_GetPriorityGrouping+0x18>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f003 0307 	and.w	r3, r3, #7
}
 800491e:	4618      	mov	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493a:	2b00      	cmp	r3, #0
 800493c:	db0b      	blt.n	8004956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	f003 021f 	and.w	r2, r3, #31
 8004944:	4907      	ldr	r1, [pc, #28]	; (8004964 <__NVIC_EnableIRQ+0x38>)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	2001      	movs	r0, #1
 800494e:	fa00 f202 	lsl.w	r2, r0, r2
 8004952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	e000e100 	.word	0xe000e100

08004968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004978:	2b00      	cmp	r3, #0
 800497a:	db0a      	blt.n	8004992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	b2da      	uxtb	r2, r3
 8004980:	490c      	ldr	r1, [pc, #48]	; (80049b4 <__NVIC_SetPriority+0x4c>)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	0112      	lsls	r2, r2, #4
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	440b      	add	r3, r1
 800498c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004990:	e00a      	b.n	80049a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	4908      	ldr	r1, [pc, #32]	; (80049b8 <__NVIC_SetPriority+0x50>)
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	3b04      	subs	r3, #4
 80049a0:	0112      	lsls	r2, r2, #4
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	440b      	add	r3, r1
 80049a6:	761a      	strb	r2, [r3, #24]
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000e100 	.word	0xe000e100
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	; 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f1c3 0307 	rsb	r3, r3, #7
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	bf28      	it	cs
 80049da:	2304      	movcs	r3, #4
 80049dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3304      	adds	r3, #4
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d902      	bls.n	80049ec <NVIC_EncodePriority+0x30>
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3b03      	subs	r3, #3
 80049ea:	e000      	b.n	80049ee <NVIC_EncodePriority+0x32>
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43da      	mvns	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	401a      	ands	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a04:	f04f 31ff 	mov.w	r1, #4294967295
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	43d9      	mvns	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a14:	4313      	orrs	r3, r2
         );
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3724      	adds	r7, #36	; 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a34:	d301      	bcc.n	8004a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a36:	2301      	movs	r3, #1
 8004a38:	e00f      	b.n	8004a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	; (8004a64 <SysTick_Config+0x40>)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a42:	210f      	movs	r1, #15
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	f7ff ff8e 	bl	8004968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <SysTick_Config+0x40>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a52:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <SysTick_Config+0x40>)
 8004a54:	2207      	movs	r2, #7
 8004a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	e000e010 	.word	0xe000e010

08004a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ff29 	bl	80048c8 <__NVIC_SetPriorityGrouping>
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b086      	sub	sp, #24
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	4603      	mov	r3, r0
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
 8004a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a90:	f7ff ff3e 	bl	8004910 <__NVIC_GetPriorityGrouping>
 8004a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	6978      	ldr	r0, [r7, #20]
 8004a9c:	f7ff ff8e 	bl	80049bc <NVIC_EncodePriority>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff ff5d 	bl	8004968 <__NVIC_SetPriority>
}
 8004aae:	bf00      	nop
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	4603      	mov	r3, r0
 8004abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff ff31 	bl	800492c <__NVIC_EnableIRQ>
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff ffa2 	bl	8004a24 <SysTick_Config>
 8004ae0:	4603      	mov	r3, r0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004af8:	f7ff faea 	bl	80040d0 <HAL_GetTick>
 8004afc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d008      	beq.n	8004b1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2280      	movs	r2, #128	; 0x80
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e052      	b.n	8004bc2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0216 	bic.w	r2, r2, #22
 8004b2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d103      	bne.n	8004b4c <HAL_DMA_Abort+0x62>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0208 	bic.w	r2, r2, #8
 8004b5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0201 	bic.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b6c:	e013      	b.n	8004b96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b6e:	f7ff faaf 	bl	80040d0 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b05      	cmp	r3, #5
 8004b7a:	d90c      	bls.n	8004b96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2203      	movs	r2, #3
 8004b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e015      	b.n	8004bc2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e4      	bne.n	8004b6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba8:	223f      	movs	r2, #63	; 0x3f
 8004baa:	409a      	lsls	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d004      	beq.n	8004be8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e00c      	b.n	8004c02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2205      	movs	r2, #5
 8004bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b089      	sub	sp, #36	; 0x24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e16b      	b.n	8004f04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	f040 815a 	bne.w	8004efe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d005      	beq.n	8004c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d130      	bne.n	8004cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	43db      	mvns	r3, r3
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	4013      	ands	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c98:	2201      	movs	r2, #1
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	f003 0201 	and.w	r2, r3, #1
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d017      	beq.n	8004d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	2203      	movs	r2, #3
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d123      	bne.n	8004d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	08da      	lsrs	r2, r3, #3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3208      	adds	r2, #8
 8004d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	220f      	movs	r2, #15
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	08da      	lsrs	r2, r3, #3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3208      	adds	r2, #8
 8004d4e:	69b9      	ldr	r1, [r7, #24]
 8004d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	2203      	movs	r2, #3
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 0203 	and.w	r2, r3, #3
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80b4 	beq.w	8004efe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	4b60      	ldr	r3, [pc, #384]	; (8004f1c <HAL_GPIO_Init+0x30c>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4a5f      	ldr	r2, [pc, #380]	; (8004f1c <HAL_GPIO_Init+0x30c>)
 8004da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004da4:	6453      	str	r3, [r2, #68]	; 0x44
 8004da6:	4b5d      	ldr	r3, [pc, #372]	; (8004f1c <HAL_GPIO_Init+0x30c>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004db2:	4a5b      	ldr	r2, [pc, #364]	; (8004f20 <HAL_GPIO_Init+0x310>)
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	089b      	lsrs	r3, r3, #2
 8004db8:	3302      	adds	r3, #2
 8004dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	220f      	movs	r2, #15
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a52      	ldr	r2, [pc, #328]	; (8004f24 <HAL_GPIO_Init+0x314>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d02b      	beq.n	8004e36 <HAL_GPIO_Init+0x226>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a51      	ldr	r2, [pc, #324]	; (8004f28 <HAL_GPIO_Init+0x318>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d025      	beq.n	8004e32 <HAL_GPIO_Init+0x222>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a50      	ldr	r2, [pc, #320]	; (8004f2c <HAL_GPIO_Init+0x31c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01f      	beq.n	8004e2e <HAL_GPIO_Init+0x21e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a4f      	ldr	r2, [pc, #316]	; (8004f30 <HAL_GPIO_Init+0x320>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d019      	beq.n	8004e2a <HAL_GPIO_Init+0x21a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a4e      	ldr	r2, [pc, #312]	; (8004f34 <HAL_GPIO_Init+0x324>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <HAL_GPIO_Init+0x216>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a4d      	ldr	r2, [pc, #308]	; (8004f38 <HAL_GPIO_Init+0x328>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00d      	beq.n	8004e22 <HAL_GPIO_Init+0x212>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a4c      	ldr	r2, [pc, #304]	; (8004f3c <HAL_GPIO_Init+0x32c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <HAL_GPIO_Init+0x20e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a4b      	ldr	r2, [pc, #300]	; (8004f40 <HAL_GPIO_Init+0x330>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d101      	bne.n	8004e1a <HAL_GPIO_Init+0x20a>
 8004e16:	2307      	movs	r3, #7
 8004e18:	e00e      	b.n	8004e38 <HAL_GPIO_Init+0x228>
 8004e1a:	2308      	movs	r3, #8
 8004e1c:	e00c      	b.n	8004e38 <HAL_GPIO_Init+0x228>
 8004e1e:	2306      	movs	r3, #6
 8004e20:	e00a      	b.n	8004e38 <HAL_GPIO_Init+0x228>
 8004e22:	2305      	movs	r3, #5
 8004e24:	e008      	b.n	8004e38 <HAL_GPIO_Init+0x228>
 8004e26:	2304      	movs	r3, #4
 8004e28:	e006      	b.n	8004e38 <HAL_GPIO_Init+0x228>
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e004      	b.n	8004e38 <HAL_GPIO_Init+0x228>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e002      	b.n	8004e38 <HAL_GPIO_Init+0x228>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <HAL_GPIO_Init+0x228>
 8004e36:	2300      	movs	r3, #0
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	f002 0203 	and.w	r2, r2, #3
 8004e3e:	0092      	lsls	r2, r2, #2
 8004e40:	4093      	lsls	r3, r2
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e48:	4935      	ldr	r1, [pc, #212]	; (8004f20 <HAL_GPIO_Init+0x310>)
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	089b      	lsrs	r3, r3, #2
 8004e4e:	3302      	adds	r3, #2
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e56:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <HAL_GPIO_Init+0x334>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4013      	ands	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e7a:	4a32      	ldr	r2, [pc, #200]	; (8004f44 <HAL_GPIO_Init+0x334>)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e80:	4b30      	ldr	r3, [pc, #192]	; (8004f44 <HAL_GPIO_Init+0x334>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ea4:	4a27      	ldr	r2, [pc, #156]	; (8004f44 <HAL_GPIO_Init+0x334>)
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eaa:	4b26      	ldr	r3, [pc, #152]	; (8004f44 <HAL_GPIO_Init+0x334>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ece:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <HAL_GPIO_Init+0x334>)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <HAL_GPIO_Init+0x334>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	43db      	mvns	r3, r3
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ef8:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <HAL_GPIO_Init+0x334>)
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	3301      	adds	r3, #1
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	2b0f      	cmp	r3, #15
 8004f08:	f67f ae90 	bls.w	8004c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	3724      	adds	r7, #36	; 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	40013800 	.word	0x40013800
 8004f24:	40020000 	.word	0x40020000
 8004f28:	40020400 	.word	0x40020400
 8004f2c:	40020800 	.word	0x40020800
 8004f30:	40020c00 	.word	0x40020c00
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40021400 	.word	0x40021400
 8004f3c:	40021800 	.word	0x40021800
 8004f40:	40021c00 	.word	0x40021c00
 8004f44:	40013c00 	.word	0x40013c00

08004f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	807b      	strh	r3, [r7, #2]
 8004f54:	4613      	mov	r3, r2
 8004f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f58:	787b      	ldrb	r3, [r7, #1]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f64:	e003      	b.n	8004f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f66:	887b      	ldrh	r3, [r7, #2]
 8004f68:	041a      	lsls	r2, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	619a      	str	r2, [r3, #24]
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_PWR_EnableBkUpAccess+0x20>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004f88:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_PWR_EnableBkUpAccess+0x24>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004f8e:	687b      	ldr	r3, [r7, #4]
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	420e0020 	.word	0x420e0020
 8004fa0:	40007000 	.word	0x40007000

08004fa4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004fb6:	687b      	ldr	r3, [r7, #4]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	420e0020 	.word	0x420e0020
 8004fc8:	40007000 	.word	0x40007000

08004fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e264      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d075      	beq.n	80050d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fea:	4ba3      	ldr	r3, [pc, #652]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d00c      	beq.n	8005010 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ff6:	4ba0      	ldr	r3, [pc, #640]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d112      	bne.n	8005028 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005002:	4b9d      	ldr	r3, [pc, #628]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800500e:	d10b      	bne.n	8005028 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005010:	4b99      	ldr	r3, [pc, #612]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d05b      	beq.n	80050d4 <HAL_RCC_OscConfig+0x108>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d157      	bne.n	80050d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e23f      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005030:	d106      	bne.n	8005040 <HAL_RCC_OscConfig+0x74>
 8005032:	4b91      	ldr	r3, [pc, #580]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a90      	ldr	r2, [pc, #576]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	e01d      	b.n	800507c <HAL_RCC_OscConfig+0xb0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x98>
 800504a:	4b8b      	ldr	r3, [pc, #556]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a8a      	ldr	r2, [pc, #552]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4b88      	ldr	r3, [pc, #544]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a87      	ldr	r2, [pc, #540]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 800505c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e00b      	b.n	800507c <HAL_RCC_OscConfig+0xb0>
 8005064:	4b84      	ldr	r3, [pc, #528]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a83      	ldr	r2, [pc, #524]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 800506a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	4b81      	ldr	r3, [pc, #516]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a80      	ldr	r2, [pc, #512]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800507a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d013      	beq.n	80050ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005084:	f7ff f824 	bl	80040d0 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800508c:	f7ff f820 	bl	80040d0 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	; 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e204      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509e:	4b76      	ldr	r3, [pc, #472]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0xc0>
 80050aa:	e014      	b.n	80050d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ac:	f7ff f810 	bl	80040d0 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050b4:	f7ff f80c 	bl	80040d0 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	; 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e1f0      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c6:	4b6c      	ldr	r3, [pc, #432]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0xe8>
 80050d2:	e000      	b.n	80050d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d063      	beq.n	80051aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050e2:	4b65      	ldr	r3, [pc, #404]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ee:	4b62      	ldr	r3, [pc, #392]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d11c      	bne.n	8005134 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050fa:	4b5f      	ldr	r3, [pc, #380]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d116      	bne.n	8005134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005106:	4b5c      	ldr	r3, [pc, #368]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <HAL_RCC_OscConfig+0x152>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d001      	beq.n	800511e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e1c4      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511e:	4b56      	ldr	r3, [pc, #344]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4952      	ldr	r1, [pc, #328]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 800512e:	4313      	orrs	r3, r2
 8005130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005132:	e03a      	b.n	80051aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800513c:	4b4f      	ldr	r3, [pc, #316]	; (800527c <HAL_RCC_OscConfig+0x2b0>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fe ffc5 	bl	80040d0 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800514a:	f7fe ffc1 	bl	80040d0 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e1a5      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515c:	4b46      	ldr	r3, [pc, #280]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005168:	4b43      	ldr	r3, [pc, #268]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4940      	ldr	r1, [pc, #256]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	4313      	orrs	r3, r2
 800517a:	600b      	str	r3, [r1, #0]
 800517c:	e015      	b.n	80051aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800517e:	4b3f      	ldr	r3, [pc, #252]	; (800527c <HAL_RCC_OscConfig+0x2b0>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fe ffa4 	bl	80040d0 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800518c:	f7fe ffa0 	bl	80040d0 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e184      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519e:	4b36      	ldr	r3, [pc, #216]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d030      	beq.n	8005218 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d016      	beq.n	80051ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051be:	4b30      	ldr	r3, [pc, #192]	; (8005280 <HAL_RCC_OscConfig+0x2b4>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fe ff84 	bl	80040d0 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051cc:	f7fe ff80 	bl	80040d0 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e164      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051de:	4b26      	ldr	r3, [pc, #152]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 80051e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x200>
 80051ea:	e015      	b.n	8005218 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ec:	4b24      	ldr	r3, [pc, #144]	; (8005280 <HAL_RCC_OscConfig+0x2b4>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f2:	f7fe ff6d 	bl	80040d0 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051fa:	f7fe ff69 	bl	80040d0 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e14d      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520c:	4b1a      	ldr	r3, [pc, #104]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 800520e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1f0      	bne.n	80051fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80a0 	beq.w	8005366 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005226:	2300      	movs	r3, #0
 8005228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522a:	4b13      	ldr	r3, [pc, #76]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10f      	bne.n	8005256 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	4a0e      	ldr	r2, [pc, #56]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005244:	6413      	str	r3, [r2, #64]	; 0x40
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <HAL_RCC_OscConfig+0x2ac>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005256:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_RCC_OscConfig+0x2b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d121      	bne.n	80052a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005262:	4b08      	ldr	r3, [pc, #32]	; (8005284 <HAL_RCC_OscConfig+0x2b8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a07      	ldr	r2, [pc, #28]	; (8005284 <HAL_RCC_OscConfig+0x2b8>)
 8005268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526e:	f7fe ff2f 	bl	80040d0 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005274:	e011      	b.n	800529a <HAL_RCC_OscConfig+0x2ce>
 8005276:	bf00      	nop
 8005278:	40023800 	.word	0x40023800
 800527c:	42470000 	.word	0x42470000
 8005280:	42470e80 	.word	0x42470e80
 8005284:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005288:	f7fe ff22 	bl	80040d0 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e106      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800529a:	4b85      	ldr	r3, [pc, #532]	; (80054b0 <HAL_RCC_OscConfig+0x4e4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d106      	bne.n	80052bc <HAL_RCC_OscConfig+0x2f0>
 80052ae:	4b81      	ldr	r3, [pc, #516]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b2:	4a80      	ldr	r2, [pc, #512]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ba:	e01c      	b.n	80052f6 <HAL_RCC_OscConfig+0x32a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b05      	cmp	r3, #5
 80052c2:	d10c      	bne.n	80052de <HAL_RCC_OscConfig+0x312>
 80052c4:	4b7b      	ldr	r3, [pc, #492]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80052c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c8:	4a7a      	ldr	r2, [pc, #488]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80052ca:	f043 0304 	orr.w	r3, r3, #4
 80052ce:	6713      	str	r3, [r2, #112]	; 0x70
 80052d0:	4b78      	ldr	r3, [pc, #480]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d4:	4a77      	ldr	r2, [pc, #476]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	6713      	str	r3, [r2, #112]	; 0x70
 80052dc:	e00b      	b.n	80052f6 <HAL_RCC_OscConfig+0x32a>
 80052de:	4b75      	ldr	r3, [pc, #468]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	4a74      	ldr	r2, [pc, #464]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ea:	4b72      	ldr	r3, [pc, #456]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80052ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ee:	4a71      	ldr	r2, [pc, #452]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80052f0:	f023 0304 	bic.w	r3, r3, #4
 80052f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d015      	beq.n	800532a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fe:	f7fe fee7 	bl	80040d0 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005304:	e00a      	b.n	800531c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005306:	f7fe fee3 	bl	80040d0 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f241 3288 	movw	r2, #5000	; 0x1388
 8005314:	4293      	cmp	r3, r2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e0c5      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531c:	4b65      	ldr	r3, [pc, #404]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ee      	beq.n	8005306 <HAL_RCC_OscConfig+0x33a>
 8005328:	e014      	b.n	8005354 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800532a:	f7fe fed1 	bl	80040d0 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005330:	e00a      	b.n	8005348 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005332:	f7fe fecd 	bl	80040d0 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e0af      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005348:	4b5a      	ldr	r3, [pc, #360]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1ee      	bne.n	8005332 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005354:	7dfb      	ldrb	r3, [r7, #23]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d105      	bne.n	8005366 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535a:	4b56      	ldr	r3, [pc, #344]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	4a55      	ldr	r2, [pc, #340]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 8005360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005364:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 809b 	beq.w	80054a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005370:	4b50      	ldr	r3, [pc, #320]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 030c 	and.w	r3, r3, #12
 8005378:	2b08      	cmp	r3, #8
 800537a:	d05c      	beq.n	8005436 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d141      	bne.n	8005408 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005384:	4b4c      	ldr	r3, [pc, #304]	; (80054b8 <HAL_RCC_OscConfig+0x4ec>)
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538a:	f7fe fea1 	bl	80040d0 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005392:	f7fe fe9d 	bl	80040d0 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e081      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a4:	4b43      	ldr	r3, [pc, #268]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f0      	bne.n	8005392 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	019b      	lsls	r3, r3, #6
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	3b01      	subs	r3, #1
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	061b      	lsls	r3, r3, #24
 80053d4:	4937      	ldr	r1, [pc, #220]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053da:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <HAL_RCC_OscConfig+0x4ec>)
 80053dc:	2201      	movs	r2, #1
 80053de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fe fe76 	bl	80040d0 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e8:	f7fe fe72 	bl	80040d0 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e056      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053fa:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f0      	beq.n	80053e8 <HAL_RCC_OscConfig+0x41c>
 8005406:	e04e      	b.n	80054a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005408:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <HAL_RCC_OscConfig+0x4ec>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540e:	f7fe fe5f 	bl	80040d0 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005416:	f7fe fe5b 	bl	80040d0 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e03f      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005428:	4b22      	ldr	r3, [pc, #136]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f0      	bne.n	8005416 <HAL_RCC_OscConfig+0x44a>
 8005434:	e037      	b.n	80054a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e032      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005442:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <HAL_RCC_OscConfig+0x4e8>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d028      	beq.n	80054a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800545a:	429a      	cmp	r2, r3
 800545c:	d121      	bne.n	80054a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005468:	429a      	cmp	r2, r3
 800546a:	d11a      	bne.n	80054a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005472:	4013      	ands	r3, r2
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005478:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800547a:	4293      	cmp	r3, r2
 800547c:	d111      	bne.n	80054a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	3b01      	subs	r3, #1
 800548c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800548e:	429a      	cmp	r2, r3
 8005490:	d107      	bne.n	80054a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800549e:	429a      	cmp	r2, r3
 80054a0:	d001      	beq.n	80054a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40007000 	.word	0x40007000
 80054b4:	40023800 	.word	0x40023800
 80054b8:	42470060 	.word	0x42470060

080054bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0cc      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054d0:	4b68      	ldr	r3, [pc, #416]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d90c      	bls.n	80054f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054de:	4b65      	ldr	r3, [pc, #404]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e6:	4b63      	ldr	r3, [pc, #396]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d001      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e0b8      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d020      	beq.n	8005546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005510:	4b59      	ldr	r3, [pc, #356]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	4a58      	ldr	r2, [pc, #352]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800551a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005528:	4b53      	ldr	r3, [pc, #332]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4a52      	ldr	r2, [pc, #328]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005534:	4b50      	ldr	r3, [pc, #320]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	494d      	ldr	r1, [pc, #308]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	4313      	orrs	r3, r2
 8005544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d044      	beq.n	80055dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d107      	bne.n	800556a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555a:	4b47      	ldr	r3, [pc, #284]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d119      	bne.n	800559a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e07f      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d003      	beq.n	800557a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005576:	2b03      	cmp	r3, #3
 8005578:	d107      	bne.n	800558a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557a:	4b3f      	ldr	r3, [pc, #252]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e06f      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558a:	4b3b      	ldr	r3, [pc, #236]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e067      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800559a:	4b37      	ldr	r3, [pc, #220]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f023 0203 	bic.w	r2, r3, #3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4934      	ldr	r1, [pc, #208]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055ac:	f7fe fd90 	bl	80040d0 <HAL_GetTick>
 80055b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b4:	f7fe fd8c 	bl	80040d0 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e04f      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ca:	4b2b      	ldr	r3, [pc, #172]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 020c 	and.w	r2, r3, #12
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	429a      	cmp	r2, r3
 80055da:	d1eb      	bne.n	80055b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055dc:	4b25      	ldr	r3, [pc, #148]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d20c      	bcs.n	8005604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ea:	4b22      	ldr	r3, [pc, #136]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f2:	4b20      	ldr	r3, [pc, #128]	; (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d001      	beq.n	8005604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e032      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005610:	4b19      	ldr	r3, [pc, #100]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4916      	ldr	r1, [pc, #88]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d009      	beq.n	8005642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	490e      	ldr	r1, [pc, #56]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	4313      	orrs	r3, r2
 8005640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005642:	f000 f821 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 8005646:	4602      	mov	r2, r0
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	091b      	lsrs	r3, r3, #4
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	490a      	ldr	r1, [pc, #40]	; (800567c <HAL_RCC_ClockConfig+0x1c0>)
 8005654:	5ccb      	ldrb	r3, [r1, r3]
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	4a09      	ldr	r2, [pc, #36]	; (8005680 <HAL_RCC_ClockConfig+0x1c4>)
 800565c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_RCC_ClockConfig+0x1c8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe fcf0 	bl	8004048 <HAL_InitTick>

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40023c00 	.word	0x40023c00
 8005678:	40023800 	.word	0x40023800
 800567c:	0800d8a8 	.word	0x0800d8a8
 8005680:	20000004 	.word	0x20000004
 8005684:	20000008 	.word	0x20000008

08005688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005688:	b5b0      	push	{r4, r5, r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800568e:	2100      	movs	r1, #0
 8005690:	6079      	str	r1, [r7, #4]
 8005692:	2100      	movs	r1, #0
 8005694:	60f9      	str	r1, [r7, #12]
 8005696:	2100      	movs	r1, #0
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800569a:	2100      	movs	r1, #0
 800569c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800569e:	4952      	ldr	r1, [pc, #328]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80056a0:	6889      	ldr	r1, [r1, #8]
 80056a2:	f001 010c 	and.w	r1, r1, #12
 80056a6:	2908      	cmp	r1, #8
 80056a8:	d00d      	beq.n	80056c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80056aa:	2908      	cmp	r1, #8
 80056ac:	f200 8094 	bhi.w	80057d8 <HAL_RCC_GetSysClockFreq+0x150>
 80056b0:	2900      	cmp	r1, #0
 80056b2:	d002      	beq.n	80056ba <HAL_RCC_GetSysClockFreq+0x32>
 80056b4:	2904      	cmp	r1, #4
 80056b6:	d003      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0x38>
 80056b8:	e08e      	b.n	80057d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056ba:	4b4c      	ldr	r3, [pc, #304]	; (80057ec <HAL_RCC_GetSysClockFreq+0x164>)
 80056bc:	60bb      	str	r3, [r7, #8]
       break;
 80056be:	e08e      	b.n	80057de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056c0:	4b4b      	ldr	r3, [pc, #300]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80056c2:	60bb      	str	r3, [r7, #8]
      break;
 80056c4:	e08b      	b.n	80057de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056c6:	4948      	ldr	r1, [pc, #288]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80056c8:	6849      	ldr	r1, [r1, #4]
 80056ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80056ce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056d0:	4945      	ldr	r1, [pc, #276]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80056d2:	6849      	ldr	r1, [r1, #4]
 80056d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80056d8:	2900      	cmp	r1, #0
 80056da:	d024      	beq.n	8005726 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056dc:	4942      	ldr	r1, [pc, #264]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80056de:	6849      	ldr	r1, [r1, #4]
 80056e0:	0989      	lsrs	r1, r1, #6
 80056e2:	4608      	mov	r0, r1
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80056ec:	f04f 0500 	mov.w	r5, #0
 80056f0:	ea00 0204 	and.w	r2, r0, r4
 80056f4:	ea01 0305 	and.w	r3, r1, r5
 80056f8:	493d      	ldr	r1, [pc, #244]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80056fa:	fb01 f003 	mul.w	r0, r1, r3
 80056fe:	2100      	movs	r1, #0
 8005700:	fb01 f102 	mul.w	r1, r1, r2
 8005704:	1844      	adds	r4, r0, r1
 8005706:	493a      	ldr	r1, [pc, #232]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005708:	fba2 0101 	umull	r0, r1, r2, r1
 800570c:	1863      	adds	r3, r4, r1
 800570e:	4619      	mov	r1, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	461a      	mov	r2, r3
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	f7fb fa66 	bl	8000be8 <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4613      	mov	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e04a      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005726:	4b30      	ldr	r3, [pc, #192]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	099b      	lsrs	r3, r3, #6
 800572c:	461a      	mov	r2, r3
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005736:	f04f 0100 	mov.w	r1, #0
 800573a:	ea02 0400 	and.w	r4, r2, r0
 800573e:	ea03 0501 	and.w	r5, r3, r1
 8005742:	4620      	mov	r0, r4
 8005744:	4629      	mov	r1, r5
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	014b      	lsls	r3, r1, #5
 8005750:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005754:	0142      	lsls	r2, r0, #5
 8005756:	4610      	mov	r0, r2
 8005758:	4619      	mov	r1, r3
 800575a:	1b00      	subs	r0, r0, r4
 800575c:	eb61 0105 	sbc.w	r1, r1, r5
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	018b      	lsls	r3, r1, #6
 800576a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800576e:	0182      	lsls	r2, r0, #6
 8005770:	1a12      	subs	r2, r2, r0
 8005772:	eb63 0301 	sbc.w	r3, r3, r1
 8005776:	f04f 0000 	mov.w	r0, #0
 800577a:	f04f 0100 	mov.w	r1, #0
 800577e:	00d9      	lsls	r1, r3, #3
 8005780:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005784:	00d0      	lsls	r0, r2, #3
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	1912      	adds	r2, r2, r4
 800578c:	eb45 0303 	adc.w	r3, r5, r3
 8005790:	f04f 0000 	mov.w	r0, #0
 8005794:	f04f 0100 	mov.w	r1, #0
 8005798:	0299      	lsls	r1, r3, #10
 800579a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800579e:	0290      	lsls	r0, r2, #10
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	f7fb fa1a 	bl	8000be8 <__aeabi_uldivmod>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4613      	mov	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057bc:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	0c1b      	lsrs	r3, r3, #16
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	3301      	adds	r3, #1
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d4:	60bb      	str	r3, [r7, #8]
      break;
 80057d6:	e002      	b.n	80057de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057d8:	4b04      	ldr	r3, [pc, #16]	; (80057ec <HAL_RCC_GetSysClockFreq+0x164>)
 80057da:	60bb      	str	r3, [r7, #8]
      break;
 80057dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057de:	68bb      	ldr	r3, [r7, #8]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bdb0      	pop	{r4, r5, r7, pc}
 80057e8:	40023800 	.word	0x40023800
 80057ec:	00f42400 	.word	0x00f42400
 80057f0:	017d7840 	.word	0x017d7840

080057f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057f8:	4b03      	ldr	r3, [pc, #12]	; (8005808 <HAL_RCC_GetHCLKFreq+0x14>)
 80057fa:	681b      	ldr	r3, [r3, #0]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20000004 	.word	0x20000004

0800580c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005810:	f7ff fff0 	bl	80057f4 <HAL_RCC_GetHCLKFreq>
 8005814:	4602      	mov	r2, r0
 8005816:	4b05      	ldr	r3, [pc, #20]	; (800582c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	0a9b      	lsrs	r3, r3, #10
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	4903      	ldr	r1, [pc, #12]	; (8005830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005822:	5ccb      	ldrb	r3, [r1, r3]
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005828:	4618      	mov	r0, r3
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40023800 	.word	0x40023800
 8005830:	0800d8b8 	.word	0x0800d8b8

08005834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005838:	f7ff ffdc 	bl	80057f4 <HAL_RCC_GetHCLKFreq>
 800583c:	4602      	mov	r2, r0
 800583e:	4b05      	ldr	r3, [pc, #20]	; (8005854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	0b5b      	lsrs	r3, r3, #13
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	4903      	ldr	r1, [pc, #12]	; (8005858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800584a:	5ccb      	ldrb	r3, [r1, r3]
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005850:	4618      	mov	r0, r3
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40023800 	.word	0x40023800
 8005858:	0800d8b8 	.word	0x0800d8b8

0800585c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e041      	b.n	80058f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fe f92e 	bl	8003ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f000 fc0c 	bl	80060b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e041      	b.n	8005990 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d106      	bne.n	8005926 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f839 	bl	8005998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2202      	movs	r2, #2
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3304      	adds	r3, #4
 8005936:	4619      	mov	r1, r3
 8005938:	4610      	mov	r0, r2
 800593a:	f000 fbbd 	bl	80060b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d109      	bne.n	80059d0 <HAL_TIM_PWM_Start+0x24>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e022      	b.n	8005a16 <HAL_TIM_PWM_Start+0x6a>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d109      	bne.n	80059ea <HAL_TIM_PWM_Start+0x3e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b01      	cmp	r3, #1
 80059e0:	bf14      	ite	ne
 80059e2:	2301      	movne	r3, #1
 80059e4:	2300      	moveq	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	e015      	b.n	8005a16 <HAL_TIM_PWM_Start+0x6a>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d109      	bne.n	8005a04 <HAL_TIM_PWM_Start+0x58>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	bf14      	ite	ne
 80059fc:	2301      	movne	r3, #1
 80059fe:	2300      	moveq	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	e008      	b.n	8005a16 <HAL_TIM_PWM_Start+0x6a>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e07c      	b.n	8005b18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <HAL_TIM_PWM_Start+0x82>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2c:	e013      	b.n	8005a56 <HAL_TIM_PWM_Start+0xaa>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d104      	bne.n	8005a3e <HAL_TIM_PWM_Start+0x92>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a3c:	e00b      	b.n	8005a56 <HAL_TIM_PWM_Start+0xaa>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d104      	bne.n	8005a4e <HAL_TIM_PWM_Start+0xa2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4c:	e003      	b.n	8005a56 <HAL_TIM_PWM_Start+0xaa>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fe14 	bl	800668c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2d      	ldr	r2, [pc, #180]	; (8005b20 <HAL_TIM_PWM_Start+0x174>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_TIM_PWM_Start+0xcc>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2c      	ldr	r2, [pc, #176]	; (8005b24 <HAL_TIM_PWM_Start+0x178>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d101      	bne.n	8005a7c <HAL_TIM_PWM_Start+0xd0>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <HAL_TIM_PWM_Start+0xd2>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a22      	ldr	r2, [pc, #136]	; (8005b20 <HAL_TIM_PWM_Start+0x174>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d022      	beq.n	8005ae2 <HAL_TIM_PWM_Start+0x136>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa4:	d01d      	beq.n	8005ae2 <HAL_TIM_PWM_Start+0x136>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1f      	ldr	r2, [pc, #124]	; (8005b28 <HAL_TIM_PWM_Start+0x17c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d018      	beq.n	8005ae2 <HAL_TIM_PWM_Start+0x136>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1d      	ldr	r2, [pc, #116]	; (8005b2c <HAL_TIM_PWM_Start+0x180>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <HAL_TIM_PWM_Start+0x136>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1c      	ldr	r2, [pc, #112]	; (8005b30 <HAL_TIM_PWM_Start+0x184>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00e      	beq.n	8005ae2 <HAL_TIM_PWM_Start+0x136>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <HAL_TIM_PWM_Start+0x178>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d009      	beq.n	8005ae2 <HAL_TIM_PWM_Start+0x136>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a18      	ldr	r2, [pc, #96]	; (8005b34 <HAL_TIM_PWM_Start+0x188>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d004      	beq.n	8005ae2 <HAL_TIM_PWM_Start+0x136>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <HAL_TIM_PWM_Start+0x18c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d111      	bne.n	8005b06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b06      	cmp	r3, #6
 8005af2:	d010      	beq.n	8005b16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0201 	orr.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b04:	e007      	b.n	8005b16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0201 	orr.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010400 	.word	0x40010400
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40014000 	.word	0x40014000
 8005b38:	40001800 	.word	0x40001800

08005b3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e097      	b.n	8005c80 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d106      	bne.n	8005b6a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7fe f81b 	bl	8003ba0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b80:	f023 0307 	bic.w	r3, r3, #7
 8005b84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4610      	mov	r0, r2
 8005b92:	f000 fa91 	bl	80060b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bbe:	f023 0303 	bic.w	r3, r3, #3
 8005bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005bdc:	f023 030c 	bic.w	r3, r3, #12
 8005be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	011a      	lsls	r2, r3, #4
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	031b      	lsls	r3, r3, #12
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ca0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ca8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cb0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d110      	bne.n	8005cda <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d102      	bne.n	8005cc4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cbe:	7b7b      	ldrb	r3, [r7, #13]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d001      	beq.n	8005cc8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e069      	b.n	8005d9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd8:	e031      	b.n	8005d3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d110      	bne.n	8005d02 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d102      	bne.n	8005cec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ce6:	7b3b      	ldrb	r3, [r7, #12]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d001      	beq.n	8005cf0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e055      	b.n	8005d9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d00:	e01d      	b.n	8005d3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d108      	bne.n	8005d1a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d105      	bne.n	8005d1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d0e:	7b7b      	ldrb	r3, [r7, #13]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d102      	bne.n	8005d1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d14:	7b3b      	ldrb	r3, [r7, #12]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d001      	beq.n	8005d1e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e03e      	b.n	8005d9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2202      	movs	r2, #2
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_TIM_Encoder_Start+0xc4>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d008      	beq.n	8005d5c <HAL_TIM_Encoder_Start+0xd4>
 8005d4a:	e00f      	b.n	8005d6c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2201      	movs	r2, #1
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fc99 	bl	800668c <TIM_CCxChannelCmd>
      break;
 8005d5a:	e016      	b.n	8005d8a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2201      	movs	r2, #1
 8005d62:	2104      	movs	r1, #4
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fc91 	bl	800668c <TIM_CCxChannelCmd>
      break;
 8005d6a:	e00e      	b.n	8005d8a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2201      	movs	r2, #1
 8005d72:	2100      	movs	r1, #0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fc89 	bl	800668c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	2104      	movs	r1, #4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fc82 	bl	800668c <TIM_CCxChannelCmd>
      break;
 8005d88:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0201 	orr.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e0ae      	b.n	8005f20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	f200 809f 	bhi.w	8005f10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005f11 	.word	0x08005f11
 8005de0:	08005f11 	.word	0x08005f11
 8005de4:	08005f11 	.word	0x08005f11
 8005de8:	08005e4d 	.word	0x08005e4d
 8005dec:	08005f11 	.word	0x08005f11
 8005df0:	08005f11 	.word	0x08005f11
 8005df4:	08005f11 	.word	0x08005f11
 8005df8:	08005e8f 	.word	0x08005e8f
 8005dfc:	08005f11 	.word	0x08005f11
 8005e00:	08005f11 	.word	0x08005f11
 8005e04:	08005f11 	.word	0x08005f11
 8005e08:	08005ecf 	.word	0x08005ecf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 f9f0 	bl	80061f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0208 	orr.w	r2, r2, #8
 8005e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0204 	bic.w	r2, r2, #4
 8005e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6999      	ldr	r1, [r3, #24]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	619a      	str	r2, [r3, #24]
      break;
 8005e4a:	e064      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fa40 	bl	80062d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6999      	ldr	r1, [r3, #24]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	021a      	lsls	r2, r3, #8
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	619a      	str	r2, [r3, #24]
      break;
 8005e8c:	e043      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fa95 	bl	80063c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0208 	orr.w	r2, r2, #8
 8005ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0204 	bic.w	r2, r2, #4
 8005eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69d9      	ldr	r1, [r3, #28]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	61da      	str	r2, [r3, #28]
      break;
 8005ecc:	e023      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fae9 	bl	80064ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69d9      	ldr	r1, [r3, #28]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	021a      	lsls	r2, r3, #8
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	61da      	str	r2, [r3, #28]
      break;
 8005f0e:	e002      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	75fb      	strb	r3, [r7, #23]
      break;
 8005f14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIM_ConfigClockSource+0x1c>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e0b4      	b.n	80060ae <HAL_TIM_ConfigClockSource+0x186>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7c:	d03e      	beq.n	8005ffc <HAL_TIM_ConfigClockSource+0xd4>
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f82:	f200 8087 	bhi.w	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8a:	f000 8086 	beq.w	800609a <HAL_TIM_ConfigClockSource+0x172>
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f92:	d87f      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b70      	cmp	r3, #112	; 0x70
 8005f96:	d01a      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0xa6>
 8005f98:	2b70      	cmp	r3, #112	; 0x70
 8005f9a:	d87b      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b60      	cmp	r3, #96	; 0x60
 8005f9e:	d050      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x11a>
 8005fa0:	2b60      	cmp	r3, #96	; 0x60
 8005fa2:	d877      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa4:	2b50      	cmp	r3, #80	; 0x50
 8005fa6:	d03c      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0xfa>
 8005fa8:	2b50      	cmp	r3, #80	; 0x50
 8005faa:	d873      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	d058      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x13a>
 8005fb0:	2b40      	cmp	r3, #64	; 0x40
 8005fb2:	d86f      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb4:	2b30      	cmp	r3, #48	; 0x30
 8005fb6:	d064      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fb8:	2b30      	cmp	r3, #48	; 0x30
 8005fba:	d86b      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d060      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d867      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05c      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d05a      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fcc:	e062      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6899      	ldr	r1, [r3, #8]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f000 fb35 	bl	800664c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	609a      	str	r2, [r3, #8]
      break;
 8005ffa:	e04f      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6899      	ldr	r1, [r3, #8]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f000 fb1e 	bl	800664c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800601e:	609a      	str	r2, [r3, #8]
      break;
 8006020:	e03c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6859      	ldr	r1, [r3, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	461a      	mov	r2, r3
 8006030:	f000 fa92 	bl	8006558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2150      	movs	r1, #80	; 0x50
 800603a:	4618      	mov	r0, r3
 800603c:	f000 faeb 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 8006040:	e02c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	461a      	mov	r2, r3
 8006050:	f000 fab1 	bl	80065b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2160      	movs	r1, #96	; 0x60
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fadb 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 8006060:	e01c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6859      	ldr	r1, [r3, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	461a      	mov	r2, r3
 8006070:	f000 fa72 	bl	8006558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2140      	movs	r1, #64	; 0x40
 800607a:	4618      	mov	r0, r3
 800607c:	f000 facb 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 8006080:	e00c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f000 fac2 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 8006092:	e003      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	73fb      	strb	r3, [r7, #15]
      break;
 8006098:	e000      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800609a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a40      	ldr	r2, [pc, #256]	; (80061cc <TIM_Base_SetConfig+0x114>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d013      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d6:	d00f      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a3d      	ldr	r2, [pc, #244]	; (80061d0 <TIM_Base_SetConfig+0x118>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00b      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a3c      	ldr	r2, [pc, #240]	; (80061d4 <TIM_Base_SetConfig+0x11c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d007      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a3b      	ldr	r2, [pc, #236]	; (80061d8 <TIM_Base_SetConfig+0x120>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a3a      	ldr	r2, [pc, #232]	; (80061dc <TIM_Base_SetConfig+0x124>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d108      	bne.n	800610a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a2f      	ldr	r2, [pc, #188]	; (80061cc <TIM_Base_SetConfig+0x114>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d02b      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006118:	d027      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a2c      	ldr	r2, [pc, #176]	; (80061d0 <TIM_Base_SetConfig+0x118>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d023      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a2b      	ldr	r2, [pc, #172]	; (80061d4 <TIM_Base_SetConfig+0x11c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d01f      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a2a      	ldr	r2, [pc, #168]	; (80061d8 <TIM_Base_SetConfig+0x120>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01b      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a29      	ldr	r2, [pc, #164]	; (80061dc <TIM_Base_SetConfig+0x124>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d017      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a28      	ldr	r2, [pc, #160]	; (80061e0 <TIM_Base_SetConfig+0x128>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d013      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a27      	ldr	r2, [pc, #156]	; (80061e4 <TIM_Base_SetConfig+0x12c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00f      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a26      	ldr	r2, [pc, #152]	; (80061e8 <TIM_Base_SetConfig+0x130>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00b      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a25      	ldr	r2, [pc, #148]	; (80061ec <TIM_Base_SetConfig+0x134>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d007      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a24      	ldr	r2, [pc, #144]	; (80061f0 <TIM_Base_SetConfig+0x138>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a23      	ldr	r2, [pc, #140]	; (80061f4 <TIM_Base_SetConfig+0x13c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d108      	bne.n	800617c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <TIM_Base_SetConfig+0x114>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_Base_SetConfig+0xf8>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <TIM_Base_SetConfig+0x124>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d103      	bne.n	80061b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	615a      	str	r2, [r3, #20]
}
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40010000 	.word	0x40010000
 80061d0:	40000400 	.word	0x40000400
 80061d4:	40000800 	.word	0x40000800
 80061d8:	40000c00 	.word	0x40000c00
 80061dc:	40010400 	.word	0x40010400
 80061e0:	40014000 	.word	0x40014000
 80061e4:	40014400 	.word	0x40014400
 80061e8:	40014800 	.word	0x40014800
 80061ec:	40001800 	.word	0x40001800
 80061f0:	40001c00 	.word	0x40001c00
 80061f4:	40002000 	.word	0x40002000

080061f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f023 0201 	bic.w	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f023 0302 	bic.w	r3, r3, #2
 8006240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a20      	ldr	r2, [pc, #128]	; (80062d0 <TIM_OC1_SetConfig+0xd8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC1_SetConfig+0x64>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a1f      	ldr	r2, [pc, #124]	; (80062d4 <TIM_OC1_SetConfig+0xdc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d10c      	bne.n	8006276 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0308 	bic.w	r3, r3, #8
 8006262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f023 0304 	bic.w	r3, r3, #4
 8006274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <TIM_OC1_SetConfig+0xd8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d003      	beq.n	8006286 <TIM_OC1_SetConfig+0x8e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <TIM_OC1_SetConfig+0xdc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d111      	bne.n	80062aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800628c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	621a      	str	r2, [r3, #32]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	40010000 	.word	0x40010000
 80062d4:	40010400 	.word	0x40010400

080062d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f023 0210 	bic.w	r2, r3, #16
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f023 0320 	bic.w	r3, r3, #32
 8006322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a22      	ldr	r2, [pc, #136]	; (80063bc <TIM_OC2_SetConfig+0xe4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_OC2_SetConfig+0x68>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <TIM_OC2_SetConfig+0xe8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d10d      	bne.n	800635c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800635a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a17      	ldr	r2, [pc, #92]	; (80063bc <TIM_OC2_SetConfig+0xe4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_OC2_SetConfig+0x94>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <TIM_OC2_SetConfig+0xe8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d113      	bne.n	8006394 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800637a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40010400 	.word	0x40010400

080063c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800640c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a21      	ldr	r2, [pc, #132]	; (80064a4 <TIM_OC3_SetConfig+0xe0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_OC3_SetConfig+0x66>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a20      	ldr	r2, [pc, #128]	; (80064a8 <TIM_OC3_SetConfig+0xe4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d10d      	bne.n	8006446 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	021b      	lsls	r3, r3, #8
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a16      	ldr	r2, [pc, #88]	; (80064a4 <TIM_OC3_SetConfig+0xe0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d003      	beq.n	8006456 <TIM_OC3_SetConfig+0x92>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <TIM_OC3_SetConfig+0xe4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d113      	bne.n	800647e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800645c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	621a      	str	r2, [r3, #32]
}
 8006498:	bf00      	nop
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40010400 	.word	0x40010400

080064ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	031b      	lsls	r3, r3, #12
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a12      	ldr	r2, [pc, #72]	; (8006550 <TIM_OC4_SetConfig+0xa4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_OC4_SetConfig+0x68>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a11      	ldr	r2, [pc, #68]	; (8006554 <TIM_OC4_SetConfig+0xa8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d109      	bne.n	8006528 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800651a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	019b      	lsls	r3, r3, #6
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40010000 	.word	0x40010000
 8006554:	40010400 	.word	0x40010400

08006558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f023 0201 	bic.w	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f023 030a 	bic.w	r3, r3, #10
 8006594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b087      	sub	sp, #28
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0210 	bic.w	r2, r3, #16
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	031b      	lsls	r3, r3, #12
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	621a      	str	r2, [r3, #32]
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	f043 0307 	orr.w	r3, r3, #7
 8006638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	609a      	str	r2, [r3, #8]
}
 8006640:	bf00      	nop
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	021a      	lsls	r2, r3, #8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	431a      	orrs	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4313      	orrs	r3, r2
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	609a      	str	r2, [r3, #8]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	2201      	movs	r2, #1
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	43db      	mvns	r3, r3
 80066ae:	401a      	ands	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1a      	ldr	r2, [r3, #32]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f003 031f 	and.w	r3, r3, #31
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	fa01 f303 	lsl.w	r3, r1, r3
 80066c4:	431a      	orrs	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	621a      	str	r2, [r3, #32]
}
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
	...

080066d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e05a      	b.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a21      	ldr	r2, [pc, #132]	; (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d022      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673c:	d01d      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1d      	ldr	r2, [pc, #116]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d018      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1b      	ldr	r2, [pc, #108]	; (80067bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1a      	ldr	r2, [pc, #104]	; (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00e      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a18      	ldr	r2, [pc, #96]	; (80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d009      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a17      	ldr	r2, [pc, #92]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a15      	ldr	r2, [pc, #84]	; (80067cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d10c      	bne.n	8006794 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	4313      	orrs	r3, r2
 800678a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40010000 	.word	0x40010000
 80067b8:	40000400 	.word	0x40000400
 80067bc:	40000800 	.word	0x40000800
 80067c0:	40000c00 	.word	0x40000c00
 80067c4:	40010400 	.word	0x40010400
 80067c8:	40014000 	.word	0x40014000
 80067cc:	40001800 	.word	0x40001800

080067d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e03d      	b.n	8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e03f      	b.n	8006906 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fd fa54 	bl	8003d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2224      	movs	r2, #36	; 0x24
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fddb 	bl	8007474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695a      	ldr	r2, [r3, #20]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b08a      	sub	sp, #40	; 0x28
 8006912:	af02      	add	r7, sp, #8
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	603b      	str	r3, [r7, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b20      	cmp	r3, #32
 800692c:	d17c      	bne.n	8006a28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_UART_Transmit+0x2c>
 8006934:	88fb      	ldrh	r3, [r7, #6]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e075      	b.n	8006a2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006944:	2b01      	cmp	r3, #1
 8006946:	d101      	bne.n	800694c <HAL_UART_Transmit+0x3e>
 8006948:	2302      	movs	r3, #2
 800694a:	e06e      	b.n	8006a2a <HAL_UART_Transmit+0x11c>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2221      	movs	r2, #33	; 0x21
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006962:	f7fd fbb5 	bl	80040d0 <HAL_GetTick>
 8006966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	88fa      	ldrh	r2, [r7, #6]
 800696c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	88fa      	ldrh	r2, [r7, #6]
 8006972:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697c:	d108      	bne.n	8006990 <HAL_UART_Transmit+0x82>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e003      	b.n	8006998 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069a0:	e02a      	b.n	80069f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2200      	movs	r2, #0
 80069aa:	2180      	movs	r1, #128	; 0x80
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fb1f 	bl	8006ff0 <UART_WaitOnFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e036      	b.n	8006a2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10b      	bne.n	80069da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	3302      	adds	r3, #2
 80069d6:	61bb      	str	r3, [r7, #24]
 80069d8:	e007      	b.n	80069ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	3301      	adds	r3, #1
 80069e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1cf      	bne.n	80069a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2140      	movs	r1, #64	; 0x40
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 faef 	bl	8006ff0 <UART_WaitOnFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e006      	b.n	8006a2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e000      	b.n	8006a2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a28:	2302      	movs	r3, #2
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3720      	adds	r7, #32
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d11d      	bne.n	8006a88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_UART_Receive_IT+0x26>
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e016      	b.n	8006a8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Receive_IT+0x38>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e00f      	b.n	8006a8a <HAL_UART_Receive_IT+0x58>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fb24 	bl	80070cc <UART_Start_Receive_IT>
 8006a84:	4603      	mov	r3, r0
 8006a86:	e000      	b.n	8006a8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006a88:	2302      	movs	r3, #2
  }
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b0ba      	sub	sp, #232	; 0xe8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10f      	bne.n	8006afa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d009      	beq.n	8006afa <HAL_UART_IRQHandler+0x66>
 8006ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fc03 	bl	80072fe <UART_Receive_IT>
      return;
 8006af8:	e256      	b.n	8006fa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 80de 	beq.w	8006cc0 <HAL_UART_IRQHandler+0x22c>
 8006b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80d1 	beq.w	8006cc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <HAL_UART_IRQHandler+0xae>
 8006b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f043 0201 	orr.w	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <HAL_UART_IRQHandler+0xd2>
 8006b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f043 0202 	orr.w	r2, r3, #2
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <HAL_UART_IRQHandler+0xf6>
 8006b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f043 0204 	orr.w	r2, r3, #4
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d011      	beq.n	8006bba <HAL_UART_IRQHandler+0x126>
 8006b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d105      	bne.n	8006bae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	f043 0208 	orr.w	r2, r3, #8
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 81ed 	beq.w	8006f9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <HAL_UART_IRQHandler+0x14e>
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fb8e 	bl	80072fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d103      	bne.n	8006c0e <HAL_UART_IRQHandler+0x17a>
 8006c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d04f      	beq.n	8006cae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fa96 	bl	8007140 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1e:	2b40      	cmp	r3, #64	; 0x40
 8006c20:	d141      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3314      	adds	r3, #20
 8006c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3314      	adds	r3, #20
 8006c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1d9      	bne.n	8006c22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d013      	beq.n	8006c9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	4a7d      	ldr	r2, [pc, #500]	; (8006e70 <HAL_UART_IRQHandler+0x3dc>)
 8006c7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fd ffa1 	bl	8004bca <HAL_DMA_Abort_IT>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d016      	beq.n	8006cbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9c:	e00e      	b.n	8006cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f990 	bl	8006fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca4:	e00a      	b.n	8006cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f98c 	bl	8006fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cac:	e006      	b.n	8006cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f988 	bl	8006fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006cba:	e170      	b.n	8006f9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cbc:	bf00      	nop
    return;
 8006cbe:	e16e      	b.n	8006f9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	f040 814a 	bne.w	8006f5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8143 	beq.w	8006f5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cdc:	f003 0310 	and.w	r3, r3, #16
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 813c 	beq.w	8006f5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	60bb      	str	r3, [r7, #8]
 8006cfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d06:	2b40      	cmp	r3, #64	; 0x40
 8006d08:	f040 80b4 	bne.w	8006e74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8140 	beq.w	8006fa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	f080 8139 	bcs.w	8006fa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d42:	f000 8088 	beq.w	8006e56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	330c      	adds	r3, #12
 8006d6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1d9      	bne.n	8006d46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3314      	adds	r3, #20
 8006d98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3314      	adds	r3, #20
 8006db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006db6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e1      	bne.n	8006d92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3314      	adds	r3, #20
 8006dd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3314      	adds	r3, #20
 8006dee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006df2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006df4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006df8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e3      	bne.n	8006dce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e26:	f023 0310 	bic.w	r3, r3, #16
 8006e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	330c      	adds	r3, #12
 8006e34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e38:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e3      	bne.n	8006e14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fd fe4a 	bl	8004aea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f8b6 	bl	8006fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e6c:	e099      	b.n	8006fa2 <HAL_UART_IRQHandler+0x50e>
 8006e6e:	bf00      	nop
 8006e70:	08007207 	.word	0x08007207
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 808b 	beq.w	8006fa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8086 	beq.w	8006fa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ebe:	647a      	str	r2, [r7, #68]	; 0x44
 8006ec0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e3      	bne.n	8006e9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3314      	adds	r3, #20
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3314      	adds	r3, #20
 8006ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ef6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e3      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	330c      	adds	r3, #12
 8006f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0310 	bic.w	r3, r3, #16
 8006f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	330c      	adds	r3, #12
 8006f38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f3c:	61fa      	str	r2, [r7, #28]
 8006f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	69b9      	ldr	r1, [r7, #24]
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	617b      	str	r3, [r7, #20]
   return(result);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e3      	bne.n	8006f18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f83e 	bl	8006fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f5c:	e023      	b.n	8006fa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <HAL_UART_IRQHandler+0x4ea>
 8006f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f959 	bl	800722e <UART_Transmit_IT>
    return;
 8006f7c:	e014      	b.n	8006fa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00e      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x514>
 8006f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f999 	bl	80072ce <UART_EndTransmit_IT>
    return;
 8006f9c:	e004      	b.n	8006fa8 <HAL_UART_IRQHandler+0x514>
    return;
 8006f9e:	bf00      	nop
 8006fa0:	e002      	b.n	8006fa8 <HAL_UART_IRQHandler+0x514>
      return;
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <HAL_UART_IRQHandler+0x514>
      return;
 8006fa6:	bf00      	nop
  }
}
 8006fa8:	37e8      	adds	r7, #232	; 0xe8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b090      	sub	sp, #64	; 0x40
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007000:	e050      	b.n	80070a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d04c      	beq.n	80070a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800700a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <UART_WaitOnFlagUntilTimeout+0x30>
 8007010:	f7fd f85e 	bl	80040d0 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800701c:	429a      	cmp	r2, r3
 800701e:	d241      	bcs.n	80070a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	330c      	adds	r3, #12
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	330c      	adds	r3, #12
 800703e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007040:	637a      	str	r2, [r7, #52]	; 0x34
 8007042:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e5      	bne.n	8007020 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3314      	adds	r3, #20
 800705a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	613b      	str	r3, [r7, #16]
   return(result);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	63bb      	str	r3, [r7, #56]	; 0x38
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3314      	adds	r3, #20
 8007072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007074:	623a      	str	r2, [r7, #32]
 8007076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	69f9      	ldr	r1, [r7, #28]
 800707a:	6a3a      	ldr	r2, [r7, #32]
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	61bb      	str	r3, [r7, #24]
   return(result);
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e00f      	b.n	80070c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4013      	ands	r3, r2
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	bf0c      	ite	eq
 80070b4:	2301      	moveq	r3, #1
 80070b6:	2300      	movne	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	461a      	mov	r2, r3
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d09f      	beq.n	8007002 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3740      	adds	r7, #64	; 0x40
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	88fa      	ldrh	r2, [r7, #6]
 80070e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	88fa      	ldrh	r2, [r7, #6]
 80070ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2222      	movs	r2, #34	; 0x22
 80070f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007110:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695a      	ldr	r2, [r3, #20]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f042 0201 	orr.w	r2, r2, #1
 8007120:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0220 	orr.w	r2, r2, #32
 8007130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b095      	sub	sp, #84	; 0x54
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800715e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007168:	643a      	str	r2, [r7, #64]	; 0x40
 800716a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800716e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e5      	bne.n	8007148 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3314      	adds	r3, #20
 8007182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	61fb      	str	r3, [r7, #28]
   return(result);
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	64bb      	str	r3, [r7, #72]	; 0x48
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3314      	adds	r3, #20
 800719a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800719c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e5      	bne.n	800717c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d119      	bne.n	80071ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	330c      	adds	r3, #12
 80071be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f023 0310 	bic.w	r3, r3, #16
 80071ce:	647b      	str	r3, [r7, #68]	; 0x44
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	330c      	adds	r3, #12
 80071d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071d8:	61ba      	str	r2, [r7, #24]
 80071da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6979      	ldr	r1, [r7, #20]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	613b      	str	r3, [r7, #16]
   return(result);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e5      	bne.n	80071b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071fa:	bf00      	nop
 80071fc:	3754      	adds	r7, #84	; 0x54
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7ff fecf 	bl	8006fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007226:	bf00      	nop
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b21      	cmp	r3, #33	; 0x21
 8007240:	d13e      	bne.n	80072c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724a:	d114      	bne.n	8007276 <UART_Transmit_IT+0x48>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d110      	bne.n	8007276 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007268:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	1c9a      	adds	r2, r3, #2
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	621a      	str	r2, [r3, #32]
 8007274:	e008      	b.n	8007288 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	1c59      	adds	r1, r3, #1
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6211      	str	r1, [r2, #32]
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29b      	uxth	r3, r3
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	4619      	mov	r1, r3
 8007296:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10f      	bne.n	80072bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	e000      	b.n	80072c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072c0:	2302      	movs	r3, #2
  }
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff fe5e 	bl	8006fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b08c      	sub	sp, #48	; 0x30
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b22      	cmp	r3, #34	; 0x22
 8007310:	f040 80ab 	bne.w	800746a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731c:	d117      	bne.n	800734e <UART_Receive_IT+0x50>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d113      	bne.n	800734e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733c:	b29a      	uxth	r2, r3
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	1c9a      	adds	r2, r3, #2
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	629a      	str	r2, [r3, #40]	; 0x28
 800734c:	e026      	b.n	800739c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007354:	2300      	movs	r3, #0
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007360:	d007      	beq.n	8007372 <UART_Receive_IT+0x74>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10a      	bne.n	8007380 <UART_Receive_IT+0x82>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	b2da      	uxtb	r2, r3
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e008      	b.n	8007392 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738c:	b2da      	uxtb	r2, r3
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	4619      	mov	r1, r3
 80073aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d15a      	bne.n	8007466 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0220 	bic.w	r2, r2, #32
 80073be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695a      	ldr	r2, [r3, #20]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0201 	bic.w	r2, r2, #1
 80073de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d135      	bne.n	800745c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	330c      	adds	r3, #12
 80073fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	613b      	str	r3, [r7, #16]
   return(result);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f023 0310 	bic.w	r3, r3, #16
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007416:	623a      	str	r2, [r7, #32]
 8007418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	69f9      	ldr	r1, [r7, #28]
 800741c:	6a3a      	ldr	r2, [r7, #32]
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	61bb      	str	r3, [r7, #24]
   return(result);
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e5      	bne.n	80073f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b10      	cmp	r3, #16
 8007436:	d10a      	bne.n	800744e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff fdbf 	bl	8006fd8 <HAL_UARTEx_RxEventCallback>
 800745a:	e002      	b.n	8007462 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7fb f9c1 	bl	80027e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	e002      	b.n	800746c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	e000      	b.n	800746c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800746a:	2302      	movs	r3, #2
  }
}
 800746c:	4618      	mov	r0, r3
 800746e:	3730      	adds	r7, #48	; 0x30
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007478:	b09f      	sub	sp, #124	; 0x7c
 800747a:	af00      	add	r7, sp, #0
 800747c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800747e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748a:	68d9      	ldr	r1, [r3, #12]
 800748c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	ea40 0301 	orr.w	r3, r0, r1
 8007494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	431a      	orrs	r2, r3
 80074a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	431a      	orrs	r2, r3
 80074a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80074ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074b8:	f021 010c 	bic.w	r1, r1, #12
 80074bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074c2:	430b      	orrs	r3, r1
 80074c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d2:	6999      	ldr	r1, [r3, #24]
 80074d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	ea40 0301 	orr.w	r3, r0, r1
 80074dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	4bc5      	ldr	r3, [pc, #788]	; (80077f8 <UART_SetConfig+0x384>)
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d004      	beq.n	80074f2 <UART_SetConfig+0x7e>
 80074e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	4bc3      	ldr	r3, [pc, #780]	; (80077fc <UART_SetConfig+0x388>)
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d103      	bne.n	80074fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074f2:	f7fe f99f 	bl	8005834 <HAL_RCC_GetPCLK2Freq>
 80074f6:	6778      	str	r0, [r7, #116]	; 0x74
 80074f8:	e002      	b.n	8007500 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074fa:	f7fe f987 	bl	800580c <HAL_RCC_GetPCLK1Freq>
 80074fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007508:	f040 80b6 	bne.w	8007678 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800750c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800750e:	461c      	mov	r4, r3
 8007510:	f04f 0500 	mov.w	r5, #0
 8007514:	4622      	mov	r2, r4
 8007516:	462b      	mov	r3, r5
 8007518:	1891      	adds	r1, r2, r2
 800751a:	6439      	str	r1, [r7, #64]	; 0x40
 800751c:	415b      	adcs	r3, r3
 800751e:	647b      	str	r3, [r7, #68]	; 0x44
 8007520:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007524:	1912      	adds	r2, r2, r4
 8007526:	eb45 0303 	adc.w	r3, r5, r3
 800752a:	f04f 0000 	mov.w	r0, #0
 800752e:	f04f 0100 	mov.w	r1, #0
 8007532:	00d9      	lsls	r1, r3, #3
 8007534:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007538:	00d0      	lsls	r0, r2, #3
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	1911      	adds	r1, r2, r4
 8007540:	6639      	str	r1, [r7, #96]	; 0x60
 8007542:	416b      	adcs	r3, r5
 8007544:	667b      	str	r3, [r7, #100]	; 0x64
 8007546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	461a      	mov	r2, r3
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	1891      	adds	r1, r2, r2
 8007552:	63b9      	str	r1, [r7, #56]	; 0x38
 8007554:	415b      	adcs	r3, r3
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800755c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007560:	f7f9 fb42 	bl	8000be8 <__aeabi_uldivmod>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4ba5      	ldr	r3, [pc, #660]	; (8007800 <UART_SetConfig+0x38c>)
 800756a:	fba3 2302 	umull	r2, r3, r3, r2
 800756e:	095b      	lsrs	r3, r3, #5
 8007570:	011e      	lsls	r6, r3, #4
 8007572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007574:	461c      	mov	r4, r3
 8007576:	f04f 0500 	mov.w	r5, #0
 800757a:	4622      	mov	r2, r4
 800757c:	462b      	mov	r3, r5
 800757e:	1891      	adds	r1, r2, r2
 8007580:	6339      	str	r1, [r7, #48]	; 0x30
 8007582:	415b      	adcs	r3, r3
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
 8007586:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800758a:	1912      	adds	r2, r2, r4
 800758c:	eb45 0303 	adc.w	r3, r5, r3
 8007590:	f04f 0000 	mov.w	r0, #0
 8007594:	f04f 0100 	mov.w	r1, #0
 8007598:	00d9      	lsls	r1, r3, #3
 800759a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800759e:	00d0      	lsls	r0, r2, #3
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	1911      	adds	r1, r2, r4
 80075a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80075a8:	416b      	adcs	r3, r5
 80075aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	461a      	mov	r2, r3
 80075b2:	f04f 0300 	mov.w	r3, #0
 80075b6:	1891      	adds	r1, r2, r2
 80075b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80075ba:	415b      	adcs	r3, r3
 80075bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80075c6:	f7f9 fb0f 	bl	8000be8 <__aeabi_uldivmod>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4b8c      	ldr	r3, [pc, #560]	; (8007800 <UART_SetConfig+0x38c>)
 80075d0:	fba3 1302 	umull	r1, r3, r3, r2
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	2164      	movs	r1, #100	; 0x64
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	3332      	adds	r3, #50	; 0x32
 80075e2:	4a87      	ldr	r2, [pc, #540]	; (8007800 <UART_SetConfig+0x38c>)
 80075e4:	fba2 2303 	umull	r2, r3, r2, r3
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075f0:	441e      	add	r6, r3
 80075f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075f4:	4618      	mov	r0, r3
 80075f6:	f04f 0100 	mov.w	r1, #0
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	1894      	adds	r4, r2, r2
 8007600:	623c      	str	r4, [r7, #32]
 8007602:	415b      	adcs	r3, r3
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
 8007606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800760a:	1812      	adds	r2, r2, r0
 800760c:	eb41 0303 	adc.w	r3, r1, r3
 8007610:	f04f 0400 	mov.w	r4, #0
 8007614:	f04f 0500 	mov.w	r5, #0
 8007618:	00dd      	lsls	r5, r3, #3
 800761a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800761e:	00d4      	lsls	r4, r2, #3
 8007620:	4622      	mov	r2, r4
 8007622:	462b      	mov	r3, r5
 8007624:	1814      	adds	r4, r2, r0
 8007626:	653c      	str	r4, [r7, #80]	; 0x50
 8007628:	414b      	adcs	r3, r1
 800762a:	657b      	str	r3, [r7, #84]	; 0x54
 800762c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	461a      	mov	r2, r3
 8007632:	f04f 0300 	mov.w	r3, #0
 8007636:	1891      	adds	r1, r2, r2
 8007638:	61b9      	str	r1, [r7, #24]
 800763a:	415b      	adcs	r3, r3
 800763c:	61fb      	str	r3, [r7, #28]
 800763e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007642:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007646:	f7f9 facf 	bl	8000be8 <__aeabi_uldivmod>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4b6c      	ldr	r3, [pc, #432]	; (8007800 <UART_SetConfig+0x38c>)
 8007650:	fba3 1302 	umull	r1, r3, r3, r2
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	2164      	movs	r1, #100	; 0x64
 8007658:	fb01 f303 	mul.w	r3, r1, r3
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	3332      	adds	r3, #50	; 0x32
 8007662:	4a67      	ldr	r2, [pc, #412]	; (8007800 <UART_SetConfig+0x38c>)
 8007664:	fba2 2303 	umull	r2, r3, r2, r3
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	f003 0207 	and.w	r2, r3, #7
 800766e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4432      	add	r2, r6
 8007674:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007676:	e0b9      	b.n	80077ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800767a:	461c      	mov	r4, r3
 800767c:	f04f 0500 	mov.w	r5, #0
 8007680:	4622      	mov	r2, r4
 8007682:	462b      	mov	r3, r5
 8007684:	1891      	adds	r1, r2, r2
 8007686:	6139      	str	r1, [r7, #16]
 8007688:	415b      	adcs	r3, r3
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007690:	1912      	adds	r2, r2, r4
 8007692:	eb45 0303 	adc.w	r3, r5, r3
 8007696:	f04f 0000 	mov.w	r0, #0
 800769a:	f04f 0100 	mov.w	r1, #0
 800769e:	00d9      	lsls	r1, r3, #3
 80076a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076a4:	00d0      	lsls	r0, r2, #3
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	eb12 0804 	adds.w	r8, r2, r4
 80076ae:	eb43 0905 	adc.w	r9, r3, r5
 80076b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f04f 0100 	mov.w	r1, #0
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	008b      	lsls	r3, r1, #2
 80076c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076ca:	0082      	lsls	r2, r0, #2
 80076cc:	4640      	mov	r0, r8
 80076ce:	4649      	mov	r1, r9
 80076d0:	f7f9 fa8a 	bl	8000be8 <__aeabi_uldivmod>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4b49      	ldr	r3, [pc, #292]	; (8007800 <UART_SetConfig+0x38c>)
 80076da:	fba3 2302 	umull	r2, r3, r3, r2
 80076de:	095b      	lsrs	r3, r3, #5
 80076e0:	011e      	lsls	r6, r3, #4
 80076e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076e4:	4618      	mov	r0, r3
 80076e6:	f04f 0100 	mov.w	r1, #0
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	1894      	adds	r4, r2, r2
 80076f0:	60bc      	str	r4, [r7, #8]
 80076f2:	415b      	adcs	r3, r3
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076fa:	1812      	adds	r2, r2, r0
 80076fc:	eb41 0303 	adc.w	r3, r1, r3
 8007700:	f04f 0400 	mov.w	r4, #0
 8007704:	f04f 0500 	mov.w	r5, #0
 8007708:	00dd      	lsls	r5, r3, #3
 800770a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800770e:	00d4      	lsls	r4, r2, #3
 8007710:	4622      	mov	r2, r4
 8007712:	462b      	mov	r3, r5
 8007714:	1814      	adds	r4, r2, r0
 8007716:	64bc      	str	r4, [r7, #72]	; 0x48
 8007718:	414b      	adcs	r3, r1
 800771a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800771c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	4618      	mov	r0, r3
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	f04f 0300 	mov.w	r3, #0
 800772e:	008b      	lsls	r3, r1, #2
 8007730:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007734:	0082      	lsls	r2, r0, #2
 8007736:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800773a:	f7f9 fa55 	bl	8000be8 <__aeabi_uldivmod>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4b2f      	ldr	r3, [pc, #188]	; (8007800 <UART_SetConfig+0x38c>)
 8007744:	fba3 1302 	umull	r1, r3, r3, r2
 8007748:	095b      	lsrs	r3, r3, #5
 800774a:	2164      	movs	r1, #100	; 0x64
 800774c:	fb01 f303 	mul.w	r3, r1, r3
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	3332      	adds	r3, #50	; 0x32
 8007756:	4a2a      	ldr	r2, [pc, #168]	; (8007800 <UART_SetConfig+0x38c>)
 8007758:	fba2 2303 	umull	r2, r3, r2, r3
 800775c:	095b      	lsrs	r3, r3, #5
 800775e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007762:	441e      	add	r6, r3
 8007764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007766:	4618      	mov	r0, r3
 8007768:	f04f 0100 	mov.w	r1, #0
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	1894      	adds	r4, r2, r2
 8007772:	603c      	str	r4, [r7, #0]
 8007774:	415b      	adcs	r3, r3
 8007776:	607b      	str	r3, [r7, #4]
 8007778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800777c:	1812      	adds	r2, r2, r0
 800777e:	eb41 0303 	adc.w	r3, r1, r3
 8007782:	f04f 0400 	mov.w	r4, #0
 8007786:	f04f 0500 	mov.w	r5, #0
 800778a:	00dd      	lsls	r5, r3, #3
 800778c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007790:	00d4      	lsls	r4, r2, #3
 8007792:	4622      	mov	r2, r4
 8007794:	462b      	mov	r3, r5
 8007796:	eb12 0a00 	adds.w	sl, r2, r0
 800779a:	eb43 0b01 	adc.w	fp, r3, r1
 800779e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f04f 0100 	mov.w	r1, #0
 80077a8:	f04f 0200 	mov.w	r2, #0
 80077ac:	f04f 0300 	mov.w	r3, #0
 80077b0:	008b      	lsls	r3, r1, #2
 80077b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077b6:	0082      	lsls	r2, r0, #2
 80077b8:	4650      	mov	r0, sl
 80077ba:	4659      	mov	r1, fp
 80077bc:	f7f9 fa14 	bl	8000be8 <__aeabi_uldivmod>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <UART_SetConfig+0x38c>)
 80077c6:	fba3 1302 	umull	r1, r3, r3, r2
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	2164      	movs	r1, #100	; 0x64
 80077ce:	fb01 f303 	mul.w	r3, r1, r3
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	3332      	adds	r3, #50	; 0x32
 80077d8:	4a09      	ldr	r2, [pc, #36]	; (8007800 <UART_SetConfig+0x38c>)
 80077da:	fba2 2303 	umull	r2, r3, r2, r3
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	f003 020f 	and.w	r2, r3, #15
 80077e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4432      	add	r2, r6
 80077ea:	609a      	str	r2, [r3, #8]
}
 80077ec:	bf00      	nop
 80077ee:	377c      	adds	r7, #124	; 0x7c
 80077f0:	46bd      	mov	sp, r7
 80077f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f6:	bf00      	nop
 80077f8:	40011000 	.word	0x40011000
 80077fc:	40011400 	.word	0x40011400
 8007800:	51eb851f 	.word	0x51eb851f

08007804 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007804:	b480      	push	{r7}
 8007806:	b089      	sub	sp, #36	; 0x24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	fa93 f3a3 	rbit	r3, r3
 800781e:	613b      	str	r3, [r7, #16]
  return result;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	fab3 f383 	clz	r3, r3
 8007826:	b2db      	uxtb	r3, r3
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	2103      	movs	r1, #3
 800782c:	fa01 f303 	lsl.w	r3, r1, r3
 8007830:	43db      	mvns	r3, r3
 8007832:	401a      	ands	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	fa93 f3a3 	rbit	r3, r3
 800783e:	61bb      	str	r3, [r7, #24]
  return result;
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	fab3 f383 	clz	r3, r3
 8007846:	b2db      	uxtb	r3, r3
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	fa01 f303 	lsl.w	r3, r1, r3
 8007850:	431a      	orrs	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]
}
 8007856:	bf00      	nop
 8007858:	3724      	adds	r7, #36	; 0x24
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8007862:	b480      	push	{r7}
 8007864:	b085      	sub	sp, #20
 8007866:	af00      	add	r7, sp, #0
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	43db      	mvns	r3, r3
 8007876:	401a      	ands	r2, r3
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	fb01 f303 	mul.w	r3, r1, r3
 8007880:	431a      	orrs	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	605a      	str	r2, [r3, #4]
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007892:	b480      	push	{r7}
 8007894:	b089      	sub	sp, #36	; 0x24
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	fa93 f3a3 	rbit	r3, r3
 80078ac:	613b      	str	r3, [r7, #16]
  return result;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	fab3 f383 	clz	r3, r3
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	2103      	movs	r1, #3
 80078ba:	fa01 f303 	lsl.w	r3, r1, r3
 80078be:	43db      	mvns	r3, r3
 80078c0:	401a      	ands	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	fa93 f3a3 	rbit	r3, r3
 80078cc:	61bb      	str	r3, [r7, #24]
  return result;
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	fab3 f383 	clz	r3, r3
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	fa01 f303 	lsl.w	r3, r1, r3
 80078de:	431a      	orrs	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80078e4:	bf00      	nop
 80078e6:	3724      	adds	r7, #36	; 0x24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b089      	sub	sp, #36	; 0x24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	68da      	ldr	r2, [r3, #12]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	fa93 f3a3 	rbit	r3, r3
 800790a:	613b      	str	r3, [r7, #16]
  return result;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	fab3 f383 	clz	r3, r3
 8007912:	b2db      	uxtb	r3, r3
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	2103      	movs	r1, #3
 8007918:	fa01 f303 	lsl.w	r3, r1, r3
 800791c:	43db      	mvns	r3, r3
 800791e:	401a      	ands	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	fa93 f3a3 	rbit	r3, r3
 800792a:	61bb      	str	r3, [r7, #24]
  return result;
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	fab3 f383 	clz	r3, r3
 8007932:	b2db      	uxtb	r3, r3
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	fa01 f303 	lsl.w	r3, r1, r3
 800793c:	431a      	orrs	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	60da      	str	r2, [r3, #12]
}
 8007942:	bf00      	nop
 8007944:	3724      	adds	r7, #36	; 0x24
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800794e:	b480      	push	{r7}
 8007950:	b089      	sub	sp, #36	; 0x24
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a1a      	ldr	r2, [r3, #32]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	fa93 f3a3 	rbit	r3, r3
 8007968:	613b      	str	r3, [r7, #16]
  return result;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	fab3 f383 	clz	r3, r3
 8007970:	b2db      	uxtb	r3, r3
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	210f      	movs	r1, #15
 8007976:	fa01 f303 	lsl.w	r3, r1, r3
 800797a:	43db      	mvns	r3, r3
 800797c:	401a      	ands	r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	fa93 f3a3 	rbit	r3, r3
 8007988:	61bb      	str	r3, [r7, #24]
  return result;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	fab3 f383 	clz	r3, r3
 8007990:	b2db      	uxtb	r3, r3
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	fa01 f303 	lsl.w	r3, r1, r3
 800799a:	431a      	orrs	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80079a0:	bf00      	nop
 80079a2:	3724      	adds	r7, #36	; 0x24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b089      	sub	sp, #36	; 0x24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	0a1b      	lsrs	r3, r3, #8
 80079c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	fa93 f3a3 	rbit	r3, r3
 80079c8:	613b      	str	r3, [r7, #16]
  return result;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	fab3 f383 	clz	r3, r3
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	210f      	movs	r1, #15
 80079d6:	fa01 f303 	lsl.w	r3, r1, r3
 80079da:	43db      	mvns	r3, r3
 80079dc:	401a      	ands	r2, r3
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	0a1b      	lsrs	r3, r3, #8
 80079e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	fa93 f3a3 	rbit	r3, r3
 80079ea:	61bb      	str	r3, [r7, #24]
  return result;
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	fab3 f383 	clz	r3, r3
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	fa01 f303 	lsl.w	r3, r1, r3
 80079fc:	431a      	orrs	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8007a02:	bf00      	nop
 8007a04:	3724      	adds	r7, #36	; 0x24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b088      	sub	sp, #32
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	fa93 f3a3 	rbit	r3, r3
 8007a2c:	613b      	str	r3, [r7, #16]
  return result;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	fab3 f383 	clz	r3, r3
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007a38:	e050      	b.n	8007adc <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	2101      	movs	r1, #1
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	fa01 f303 	lsl.w	r3, r1, r3
 8007a46:	4013      	ands	r3, r2
 8007a48:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d042      	beq.n	8007ad6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d003      	beq.n	8007a60 <LL_GPIO_Init+0x52>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d10d      	bne.n	8007a7c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	461a      	mov	r2, r3
 8007a66:	69b9      	ldr	r1, [r7, #24]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff ff12 	bl	8007892 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	461a      	mov	r2, r3
 8007a74:	69b9      	ldr	r1, [r7, #24]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff fef3 	bl	8007862 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	461a      	mov	r2, r3
 8007a82:	69b9      	ldr	r1, [r7, #24]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff ff33 	bl	80078f0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d11a      	bne.n	8007ac8 <LL_GPIO_Init+0xba>
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	fa93 f3a3 	rbit	r3, r3
 8007a9c:	60bb      	str	r3, [r7, #8]
  return result;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007aa0:	fab3 f383 	clz	r3, r3
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b07      	cmp	r3, #7
 8007aa8:	d807      	bhi.n	8007aba <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	69b9      	ldr	r1, [r7, #24]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff ff4b 	bl	800794e <LL_GPIO_SetAFPin_0_7>
 8007ab8:	e006      	b.n	8007ac8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	69b9      	ldr	r1, [r7, #24]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff ff72 	bl	80079ac <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	461a      	mov	r2, r3
 8007ace:	69b9      	ldr	r1, [r7, #24]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff fe97 	bl	8007804 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1a7      	bne.n	8007a3a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3720      	adds	r7, #32
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <LL_I2C_Enable>:
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f043 0201 	orr.w	r2, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	601a      	str	r2, [r3, #0]
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <LL_I2C_Disable>:
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f023 0201 	bic.w	r2, r3, #1
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	601a      	str	r2, [r3, #0]
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <LL_I2C_SetOwnAddress1>:
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007b48:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	431a      	orrs	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	609a      	str	r2, [r3, #8]
}
 8007b58:	bf00      	nop
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <LL_I2C_ConfigSpeed>:
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	4a42      	ldr	r2, [pc, #264]	; (8007c88 <LL_I2C_ConfigSpeed+0x124>)
 8007b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b82:	0c9b      	lsrs	r3, r3, #18
 8007b84:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	431a      	orrs	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	493a      	ldr	r1, [pc, #232]	; (8007c8c <LL_I2C_ConfigSpeed+0x128>)
 8007ba2:	428b      	cmp	r3, r1
 8007ba4:	d802      	bhi.n	8007bac <LL_I2C_ConfigSpeed+0x48>
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	e009      	b.n	8007bc0 <LL_I2C_ConfigSpeed+0x5c>
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007bb2:	fb01 f303 	mul.w	r3, r1, r3
 8007bb6:	4936      	ldr	r1, [pc, #216]	; (8007c90 <LL_I2C_ConfigSpeed+0x12c>)
 8007bb8:	fba1 1303 	umull	r1, r3, r1, r3
 8007bbc:	099b      	lsrs	r3, r3, #6
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a30      	ldr	r2, [pc, #192]	; (8007c8c <LL_I2C_ConfigSpeed+0x128>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d939      	bls.n	8007c42 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d117      	bne.n	8007c04 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	4413      	add	r3, r2
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	4613      	mov	r3, r2
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bfc:	e01d      	b.n	8007c3a <LL_I2C_ConfigSpeed+0xd6>
 8007bfe:	f248 0301 	movw	r3, #32769	; 0x8001
 8007c02:	e01a      	b.n	8007c3a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009a      	lsls	r2, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00b      	beq.n	8007c36 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009a      	lsls	r2, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c34:	e001      	b.n	8007c3a <LL_I2C_ConfigSpeed+0xd6>
 8007c36:	f248 0301 	movw	r3, #32769	; 0x8001
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	e011      	b.n	8007c66 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c50:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c60:	e000      	b.n	8007c64 <LL_I2C_ConfigSpeed+0x100>
 8007c62:	2304      	movs	r3, #4
 8007c64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8007c6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	431a      	orrs	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	61da      	str	r2, [r3, #28]
}
 8007c7a:	bf00      	nop
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	431bde83 	.word	0x431bde83
 8007c8c:	000186a0 	.word	0x000186a0
 8007c90:	10624dd3 	.word	0x10624dd3

08007c94 <LL_I2C_SetMode>:
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f023 021a 	bic.w	r2, r3, #26
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	601a      	str	r2, [r3, #0]
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <LL_I2C_AcknowledgeNextData>:
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	601a      	str	r2, [r3, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff ff12 	bl	8007b14 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007cf0:	f107 0308 	add.w	r3, r7, #8
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 f895 	bl	8007e24 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8007cfa:	6939      	ldr	r1, [r7, #16]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff ff2d 	bl	8007b64 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68d9      	ldr	r1, [r3, #12]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	461a      	mov	r2, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff ff0d 	bl	8007b34 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff ffb7 	bl	8007c94 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff fee4 	bl	8007af4 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff ffc1 	bl	8007cba <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007d44:	b480      	push	{r7}
 8007d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007d48:	4b04      	ldr	r3, [pc, #16]	; (8007d5c <LL_RCC_GetSysClkSource+0x18>)
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f003 030c 	and.w	r3, r3, #12
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	40023800 	.word	0x40023800

08007d60 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007d64:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <LL_RCC_GetAHBPrescaler+0x18>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40023800 	.word	0x40023800

08007d7c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007d80:	4b04      	ldr	r3, [pc, #16]	; (8007d94 <LL_RCC_GetAPB1Prescaler+0x18>)
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40023800 	.word	0x40023800

08007d98 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007d9c:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40023800 	.word	0x40023800

08007db4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007db8:	4b04      	ldr	r3, [pc, #16]	; (8007dcc <LL_RCC_PLL_GetMainSource+0x18>)
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	40023800 	.word	0x40023800

08007dd0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007dd4:	4b04      	ldr	r3, [pc, #16]	; (8007de8 <LL_RCC_PLL_GetN+0x18>)
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	099b      	lsrs	r3, r3, #6
 8007dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	40023800 	.word	0x40023800

08007dec <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007df0:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <LL_RCC_PLL_GetP+0x18>)
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	40023800 	.word	0x40023800

08007e08 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007e0c:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <LL_RCC_PLL_GetDivider+0x18>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40023800 	.word	0x40023800

08007e24 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8007e2c:	f000 f820 	bl	8007e70 <RCC_GetSystemClockFreq>
 8007e30:	4602      	mov	r2, r0
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f840 	bl	8007ec0 <RCC_GetHCLKClockFreq>
 8007e40:	4602      	mov	r2, r0
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 f84e 	bl	8007eec <RCC_GetPCLK1ClockFreq>
 8007e50:	4602      	mov	r2, r0
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 f85a 	bl	8007f14 <RCC_GetPCLK2ClockFreq>
 8007e60:	4602      	mov	r2, r0
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	60da      	str	r2, [r3, #12]
}
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007e7a:	f7ff ff63 	bl	8007d44 <LL_RCC_GetSysClkSource>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d00c      	beq.n	8007e9e <RCC_GetSystemClockFreq+0x2e>
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d80f      	bhi.n	8007ea8 <RCC_GetSystemClockFreq+0x38>
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <RCC_GetSystemClockFreq+0x22>
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d003      	beq.n	8007e98 <RCC_GetSystemClockFreq+0x28>
 8007e90:	e00a      	b.n	8007ea8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8007e92:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <RCC_GetSystemClockFreq+0x48>)
 8007e94:	607b      	str	r3, [r7, #4]
      break;
 8007e96:	e00a      	b.n	8007eae <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007e98:	4b08      	ldr	r3, [pc, #32]	; (8007ebc <RCC_GetSystemClockFreq+0x4c>)
 8007e9a:	607b      	str	r3, [r7, #4]
      break;
 8007e9c:	e007      	b.n	8007eae <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8007e9e:	2008      	movs	r0, #8
 8007ea0:	f000 f84c 	bl	8007f3c <RCC_PLL_GetFreqDomain_SYS>
 8007ea4:	6078      	str	r0, [r7, #4]
      break;
 8007ea6:	e002      	b.n	8007eae <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007ea8:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <RCC_GetSystemClockFreq+0x48>)
 8007eaa:	607b      	str	r3, [r7, #4]
      break;
 8007eac:	bf00      	nop
  }

  return frequency;
 8007eae:	687b      	ldr	r3, [r7, #4]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	00f42400 	.word	0x00f42400
 8007ebc:	017d7840 	.word	0x017d7840

08007ec0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007ec8:	f7ff ff4a 	bl	8007d60 <LL_RCC_GetAHBPrescaler>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	091b      	lsrs	r3, r3, #4
 8007ed0:	f003 030f 	and.w	r3, r3, #15
 8007ed4:	4a04      	ldr	r2, [pc, #16]	; (8007ee8 <RCC_GetHCLKClockFreq+0x28>)
 8007ed6:	5cd3      	ldrb	r3, [r2, r3]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	40d3      	lsrs	r3, r2
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	0800d8a8 	.word	0x0800d8a8

08007eec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007ef4:	f7ff ff42 	bl	8007d7c <LL_RCC_GetAPB1Prescaler>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	0a9b      	lsrs	r3, r3, #10
 8007efc:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <RCC_GetPCLK1ClockFreq+0x24>)
 8007efe:	5cd3      	ldrb	r3, [r2, r3]
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	40d3      	lsrs	r3, r2
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	0800d8b8 	.word	0x0800d8b8

08007f14 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007f1c:	f7ff ff3c 	bl	8007d98 <LL_RCC_GetAPB2Prescaler>
 8007f20:	4603      	mov	r3, r0
 8007f22:	0b5b      	lsrs	r3, r3, #13
 8007f24:	4a04      	ldr	r2, [pc, #16]	; (8007f38 <RCC_GetPCLK2ClockFreq+0x24>)
 8007f26:	5cd3      	ldrb	r3, [r2, r3]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	40d3      	lsrs	r3, r2
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	0800d8b8 	.word	0x0800d8b8

08007f3c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007f3c:	b590      	push	{r4, r7, lr}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	617b      	str	r3, [r7, #20]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007f50:	f7ff ff30 	bl	8007db4 <LL_RCC_PLL_GetMainSource>
 8007f54:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d004      	beq.n	8007f66 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f62:	d003      	beq.n	8007f6c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007f64:	e005      	b.n	8007f72 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007f68:	617b      	str	r3, [r7, #20]
      break;
 8007f6a:	e005      	b.n	8007f78 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007f6c:	4b11      	ldr	r3, [pc, #68]	; (8007fb4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8007f6e:	617b      	str	r3, [r7, #20]
      break;
 8007f70:	e002      	b.n	8007f78 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8007f72:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007f74:	617b      	str	r3, [r7, #20]
      break;
 8007f76:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b08      	cmp	r3, #8
 8007f7c:	d113      	bne.n	8007fa6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007f7e:	f7ff ff43 	bl	8007e08 <LL_RCC_PLL_GetDivider>
 8007f82:	4602      	mov	r2, r0
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	fbb3 f4f2 	udiv	r4, r3, r2
 8007f8a:	f7ff ff21 	bl	8007dd0 <LL_RCC_PLL_GetN>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	fb03 f404 	mul.w	r4, r3, r4
 8007f94:	f7ff ff2a 	bl	8007dec <LL_RCC_PLL_GetP>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	0c1b      	lsrs	r3, r3, #16
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	fbb4 f3f3 	udiv	r3, r4, r3
 8007fa4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007fa6:	693b      	ldr	r3, [r7, #16]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd90      	pop	{r4, r7, pc}
 8007fb0:	00f42400 	.word	0x00f42400
 8007fb4:	017d7840 	.word	0x017d7840

08007fb8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8007fc0:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <LL_mDelay+0x48>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8007fc6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fce:	d00c      	beq.n	8007fea <LL_mDelay+0x32>
  {
    Delay++;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8007fd6:	e008      	b.n	8007fea <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8007fd8:	4b09      	ldr	r3, [pc, #36]	; (8008000 <LL_mDelay+0x48>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <LL_mDelay+0x32>
    {
      Delay--;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1f3      	bne.n	8007fd8 <LL_mDelay+0x20>
    }
  }
}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	e000e010 	.word	0xe000e010

08008004 <__NVIC_SetPriority>:
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	6039      	str	r1, [r7, #0]
 800800e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008014:	2b00      	cmp	r3, #0
 8008016:	db0a      	blt.n	800802e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	b2da      	uxtb	r2, r3
 800801c:	490c      	ldr	r1, [pc, #48]	; (8008050 <__NVIC_SetPriority+0x4c>)
 800801e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008022:	0112      	lsls	r2, r2, #4
 8008024:	b2d2      	uxtb	r2, r2
 8008026:	440b      	add	r3, r1
 8008028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800802c:	e00a      	b.n	8008044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	b2da      	uxtb	r2, r3
 8008032:	4908      	ldr	r1, [pc, #32]	; (8008054 <__NVIC_SetPriority+0x50>)
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	3b04      	subs	r3, #4
 800803c:	0112      	lsls	r2, r2, #4
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	440b      	add	r3, r1
 8008042:	761a      	strb	r2, [r3, #24]
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	e000e100 	.word	0xe000e100
 8008054:	e000ed00 	.word	0xe000ed00

08008058 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800805c:	2100      	movs	r1, #0
 800805e:	f06f 0004 	mvn.w	r0, #4
 8008062:	f7ff ffcf 	bl	8008004 <__NVIC_SetPriority>
#endif
}
 8008066:	bf00      	nop
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008072:	f3ef 8305 	mrs	r3, IPSR
 8008076:	603b      	str	r3, [r7, #0]
  return(result);
 8008078:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800807e:	f06f 0305 	mvn.w	r3, #5
 8008082:	607b      	str	r3, [r7, #4]
 8008084:	e00c      	b.n	80080a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008086:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <osKernelInitialize+0x44>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800808e:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <osKernelInitialize+0x44>)
 8008090:	2201      	movs	r2, #1
 8008092:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008094:	2300      	movs	r3, #0
 8008096:	607b      	str	r3, [r7, #4]
 8008098:	e002      	b.n	80080a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800809a:	f04f 33ff 	mov.w	r3, #4294967295
 800809e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080a0:	687b      	ldr	r3, [r7, #4]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	200000a8 	.word	0x200000a8

080080b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080ba:	f3ef 8305 	mrs	r3, IPSR
 80080be:	603b      	str	r3, [r7, #0]
  return(result);
 80080c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80080c6:	f06f 0305 	mvn.w	r3, #5
 80080ca:	607b      	str	r3, [r7, #4]
 80080cc:	e010      	b.n	80080f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80080ce:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <osKernelStart+0x48>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d109      	bne.n	80080ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80080d6:	f7ff ffbf 	bl	8008058 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80080da:	4b08      	ldr	r3, [pc, #32]	; (80080fc <osKernelStart+0x48>)
 80080dc:	2202      	movs	r2, #2
 80080de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80080e0:	f001 f9f6 	bl	80094d0 <vTaskStartScheduler>
      stat = osOK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	607b      	str	r3, [r7, #4]
 80080e8:	e002      	b.n	80080f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80080ea:	f04f 33ff 	mov.w	r3, #4294967295
 80080ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080f0:	687b      	ldr	r3, [r7, #4]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	200000a8 	.word	0x200000a8

08008100 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008100:	b580      	push	{r7, lr}
 8008102:	b08e      	sub	sp, #56	; 0x38
 8008104:	af04      	add	r7, sp, #16
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800810c:	2300      	movs	r3, #0
 800810e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008110:	f3ef 8305 	mrs	r3, IPSR
 8008114:	617b      	str	r3, [r7, #20]
  return(result);
 8008116:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008118:	2b00      	cmp	r3, #0
 800811a:	d17e      	bne.n	800821a <osThreadNew+0x11a>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d07b      	beq.n	800821a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008122:	2380      	movs	r3, #128	; 0x80
 8008124:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008126:	2318      	movs	r3, #24
 8008128:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800812e:	f04f 33ff 	mov.w	r3, #4294967295
 8008132:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d045      	beq.n	80081c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <osThreadNew+0x48>
        name = attr->name;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d008      	beq.n	800816e <osThreadNew+0x6e>
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	2b38      	cmp	r3, #56	; 0x38
 8008160:	d805      	bhi.n	800816e <osThreadNew+0x6e>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <osThreadNew+0x72>
        return (NULL);
 800816e:	2300      	movs	r3, #0
 8008170:	e054      	b.n	800821c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	089b      	lsrs	r3, r3, #2
 8008180:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00e      	beq.n	80081a8 <osThreadNew+0xa8>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	2b5b      	cmp	r3, #91	; 0x5b
 8008190:	d90a      	bls.n	80081a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008196:	2b00      	cmp	r3, #0
 8008198:	d006      	beq.n	80081a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <osThreadNew+0xa8>
        mem = 1;
 80081a2:	2301      	movs	r3, #1
 80081a4:	61bb      	str	r3, [r7, #24]
 80081a6:	e010      	b.n	80081ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10c      	bne.n	80081ca <osThreadNew+0xca>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d108      	bne.n	80081ca <osThreadNew+0xca>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d104      	bne.n	80081ca <osThreadNew+0xca>
          mem = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61bb      	str	r3, [r7, #24]
 80081c4:	e001      	b.n	80081ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d110      	bne.n	80081f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081d8:	9202      	str	r2, [sp, #8]
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	6a3a      	ldr	r2, [r7, #32]
 80081e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 ff9c 	bl	8009124 <xTaskCreateStatic>
 80081ec:	4603      	mov	r3, r0
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	e013      	b.n	800821a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d110      	bne.n	800821a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	f107 0310 	add.w	r3, r7, #16
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 ffe7 	bl	80091de <xTaskCreate>
 8008210:	4603      	mov	r3, r0
 8008212:	2b01      	cmp	r3, #1
 8008214:	d001      	beq.n	800821a <osThreadNew+0x11a>
            hTask = NULL;
 8008216:	2300      	movs	r3, #0
 8008218:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800821a:	693b      	ldr	r3, [r7, #16]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3728      	adds	r7, #40	; 0x28
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800822c:	f3ef 8305 	mrs	r3, IPSR
 8008230:	60bb      	str	r3, [r7, #8]
  return(result);
 8008232:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <osDelay+0x1c>
    stat = osErrorISR;
 8008238:	f06f 0305 	mvn.w	r3, #5
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	e007      	b.n	8008250 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <osDelay+0x2c>
      vTaskDelay(ticks);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 f90c 	bl	8009468 <vTaskDelay>
    }
  }

  return (stat);
 8008250:	68fb      	ldr	r3, [r7, #12]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
	...

0800825c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4a07      	ldr	r2, [pc, #28]	; (8008288 <vApplicationGetIdleTaskMemory+0x2c>)
 800826c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	4a06      	ldr	r2, [pc, #24]	; (800828c <vApplicationGetIdleTaskMemory+0x30>)
 8008272:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2280      	movs	r2, #128	; 0x80
 8008278:	601a      	str	r2, [r3, #0]
}
 800827a:	bf00      	nop
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	200000ac 	.word	0x200000ac
 800828c:	20000108 	.word	0x20000108

08008290 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4a07      	ldr	r2, [pc, #28]	; (80082bc <vApplicationGetTimerTaskMemory+0x2c>)
 80082a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	4a06      	ldr	r2, [pc, #24]	; (80082c0 <vApplicationGetTimerTaskMemory+0x30>)
 80082a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082ae:	601a      	str	r2, [r3, #0]
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	20000308 	.word	0x20000308
 80082c0:	20000364 	.word	0x20000364

080082c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f103 0208 	add.w	r2, r3, #8
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f04f 32ff 	mov.w	r2, #4294967295
 80082dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f103 0208 	add.w	r2, r3, #8
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f103 0208 	add.w	r2, r3, #8
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800831e:	b480      	push	{r7}
 8008320:	b085      	sub	sp, #20
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	601a      	str	r2, [r3, #0]
}
 800835a:	bf00      	nop
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008366:	b480      	push	{r7}
 8008368:	b085      	sub	sp, #20
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837c:	d103      	bne.n	8008386 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	e00c      	b.n	80083a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3308      	adds	r3, #8
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	e002      	b.n	8008394 <vListInsert+0x2e>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	429a      	cmp	r2, r3
 800839e:	d2f6      	bcs.n	800838e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	601a      	str	r2, [r3, #0]
}
 80083cc:	bf00      	nop
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6892      	ldr	r2, [r2, #8]
 80083ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6852      	ldr	r2, [r2, #4]
 80083f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	429a      	cmp	r2, r3
 8008402:	d103      	bne.n	800840c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	1e5a      	subs	r2, r3, #1
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008456:	f002 fadd 	bl	800aa14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008462:	68f9      	ldr	r1, [r7, #12]
 8008464:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008466:	fb01 f303 	mul.w	r3, r1, r3
 800846a:	441a      	add	r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008486:	3b01      	subs	r3, #1
 8008488:	68f9      	ldr	r1, [r7, #12]
 800848a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800848c:	fb01 f303 	mul.w	r3, r1, r3
 8008490:	441a      	add	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	22ff      	movs	r2, #255	; 0xff
 800849a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	22ff      	movs	r2, #255	; 0xff
 80084a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d114      	bne.n	80084d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01a      	beq.n	80084ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3310      	adds	r3, #16
 80084b8:	4618      	mov	r0, r3
 80084ba:	f001 fa93 	bl	80099e4 <xTaskRemoveFromEventList>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d012      	beq.n	80084ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80084c4:	4b0c      	ldr	r3, [pc, #48]	; (80084f8 <xQueueGenericReset+0xcc>)
 80084c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	e009      	b.n	80084ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3310      	adds	r3, #16
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff fef2 	bl	80082c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3324      	adds	r3, #36	; 0x24
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff feed 	bl	80082c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80084ea:	f002 fac3 	bl	800aa74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80084ee:	2301      	movs	r3, #1
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	e000ed04 	.word	0xe000ed04

080084fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08e      	sub	sp, #56	; 0x38
 8008500:	af02      	add	r7, sp, #8
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <xQueueGenericCreateStatic+0x52>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <xQueueGenericCreateStatic+0x56>
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <xQueueGenericCreateStatic+0x58>
 8008552:	2300      	movs	r3, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	623b      	str	r3, [r7, #32]
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <xQueueGenericCreateStatic+0x7e>
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <xQueueGenericCreateStatic+0x82>
 800857a:	2301      	movs	r3, #1
 800857c:	e000      	b.n	8008580 <xQueueGenericCreateStatic+0x84>
 800857e:	2300      	movs	r3, #0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10a      	bne.n	800859a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	61fb      	str	r3, [r7, #28]
}
 8008596:	bf00      	nop
 8008598:	e7fe      	b.n	8008598 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800859a:	2350      	movs	r3, #80	; 0x50
 800859c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2b50      	cmp	r3, #80	; 0x50
 80085a2:	d00a      	beq.n	80085ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	61bb      	str	r3, [r7, #24]
}
 80085b6:	bf00      	nop
 80085b8:	e7fe      	b.n	80085b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80085ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00d      	beq.n	80085e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80085c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80085d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	4613      	mov	r3, r2
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	68b9      	ldr	r1, [r7, #8]
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 f83f 	bl	8008660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3730      	adds	r7, #48	; 0x30
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08a      	sub	sp, #40	; 0x28
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10a      	bne.n	8008616 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	613b      	str	r3, [r7, #16]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	fb02 f303 	mul.w	r3, r2, r3
 800861e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	3350      	adds	r3, #80	; 0x50
 8008624:	4618      	mov	r0, r3
 8008626:	f002 fb17 	bl	800ac58 <pvPortMalloc>
 800862a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d011      	beq.n	8008656 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	3350      	adds	r3, #80	; 0x50
 800863a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008644:	79fa      	ldrb	r2, [r7, #7]
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	4613      	mov	r3, r2
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f805 	bl	8008660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008656:	69bb      	ldr	r3, [r7, #24]
	}
 8008658:	4618      	mov	r0, r3
 800865a:	3720      	adds	r7, #32
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d103      	bne.n	800867c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	69ba      	ldr	r2, [r7, #24]
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	e002      	b.n	8008682 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800868e:	2101      	movs	r1, #1
 8008690:	69b8      	ldr	r0, [r7, #24]
 8008692:	f7ff fecb 	bl	800842c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	78fa      	ldrb	r2, [r7, #3]
 800869a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b082      	sub	sp, #8
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00e      	beq.n	80086d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80086c6:	2300      	movs	r3, #0
 80086c8:	2200      	movs	r2, #0
 80086ca:	2100      	movs	r1, #0
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f81d 	bl	800870c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80086d2:	bf00      	nop
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b086      	sub	sp, #24
 80086de:	af00      	add	r7, sp, #0
 80086e0:	4603      	mov	r3, r0
 80086e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80086e4:	2301      	movs	r3, #1
 80086e6:	617b      	str	r3, [r7, #20]
 80086e8:	2300      	movs	r3, #0
 80086ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80086ec:	79fb      	ldrb	r3, [r7, #7]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6939      	ldr	r1, [r7, #16]
 80086f2:	6978      	ldr	r0, [r7, #20]
 80086f4:	f7ff ff7a 	bl	80085ec <xQueueGenericCreate>
 80086f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f7ff ffd3 	bl	80086a6 <prvInitialiseMutex>

		return xNewQueue;
 8008700:	68fb      	ldr	r3, [r7, #12]
	}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08e      	sub	sp, #56	; 0x38
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800871a:	2300      	movs	r3, #0
 800871c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10a      	bne.n	800873e <xQueueGenericSend+0x32>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800873a:	bf00      	nop
 800873c:	e7fe      	b.n	800873c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d103      	bne.n	800874c <xQueueGenericSend+0x40>
 8008744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <xQueueGenericSend+0x44>
 800874c:	2301      	movs	r3, #1
 800874e:	e000      	b.n	8008752 <xQueueGenericSend+0x46>
 8008750:	2300      	movs	r3, #0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10a      	bne.n	800876c <xQueueGenericSend+0x60>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008768:	bf00      	nop
 800876a:	e7fe      	b.n	800876a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d103      	bne.n	800877a <xQueueGenericSend+0x6e>
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008776:	2b01      	cmp	r3, #1
 8008778:	d101      	bne.n	800877e <xQueueGenericSend+0x72>
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <xQueueGenericSend+0x74>
 800877e:	2300      	movs	r3, #0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <xQueueGenericSend+0x8e>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	623b      	str	r3, [r7, #32]
}
 8008796:	bf00      	nop
 8008798:	e7fe      	b.n	8008798 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800879a:	f001 fae1 	bl	8009d60 <xTaskGetSchedulerState>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d102      	bne.n	80087aa <xQueueGenericSend+0x9e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <xQueueGenericSend+0xa2>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <xQueueGenericSend+0xa4>
 80087ae:	2300      	movs	r3, #0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <xQueueGenericSend+0xbe>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	61fb      	str	r3, [r7, #28]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087ca:	f002 f923 	bl	800aa14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d302      	bcc.n	80087e0 <xQueueGenericSend+0xd4>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d129      	bne.n	8008834 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087e6:	f000 fb2f 	bl	8008e48 <prvCopyDataToQueue>
 80087ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d010      	beq.n	8008816 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f6:	3324      	adds	r3, #36	; 0x24
 80087f8:	4618      	mov	r0, r3
 80087fa:	f001 f8f3 	bl	80099e4 <xTaskRemoveFromEventList>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d013      	beq.n	800882c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008804:	4b3f      	ldr	r3, [pc, #252]	; (8008904 <xQueueGenericSend+0x1f8>)
 8008806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	e00a      	b.n	800882c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	2b00      	cmp	r3, #0
 800881a:	d007      	beq.n	800882c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800881c:	4b39      	ldr	r3, [pc, #228]	; (8008904 <xQueueGenericSend+0x1f8>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800882c:	f002 f922 	bl	800aa74 <vPortExitCritical>
				return pdPASS;
 8008830:	2301      	movs	r3, #1
 8008832:	e063      	b.n	80088fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d103      	bne.n	8008842 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800883a:	f002 f91b 	bl	800aa74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800883e:	2300      	movs	r3, #0
 8008840:	e05c      	b.n	80088fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	2b00      	cmp	r3, #0
 8008846:	d106      	bne.n	8008856 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008848:	f107 0314 	add.w	r3, r7, #20
 800884c:	4618      	mov	r0, r3
 800884e:	f001 f92d 	bl	8009aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008852:	2301      	movs	r3, #1
 8008854:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008856:	f002 f90d 	bl	800aa74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800885a:	f000 fe9f 	bl	800959c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800885e:	f002 f8d9 	bl	800aa14 <vPortEnterCritical>
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008868:	b25b      	sxtb	r3, r3
 800886a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886e:	d103      	bne.n	8008878 <xQueueGenericSend+0x16c>
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800887e:	b25b      	sxtb	r3, r3
 8008880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008884:	d103      	bne.n	800888e <xQueueGenericSend+0x182>
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800888e:	f002 f8f1 	bl	800aa74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008892:	1d3a      	adds	r2, r7, #4
 8008894:	f107 0314 	add.w	r3, r7, #20
 8008898:	4611      	mov	r1, r2
 800889a:	4618      	mov	r0, r3
 800889c:	f001 f91c 	bl	8009ad8 <xTaskCheckForTimeOut>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d124      	bne.n	80088f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088a8:	f000 fbc6 	bl	8009038 <prvIsQueueFull>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d018      	beq.n	80088e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	3310      	adds	r3, #16
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	4611      	mov	r1, r2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 f842 	bl	8009944 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088c2:	f000 fb51 	bl	8008f68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088c6:	f000 fe77 	bl	80095b8 <xTaskResumeAll>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f47f af7c 	bne.w	80087ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80088d2:	4b0c      	ldr	r3, [pc, #48]	; (8008904 <xQueueGenericSend+0x1f8>)
 80088d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	e772      	b.n	80087ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088e6:	f000 fb3f 	bl	8008f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088ea:	f000 fe65 	bl	80095b8 <xTaskResumeAll>
 80088ee:	e76c      	b.n	80087ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80088f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f2:	f000 fb39 	bl	8008f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088f6:	f000 fe5f 	bl	80095b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80088fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3738      	adds	r7, #56	; 0x38
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	e000ed04 	.word	0xe000ed04

08008908 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b090      	sub	sp, #64	; 0x40
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800891a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10a      	bne.n	8008936 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d103      	bne.n	8008944 <xQueueGenericSendFromISR+0x3c>
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <xQueueGenericSendFromISR+0x40>
 8008944:	2301      	movs	r3, #1
 8008946:	e000      	b.n	800894a <xQueueGenericSendFromISR+0x42>
 8008948:	2300      	movs	r3, #0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10a      	bne.n	8008964 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d103      	bne.n	8008972 <xQueueGenericSendFromISR+0x6a>
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896e:	2b01      	cmp	r3, #1
 8008970:	d101      	bne.n	8008976 <xQueueGenericSendFromISR+0x6e>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <xQueueGenericSendFromISR+0x70>
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10a      	bne.n	8008992 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	623b      	str	r3, [r7, #32]
}
 800898e:	bf00      	nop
 8008990:	e7fe      	b.n	8008990 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008992:	f002 f921 	bl	800abd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008996:	f3ef 8211 	mrs	r2, BASEPRI
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	61fa      	str	r2, [r7, #28]
 80089ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d302      	bcc.n	80089c4 <xQueueGenericSendFromISR+0xbc>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d12f      	bne.n	8008a24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	68b9      	ldr	r1, [r7, #8]
 80089d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089da:	f000 fa35 	bl	8008e48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e6:	d112      	bne.n	8008a0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d016      	beq.n	8008a1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f2:	3324      	adds	r3, #36	; 0x24
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 fff5 	bl	80099e4 <xTaskRemoveFromEventList>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00e      	beq.n	8008a1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00b      	beq.n	8008a1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	e007      	b.n	8008a1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a12:	3301      	adds	r3, #1
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	b25a      	sxtb	r2, r3
 8008a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008a22:	e001      	b.n	8008a28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3740      	adds	r7, #64	; 0x40
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b08c      	sub	sp, #48	; 0x30
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10a      	bne.n	8008a70 <xQueueReceive+0x30>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	623b      	str	r3, [r7, #32]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d103      	bne.n	8008a7e <xQueueReceive+0x3e>
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <xQueueReceive+0x42>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e000      	b.n	8008a84 <xQueueReceive+0x44>
 8008a82:	2300      	movs	r3, #0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10a      	bne.n	8008a9e <xQueueReceive+0x5e>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	61fb      	str	r3, [r7, #28]
}
 8008a9a:	bf00      	nop
 8008a9c:	e7fe      	b.n	8008a9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a9e:	f001 f95f 	bl	8009d60 <xTaskGetSchedulerState>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d102      	bne.n	8008aae <xQueueReceive+0x6e>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <xQueueReceive+0x72>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <xQueueReceive+0x74>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10a      	bne.n	8008ace <xQueueReceive+0x8e>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	61bb      	str	r3, [r7, #24]
}
 8008aca:	bf00      	nop
 8008acc:	e7fe      	b.n	8008acc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ace:	f001 ffa1 	bl	800aa14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d01f      	beq.n	8008b1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ae2:	f000 fa1b 	bl	8008f1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	1e5a      	subs	r2, r3, #1
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00f      	beq.n	8008b16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	3310      	adds	r3, #16
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 ff72 	bl	80099e4 <xTaskRemoveFromEventList>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d007      	beq.n	8008b16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b06:	4b3d      	ldr	r3, [pc, #244]	; (8008bfc <xQueueReceive+0x1bc>)
 8008b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b16:	f001 ffad 	bl	800aa74 <vPortExitCritical>
				return pdPASS;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e069      	b.n	8008bf2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d103      	bne.n	8008b2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b24:	f001 ffa6 	bl	800aa74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e062      	b.n	8008bf2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d106      	bne.n	8008b40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b32:	f107 0310 	add.w	r3, r7, #16
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 ffb8 	bl	8009aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b40:	f001 ff98 	bl	800aa74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b44:	f000 fd2a 	bl	800959c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b48:	f001 ff64 	bl	800aa14 <vPortEnterCritical>
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b52:	b25b      	sxtb	r3, r3
 8008b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b58:	d103      	bne.n	8008b62 <xQueueReceive+0x122>
 8008b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b68:	b25b      	sxtb	r3, r3
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d103      	bne.n	8008b78 <xQueueReceive+0x138>
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b78:	f001 ff7c 	bl	800aa74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b7c:	1d3a      	adds	r2, r7, #4
 8008b7e:	f107 0310 	add.w	r3, r7, #16
 8008b82:	4611      	mov	r1, r2
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 ffa7 	bl	8009ad8 <xTaskCheckForTimeOut>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d123      	bne.n	8008bd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b92:	f000 fa3b 	bl	800900c <prvIsQueueEmpty>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d017      	beq.n	8008bcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	3324      	adds	r3, #36	; 0x24
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 fecd 	bl	8009944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bac:	f000 f9dc 	bl	8008f68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bb0:	f000 fd02 	bl	80095b8 <xTaskResumeAll>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d189      	bne.n	8008ace <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008bba:	4b10      	ldr	r3, [pc, #64]	; (8008bfc <xQueueReceive+0x1bc>)
 8008bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	e780      	b.n	8008ace <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bce:	f000 f9cb 	bl	8008f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bd2:	f000 fcf1 	bl	80095b8 <xTaskResumeAll>
 8008bd6:	e77a      	b.n	8008ace <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bda:	f000 f9c5 	bl	8008f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bde:	f000 fceb 	bl	80095b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008be4:	f000 fa12 	bl	800900c <prvIsQueueEmpty>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f43f af6f 	beq.w	8008ace <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3730      	adds	r7, #48	; 0x30
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	e000ed04 	.word	0xe000ed04

08008c00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08e      	sub	sp, #56	; 0x38
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10a      	bne.n	8008c32 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	623b      	str	r3, [r7, #32]
}
 8008c2e:	bf00      	nop
 8008c30:	e7fe      	b.n	8008c30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	61fb      	str	r3, [r7, #28]
}
 8008c4c:	bf00      	nop
 8008c4e:	e7fe      	b.n	8008c4e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c50:	f001 f886 	bl	8009d60 <xTaskGetSchedulerState>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <xQueueSemaphoreTake+0x60>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <xQueueSemaphoreTake+0x64>
 8008c60:	2301      	movs	r3, #1
 8008c62:	e000      	b.n	8008c66 <xQueueSemaphoreTake+0x66>
 8008c64:	2300      	movs	r3, #0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10a      	bne.n	8008c80 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	61bb      	str	r3, [r7, #24]
}
 8008c7c:	bf00      	nop
 8008c7e:	e7fe      	b.n	8008c7e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c80:	f001 fec8 	bl	800aa14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d024      	beq.n	8008cda <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	1e5a      	subs	r2, r3, #1
 8008c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d104      	bne.n	8008caa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008ca0:	f001 f9d4 	bl	800a04c <pvTaskIncrementMutexHeldCount>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00f      	beq.n	8008cd2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb4:	3310      	adds	r3, #16
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 fe94 	bl	80099e4 <xTaskRemoveFromEventList>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d007      	beq.n	8008cd2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cc2:	4b54      	ldr	r3, [pc, #336]	; (8008e14 <xQueueSemaphoreTake+0x214>)
 8008cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cd2:	f001 fecf 	bl	800aa74 <vPortExitCritical>
				return pdPASS;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e097      	b.n	8008e0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d111      	bne.n	8008d04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00a      	beq.n	8008cfc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	617b      	str	r3, [r7, #20]
}
 8008cf8:	bf00      	nop
 8008cfa:	e7fe      	b.n	8008cfa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008cfc:	f001 feba 	bl	800aa74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e082      	b.n	8008e0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d0a:	f107 030c 	add.w	r3, r7, #12
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fecc 	bl	8009aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d14:	2301      	movs	r3, #1
 8008d16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d18:	f001 feac 	bl	800aa74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d1c:	f000 fc3e 	bl	800959c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d20:	f001 fe78 	bl	800aa14 <vPortEnterCritical>
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d2a:	b25b      	sxtb	r3, r3
 8008d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d30:	d103      	bne.n	8008d3a <xQueueSemaphoreTake+0x13a>
 8008d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d40:	b25b      	sxtb	r3, r3
 8008d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d46:	d103      	bne.n	8008d50 <xQueueSemaphoreTake+0x150>
 8008d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d50:	f001 fe90 	bl	800aa74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d54:	463a      	mov	r2, r7
 8008d56:	f107 030c 	add.w	r3, r7, #12
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 febb 	bl	8009ad8 <xTaskCheckForTimeOut>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d132      	bne.n	8008dce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d6a:	f000 f94f 	bl	800900c <prvIsQueueEmpty>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d026      	beq.n	8008dc2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d109      	bne.n	8008d90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008d7c:	f001 fe4a 	bl	800aa14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f001 f809 	bl	8009d9c <xTaskPriorityInherit>
 8008d8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008d8c:	f001 fe72 	bl	800aa74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d92:	3324      	adds	r3, #36	; 0x24
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	4611      	mov	r1, r2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fdd3 	bl	8009944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008da0:	f000 f8e2 	bl	8008f68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008da4:	f000 fc08 	bl	80095b8 <xTaskResumeAll>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f47f af68 	bne.w	8008c80 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008db0:	4b18      	ldr	r3, [pc, #96]	; (8008e14 <xQueueSemaphoreTake+0x214>)
 8008db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	e75e      	b.n	8008c80 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008dc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dc4:	f000 f8d0 	bl	8008f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dc8:	f000 fbf6 	bl	80095b8 <xTaskResumeAll>
 8008dcc:	e758      	b.n	8008c80 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008dce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dd0:	f000 f8ca 	bl	8008f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dd4:	f000 fbf0 	bl	80095b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dda:	f000 f917 	bl	800900c <prvIsQueueEmpty>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f43f af4d 	beq.w	8008c80 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00d      	beq.n	8008e08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008dec:	f001 fe12 	bl	800aa14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008df2:	f000 f811 	bl	8008e18 <prvGetDisinheritPriorityAfterTimeout>
 8008df6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f001 f8a2 	bl	8009f48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e04:	f001 fe36 	bl	800aa74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3738      	adds	r7, #56	; 0x38
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	e000ed04 	.word	0xe000ed04

08008e18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d006      	beq.n	8008e36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	e001      	b.n	8008e3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
	}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10d      	bne.n	8008e82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d14d      	bne.n	8008f0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fffa 	bl	8009e6c <xTaskPriorityDisinherit>
 8008e78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	609a      	str	r2, [r3, #8]
 8008e80:	e043      	b.n	8008f0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d119      	bne.n	8008ebc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6858      	ldr	r0, [r3, #4]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e90:	461a      	mov	r2, r3
 8008e92:	68b9      	ldr	r1, [r7, #8]
 8008e94:	f002 f8f4 	bl	800b080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea0:	441a      	add	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d32b      	bcc.n	8008f0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	605a      	str	r2, [r3, #4]
 8008eba:	e026      	b.n	8008f0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68d8      	ldr	r0, [r3, #12]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	f002 f8da 	bl	800b080 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	68da      	ldr	r2, [r3, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	425b      	negs	r3, r3
 8008ed6:	441a      	add	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d207      	bcs.n	8008ef8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef0:	425b      	negs	r3, r3
 8008ef2:	441a      	add	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d105      	bne.n	8008f0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f12:	697b      	ldr	r3, [r7, #20]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d018      	beq.n	8008f60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68da      	ldr	r2, [r3, #12]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	441a      	add	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d303      	bcc.n	8008f50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68d9      	ldr	r1, [r3, #12]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6838      	ldr	r0, [r7, #0]
 8008f5c:	f002 f890 	bl	800b080 <memcpy>
	}
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f70:	f001 fd50 	bl	800aa14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f7c:	e011      	b.n	8008fa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d012      	beq.n	8008fac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3324      	adds	r3, #36	; 0x24
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fd2a 	bl	80099e4 <xTaskRemoveFromEventList>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f96:	f000 fe01 	bl	8009b9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dce9      	bgt.n	8008f7e <prvUnlockQueue+0x16>
 8008faa:	e000      	b.n	8008fae <prvUnlockQueue+0x46>
					break;
 8008fac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	22ff      	movs	r2, #255	; 0xff
 8008fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008fb6:	f001 fd5d 	bl	800aa74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fba:	f001 fd2b 	bl	800aa14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fc6:	e011      	b.n	8008fec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d012      	beq.n	8008ff6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3310      	adds	r3, #16
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fd05 	bl	80099e4 <xTaskRemoveFromEventList>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fe0:	f000 fddc 	bl	8009b9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	dce9      	bgt.n	8008fc8 <prvUnlockQueue+0x60>
 8008ff4:	e000      	b.n	8008ff8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ff6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	22ff      	movs	r2, #255	; 0xff
 8008ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009000:	f001 fd38 	bl	800aa74 <vPortExitCritical>
}
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009014:	f001 fcfe 	bl	800aa14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901c:	2b00      	cmp	r3, #0
 800901e:	d102      	bne.n	8009026 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009020:	2301      	movs	r3, #1
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	e001      	b.n	800902a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800902a:	f001 fd23 	bl	800aa74 <vPortExitCritical>

	return xReturn;
 800902e:	68fb      	ldr	r3, [r7, #12]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009040:	f001 fce8 	bl	800aa14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904c:	429a      	cmp	r2, r3
 800904e:	d102      	bne.n	8009056 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009050:	2301      	movs	r3, #1
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	e001      	b.n	800905a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800905a:	f001 fd0b 	bl	800aa74 <vPortExitCritical>

	return xReturn;
 800905e:	68fb      	ldr	r3, [r7, #12]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	e014      	b.n	80090a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009078:	4a0f      	ldr	r2, [pc, #60]	; (80090b8 <vQueueAddToRegistry+0x50>)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10b      	bne.n	800909c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009084:	490c      	ldr	r1, [pc, #48]	; (80090b8 <vQueueAddToRegistry+0x50>)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800908e:	4a0a      	ldr	r2, [pc, #40]	; (80090b8 <vQueueAddToRegistry+0x50>)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	4413      	add	r3, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800909a:	e006      	b.n	80090aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3301      	adds	r3, #1
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b07      	cmp	r3, #7
 80090a6:	d9e7      	bls.n	8009078 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	20004fe0 	.word	0x20004fe0

080090bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090cc:	f001 fca2 	bl	800aa14 <vPortEnterCritical>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090d6:	b25b      	sxtb	r3, r3
 80090d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090dc:	d103      	bne.n	80090e6 <vQueueWaitForMessageRestricted+0x2a>
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090ec:	b25b      	sxtb	r3, r3
 80090ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f2:	d103      	bne.n	80090fc <vQueueWaitForMessageRestricted+0x40>
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090fc:	f001 fcba 	bl	800aa74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	2b00      	cmp	r3, #0
 8009106:	d106      	bne.n	8009116 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	3324      	adds	r3, #36	; 0x24
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 fc3b 	bl	800998c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009116:	6978      	ldr	r0, [r7, #20]
 8009118:	f7ff ff26 	bl	8008f68 <prvUnlockQueue>
	}
 800911c:	bf00      	nop
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08e      	sub	sp, #56	; 0x38
 8009128:	af04      	add	r7, sp, #16
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10a      	bne.n	800914e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	623b      	str	r3, [r7, #32]
}
 800914a:	bf00      	nop
 800914c:	e7fe      	b.n	800914c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <xTaskCreateStatic+0x46>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	61fb      	str	r3, [r7, #28]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800916a:	235c      	movs	r3, #92	; 0x5c
 800916c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b5c      	cmp	r3, #92	; 0x5c
 8009172:	d00a      	beq.n	800918a <xTaskCreateStatic+0x66>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	61bb      	str	r3, [r7, #24]
}
 8009186:	bf00      	nop
 8009188:	e7fe      	b.n	8009188 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800918a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	2b00      	cmp	r3, #0
 8009190:	d01e      	beq.n	80091d0 <xTaskCreateStatic+0xac>
 8009192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01b      	beq.n	80091d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	2202      	movs	r2, #2
 80091a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091aa:	2300      	movs	r3, #0
 80091ac:	9303      	str	r3, [sp, #12]
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	9302      	str	r3, [sp, #8]
 80091b2:	f107 0314 	add.w	r3, r7, #20
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f850 	bl	8009268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091ca:	f000 f8dd 	bl	8009388 <prvAddNewTaskToReadyList>
 80091ce:	e001      	b.n	80091d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80091d0:	2300      	movs	r3, #0
 80091d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091d4:	697b      	ldr	r3, [r7, #20]
	}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3728      	adds	r7, #40	; 0x28
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b08c      	sub	sp, #48	; 0x30
 80091e2:	af04      	add	r7, sp, #16
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	603b      	str	r3, [r7, #0]
 80091ea:	4613      	mov	r3, r2
 80091ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091ee:	88fb      	ldrh	r3, [r7, #6]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 fd30 	bl	800ac58 <pvPortMalloc>
 80091f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00e      	beq.n	800921e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009200:	205c      	movs	r0, #92	; 0x5c
 8009202:	f001 fd29 	bl	800ac58 <pvPortMalloc>
 8009206:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	631a      	str	r2, [r3, #48]	; 0x30
 8009214:	e005      	b.n	8009222 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009216:	6978      	ldr	r0, [r7, #20]
 8009218:	f001 fdea 	bl	800adf0 <vPortFree>
 800921c:	e001      	b.n	8009222 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800921e:	2300      	movs	r3, #0
 8009220:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d017      	beq.n	8009258 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009230:	88fa      	ldrh	r2, [r7, #6]
 8009232:	2300      	movs	r3, #0
 8009234:	9303      	str	r3, [sp, #12]
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	9302      	str	r3, [sp, #8]
 800923a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	68b9      	ldr	r1, [r7, #8]
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 f80e 	bl	8009268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800924c:	69f8      	ldr	r0, [r7, #28]
 800924e:	f000 f89b 	bl	8009388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009252:	2301      	movs	r3, #1
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	e002      	b.n	800925e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009258:	f04f 33ff 	mov.w	r3, #4294967295
 800925c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800925e:	69bb      	ldr	r3, [r7, #24]
	}
 8009260:	4618      	mov	r0, r3
 8009262:	3720      	adds	r7, #32
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b088      	sub	sp, #32
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	461a      	mov	r2, r3
 8009280:	21a5      	movs	r1, #165	; 0xa5
 8009282:	f001 ff25 	bl	800b0d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009290:	3b01      	subs	r3, #1
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	f023 0307 	bic.w	r3, r3, #7
 800929e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	f003 0307 	and.w	r3, r3, #7
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00a      	beq.n	80092c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	617b      	str	r3, [r7, #20]
}
 80092bc:	bf00      	nop
 80092be:	e7fe      	b.n	80092be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d01f      	beq.n	8009306 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092c6:	2300      	movs	r3, #0
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	e012      	b.n	80092f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	4413      	add	r3, r2
 80092d2:	7819      	ldrb	r1, [r3, #0]
 80092d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	4413      	add	r3, r2
 80092da:	3334      	adds	r3, #52	; 0x34
 80092dc:	460a      	mov	r2, r1
 80092de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	4413      	add	r3, r2
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d006      	beq.n	80092fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	3301      	adds	r3, #1
 80092f0:	61fb      	str	r3, [r7, #28]
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	2b0f      	cmp	r3, #15
 80092f6:	d9e9      	bls.n	80092cc <prvInitialiseNewTask+0x64>
 80092f8:	e000      	b.n	80092fc <prvInitialiseNewTask+0x94>
			{
				break;
 80092fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009304:	e003      	b.n	800930e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800930e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009310:	2b37      	cmp	r3, #55	; 0x37
 8009312:	d901      	bls.n	8009318 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009314:	2337      	movs	r3, #55	; 0x37
 8009316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800931c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009322:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009326:	2200      	movs	r2, #0
 8009328:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	3304      	adds	r3, #4
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe ffe8 	bl	8008304 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	3318      	adds	r3, #24
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe ffe3 	bl	8008304 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	2200      	movs	r2, #0
 8009358:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	68f9      	ldr	r1, [r7, #12]
 8009366:	69b8      	ldr	r0, [r7, #24]
 8009368:	f001 fa26 	bl	800a7b8 <pxPortInitialiseStack>
 800936c:	4602      	mov	r2, r0
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800937c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800937e:	bf00      	nop
 8009380:	3720      	adds	r7, #32
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009390:	f001 fb40 	bl	800aa14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009394:	4b2d      	ldr	r3, [pc, #180]	; (800944c <prvAddNewTaskToReadyList+0xc4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3301      	adds	r3, #1
 800939a:	4a2c      	ldr	r2, [pc, #176]	; (800944c <prvAddNewTaskToReadyList+0xc4>)
 800939c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800939e:	4b2c      	ldr	r3, [pc, #176]	; (8009450 <prvAddNewTaskToReadyList+0xc8>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093a6:	4a2a      	ldr	r2, [pc, #168]	; (8009450 <prvAddNewTaskToReadyList+0xc8>)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093ac:	4b27      	ldr	r3, [pc, #156]	; (800944c <prvAddNewTaskToReadyList+0xc4>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d110      	bne.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093b4:	f000 fc16 	bl	8009be4 <prvInitialiseTaskLists>
 80093b8:	e00d      	b.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093ba:	4b26      	ldr	r3, [pc, #152]	; (8009454 <prvAddNewTaskToReadyList+0xcc>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d109      	bne.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093c2:	4b23      	ldr	r3, [pc, #140]	; (8009450 <prvAddNewTaskToReadyList+0xc8>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d802      	bhi.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093d0:	4a1f      	ldr	r2, [pc, #124]	; (8009450 <prvAddNewTaskToReadyList+0xc8>)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093d6:	4b20      	ldr	r3, [pc, #128]	; (8009458 <prvAddNewTaskToReadyList+0xd0>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3301      	adds	r3, #1
 80093dc:	4a1e      	ldr	r2, [pc, #120]	; (8009458 <prvAddNewTaskToReadyList+0xd0>)
 80093de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80093e0:	4b1d      	ldr	r3, [pc, #116]	; (8009458 <prvAddNewTaskToReadyList+0xd0>)
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ec:	4b1b      	ldr	r3, [pc, #108]	; (800945c <prvAddNewTaskToReadyList+0xd4>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d903      	bls.n	80093fc <prvAddNewTaskToReadyList+0x74>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	4a18      	ldr	r2, [pc, #96]	; (800945c <prvAddNewTaskToReadyList+0xd4>)
 80093fa:	6013      	str	r3, [r2, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4a15      	ldr	r2, [pc, #84]	; (8009460 <prvAddNewTaskToReadyList+0xd8>)
 800940a:	441a      	add	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3304      	adds	r3, #4
 8009410:	4619      	mov	r1, r3
 8009412:	4610      	mov	r0, r2
 8009414:	f7fe ff83 	bl	800831e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009418:	f001 fb2c 	bl	800aa74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800941c:	4b0d      	ldr	r3, [pc, #52]	; (8009454 <prvAddNewTaskToReadyList+0xcc>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00e      	beq.n	8009442 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009424:	4b0a      	ldr	r3, [pc, #40]	; (8009450 <prvAddNewTaskToReadyList+0xc8>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942e:	429a      	cmp	r2, r3
 8009430:	d207      	bcs.n	8009442 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009432:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <prvAddNewTaskToReadyList+0xdc>)
 8009434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009442:	bf00      	nop
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000c38 	.word	0x20000c38
 8009450:	20000764 	.word	0x20000764
 8009454:	20000c44 	.word	0x20000c44
 8009458:	20000c54 	.word	0x20000c54
 800945c:	20000c40 	.word	0x20000c40
 8009460:	20000768 	.word	0x20000768
 8009464:	e000ed04 	.word	0xe000ed04

08009468 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009470:	2300      	movs	r3, #0
 8009472:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d017      	beq.n	80094aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800947a:	4b13      	ldr	r3, [pc, #76]	; (80094c8 <vTaskDelay+0x60>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00a      	beq.n	8009498 <vTaskDelay+0x30>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	60bb      	str	r3, [r7, #8]
}
 8009494:	bf00      	nop
 8009496:	e7fe      	b.n	8009496 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009498:	f000 f880 	bl	800959c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800949c:	2100      	movs	r1, #0
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fde8 	bl	800a074 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094a4:	f000 f888 	bl	80095b8 <xTaskResumeAll>
 80094a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d107      	bne.n	80094c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80094b0:	4b06      	ldr	r3, [pc, #24]	; (80094cc <vTaskDelay+0x64>)
 80094b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20000c60 	.word	0x20000c60
 80094cc:	e000ed04 	.word	0xe000ed04

080094d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b08a      	sub	sp, #40	; 0x28
 80094d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094de:	463a      	mov	r2, r7
 80094e0:	1d39      	adds	r1, r7, #4
 80094e2:	f107 0308 	add.w	r3, r7, #8
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fe feb8 	bl	800825c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	9202      	str	r2, [sp, #8]
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	2300      	movs	r3, #0
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	2300      	movs	r3, #0
 80094fc:	460a      	mov	r2, r1
 80094fe:	4921      	ldr	r1, [pc, #132]	; (8009584 <vTaskStartScheduler+0xb4>)
 8009500:	4821      	ldr	r0, [pc, #132]	; (8009588 <vTaskStartScheduler+0xb8>)
 8009502:	f7ff fe0f 	bl	8009124 <xTaskCreateStatic>
 8009506:	4603      	mov	r3, r0
 8009508:	4a20      	ldr	r2, [pc, #128]	; (800958c <vTaskStartScheduler+0xbc>)
 800950a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800950c:	4b1f      	ldr	r3, [pc, #124]	; (800958c <vTaskStartScheduler+0xbc>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009514:	2301      	movs	r3, #1
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	e001      	b.n	800951e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d102      	bne.n	800952a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009524:	f000 fdfa 	bl	800a11c <xTimerCreateTimerTask>
 8009528:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d116      	bne.n	800955e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	613b      	str	r3, [r7, #16]
}
 8009542:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009544:	4b12      	ldr	r3, [pc, #72]	; (8009590 <vTaskStartScheduler+0xc0>)
 8009546:	f04f 32ff 	mov.w	r2, #4294967295
 800954a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800954c:	4b11      	ldr	r3, [pc, #68]	; (8009594 <vTaskStartScheduler+0xc4>)
 800954e:	2201      	movs	r2, #1
 8009550:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009552:	4b11      	ldr	r3, [pc, #68]	; (8009598 <vTaskStartScheduler+0xc8>)
 8009554:	2200      	movs	r2, #0
 8009556:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009558:	f001 f9ba 	bl	800a8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800955c:	e00e      	b.n	800957c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009564:	d10a      	bne.n	800957c <vTaskStartScheduler+0xac>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	60fb      	str	r3, [r7, #12]
}
 8009578:	bf00      	nop
 800957a:	e7fe      	b.n	800957a <vTaskStartScheduler+0xaa>
}
 800957c:	bf00      	nop
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	0800cd9c 	.word	0x0800cd9c
 8009588:	08009bb5 	.word	0x08009bb5
 800958c:	20000c5c 	.word	0x20000c5c
 8009590:	20000c58 	.word	0x20000c58
 8009594:	20000c44 	.word	0x20000c44
 8009598:	20000c3c 	.word	0x20000c3c

0800959c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80095a0:	4b04      	ldr	r3, [pc, #16]	; (80095b4 <vTaskSuspendAll+0x18>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3301      	adds	r3, #1
 80095a6:	4a03      	ldr	r2, [pc, #12]	; (80095b4 <vTaskSuspendAll+0x18>)
 80095a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095aa:	bf00      	nop
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	20000c60 	.word	0x20000c60

080095b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095c2:	2300      	movs	r3, #0
 80095c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095c6:	4b42      	ldr	r3, [pc, #264]	; (80096d0 <xTaskResumeAll+0x118>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	603b      	str	r3, [r7, #0]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095e4:	f001 fa16 	bl	800aa14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095e8:	4b39      	ldr	r3, [pc, #228]	; (80096d0 <xTaskResumeAll+0x118>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	4a38      	ldr	r2, [pc, #224]	; (80096d0 <xTaskResumeAll+0x118>)
 80095f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095f2:	4b37      	ldr	r3, [pc, #220]	; (80096d0 <xTaskResumeAll+0x118>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d162      	bne.n	80096c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095fa:	4b36      	ldr	r3, [pc, #216]	; (80096d4 <xTaskResumeAll+0x11c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d05e      	beq.n	80096c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009602:	e02f      	b.n	8009664 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009604:	4b34      	ldr	r3, [pc, #208]	; (80096d8 <xTaskResumeAll+0x120>)
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3318      	adds	r3, #24
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe fee1 	bl	80083d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3304      	adds	r3, #4
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fedc 	bl	80083d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009624:	4b2d      	ldr	r3, [pc, #180]	; (80096dc <xTaskResumeAll+0x124>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d903      	bls.n	8009634 <xTaskResumeAll+0x7c>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	4a2a      	ldr	r2, [pc, #168]	; (80096dc <xTaskResumeAll+0x124>)
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4a27      	ldr	r2, [pc, #156]	; (80096e0 <xTaskResumeAll+0x128>)
 8009642:	441a      	add	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	3304      	adds	r3, #4
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f7fe fe67 	bl	800831e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009654:	4b23      	ldr	r3, [pc, #140]	; (80096e4 <xTaskResumeAll+0x12c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965a:	429a      	cmp	r2, r3
 800965c:	d302      	bcc.n	8009664 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800965e:	4b22      	ldr	r3, [pc, #136]	; (80096e8 <xTaskResumeAll+0x130>)
 8009660:	2201      	movs	r2, #1
 8009662:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009664:	4b1c      	ldr	r3, [pc, #112]	; (80096d8 <xTaskResumeAll+0x120>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1cb      	bne.n	8009604 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009672:	f000 fb55 	bl	8009d20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009676:	4b1d      	ldr	r3, [pc, #116]	; (80096ec <xTaskResumeAll+0x134>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d010      	beq.n	80096a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009682:	f000 f847 	bl	8009714 <xTaskIncrementTick>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800968c:	4b16      	ldr	r3, [pc, #88]	; (80096e8 <xTaskResumeAll+0x130>)
 800968e:	2201      	movs	r2, #1
 8009690:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	3b01      	subs	r3, #1
 8009696:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1f1      	bne.n	8009682 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800969e:	4b13      	ldr	r3, [pc, #76]	; (80096ec <xTaskResumeAll+0x134>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096a4:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <xTaskResumeAll+0x130>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d009      	beq.n	80096c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096ac:	2301      	movs	r3, #1
 80096ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096b0:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <xTaskResumeAll+0x138>)
 80096b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096c0:	f001 f9d8 	bl	800aa74 <vPortExitCritical>

	return xAlreadyYielded;
 80096c4:	68bb      	ldr	r3, [r7, #8]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20000c60 	.word	0x20000c60
 80096d4:	20000c38 	.word	0x20000c38
 80096d8:	20000bf8 	.word	0x20000bf8
 80096dc:	20000c40 	.word	0x20000c40
 80096e0:	20000768 	.word	0x20000768
 80096e4:	20000764 	.word	0x20000764
 80096e8:	20000c4c 	.word	0x20000c4c
 80096ec:	20000c48 	.word	0x20000c48
 80096f0:	e000ed04 	.word	0xe000ed04

080096f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80096fa:	4b05      	ldr	r3, [pc, #20]	; (8009710 <xTaskGetTickCount+0x1c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009700:	687b      	ldr	r3, [r7, #4]
}
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	20000c3c 	.word	0x20000c3c

08009714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800971a:	2300      	movs	r3, #0
 800971c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800971e:	4b4f      	ldr	r3, [pc, #316]	; (800985c <xTaskIncrementTick+0x148>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f040 808f 	bne.w	8009846 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009728:	4b4d      	ldr	r3, [pc, #308]	; (8009860 <xTaskIncrementTick+0x14c>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3301      	adds	r3, #1
 800972e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009730:	4a4b      	ldr	r2, [pc, #300]	; (8009860 <xTaskIncrementTick+0x14c>)
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d120      	bne.n	800977e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800973c:	4b49      	ldr	r3, [pc, #292]	; (8009864 <xTaskIncrementTick+0x150>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00a      	beq.n	800975c <xTaskIncrementTick+0x48>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	603b      	str	r3, [r7, #0]
}
 8009758:	bf00      	nop
 800975a:	e7fe      	b.n	800975a <xTaskIncrementTick+0x46>
 800975c:	4b41      	ldr	r3, [pc, #260]	; (8009864 <xTaskIncrementTick+0x150>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	4b41      	ldr	r3, [pc, #260]	; (8009868 <xTaskIncrementTick+0x154>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a3f      	ldr	r2, [pc, #252]	; (8009864 <xTaskIncrementTick+0x150>)
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	4a3f      	ldr	r2, [pc, #252]	; (8009868 <xTaskIncrementTick+0x154>)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	4b3e      	ldr	r3, [pc, #248]	; (800986c <xTaskIncrementTick+0x158>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3301      	adds	r3, #1
 8009776:	4a3d      	ldr	r2, [pc, #244]	; (800986c <xTaskIncrementTick+0x158>)
 8009778:	6013      	str	r3, [r2, #0]
 800977a:	f000 fad1 	bl	8009d20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800977e:	4b3c      	ldr	r3, [pc, #240]	; (8009870 <xTaskIncrementTick+0x15c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	429a      	cmp	r2, r3
 8009786:	d349      	bcc.n	800981c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009788:	4b36      	ldr	r3, [pc, #216]	; (8009864 <xTaskIncrementTick+0x150>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d104      	bne.n	800979c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009792:	4b37      	ldr	r3, [pc, #220]	; (8009870 <xTaskIncrementTick+0x15c>)
 8009794:	f04f 32ff 	mov.w	r2, #4294967295
 8009798:	601a      	str	r2, [r3, #0]
					break;
 800979a:	e03f      	b.n	800981c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800979c:	4b31      	ldr	r3, [pc, #196]	; (8009864 <xTaskIncrementTick+0x150>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d203      	bcs.n	80097bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097b4:	4a2e      	ldr	r2, [pc, #184]	; (8009870 <xTaskIncrementTick+0x15c>)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097ba:	e02f      	b.n	800981c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	3304      	adds	r3, #4
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fe09 	bl	80083d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d004      	beq.n	80097d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	3318      	adds	r3, #24
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe fe00 	bl	80083d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097dc:	4b25      	ldr	r3, [pc, #148]	; (8009874 <xTaskIncrementTick+0x160>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d903      	bls.n	80097ec <xTaskIncrementTick+0xd8>
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	4a22      	ldr	r2, [pc, #136]	; (8009874 <xTaskIncrementTick+0x160>)
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f0:	4613      	mov	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4a1f      	ldr	r2, [pc, #124]	; (8009878 <xTaskIncrementTick+0x164>)
 80097fa:	441a      	add	r2, r3
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	3304      	adds	r3, #4
 8009800:	4619      	mov	r1, r3
 8009802:	4610      	mov	r0, r2
 8009804:	f7fe fd8b 	bl	800831e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980c:	4b1b      	ldr	r3, [pc, #108]	; (800987c <xTaskIncrementTick+0x168>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009812:	429a      	cmp	r2, r3
 8009814:	d3b8      	bcc.n	8009788 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009816:	2301      	movs	r3, #1
 8009818:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800981a:	e7b5      	b.n	8009788 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800981c:	4b17      	ldr	r3, [pc, #92]	; (800987c <xTaskIncrementTick+0x168>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009822:	4915      	ldr	r1, [pc, #84]	; (8009878 <xTaskIncrementTick+0x164>)
 8009824:	4613      	mov	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	440b      	add	r3, r1
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d901      	bls.n	8009838 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009834:	2301      	movs	r3, #1
 8009836:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009838:	4b11      	ldr	r3, [pc, #68]	; (8009880 <xTaskIncrementTick+0x16c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d007      	beq.n	8009850 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009840:	2301      	movs	r3, #1
 8009842:	617b      	str	r3, [r7, #20]
 8009844:	e004      	b.n	8009850 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009846:	4b0f      	ldr	r3, [pc, #60]	; (8009884 <xTaskIncrementTick+0x170>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3301      	adds	r3, #1
 800984c:	4a0d      	ldr	r2, [pc, #52]	; (8009884 <xTaskIncrementTick+0x170>)
 800984e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009850:	697b      	ldr	r3, [r7, #20]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20000c60 	.word	0x20000c60
 8009860:	20000c3c 	.word	0x20000c3c
 8009864:	20000bf0 	.word	0x20000bf0
 8009868:	20000bf4 	.word	0x20000bf4
 800986c:	20000c50 	.word	0x20000c50
 8009870:	20000c58 	.word	0x20000c58
 8009874:	20000c40 	.word	0x20000c40
 8009878:	20000768 	.word	0x20000768
 800987c:	20000764 	.word	0x20000764
 8009880:	20000c4c 	.word	0x20000c4c
 8009884:	20000c48 	.word	0x20000c48

08009888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800988e:	4b28      	ldr	r3, [pc, #160]	; (8009930 <vTaskSwitchContext+0xa8>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009896:	4b27      	ldr	r3, [pc, #156]	; (8009934 <vTaskSwitchContext+0xac>)
 8009898:	2201      	movs	r2, #1
 800989a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800989c:	e041      	b.n	8009922 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800989e:	4b25      	ldr	r3, [pc, #148]	; (8009934 <vTaskSwitchContext+0xac>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098a4:	4b24      	ldr	r3, [pc, #144]	; (8009938 <vTaskSwitchContext+0xb0>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	60fb      	str	r3, [r7, #12]
 80098aa:	e010      	b.n	80098ce <vTaskSwitchContext+0x46>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	607b      	str	r3, [r7, #4]
}
 80098c4:	bf00      	nop
 80098c6:	e7fe      	b.n	80098c6 <vTaskSwitchContext+0x3e>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	60fb      	str	r3, [r7, #12]
 80098ce:	491b      	ldr	r1, [pc, #108]	; (800993c <vTaskSwitchContext+0xb4>)
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	440b      	add	r3, r1
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0e4      	beq.n	80098ac <vTaskSwitchContext+0x24>
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4a13      	ldr	r2, [pc, #76]	; (800993c <vTaskSwitchContext+0xb4>)
 80098ee:	4413      	add	r3, r2
 80098f0:	60bb      	str	r3, [r7, #8]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	605a      	str	r2, [r3, #4]
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	3308      	adds	r3, #8
 8009904:	429a      	cmp	r2, r3
 8009906:	d104      	bne.n	8009912 <vTaskSwitchContext+0x8a>
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	605a      	str	r2, [r3, #4]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	4a09      	ldr	r2, [pc, #36]	; (8009940 <vTaskSwitchContext+0xb8>)
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	4a06      	ldr	r2, [pc, #24]	; (8009938 <vTaskSwitchContext+0xb0>)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6013      	str	r3, [r2, #0]
}
 8009922:	bf00      	nop
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	20000c60 	.word	0x20000c60
 8009934:	20000c4c 	.word	0x20000c4c
 8009938:	20000c40 	.word	0x20000c40
 800993c:	20000768 	.word	0x20000768
 8009940:	20000764 	.word	0x20000764

08009944 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10a      	bne.n	800996a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	60fb      	str	r3, [r7, #12]
}
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800996a:	4b07      	ldr	r3, [pc, #28]	; (8009988 <vTaskPlaceOnEventList+0x44>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3318      	adds	r3, #24
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7fe fcf7 	bl	8008366 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009978:	2101      	movs	r1, #1
 800997a:	6838      	ldr	r0, [r7, #0]
 800997c:	f000 fb7a 	bl	800a074 <prvAddCurrentTaskToDelayedList>
}
 8009980:	bf00      	nop
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	20000764 	.word	0x20000764

0800998c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10a      	bne.n	80099b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800999e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	617b      	str	r3, [r7, #20]
}
 80099b0:	bf00      	nop
 80099b2:	e7fe      	b.n	80099b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099b4:	4b0a      	ldr	r3, [pc, #40]	; (80099e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3318      	adds	r3, #24
 80099ba:	4619      	mov	r1, r3
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f7fe fcae 	bl	800831e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80099c8:	f04f 33ff 	mov.w	r3, #4294967295
 80099cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	68b8      	ldr	r0, [r7, #8]
 80099d2:	f000 fb4f 	bl	800a074 <prvAddCurrentTaskToDelayedList>
	}
 80099d6:	bf00      	nop
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20000764 	.word	0x20000764

080099e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	60fb      	str	r3, [r7, #12]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	3318      	adds	r3, #24
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fe fcdf 	bl	80083d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a1a:	4b1e      	ldr	r3, [pc, #120]	; (8009a94 <xTaskRemoveFromEventList+0xb0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d11d      	bne.n	8009a5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	3304      	adds	r3, #4
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7fe fcd6 	bl	80083d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a30:	4b19      	ldr	r3, [pc, #100]	; (8009a98 <xTaskRemoveFromEventList+0xb4>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d903      	bls.n	8009a40 <xTaskRemoveFromEventList+0x5c>
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	4a16      	ldr	r2, [pc, #88]	; (8009a98 <xTaskRemoveFromEventList+0xb4>)
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4a13      	ldr	r2, [pc, #76]	; (8009a9c <xTaskRemoveFromEventList+0xb8>)
 8009a4e:	441a      	add	r2, r3
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f7fe fc61 	bl	800831e <vListInsertEnd>
 8009a5c:	e005      	b.n	8009a6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	3318      	adds	r3, #24
 8009a62:	4619      	mov	r1, r3
 8009a64:	480e      	ldr	r0, [pc, #56]	; (8009aa0 <xTaskRemoveFromEventList+0xbc>)
 8009a66:	f7fe fc5a 	bl	800831e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6e:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <xTaskRemoveFromEventList+0xc0>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d905      	bls.n	8009a84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a7c:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <xTaskRemoveFromEventList+0xc4>)
 8009a7e:	2201      	movs	r2, #1
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	e001      	b.n	8009a88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009a84:	2300      	movs	r3, #0
 8009a86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a88:	697b      	ldr	r3, [r7, #20]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20000c60 	.word	0x20000c60
 8009a98:	20000c40 	.word	0x20000c40
 8009a9c:	20000768 	.word	0x20000768
 8009aa0:	20000bf8 	.word	0x20000bf8
 8009aa4:	20000764 	.word	0x20000764
 8009aa8:	20000c4c 	.word	0x20000c4c

08009aac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ab4:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <vTaskInternalSetTimeOutState+0x24>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009abc:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <vTaskInternalSetTimeOutState+0x28>)
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	605a      	str	r2, [r3, #4]
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	20000c50 	.word	0x20000c50
 8009ad4:	20000c3c 	.word	0x20000c3c

08009ad8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10a      	bne.n	8009afe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	613b      	str	r3, [r7, #16]
}
 8009afa:	bf00      	nop
 8009afc:	e7fe      	b.n	8009afc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10a      	bne.n	8009b1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	60fb      	str	r3, [r7, #12]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009b1a:	f000 ff7b 	bl	800aa14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b1e:	4b1d      	ldr	r3, [pc, #116]	; (8009b94 <xTaskCheckForTimeOut+0xbc>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	69ba      	ldr	r2, [r7, #24]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b36:	d102      	bne.n	8009b3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	61fb      	str	r3, [r7, #28]
 8009b3c:	e023      	b.n	8009b86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4b15      	ldr	r3, [pc, #84]	; (8009b98 <xTaskCheckForTimeOut+0xc0>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d007      	beq.n	8009b5a <xTaskCheckForTimeOut+0x82>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d302      	bcc.n	8009b5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b54:	2301      	movs	r3, #1
 8009b56:	61fb      	str	r3, [r7, #28]
 8009b58:	e015      	b.n	8009b86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d20b      	bcs.n	8009b7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	1ad2      	subs	r2, r2, r3
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff ff9b 	bl	8009aac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b76:	2300      	movs	r3, #0
 8009b78:	61fb      	str	r3, [r7, #28]
 8009b7a:	e004      	b.n	8009b86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b82:	2301      	movs	r3, #1
 8009b84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b86:	f000 ff75 	bl	800aa74 <vPortExitCritical>

	return xReturn;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3720      	adds	r7, #32
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	20000c3c 	.word	0x20000c3c
 8009b98:	20000c50 	.word	0x20000c50

08009b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ba0:	4b03      	ldr	r3, [pc, #12]	; (8009bb0 <vTaskMissedYield+0x14>)
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]
}
 8009ba6:	bf00      	nop
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	20000c4c 	.word	0x20000c4c

08009bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bbc:	f000 f852 	bl	8009c64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bc0:	4b06      	ldr	r3, [pc, #24]	; (8009bdc <prvIdleTask+0x28>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d9f9      	bls.n	8009bbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bc8:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <prvIdleTask+0x2c>)
 8009bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009bd8:	e7f0      	b.n	8009bbc <prvIdleTask+0x8>
 8009bda:	bf00      	nop
 8009bdc:	20000768 	.word	0x20000768
 8009be0:	e000ed04 	.word	0xe000ed04

08009be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bea:	2300      	movs	r3, #0
 8009bec:	607b      	str	r3, [r7, #4]
 8009bee:	e00c      	b.n	8009c0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4a12      	ldr	r2, [pc, #72]	; (8009c44 <prvInitialiseTaskLists+0x60>)
 8009bfc:	4413      	add	r3, r2
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fe fb60 	bl	80082c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3301      	adds	r3, #1
 8009c08:	607b      	str	r3, [r7, #4]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b37      	cmp	r3, #55	; 0x37
 8009c0e:	d9ef      	bls.n	8009bf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c10:	480d      	ldr	r0, [pc, #52]	; (8009c48 <prvInitialiseTaskLists+0x64>)
 8009c12:	f7fe fb57 	bl	80082c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c16:	480d      	ldr	r0, [pc, #52]	; (8009c4c <prvInitialiseTaskLists+0x68>)
 8009c18:	f7fe fb54 	bl	80082c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c1c:	480c      	ldr	r0, [pc, #48]	; (8009c50 <prvInitialiseTaskLists+0x6c>)
 8009c1e:	f7fe fb51 	bl	80082c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c22:	480c      	ldr	r0, [pc, #48]	; (8009c54 <prvInitialiseTaskLists+0x70>)
 8009c24:	f7fe fb4e 	bl	80082c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c28:	480b      	ldr	r0, [pc, #44]	; (8009c58 <prvInitialiseTaskLists+0x74>)
 8009c2a:	f7fe fb4b 	bl	80082c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c2e:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <prvInitialiseTaskLists+0x78>)
 8009c30:	4a05      	ldr	r2, [pc, #20]	; (8009c48 <prvInitialiseTaskLists+0x64>)
 8009c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c34:	4b0a      	ldr	r3, [pc, #40]	; (8009c60 <prvInitialiseTaskLists+0x7c>)
 8009c36:	4a05      	ldr	r2, [pc, #20]	; (8009c4c <prvInitialiseTaskLists+0x68>)
 8009c38:	601a      	str	r2, [r3, #0]
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20000768 	.word	0x20000768
 8009c48:	20000bc8 	.word	0x20000bc8
 8009c4c:	20000bdc 	.word	0x20000bdc
 8009c50:	20000bf8 	.word	0x20000bf8
 8009c54:	20000c0c 	.word	0x20000c0c
 8009c58:	20000c24 	.word	0x20000c24
 8009c5c:	20000bf0 	.word	0x20000bf0
 8009c60:	20000bf4 	.word	0x20000bf4

08009c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c6a:	e019      	b.n	8009ca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c6c:	f000 fed2 	bl	800aa14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c70:	4b10      	ldr	r3, [pc, #64]	; (8009cb4 <prvCheckTasksWaitingTermination+0x50>)
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe fbab 	bl	80083d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c82:	4b0d      	ldr	r3, [pc, #52]	; (8009cb8 <prvCheckTasksWaitingTermination+0x54>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	4a0b      	ldr	r2, [pc, #44]	; (8009cb8 <prvCheckTasksWaitingTermination+0x54>)
 8009c8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c8c:	4b0b      	ldr	r3, [pc, #44]	; (8009cbc <prvCheckTasksWaitingTermination+0x58>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	4a0a      	ldr	r2, [pc, #40]	; (8009cbc <prvCheckTasksWaitingTermination+0x58>)
 8009c94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c96:	f000 feed 	bl	800aa74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f810 	bl	8009cc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ca0:	4b06      	ldr	r3, [pc, #24]	; (8009cbc <prvCheckTasksWaitingTermination+0x58>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1e1      	bne.n	8009c6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000c0c 	.word	0x20000c0c
 8009cb8:	20000c38 	.word	0x20000c38
 8009cbc:	20000c20 	.word	0x20000c20

08009cc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d108      	bne.n	8009ce4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f001 f88a 	bl	800adf0 <vPortFree>
				vPortFree( pxTCB );
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 f887 	bl	800adf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ce2:	e018      	b.n	8009d16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d103      	bne.n	8009cf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 f87e 	bl	800adf0 <vPortFree>
	}
 8009cf4:	e00f      	b.n	8009d16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d00a      	beq.n	8009d16 <prvDeleteTCB+0x56>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	60fb      	str	r3, [r7, #12]
}
 8009d12:	bf00      	nop
 8009d14:	e7fe      	b.n	8009d14 <prvDeleteTCB+0x54>
	}
 8009d16:	bf00      	nop
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
	...

08009d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d26:	4b0c      	ldr	r3, [pc, #48]	; (8009d58 <prvResetNextTaskUnblockTime+0x38>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d104      	bne.n	8009d3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d30:	4b0a      	ldr	r3, [pc, #40]	; (8009d5c <prvResetNextTaskUnblockTime+0x3c>)
 8009d32:	f04f 32ff 	mov.w	r2, #4294967295
 8009d36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d38:	e008      	b.n	8009d4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d3a:	4b07      	ldr	r3, [pc, #28]	; (8009d58 <prvResetNextTaskUnblockTime+0x38>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	4a04      	ldr	r2, [pc, #16]	; (8009d5c <prvResetNextTaskUnblockTime+0x3c>)
 8009d4a:	6013      	str	r3, [r2, #0]
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	20000bf0 	.word	0x20000bf0
 8009d5c:	20000c58 	.word	0x20000c58

08009d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d66:	4b0b      	ldr	r3, [pc, #44]	; (8009d94 <xTaskGetSchedulerState+0x34>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d102      	bne.n	8009d74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	607b      	str	r3, [r7, #4]
 8009d72:	e008      	b.n	8009d86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d74:	4b08      	ldr	r3, [pc, #32]	; (8009d98 <xTaskGetSchedulerState+0x38>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d102      	bne.n	8009d82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	607b      	str	r3, [r7, #4]
 8009d80:	e001      	b.n	8009d86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d82:	2300      	movs	r3, #0
 8009d84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d86:	687b      	ldr	r3, [r7, #4]
	}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	20000c44 	.word	0x20000c44
 8009d98:	20000c60 	.word	0x20000c60

08009d9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d051      	beq.n	8009e56 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db6:	4b2a      	ldr	r3, [pc, #168]	; (8009e60 <xTaskPriorityInherit+0xc4>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d241      	bcs.n	8009e44 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	db06      	blt.n	8009dd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dc8:	4b25      	ldr	r3, [pc, #148]	; (8009e60 <xTaskPriorityInherit+0xc4>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	6959      	ldr	r1, [r3, #20]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dde:	4613      	mov	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4a1f      	ldr	r2, [pc, #124]	; (8009e64 <xTaskPriorityInherit+0xc8>)
 8009de8:	4413      	add	r3, r2
 8009dea:	4299      	cmp	r1, r3
 8009dec:	d122      	bne.n	8009e34 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	3304      	adds	r3, #4
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe faf0 	bl	80083d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009df8:	4b19      	ldr	r3, [pc, #100]	; (8009e60 <xTaskPriorityInherit+0xc4>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e06:	4b18      	ldr	r3, [pc, #96]	; (8009e68 <xTaskPriorityInherit+0xcc>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d903      	bls.n	8009e16 <xTaskPriorityInherit+0x7a>
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e12:	4a15      	ldr	r2, [pc, #84]	; (8009e68 <xTaskPriorityInherit+0xcc>)
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4a10      	ldr	r2, [pc, #64]	; (8009e64 <xTaskPriorityInherit+0xc8>)
 8009e24:	441a      	add	r2, r3
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	f7fe fa76 	bl	800831e <vListInsertEnd>
 8009e32:	e004      	b.n	8009e3e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e34:	4b0a      	ldr	r3, [pc, #40]	; (8009e60 <xTaskPriorityInherit+0xc4>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	60fb      	str	r3, [r7, #12]
 8009e42:	e008      	b.n	8009e56 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e48:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <xTaskPriorityInherit+0xc4>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d201      	bcs.n	8009e56 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009e52:	2301      	movs	r3, #1
 8009e54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e56:	68fb      	ldr	r3, [r7, #12]
	}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	20000764 	.word	0x20000764
 8009e64:	20000768 	.word	0x20000768
 8009e68:	20000c40 	.word	0x20000c40

08009e6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d056      	beq.n	8009f30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e82:	4b2e      	ldr	r3, [pc, #184]	; (8009f3c <xTaskPriorityDisinherit+0xd0>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d00a      	beq.n	8009ea2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	60fb      	str	r3, [r7, #12]
}
 8009e9e:	bf00      	nop
 8009ea0:	e7fe      	b.n	8009ea0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10a      	bne.n	8009ec0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	60bb      	str	r3, [r7, #8]
}
 8009ebc:	bf00      	nop
 8009ebe:	e7fe      	b.n	8009ebe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ec4:	1e5a      	subs	r2, r3, #1
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d02c      	beq.n	8009f30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d128      	bne.n	8009f30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe fa78 	bl	80083d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f00:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <xTaskPriorityDisinherit+0xd4>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d903      	bls.n	8009f10 <xTaskPriorityDisinherit+0xa4>
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0c:	4a0c      	ldr	r2, [pc, #48]	; (8009f40 <xTaskPriorityDisinherit+0xd4>)
 8009f0e:	6013      	str	r3, [r2, #0]
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f14:	4613      	mov	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4a09      	ldr	r2, [pc, #36]	; (8009f44 <xTaskPriorityDisinherit+0xd8>)
 8009f1e:	441a      	add	r2, r3
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	3304      	adds	r3, #4
 8009f24:	4619      	mov	r1, r3
 8009f26:	4610      	mov	r0, r2
 8009f28:	f7fe f9f9 	bl	800831e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f30:	697b      	ldr	r3, [r7, #20]
	}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3718      	adds	r7, #24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20000764 	.word	0x20000764
 8009f40:	20000c40 	.word	0x20000c40
 8009f44:	20000768 	.word	0x20000768

08009f48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009f56:	2301      	movs	r3, #1
 8009f58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d06a      	beq.n	800a036 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10a      	bne.n	8009f7e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	60fb      	str	r3, [r7, #12]
}
 8009f7a:	bf00      	nop
 8009f7c:	e7fe      	b.n	8009f7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d902      	bls.n	8009f8e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	61fb      	str	r3, [r7, #28]
 8009f8c:	e002      	b.n	8009f94 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f92:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d04b      	beq.n	800a036 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d146      	bne.n	800a036 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009fa8:	4b25      	ldr	r3, [pc, #148]	; (800a040 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	69ba      	ldr	r2, [r7, #24]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d10a      	bne.n	8009fc8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	60bb      	str	r3, [r7, #8]
}
 8009fc4:	bf00      	nop
 8009fc6:	e7fe      	b.n	8009fc6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fcc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	69fa      	ldr	r2, [r7, #28]
 8009fd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	db04      	blt.n	8009fe6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	6959      	ldr	r1, [r3, #20]
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	4613      	mov	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4a13      	ldr	r2, [pc, #76]	; (800a044 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009ff6:	4413      	add	r3, r2
 8009ff8:	4299      	cmp	r1, r3
 8009ffa:	d11c      	bne.n	800a036 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	3304      	adds	r3, #4
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe f9e9 	bl	80083d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a00a:	4b0f      	ldr	r3, [pc, #60]	; (800a048 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d903      	bls.n	800a01a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a016:	4a0c      	ldr	r2, [pc, #48]	; (800a048 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a018:	6013      	str	r3, [r2, #0]
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01e:	4613      	mov	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4a07      	ldr	r2, [pc, #28]	; (800a044 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a028:	441a      	add	r2, r3
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	3304      	adds	r3, #4
 800a02e:	4619      	mov	r1, r3
 800a030:	4610      	mov	r0, r2
 800a032:	f7fe f974 	bl	800831e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a036:	bf00      	nop
 800a038:	3720      	adds	r7, #32
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	20000764 	.word	0x20000764
 800a044:	20000768 	.word	0x20000768
 800a048:	20000c40 	.word	0x20000c40

0800a04c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a04c:	b480      	push	{r7}
 800a04e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a050:	4b07      	ldr	r3, [pc, #28]	; (800a070 <pvTaskIncrementMutexHeldCount+0x24>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d004      	beq.n	800a062 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a058:	4b05      	ldr	r3, [pc, #20]	; (800a070 <pvTaskIncrementMutexHeldCount+0x24>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a05e:	3201      	adds	r2, #1
 800a060:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a062:	4b03      	ldr	r3, [pc, #12]	; (800a070 <pvTaskIncrementMutexHeldCount+0x24>)
 800a064:	681b      	ldr	r3, [r3, #0]
	}
 800a066:	4618      	mov	r0, r3
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	20000764 	.word	0x20000764

0800a074 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a07e:	4b21      	ldr	r3, [pc, #132]	; (800a104 <prvAddCurrentTaskToDelayedList+0x90>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a084:	4b20      	ldr	r3, [pc, #128]	; (800a108 <prvAddCurrentTaskToDelayedList+0x94>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3304      	adds	r3, #4
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe f9a4 	bl	80083d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a096:	d10a      	bne.n	800a0ae <prvAddCurrentTaskToDelayedList+0x3a>
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d007      	beq.n	800a0ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a09e:	4b1a      	ldr	r3, [pc, #104]	; (800a108 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4819      	ldr	r0, [pc, #100]	; (800a10c <prvAddCurrentTaskToDelayedList+0x98>)
 800a0a8:	f7fe f939 	bl	800831e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0ac:	e026      	b.n	800a0fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0b6:	4b14      	ldr	r3, [pc, #80]	; (800a108 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d209      	bcs.n	800a0da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0c6:	4b12      	ldr	r3, [pc, #72]	; (800a110 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	4b0f      	ldr	r3, [pc, #60]	; (800a108 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f7fe f947 	bl	8008366 <vListInsert>
}
 800a0d8:	e010      	b.n	800a0fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0da:	4b0e      	ldr	r3, [pc, #56]	; (800a114 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	4b0a      	ldr	r3, [pc, #40]	; (800a108 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	f7fe f93d 	bl	8008366 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0ec:	4b0a      	ldr	r3, [pc, #40]	; (800a118 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d202      	bcs.n	800a0fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0f6:	4a08      	ldr	r2, [pc, #32]	; (800a118 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	6013      	str	r3, [r2, #0]
}
 800a0fc:	bf00      	nop
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	20000c3c 	.word	0x20000c3c
 800a108:	20000764 	.word	0x20000764
 800a10c:	20000c24 	.word	0x20000c24
 800a110:	20000bf4 	.word	0x20000bf4
 800a114:	20000bf0 	.word	0x20000bf0
 800a118:	20000c58 	.word	0x20000c58

0800a11c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08a      	sub	sp, #40	; 0x28
 800a120:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a122:	2300      	movs	r3, #0
 800a124:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a126:	f000 fb07 	bl	800a738 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a12a:	4b1c      	ldr	r3, [pc, #112]	; (800a19c <xTimerCreateTimerTask+0x80>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d021      	beq.n	800a176 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a132:	2300      	movs	r3, #0
 800a134:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a136:	2300      	movs	r3, #0
 800a138:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a13a:	1d3a      	adds	r2, r7, #4
 800a13c:	f107 0108 	add.w	r1, r7, #8
 800a140:	f107 030c 	add.w	r3, r7, #12
 800a144:	4618      	mov	r0, r3
 800a146:	f7fe f8a3 	bl	8008290 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a14a:	6879      	ldr	r1, [r7, #4]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	9202      	str	r2, [sp, #8]
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	2302      	movs	r3, #2
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	2300      	movs	r3, #0
 800a15a:	460a      	mov	r2, r1
 800a15c:	4910      	ldr	r1, [pc, #64]	; (800a1a0 <xTimerCreateTimerTask+0x84>)
 800a15e:	4811      	ldr	r0, [pc, #68]	; (800a1a4 <xTimerCreateTimerTask+0x88>)
 800a160:	f7fe ffe0 	bl	8009124 <xTaskCreateStatic>
 800a164:	4603      	mov	r3, r0
 800a166:	4a10      	ldr	r2, [pc, #64]	; (800a1a8 <xTimerCreateTimerTask+0x8c>)
 800a168:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a16a:	4b0f      	ldr	r3, [pc, #60]	; (800a1a8 <xTimerCreateTimerTask+0x8c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a172:	2301      	movs	r3, #1
 800a174:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10a      	bne.n	800a192 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	613b      	str	r3, [r7, #16]
}
 800a18e:	bf00      	nop
 800a190:	e7fe      	b.n	800a190 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a192:	697b      	ldr	r3, [r7, #20]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	20000c94 	.word	0x20000c94
 800a1a0:	0800cda4 	.word	0x0800cda4
 800a1a4:	0800a2e1 	.word	0x0800a2e1
 800a1a8:	20000c98 	.word	0x20000c98

0800a1ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08a      	sub	sp, #40	; 0x28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <xTimerGenericCommand+0x2e>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	623b      	str	r3, [r7, #32]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1da:	4b1a      	ldr	r3, [pc, #104]	; (800a244 <xTimerGenericCommand+0x98>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d02a      	beq.n	800a238 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2b05      	cmp	r3, #5
 800a1f2:	dc18      	bgt.n	800a226 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1f4:	f7ff fdb4 	bl	8009d60 <xTaskGetSchedulerState>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d109      	bne.n	800a212 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a1fe:	4b11      	ldr	r3, [pc, #68]	; (800a244 <xTimerGenericCommand+0x98>)
 800a200:	6818      	ldr	r0, [r3, #0]
 800a202:	f107 0110 	add.w	r1, r7, #16
 800a206:	2300      	movs	r3, #0
 800a208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a20a:	f7fe fa7f 	bl	800870c <xQueueGenericSend>
 800a20e:	6278      	str	r0, [r7, #36]	; 0x24
 800a210:	e012      	b.n	800a238 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a212:	4b0c      	ldr	r3, [pc, #48]	; (800a244 <xTimerGenericCommand+0x98>)
 800a214:	6818      	ldr	r0, [r3, #0]
 800a216:	f107 0110 	add.w	r1, r7, #16
 800a21a:	2300      	movs	r3, #0
 800a21c:	2200      	movs	r2, #0
 800a21e:	f7fe fa75 	bl	800870c <xQueueGenericSend>
 800a222:	6278      	str	r0, [r7, #36]	; 0x24
 800a224:	e008      	b.n	800a238 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a226:	4b07      	ldr	r3, [pc, #28]	; (800a244 <xTimerGenericCommand+0x98>)
 800a228:	6818      	ldr	r0, [r3, #0]
 800a22a:	f107 0110 	add.w	r1, r7, #16
 800a22e:	2300      	movs	r3, #0
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	f7fe fb69 	bl	8008908 <xQueueGenericSendFromISR>
 800a236:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3728      	adds	r7, #40	; 0x28
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000c94 	.word	0x20000c94

0800a248 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a252:	4b22      	ldr	r3, [pc, #136]	; (800a2dc <prvProcessExpiredTimer+0x94>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	3304      	adds	r3, #4
 800a260:	4618      	mov	r0, r3
 800a262:	f7fe f8b9 	bl	80083d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d022      	beq.n	800a2ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	699a      	ldr	r2, [r3, #24]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	18d1      	adds	r1, r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	6978      	ldr	r0, [r7, #20]
 800a282:	f000 f8d1 	bl	800a428 <prvInsertTimerInActiveList>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01f      	beq.n	800a2cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a28c:	2300      	movs	r3, #0
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	2300      	movs	r3, #0
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	2100      	movs	r1, #0
 800a296:	6978      	ldr	r0, [r7, #20]
 800a298:	f7ff ff88 	bl	800a1ac <xTimerGenericCommand>
 800a29c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d113      	bne.n	800a2cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	60fb      	str	r3, [r7, #12]
}
 800a2b6:	bf00      	nop
 800a2b8:	e7fe      	b.n	800a2b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2c0:	f023 0301 	bic.w	r3, r3, #1
 800a2c4:	b2da      	uxtb	r2, r3
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	6a1b      	ldr	r3, [r3, #32]
 800a2d0:	6978      	ldr	r0, [r7, #20]
 800a2d2:	4798      	blx	r3
}
 800a2d4:	bf00      	nop
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20000c8c 	.word	0x20000c8c

0800a2e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2e8:	f107 0308 	add.w	r3, r7, #8
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f000 f857 	bl	800a3a0 <prvGetNextExpireTime>
 800a2f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f000 f803 	bl	800a304 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a2fe:	f000 f8d5 	bl	800a4ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a302:	e7f1      	b.n	800a2e8 <prvTimerTask+0x8>

0800a304 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a30e:	f7ff f945 	bl	800959c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a312:	f107 0308 	add.w	r3, r7, #8
 800a316:	4618      	mov	r0, r3
 800a318:	f000 f866 	bl	800a3e8 <prvSampleTimeNow>
 800a31c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d130      	bne.n	800a386 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10a      	bne.n	800a340 <prvProcessTimerOrBlockTask+0x3c>
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d806      	bhi.n	800a340 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a332:	f7ff f941 	bl	80095b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a336:	68f9      	ldr	r1, [r7, #12]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff ff85 	bl	800a248 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a33e:	e024      	b.n	800a38a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d008      	beq.n	800a358 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a346:	4b13      	ldr	r3, [pc, #76]	; (800a394 <prvProcessTimerOrBlockTask+0x90>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <prvProcessTimerOrBlockTask+0x50>
 800a350:	2301      	movs	r3, #1
 800a352:	e000      	b.n	800a356 <prvProcessTimerOrBlockTask+0x52>
 800a354:	2300      	movs	r3, #0
 800a356:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a358:	4b0f      	ldr	r3, [pc, #60]	; (800a398 <prvProcessTimerOrBlockTask+0x94>)
 800a35a:	6818      	ldr	r0, [r3, #0]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	4619      	mov	r1, r3
 800a366:	f7fe fea9 	bl	80090bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a36a:	f7ff f925 	bl	80095b8 <xTaskResumeAll>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a374:	4b09      	ldr	r3, [pc, #36]	; (800a39c <prvProcessTimerOrBlockTask+0x98>)
 800a376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	f3bf 8f6f 	isb	sy
}
 800a384:	e001      	b.n	800a38a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a386:	f7ff f917 	bl	80095b8 <xTaskResumeAll>
}
 800a38a:	bf00      	nop
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20000c90 	.word	0x20000c90
 800a398:	20000c94 	.word	0x20000c94
 800a39c:	e000ed04 	.word	0xe000ed04

0800a3a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3a8:	4b0e      	ldr	r3, [pc, #56]	; (800a3e4 <prvGetNextExpireTime+0x44>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <prvGetNextExpireTime+0x16>
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	e000      	b.n	800a3b8 <prvGetNextExpireTime+0x18>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d105      	bne.n	800a3d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3c4:	4b07      	ldr	r3, [pc, #28]	; (800a3e4 <prvGetNextExpireTime+0x44>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	60fb      	str	r3, [r7, #12]
 800a3ce:	e001      	b.n	800a3d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20000c8c 	.word	0x20000c8c

0800a3e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3f0:	f7ff f980 	bl	80096f4 <xTaskGetTickCount>
 800a3f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3f6:	4b0b      	ldr	r3, [pc, #44]	; (800a424 <prvSampleTimeNow+0x3c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d205      	bcs.n	800a40c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a400:	f000 f936 	bl	800a670 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	e002      	b.n	800a412 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a412:	4a04      	ldr	r2, [pc, #16]	; (800a424 <prvSampleTimeNow+0x3c>)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a418:	68fb      	ldr	r3, [r7, #12]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20000c9c 	.word	0x20000c9c

0800a428 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
 800a434:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a436:	2300      	movs	r3, #0
 800a438:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a446:	68ba      	ldr	r2, [r7, #8]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d812      	bhi.n	800a474 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	1ad2      	subs	r2, r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d302      	bcc.n	800a462 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a45c:	2301      	movs	r3, #1
 800a45e:	617b      	str	r3, [r7, #20]
 800a460:	e01b      	b.n	800a49a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a462:	4b10      	ldr	r3, [pc, #64]	; (800a4a4 <prvInsertTimerInActiveList+0x7c>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3304      	adds	r3, #4
 800a46a:	4619      	mov	r1, r3
 800a46c:	4610      	mov	r0, r2
 800a46e:	f7fd ff7a 	bl	8008366 <vListInsert>
 800a472:	e012      	b.n	800a49a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d206      	bcs.n	800a48a <prvInsertTimerInActiveList+0x62>
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	429a      	cmp	r2, r3
 800a482:	d302      	bcc.n	800a48a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a484:	2301      	movs	r3, #1
 800a486:	617b      	str	r3, [r7, #20]
 800a488:	e007      	b.n	800a49a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a48a:	4b07      	ldr	r3, [pc, #28]	; (800a4a8 <prvInsertTimerInActiveList+0x80>)
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	3304      	adds	r3, #4
 800a492:	4619      	mov	r1, r3
 800a494:	4610      	mov	r0, r2
 800a496:	f7fd ff66 	bl	8008366 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a49a:	697b      	ldr	r3, [r7, #20]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	20000c90 	.word	0x20000c90
 800a4a8:	20000c8c 	.word	0x20000c8c

0800a4ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b08e      	sub	sp, #56	; 0x38
 800a4b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4b2:	e0ca      	b.n	800a64a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	da18      	bge.n	800a4ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4ba:	1d3b      	adds	r3, r7, #4
 800a4bc:	3304      	adds	r3, #4
 800a4be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	61fb      	str	r3, [r7, #28]
}
 800a4d8:	bf00      	nop
 800a4da:	e7fe      	b.n	800a4da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4e2:	6850      	ldr	r0, [r2, #4]
 800a4e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4e6:	6892      	ldr	r2, [r2, #8]
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f2c0 80aa 	blt.w	800a648 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	695b      	ldr	r3, [r3, #20]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d004      	beq.n	800a50a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	3304      	adds	r3, #4
 800a504:	4618      	mov	r0, r3
 800a506:	f7fd ff67 	bl	80083d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a50a:	463b      	mov	r3, r7
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff ff6b 	bl	800a3e8 <prvSampleTimeNow>
 800a512:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b09      	cmp	r3, #9
 800a518:	f200 8097 	bhi.w	800a64a <prvProcessReceivedCommands+0x19e>
 800a51c:	a201      	add	r2, pc, #4	; (adr r2, 800a524 <prvProcessReceivedCommands+0x78>)
 800a51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a522:	bf00      	nop
 800a524:	0800a54d 	.word	0x0800a54d
 800a528:	0800a54d 	.word	0x0800a54d
 800a52c:	0800a54d 	.word	0x0800a54d
 800a530:	0800a5c1 	.word	0x0800a5c1
 800a534:	0800a5d5 	.word	0x0800a5d5
 800a538:	0800a61f 	.word	0x0800a61f
 800a53c:	0800a54d 	.word	0x0800a54d
 800a540:	0800a54d 	.word	0x0800a54d
 800a544:	0800a5c1 	.word	0x0800a5c1
 800a548:	0800a5d5 	.word	0x0800a5d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a552:	f043 0301 	orr.w	r3, r3, #1
 800a556:	b2da      	uxtb	r2, r3
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	18d1      	adds	r1, r2, r3
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a56a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a56c:	f7ff ff5c 	bl	800a428 <prvInsertTimerInActiveList>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d069      	beq.n	800a64a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a57c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a584:	f003 0304 	and.w	r3, r3, #4
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d05e      	beq.n	800a64a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	441a      	add	r2, r3
 800a594:	2300      	movs	r3, #0
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	2300      	movs	r3, #0
 800a59a:	2100      	movs	r1, #0
 800a59c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a59e:	f7ff fe05 	bl	800a1ac <xTimerGenericCommand>
 800a5a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d14f      	bne.n	800a64a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	61bb      	str	r3, [r7, #24]
}
 800a5bc:	bf00      	nop
 800a5be:	e7fe      	b.n	800a5be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5c6:	f023 0301 	bic.w	r3, r3, #1
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a5d2:	e03a      	b.n	800a64a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5da:	f043 0301 	orr.w	r3, r3, #1
 800a5de:	b2da      	uxtb	r2, r3
 800a5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10a      	bne.n	800a60a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	617b      	str	r3, [r7, #20]
}
 800a606:	bf00      	nop
 800a608:	e7fe      	b.n	800a608 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	699a      	ldr	r2, [r3, #24]
 800a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a610:	18d1      	adds	r1, r2, r3
 800a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a618:	f7ff ff06 	bl	800a428 <prvInsertTimerInActiveList>
					break;
 800a61c:	e015      	b.n	800a64a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a624:	f003 0302 	and.w	r3, r3, #2
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d103      	bne.n	800a634 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a62e:	f000 fbdf 	bl	800adf0 <vPortFree>
 800a632:	e00a      	b.n	800a64a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a63a:	f023 0301 	bic.w	r3, r3, #1
 800a63e:	b2da      	uxtb	r2, r3
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a646:	e000      	b.n	800a64a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a648:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a64a:	4b08      	ldr	r3, [pc, #32]	; (800a66c <prvProcessReceivedCommands+0x1c0>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	1d39      	adds	r1, r7, #4
 800a650:	2200      	movs	r2, #0
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe f9f4 	bl	8008a40 <xQueueReceive>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f47f af2a 	bne.w	800a4b4 <prvProcessReceivedCommands+0x8>
	}
}
 800a660:	bf00      	nop
 800a662:	bf00      	nop
 800a664:	3730      	adds	r7, #48	; 0x30
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000c94 	.word	0x20000c94

0800a670 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b088      	sub	sp, #32
 800a674:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a676:	e048      	b.n	800a70a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a678:	4b2d      	ldr	r3, [pc, #180]	; (800a730 <prvSwitchTimerLists+0xc0>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a682:	4b2b      	ldr	r3, [pc, #172]	; (800a730 <prvSwitchTimerLists+0xc0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	3304      	adds	r3, #4
 800a690:	4618      	mov	r0, r3
 800a692:	f7fd fea1 	bl	80083d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d02e      	beq.n	800a70a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6b6:	68ba      	ldr	r2, [r7, #8]
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d90e      	bls.n	800a6dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6ca:	4b19      	ldr	r3, [pc, #100]	; (800a730 <prvSwitchTimerLists+0xc0>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	f7fd fe46 	bl	8008366 <vListInsert>
 800a6da:	e016      	b.n	800a70a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	693a      	ldr	r2, [r7, #16]
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7ff fd60 	bl	800a1ac <xTimerGenericCommand>
 800a6ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10a      	bne.n	800a70a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	603b      	str	r3, [r7, #0]
}
 800a706:	bf00      	nop
 800a708:	e7fe      	b.n	800a708 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a70a:	4b09      	ldr	r3, [pc, #36]	; (800a730 <prvSwitchTimerLists+0xc0>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1b1      	bne.n	800a678 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a714:	4b06      	ldr	r3, [pc, #24]	; (800a730 <prvSwitchTimerLists+0xc0>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a71a:	4b06      	ldr	r3, [pc, #24]	; (800a734 <prvSwitchTimerLists+0xc4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a04      	ldr	r2, [pc, #16]	; (800a730 <prvSwitchTimerLists+0xc0>)
 800a720:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a722:	4a04      	ldr	r2, [pc, #16]	; (800a734 <prvSwitchTimerLists+0xc4>)
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	6013      	str	r3, [r2, #0]
}
 800a728:	bf00      	nop
 800a72a:	3718      	adds	r7, #24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	20000c8c 	.word	0x20000c8c
 800a734:	20000c90 	.word	0x20000c90

0800a738 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a73e:	f000 f969 	bl	800aa14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a742:	4b15      	ldr	r3, [pc, #84]	; (800a798 <prvCheckForValidListAndQueue+0x60>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d120      	bne.n	800a78c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a74a:	4814      	ldr	r0, [pc, #80]	; (800a79c <prvCheckForValidListAndQueue+0x64>)
 800a74c:	f7fd fdba 	bl	80082c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a750:	4813      	ldr	r0, [pc, #76]	; (800a7a0 <prvCheckForValidListAndQueue+0x68>)
 800a752:	f7fd fdb7 	bl	80082c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a756:	4b13      	ldr	r3, [pc, #76]	; (800a7a4 <prvCheckForValidListAndQueue+0x6c>)
 800a758:	4a10      	ldr	r2, [pc, #64]	; (800a79c <prvCheckForValidListAndQueue+0x64>)
 800a75a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a75c:	4b12      	ldr	r3, [pc, #72]	; (800a7a8 <prvCheckForValidListAndQueue+0x70>)
 800a75e:	4a10      	ldr	r2, [pc, #64]	; (800a7a0 <prvCheckForValidListAndQueue+0x68>)
 800a760:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a762:	2300      	movs	r3, #0
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	4b11      	ldr	r3, [pc, #68]	; (800a7ac <prvCheckForValidListAndQueue+0x74>)
 800a768:	4a11      	ldr	r2, [pc, #68]	; (800a7b0 <prvCheckForValidListAndQueue+0x78>)
 800a76a:	2110      	movs	r1, #16
 800a76c:	200a      	movs	r0, #10
 800a76e:	f7fd fec5 	bl	80084fc <xQueueGenericCreateStatic>
 800a772:	4603      	mov	r3, r0
 800a774:	4a08      	ldr	r2, [pc, #32]	; (800a798 <prvCheckForValidListAndQueue+0x60>)
 800a776:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a778:	4b07      	ldr	r3, [pc, #28]	; (800a798 <prvCheckForValidListAndQueue+0x60>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d005      	beq.n	800a78c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a780:	4b05      	ldr	r3, [pc, #20]	; (800a798 <prvCheckForValidListAndQueue+0x60>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	490b      	ldr	r1, [pc, #44]	; (800a7b4 <prvCheckForValidListAndQueue+0x7c>)
 800a786:	4618      	mov	r0, r3
 800a788:	f7fe fc6e 	bl	8009068 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a78c:	f000 f972 	bl	800aa74 <vPortExitCritical>
}
 800a790:	bf00      	nop
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	20000c94 	.word	0x20000c94
 800a79c:	20000c64 	.word	0x20000c64
 800a7a0:	20000c78 	.word	0x20000c78
 800a7a4:	20000c8c 	.word	0x20000c8c
 800a7a8:	20000c90 	.word	0x20000c90
 800a7ac:	20000d40 	.word	0x20000d40
 800a7b0:	20000ca0 	.word	0x20000ca0
 800a7b4:	0800cdac 	.word	0x0800cdac

0800a7b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	3b04      	subs	r3, #4
 800a7c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a7d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	3b04      	subs	r3, #4
 800a7d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f023 0201 	bic.w	r2, r3, #1
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	3b04      	subs	r3, #4
 800a7e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7e8:	4a0c      	ldr	r2, [pc, #48]	; (800a81c <pxPortInitialiseStack+0x64>)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3b14      	subs	r3, #20
 800a7f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3b04      	subs	r3, #4
 800a7fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f06f 0202 	mvn.w	r2, #2
 800a806:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	3b20      	subs	r3, #32
 800a80c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a80e:	68fb      	ldr	r3, [r7, #12]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	0800a821 	.word	0x0800a821

0800a820 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a82a:	4b12      	ldr	r3, [pc, #72]	; (800a874 <prvTaskExitError+0x54>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a832:	d00a      	beq.n	800a84a <prvTaskExitError+0x2a>
	__asm volatile
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	60fb      	str	r3, [r7, #12]
}
 800a846:	bf00      	nop
 800a848:	e7fe      	b.n	800a848 <prvTaskExitError+0x28>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	60bb      	str	r3, [r7, #8]
}
 800a85c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a85e:	bf00      	nop
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0fc      	beq.n	800a860 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a866:	bf00      	nop
 800a868:	bf00      	nop
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	20000010 	.word	0x20000010
	...

0800a880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a880:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <pxCurrentTCBConst2>)
 800a882:	6819      	ldr	r1, [r3, #0]
 800a884:	6808      	ldr	r0, [r1, #0]
 800a886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88a:	f380 8809 	msr	PSP, r0
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f04f 0000 	mov.w	r0, #0
 800a896:	f380 8811 	msr	BASEPRI, r0
 800a89a:	4770      	bx	lr
 800a89c:	f3af 8000 	nop.w

0800a8a0 <pxCurrentTCBConst2>:
 800a8a0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a8a4:	bf00      	nop
 800a8a6:	bf00      	nop

0800a8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a8a8:	4808      	ldr	r0, [pc, #32]	; (800a8cc <prvPortStartFirstTask+0x24>)
 800a8aa:	6800      	ldr	r0, [r0, #0]
 800a8ac:	6800      	ldr	r0, [r0, #0]
 800a8ae:	f380 8808 	msr	MSP, r0
 800a8b2:	f04f 0000 	mov.w	r0, #0
 800a8b6:	f380 8814 	msr	CONTROL, r0
 800a8ba:	b662      	cpsie	i
 800a8bc:	b661      	cpsie	f
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	df00      	svc	0
 800a8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8ca:	bf00      	nop
 800a8cc:	e000ed08 	.word	0xe000ed08

0800a8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a8d6:	4b46      	ldr	r3, [pc, #280]	; (800a9f0 <xPortStartScheduler+0x120>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a46      	ldr	r2, [pc, #280]	; (800a9f4 <xPortStartScheduler+0x124>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d10a      	bne.n	800a8f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	613b      	str	r3, [r7, #16]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8f6:	4b3e      	ldr	r3, [pc, #248]	; (800a9f0 <xPortStartScheduler+0x120>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a3f      	ldr	r2, [pc, #252]	; (800a9f8 <xPortStartScheduler+0x128>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d10a      	bne.n	800a916 <xPortStartScheduler+0x46>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	60fb      	str	r3, [r7, #12]
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a916:	4b39      	ldr	r3, [pc, #228]	; (800a9fc <xPortStartScheduler+0x12c>)
 800a918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	22ff      	movs	r2, #255	; 0xff
 800a926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a930:	78fb      	ldrb	r3, [r7, #3]
 800a932:	b2db      	uxtb	r3, r3
 800a934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	4b31      	ldr	r3, [pc, #196]	; (800aa00 <xPortStartScheduler+0x130>)
 800a93c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a93e:	4b31      	ldr	r3, [pc, #196]	; (800aa04 <xPortStartScheduler+0x134>)
 800a940:	2207      	movs	r2, #7
 800a942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a944:	e009      	b.n	800a95a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a946:	4b2f      	ldr	r3, [pc, #188]	; (800aa04 <xPortStartScheduler+0x134>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	4a2d      	ldr	r2, [pc, #180]	; (800aa04 <xPortStartScheduler+0x134>)
 800a94e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a950:	78fb      	ldrb	r3, [r7, #3]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	005b      	lsls	r3, r3, #1
 800a956:	b2db      	uxtb	r3, r3
 800a958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a962:	2b80      	cmp	r3, #128	; 0x80
 800a964:	d0ef      	beq.n	800a946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a966:	4b27      	ldr	r3, [pc, #156]	; (800aa04 <xPortStartScheduler+0x134>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f1c3 0307 	rsb	r3, r3, #7
 800a96e:	2b04      	cmp	r3, #4
 800a970:	d00a      	beq.n	800a988 <xPortStartScheduler+0xb8>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	60bb      	str	r3, [r7, #8]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a988:	4b1e      	ldr	r3, [pc, #120]	; (800aa04 <xPortStartScheduler+0x134>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	021b      	lsls	r3, r3, #8
 800a98e:	4a1d      	ldr	r2, [pc, #116]	; (800aa04 <xPortStartScheduler+0x134>)
 800a990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a992:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <xPortStartScheduler+0x134>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a99a:	4a1a      	ldr	r2, [pc, #104]	; (800aa04 <xPortStartScheduler+0x134>)
 800a99c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9a6:	4b18      	ldr	r3, [pc, #96]	; (800aa08 <xPortStartScheduler+0x138>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a17      	ldr	r2, [pc, #92]	; (800aa08 <xPortStartScheduler+0x138>)
 800a9ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9b2:	4b15      	ldr	r3, [pc, #84]	; (800aa08 <xPortStartScheduler+0x138>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a14      	ldr	r2, [pc, #80]	; (800aa08 <xPortStartScheduler+0x138>)
 800a9b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a9bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9be:	f000 f8dd 	bl	800ab7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9c2:	4b12      	ldr	r3, [pc, #72]	; (800aa0c <xPortStartScheduler+0x13c>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a9c8:	f000 f8fc 	bl	800abc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a9cc:	4b10      	ldr	r3, [pc, #64]	; (800aa10 <xPortStartScheduler+0x140>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a0f      	ldr	r2, [pc, #60]	; (800aa10 <xPortStartScheduler+0x140>)
 800a9d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a9d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9d8:	f7ff ff66 	bl	800a8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9dc:	f7fe ff54 	bl	8009888 <vTaskSwitchContext>
	prvTaskExitError();
 800a9e0:	f7ff ff1e 	bl	800a820 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	e000ed00 	.word	0xe000ed00
 800a9f4:	410fc271 	.word	0x410fc271
 800a9f8:	410fc270 	.word	0x410fc270
 800a9fc:	e000e400 	.word	0xe000e400
 800aa00:	20000d90 	.word	0x20000d90
 800aa04:	20000d94 	.word	0x20000d94
 800aa08:	e000ed20 	.word	0xe000ed20
 800aa0c:	20000010 	.word	0x20000010
 800aa10:	e000ef34 	.word	0xe000ef34

0800aa14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	607b      	str	r3, [r7, #4]
}
 800aa2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa2e:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <vPortEnterCritical+0x58>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3301      	adds	r3, #1
 800aa34:	4a0d      	ldr	r2, [pc, #52]	; (800aa6c <vPortEnterCritical+0x58>)
 800aa36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa38:	4b0c      	ldr	r3, [pc, #48]	; (800aa6c <vPortEnterCritical+0x58>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d10f      	bne.n	800aa60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa40:	4b0b      	ldr	r3, [pc, #44]	; (800aa70 <vPortEnterCritical+0x5c>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00a      	beq.n	800aa60 <vPortEnterCritical+0x4c>
	__asm volatile
 800aa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	603b      	str	r3, [r7, #0]
}
 800aa5c:	bf00      	nop
 800aa5e:	e7fe      	b.n	800aa5e <vPortEnterCritical+0x4a>
	}
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	20000010 	.word	0x20000010
 800aa70:	e000ed04 	.word	0xe000ed04

0800aa74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa7a:	4b12      	ldr	r3, [pc, #72]	; (800aac4 <vPortExitCritical+0x50>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10a      	bne.n	800aa98 <vPortExitCritical+0x24>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	607b      	str	r3, [r7, #4]
}
 800aa94:	bf00      	nop
 800aa96:	e7fe      	b.n	800aa96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <vPortExitCritical+0x50>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	4a09      	ldr	r2, [pc, #36]	; (800aac4 <vPortExitCritical+0x50>)
 800aaa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aaa2:	4b08      	ldr	r3, [pc, #32]	; (800aac4 <vPortExitCritical+0x50>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d105      	bne.n	800aab6 <vPortExitCritical+0x42>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	f383 8811 	msr	BASEPRI, r3
}
 800aab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aab6:	bf00      	nop
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	20000010 	.word	0x20000010
	...

0800aad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aad0:	f3ef 8009 	mrs	r0, PSP
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	4b15      	ldr	r3, [pc, #84]	; (800ab30 <pxCurrentTCBConst>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	f01e 0f10 	tst.w	lr, #16
 800aae0:	bf08      	it	eq
 800aae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaea:	6010      	str	r0, [r2, #0]
 800aaec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aaf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aaf4:	f380 8811 	msr	BASEPRI, r0
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f7fe fec2 	bl	8009888 <vTaskSwitchContext>
 800ab04:	f04f 0000 	mov.w	r0, #0
 800ab08:	f380 8811 	msr	BASEPRI, r0
 800ab0c:	bc09      	pop	{r0, r3}
 800ab0e:	6819      	ldr	r1, [r3, #0]
 800ab10:	6808      	ldr	r0, [r1, #0]
 800ab12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab16:	f01e 0f10 	tst.w	lr, #16
 800ab1a:	bf08      	it	eq
 800ab1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab20:	f380 8809 	msr	PSP, r0
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	f3af 8000 	nop.w

0800ab30 <pxCurrentTCBConst>:
 800ab30:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop

0800ab38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	607b      	str	r3, [r7, #4]
}
 800ab50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab52:	f7fe fddf 	bl	8009714 <xTaskIncrementTick>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab5c:	4b06      	ldr	r3, [pc, #24]	; (800ab78 <xPortSysTickHandler+0x40>)
 800ab5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	2300      	movs	r3, #0
 800ab66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	f383 8811 	msr	BASEPRI, r3
}
 800ab6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	e000ed04 	.word	0xe000ed04

0800ab7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab80:	4b0b      	ldr	r3, [pc, #44]	; (800abb0 <vPortSetupTimerInterrupt+0x34>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab86:	4b0b      	ldr	r3, [pc, #44]	; (800abb4 <vPortSetupTimerInterrupt+0x38>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab8c:	4b0a      	ldr	r3, [pc, #40]	; (800abb8 <vPortSetupTimerInterrupt+0x3c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a0a      	ldr	r2, [pc, #40]	; (800abbc <vPortSetupTimerInterrupt+0x40>)
 800ab92:	fba2 2303 	umull	r2, r3, r2, r3
 800ab96:	099b      	lsrs	r3, r3, #6
 800ab98:	4a09      	ldr	r2, [pc, #36]	; (800abc0 <vPortSetupTimerInterrupt+0x44>)
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab9e:	4b04      	ldr	r3, [pc, #16]	; (800abb0 <vPortSetupTimerInterrupt+0x34>)
 800aba0:	2207      	movs	r2, #7
 800aba2:	601a      	str	r2, [r3, #0]
}
 800aba4:	bf00      	nop
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	e000e010 	.word	0xe000e010
 800abb4:	e000e018 	.word	0xe000e018
 800abb8:	20000004 	.word	0x20000004
 800abbc:	10624dd3 	.word	0x10624dd3
 800abc0:	e000e014 	.word	0xe000e014

0800abc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800abc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800abd4 <vPortEnableVFP+0x10>
 800abc8:	6801      	ldr	r1, [r0, #0]
 800abca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800abce:	6001      	str	r1, [r0, #0]
 800abd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800abd2:	bf00      	nop
 800abd4:	e000ed88 	.word	0xe000ed88

0800abd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800abde:	f3ef 8305 	mrs	r3, IPSR
 800abe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b0f      	cmp	r3, #15
 800abe8:	d914      	bls.n	800ac14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abea:	4a17      	ldr	r2, [pc, #92]	; (800ac48 <vPortValidateInterruptPriority+0x70>)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4413      	add	r3, r2
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abf4:	4b15      	ldr	r3, [pc, #84]	; (800ac4c <vPortValidateInterruptPriority+0x74>)
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	7afa      	ldrb	r2, [r7, #11]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d20a      	bcs.n	800ac14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	607b      	str	r3, [r7, #4]
}
 800ac10:	bf00      	nop
 800ac12:	e7fe      	b.n	800ac12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac14:	4b0e      	ldr	r3, [pc, #56]	; (800ac50 <vPortValidateInterruptPriority+0x78>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac1c:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <vPortValidateInterruptPriority+0x7c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d90a      	bls.n	800ac3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	603b      	str	r3, [r7, #0]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <vPortValidateInterruptPriority+0x60>
	}
 800ac3a:	bf00      	nop
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	e000e3f0 	.word	0xe000e3f0
 800ac4c:	20000d90 	.word	0x20000d90
 800ac50:	e000ed0c 	.word	0xe000ed0c
 800ac54:	20000d94 	.word	0x20000d94

0800ac58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08a      	sub	sp, #40	; 0x28
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac60:	2300      	movs	r3, #0
 800ac62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac64:	f7fe fc9a 	bl	800959c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac68:	4b5b      	ldr	r3, [pc, #364]	; (800add8 <pvPortMalloc+0x180>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac70:	f000 f920 	bl	800aeb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac74:	4b59      	ldr	r3, [pc, #356]	; (800addc <pvPortMalloc+0x184>)
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f040 8093 	bne.w	800ada8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d01d      	beq.n	800acc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ac88:	2208      	movs	r2, #8
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f003 0307 	and.w	r3, r3, #7
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d014      	beq.n	800acc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f023 0307 	bic.w	r3, r3, #7
 800aca0:	3308      	adds	r3, #8
 800aca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f003 0307 	and.w	r3, r3, #7
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <pvPortMalloc+0x6c>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	617b      	str	r3, [r7, #20]
}
 800acc0:	bf00      	nop
 800acc2:	e7fe      	b.n	800acc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d06e      	beq.n	800ada8 <pvPortMalloc+0x150>
 800acca:	4b45      	ldr	r3, [pc, #276]	; (800ade0 <pvPortMalloc+0x188>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d869      	bhi.n	800ada8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800acd4:	4b43      	ldr	r3, [pc, #268]	; (800ade4 <pvPortMalloc+0x18c>)
 800acd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800acd8:	4b42      	ldr	r3, [pc, #264]	; (800ade4 <pvPortMalloc+0x18c>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acde:	e004      	b.n	800acea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d903      	bls.n	800acfc <pvPortMalloc+0xa4>
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1f1      	bne.n	800ace0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800acfc:	4b36      	ldr	r3, [pc, #216]	; (800add8 <pvPortMalloc+0x180>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d050      	beq.n	800ada8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2208      	movs	r2, #8
 800ad0c:	4413      	add	r3, r2
 800ad0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	1ad2      	subs	r2, r2, r3
 800ad20:	2308      	movs	r3, #8
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d91f      	bls.n	800ad68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00a      	beq.n	800ad50 <pvPortMalloc+0xf8>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	613b      	str	r3, [r7, #16]
}
 800ad4c:	bf00      	nop
 800ad4e:	e7fe      	b.n	800ad4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	1ad2      	subs	r2, r2, r3
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad62:	69b8      	ldr	r0, [r7, #24]
 800ad64:	f000 f908 	bl	800af78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad68:	4b1d      	ldr	r3, [pc, #116]	; (800ade0 <pvPortMalloc+0x188>)
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	4a1b      	ldr	r2, [pc, #108]	; (800ade0 <pvPortMalloc+0x188>)
 800ad74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad76:	4b1a      	ldr	r3, [pc, #104]	; (800ade0 <pvPortMalloc+0x188>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4b1b      	ldr	r3, [pc, #108]	; (800ade8 <pvPortMalloc+0x190>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d203      	bcs.n	800ad8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad82:	4b17      	ldr	r3, [pc, #92]	; (800ade0 <pvPortMalloc+0x188>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a18      	ldr	r2, [pc, #96]	; (800ade8 <pvPortMalloc+0x190>)
 800ad88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	685a      	ldr	r2, [r3, #4]
 800ad8e:	4b13      	ldr	r3, [pc, #76]	; (800addc <pvPortMalloc+0x184>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	431a      	orrs	r2, r3
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad9e:	4b13      	ldr	r3, [pc, #76]	; (800adec <pvPortMalloc+0x194>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3301      	adds	r3, #1
 800ada4:	4a11      	ldr	r2, [pc, #68]	; (800adec <pvPortMalloc+0x194>)
 800ada6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ada8:	f7fe fc06 	bl	80095b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	f003 0307 	and.w	r3, r3, #7
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00a      	beq.n	800adcc <pvPortMalloc+0x174>
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	60fb      	str	r3, [r7, #12]
}
 800adc8:	bf00      	nop
 800adca:	e7fe      	b.n	800adca <pvPortMalloc+0x172>
	return pvReturn;
 800adcc:	69fb      	ldr	r3, [r7, #28]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3728      	adds	r7, #40	; 0x28
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	200049a0 	.word	0x200049a0
 800addc:	200049b4 	.word	0x200049b4
 800ade0:	200049a4 	.word	0x200049a4
 800ade4:	20004998 	.word	0x20004998
 800ade8:	200049a8 	.word	0x200049a8
 800adec:	200049ac 	.word	0x200049ac

0800adf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d04d      	beq.n	800ae9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae02:	2308      	movs	r3, #8
 800ae04:	425b      	negs	r3, r3
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	4413      	add	r3, r2
 800ae0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	4b24      	ldr	r3, [pc, #144]	; (800aea8 <vPortFree+0xb8>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4013      	ands	r3, r2
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10a      	bne.n	800ae34 <vPortFree+0x44>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	60fb      	str	r3, [r7, #12]
}
 800ae30:	bf00      	nop
 800ae32:	e7fe      	b.n	800ae32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00a      	beq.n	800ae52 <vPortFree+0x62>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	60bb      	str	r3, [r7, #8]
}
 800ae4e:	bf00      	nop
 800ae50:	e7fe      	b.n	800ae50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	4b14      	ldr	r3, [pc, #80]	; (800aea8 <vPortFree+0xb8>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01e      	beq.n	800ae9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d11a      	bne.n	800ae9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	4b0e      	ldr	r3, [pc, #56]	; (800aea8 <vPortFree+0xb8>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	43db      	mvns	r3, r3
 800ae72:	401a      	ands	r2, r3
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae78:	f7fe fb90 	bl	800959c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	685a      	ldr	r2, [r3, #4]
 800ae80:	4b0a      	ldr	r3, [pc, #40]	; (800aeac <vPortFree+0xbc>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4413      	add	r3, r2
 800ae86:	4a09      	ldr	r2, [pc, #36]	; (800aeac <vPortFree+0xbc>)
 800ae88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae8a:	6938      	ldr	r0, [r7, #16]
 800ae8c:	f000 f874 	bl	800af78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae90:	4b07      	ldr	r3, [pc, #28]	; (800aeb0 <vPortFree+0xc0>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3301      	adds	r3, #1
 800ae96:	4a06      	ldr	r2, [pc, #24]	; (800aeb0 <vPortFree+0xc0>)
 800ae98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae9a:	f7fe fb8d 	bl	80095b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae9e:	bf00      	nop
 800aea0:	3718      	adds	r7, #24
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	200049b4 	.word	0x200049b4
 800aeac:	200049a4 	.word	0x200049a4
 800aeb0:	200049b0 	.word	0x200049b0

0800aeb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aeba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aec0:	4b27      	ldr	r3, [pc, #156]	; (800af60 <prvHeapInit+0xac>)
 800aec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f003 0307 	and.w	r3, r3, #7
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00c      	beq.n	800aee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3307      	adds	r3, #7
 800aed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f023 0307 	bic.w	r3, r3, #7
 800aeda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	4a1f      	ldr	r2, [pc, #124]	; (800af60 <prvHeapInit+0xac>)
 800aee4:	4413      	add	r3, r2
 800aee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aeec:	4a1d      	ldr	r2, [pc, #116]	; (800af64 <prvHeapInit+0xb0>)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aef2:	4b1c      	ldr	r3, [pc, #112]	; (800af64 <prvHeapInit+0xb0>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	4413      	add	r3, r2
 800aefe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af00:	2208      	movs	r2, #8
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	1a9b      	subs	r3, r3, r2
 800af06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f023 0307 	bic.w	r3, r3, #7
 800af0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4a15      	ldr	r2, [pc, #84]	; (800af68 <prvHeapInit+0xb4>)
 800af14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af16:	4b14      	ldr	r3, [pc, #80]	; (800af68 <prvHeapInit+0xb4>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2200      	movs	r2, #0
 800af1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af1e:	4b12      	ldr	r3, [pc, #72]	; (800af68 <prvHeapInit+0xb4>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2200      	movs	r2, #0
 800af24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	1ad2      	subs	r2, r2, r3
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af34:	4b0c      	ldr	r3, [pc, #48]	; (800af68 <prvHeapInit+0xb4>)
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	4a0a      	ldr	r2, [pc, #40]	; (800af6c <prvHeapInit+0xb8>)
 800af42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	4a09      	ldr	r2, [pc, #36]	; (800af70 <prvHeapInit+0xbc>)
 800af4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af4c:	4b09      	ldr	r3, [pc, #36]	; (800af74 <prvHeapInit+0xc0>)
 800af4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af52:	601a      	str	r2, [r3, #0]
}
 800af54:	bf00      	nop
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr
 800af60:	20000d98 	.word	0x20000d98
 800af64:	20004998 	.word	0x20004998
 800af68:	200049a0 	.word	0x200049a0
 800af6c:	200049a8 	.word	0x200049a8
 800af70:	200049a4 	.word	0x200049a4
 800af74:	200049b4 	.word	0x200049b4

0800af78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af80:	4b28      	ldr	r3, [pc, #160]	; (800b024 <prvInsertBlockIntoFreeList+0xac>)
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	e002      	b.n	800af8c <prvInsertBlockIntoFreeList+0x14>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	429a      	cmp	r2, r3
 800af94:	d8f7      	bhi.n	800af86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	4413      	add	r3, r2
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d108      	bne.n	800afba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	441a      	add	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	441a      	add	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d118      	bne.n	800b000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	4b15      	ldr	r3, [pc, #84]	; (800b028 <prvInsertBlockIntoFreeList+0xb0>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d00d      	beq.n	800aff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685a      	ldr	r2, [r3, #4]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	441a      	add	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	601a      	str	r2, [r3, #0]
 800aff4:	e008      	b.n	800b008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aff6:	4b0c      	ldr	r3, [pc, #48]	; (800b028 <prvInsertBlockIntoFreeList+0xb0>)
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	e003      	b.n	800b008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d002      	beq.n	800b016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b016:	bf00      	nop
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	20004998 	.word	0x20004998
 800b028:	200049a0 	.word	0x200049a0

0800b02c <__errno>:
 800b02c:	4b01      	ldr	r3, [pc, #4]	; (800b034 <__errno+0x8>)
 800b02e:	6818      	ldr	r0, [r3, #0]
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	20000014 	.word	0x20000014

0800b038 <__libc_init_array>:
 800b038:	b570      	push	{r4, r5, r6, lr}
 800b03a:	4d0d      	ldr	r5, [pc, #52]	; (800b070 <__libc_init_array+0x38>)
 800b03c:	4c0d      	ldr	r4, [pc, #52]	; (800b074 <__libc_init_array+0x3c>)
 800b03e:	1b64      	subs	r4, r4, r5
 800b040:	10a4      	asrs	r4, r4, #2
 800b042:	2600      	movs	r6, #0
 800b044:	42a6      	cmp	r6, r4
 800b046:	d109      	bne.n	800b05c <__libc_init_array+0x24>
 800b048:	4d0b      	ldr	r5, [pc, #44]	; (800b078 <__libc_init_array+0x40>)
 800b04a:	4c0c      	ldr	r4, [pc, #48]	; (800b07c <__libc_init_array+0x44>)
 800b04c:	f001 fe56 	bl	800ccfc <_init>
 800b050:	1b64      	subs	r4, r4, r5
 800b052:	10a4      	asrs	r4, r4, #2
 800b054:	2600      	movs	r6, #0
 800b056:	42a6      	cmp	r6, r4
 800b058:	d105      	bne.n	800b066 <__libc_init_array+0x2e>
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b060:	4798      	blx	r3
 800b062:	3601      	adds	r6, #1
 800b064:	e7ee      	b.n	800b044 <__libc_init_array+0xc>
 800b066:	f855 3b04 	ldr.w	r3, [r5], #4
 800b06a:	4798      	blx	r3
 800b06c:	3601      	adds	r6, #1
 800b06e:	e7f2      	b.n	800b056 <__libc_init_array+0x1e>
 800b070:	0800d960 	.word	0x0800d960
 800b074:	0800d960 	.word	0x0800d960
 800b078:	0800d960 	.word	0x0800d960
 800b07c:	0800d964 	.word	0x0800d964

0800b080 <memcpy>:
 800b080:	440a      	add	r2, r1
 800b082:	4291      	cmp	r1, r2
 800b084:	f100 33ff 	add.w	r3, r0, #4294967295
 800b088:	d100      	bne.n	800b08c <memcpy+0xc>
 800b08a:	4770      	bx	lr
 800b08c:	b510      	push	{r4, lr}
 800b08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b092:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b096:	4291      	cmp	r1, r2
 800b098:	d1f9      	bne.n	800b08e <memcpy+0xe>
 800b09a:	bd10      	pop	{r4, pc}

0800b09c <memmove>:
 800b09c:	4288      	cmp	r0, r1
 800b09e:	b510      	push	{r4, lr}
 800b0a0:	eb01 0402 	add.w	r4, r1, r2
 800b0a4:	d902      	bls.n	800b0ac <memmove+0x10>
 800b0a6:	4284      	cmp	r4, r0
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	d807      	bhi.n	800b0bc <memmove+0x20>
 800b0ac:	1e43      	subs	r3, r0, #1
 800b0ae:	42a1      	cmp	r1, r4
 800b0b0:	d008      	beq.n	800b0c4 <memmove+0x28>
 800b0b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0ba:	e7f8      	b.n	800b0ae <memmove+0x12>
 800b0bc:	4402      	add	r2, r0
 800b0be:	4601      	mov	r1, r0
 800b0c0:	428a      	cmp	r2, r1
 800b0c2:	d100      	bne.n	800b0c6 <memmove+0x2a>
 800b0c4:	bd10      	pop	{r4, pc}
 800b0c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ce:	e7f7      	b.n	800b0c0 <memmove+0x24>

0800b0d0 <memset>:
 800b0d0:	4402      	add	r2, r0
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d100      	bne.n	800b0da <memset+0xa>
 800b0d8:	4770      	bx	lr
 800b0da:	f803 1b01 	strb.w	r1, [r3], #1
 800b0de:	e7f9      	b.n	800b0d4 <memset+0x4>

0800b0e0 <iprintf>:
 800b0e0:	b40f      	push	{r0, r1, r2, r3}
 800b0e2:	4b0a      	ldr	r3, [pc, #40]	; (800b10c <iprintf+0x2c>)
 800b0e4:	b513      	push	{r0, r1, r4, lr}
 800b0e6:	681c      	ldr	r4, [r3, #0]
 800b0e8:	b124      	cbz	r4, 800b0f4 <iprintf+0x14>
 800b0ea:	69a3      	ldr	r3, [r4, #24]
 800b0ec:	b913      	cbnz	r3, 800b0f4 <iprintf+0x14>
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 fa7e 	bl	800b5f0 <__sinit>
 800b0f4:	ab05      	add	r3, sp, #20
 800b0f6:	9a04      	ldr	r2, [sp, #16]
 800b0f8:	68a1      	ldr	r1, [r4, #8]
 800b0fa:	9301      	str	r3, [sp, #4]
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 fdab 	bl	800bc58 <_vfiprintf_r>
 800b102:	b002      	add	sp, #8
 800b104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b108:	b004      	add	sp, #16
 800b10a:	4770      	bx	lr
 800b10c:	20000014 	.word	0x20000014

0800b110 <_puts_r>:
 800b110:	b570      	push	{r4, r5, r6, lr}
 800b112:	460e      	mov	r6, r1
 800b114:	4605      	mov	r5, r0
 800b116:	b118      	cbz	r0, 800b120 <_puts_r+0x10>
 800b118:	6983      	ldr	r3, [r0, #24]
 800b11a:	b90b      	cbnz	r3, 800b120 <_puts_r+0x10>
 800b11c:	f000 fa68 	bl	800b5f0 <__sinit>
 800b120:	69ab      	ldr	r3, [r5, #24]
 800b122:	68ac      	ldr	r4, [r5, #8]
 800b124:	b913      	cbnz	r3, 800b12c <_puts_r+0x1c>
 800b126:	4628      	mov	r0, r5
 800b128:	f000 fa62 	bl	800b5f0 <__sinit>
 800b12c:	4b2c      	ldr	r3, [pc, #176]	; (800b1e0 <_puts_r+0xd0>)
 800b12e:	429c      	cmp	r4, r3
 800b130:	d120      	bne.n	800b174 <_puts_r+0x64>
 800b132:	686c      	ldr	r4, [r5, #4]
 800b134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b136:	07db      	lsls	r3, r3, #31
 800b138:	d405      	bmi.n	800b146 <_puts_r+0x36>
 800b13a:	89a3      	ldrh	r3, [r4, #12]
 800b13c:	0598      	lsls	r0, r3, #22
 800b13e:	d402      	bmi.n	800b146 <_puts_r+0x36>
 800b140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b142:	f000 faf3 	bl	800b72c <__retarget_lock_acquire_recursive>
 800b146:	89a3      	ldrh	r3, [r4, #12]
 800b148:	0719      	lsls	r1, r3, #28
 800b14a:	d51d      	bpl.n	800b188 <_puts_r+0x78>
 800b14c:	6923      	ldr	r3, [r4, #16]
 800b14e:	b1db      	cbz	r3, 800b188 <_puts_r+0x78>
 800b150:	3e01      	subs	r6, #1
 800b152:	68a3      	ldr	r3, [r4, #8]
 800b154:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b158:	3b01      	subs	r3, #1
 800b15a:	60a3      	str	r3, [r4, #8]
 800b15c:	bb39      	cbnz	r1, 800b1ae <_puts_r+0x9e>
 800b15e:	2b00      	cmp	r3, #0
 800b160:	da38      	bge.n	800b1d4 <_puts_r+0xc4>
 800b162:	4622      	mov	r2, r4
 800b164:	210a      	movs	r1, #10
 800b166:	4628      	mov	r0, r5
 800b168:	f000 f868 	bl	800b23c <__swbuf_r>
 800b16c:	3001      	adds	r0, #1
 800b16e:	d011      	beq.n	800b194 <_puts_r+0x84>
 800b170:	250a      	movs	r5, #10
 800b172:	e011      	b.n	800b198 <_puts_r+0x88>
 800b174:	4b1b      	ldr	r3, [pc, #108]	; (800b1e4 <_puts_r+0xd4>)
 800b176:	429c      	cmp	r4, r3
 800b178:	d101      	bne.n	800b17e <_puts_r+0x6e>
 800b17a:	68ac      	ldr	r4, [r5, #8]
 800b17c:	e7da      	b.n	800b134 <_puts_r+0x24>
 800b17e:	4b1a      	ldr	r3, [pc, #104]	; (800b1e8 <_puts_r+0xd8>)
 800b180:	429c      	cmp	r4, r3
 800b182:	bf08      	it	eq
 800b184:	68ec      	ldreq	r4, [r5, #12]
 800b186:	e7d5      	b.n	800b134 <_puts_r+0x24>
 800b188:	4621      	mov	r1, r4
 800b18a:	4628      	mov	r0, r5
 800b18c:	f000 f8a8 	bl	800b2e0 <__swsetup_r>
 800b190:	2800      	cmp	r0, #0
 800b192:	d0dd      	beq.n	800b150 <_puts_r+0x40>
 800b194:	f04f 35ff 	mov.w	r5, #4294967295
 800b198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b19a:	07da      	lsls	r2, r3, #31
 800b19c:	d405      	bmi.n	800b1aa <_puts_r+0x9a>
 800b19e:	89a3      	ldrh	r3, [r4, #12]
 800b1a0:	059b      	lsls	r3, r3, #22
 800b1a2:	d402      	bmi.n	800b1aa <_puts_r+0x9a>
 800b1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1a6:	f000 fac2 	bl	800b72e <__retarget_lock_release_recursive>
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	bd70      	pop	{r4, r5, r6, pc}
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	da04      	bge.n	800b1bc <_puts_r+0xac>
 800b1b2:	69a2      	ldr	r2, [r4, #24]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	dc06      	bgt.n	800b1c6 <_puts_r+0xb6>
 800b1b8:	290a      	cmp	r1, #10
 800b1ba:	d004      	beq.n	800b1c6 <_puts_r+0xb6>
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	1c5a      	adds	r2, r3, #1
 800b1c0:	6022      	str	r2, [r4, #0]
 800b1c2:	7019      	strb	r1, [r3, #0]
 800b1c4:	e7c5      	b.n	800b152 <_puts_r+0x42>
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	f000 f837 	bl	800b23c <__swbuf_r>
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d1bf      	bne.n	800b152 <_puts_r+0x42>
 800b1d2:	e7df      	b.n	800b194 <_puts_r+0x84>
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	250a      	movs	r5, #10
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	6022      	str	r2, [r4, #0]
 800b1dc:	701d      	strb	r5, [r3, #0]
 800b1de:	e7db      	b.n	800b198 <_puts_r+0x88>
 800b1e0:	0800d8e4 	.word	0x0800d8e4
 800b1e4:	0800d904 	.word	0x0800d904
 800b1e8:	0800d8c4 	.word	0x0800d8c4

0800b1ec <puts>:
 800b1ec:	4b02      	ldr	r3, [pc, #8]	; (800b1f8 <puts+0xc>)
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	6818      	ldr	r0, [r3, #0]
 800b1f2:	f7ff bf8d 	b.w	800b110 <_puts_r>
 800b1f6:	bf00      	nop
 800b1f8:	20000014 	.word	0x20000014

0800b1fc <siprintf>:
 800b1fc:	b40e      	push	{r1, r2, r3}
 800b1fe:	b500      	push	{lr}
 800b200:	b09c      	sub	sp, #112	; 0x70
 800b202:	ab1d      	add	r3, sp, #116	; 0x74
 800b204:	9002      	str	r0, [sp, #8]
 800b206:	9006      	str	r0, [sp, #24]
 800b208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b20c:	4809      	ldr	r0, [pc, #36]	; (800b234 <siprintf+0x38>)
 800b20e:	9107      	str	r1, [sp, #28]
 800b210:	9104      	str	r1, [sp, #16]
 800b212:	4909      	ldr	r1, [pc, #36]	; (800b238 <siprintf+0x3c>)
 800b214:	f853 2b04 	ldr.w	r2, [r3], #4
 800b218:	9105      	str	r1, [sp, #20]
 800b21a:	6800      	ldr	r0, [r0, #0]
 800b21c:	9301      	str	r3, [sp, #4]
 800b21e:	a902      	add	r1, sp, #8
 800b220:	f000 fbf0 	bl	800ba04 <_svfiprintf_r>
 800b224:	9b02      	ldr	r3, [sp, #8]
 800b226:	2200      	movs	r2, #0
 800b228:	701a      	strb	r2, [r3, #0]
 800b22a:	b01c      	add	sp, #112	; 0x70
 800b22c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b230:	b003      	add	sp, #12
 800b232:	4770      	bx	lr
 800b234:	20000014 	.word	0x20000014
 800b238:	ffff0208 	.word	0xffff0208

0800b23c <__swbuf_r>:
 800b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23e:	460e      	mov	r6, r1
 800b240:	4614      	mov	r4, r2
 800b242:	4605      	mov	r5, r0
 800b244:	b118      	cbz	r0, 800b24e <__swbuf_r+0x12>
 800b246:	6983      	ldr	r3, [r0, #24]
 800b248:	b90b      	cbnz	r3, 800b24e <__swbuf_r+0x12>
 800b24a:	f000 f9d1 	bl	800b5f0 <__sinit>
 800b24e:	4b21      	ldr	r3, [pc, #132]	; (800b2d4 <__swbuf_r+0x98>)
 800b250:	429c      	cmp	r4, r3
 800b252:	d12b      	bne.n	800b2ac <__swbuf_r+0x70>
 800b254:	686c      	ldr	r4, [r5, #4]
 800b256:	69a3      	ldr	r3, [r4, #24]
 800b258:	60a3      	str	r3, [r4, #8]
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	071a      	lsls	r2, r3, #28
 800b25e:	d52f      	bpl.n	800b2c0 <__swbuf_r+0x84>
 800b260:	6923      	ldr	r3, [r4, #16]
 800b262:	b36b      	cbz	r3, 800b2c0 <__swbuf_r+0x84>
 800b264:	6923      	ldr	r3, [r4, #16]
 800b266:	6820      	ldr	r0, [r4, #0]
 800b268:	1ac0      	subs	r0, r0, r3
 800b26a:	6963      	ldr	r3, [r4, #20]
 800b26c:	b2f6      	uxtb	r6, r6
 800b26e:	4283      	cmp	r3, r0
 800b270:	4637      	mov	r7, r6
 800b272:	dc04      	bgt.n	800b27e <__swbuf_r+0x42>
 800b274:	4621      	mov	r1, r4
 800b276:	4628      	mov	r0, r5
 800b278:	f000 f926 	bl	800b4c8 <_fflush_r>
 800b27c:	bb30      	cbnz	r0, 800b2cc <__swbuf_r+0x90>
 800b27e:	68a3      	ldr	r3, [r4, #8]
 800b280:	3b01      	subs	r3, #1
 800b282:	60a3      	str	r3, [r4, #8]
 800b284:	6823      	ldr	r3, [r4, #0]
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	6022      	str	r2, [r4, #0]
 800b28a:	701e      	strb	r6, [r3, #0]
 800b28c:	6963      	ldr	r3, [r4, #20]
 800b28e:	3001      	adds	r0, #1
 800b290:	4283      	cmp	r3, r0
 800b292:	d004      	beq.n	800b29e <__swbuf_r+0x62>
 800b294:	89a3      	ldrh	r3, [r4, #12]
 800b296:	07db      	lsls	r3, r3, #31
 800b298:	d506      	bpl.n	800b2a8 <__swbuf_r+0x6c>
 800b29a:	2e0a      	cmp	r6, #10
 800b29c:	d104      	bne.n	800b2a8 <__swbuf_r+0x6c>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	f000 f911 	bl	800b4c8 <_fflush_r>
 800b2a6:	b988      	cbnz	r0, 800b2cc <__swbuf_r+0x90>
 800b2a8:	4638      	mov	r0, r7
 800b2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2ac:	4b0a      	ldr	r3, [pc, #40]	; (800b2d8 <__swbuf_r+0x9c>)
 800b2ae:	429c      	cmp	r4, r3
 800b2b0:	d101      	bne.n	800b2b6 <__swbuf_r+0x7a>
 800b2b2:	68ac      	ldr	r4, [r5, #8]
 800b2b4:	e7cf      	b.n	800b256 <__swbuf_r+0x1a>
 800b2b6:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <__swbuf_r+0xa0>)
 800b2b8:	429c      	cmp	r4, r3
 800b2ba:	bf08      	it	eq
 800b2bc:	68ec      	ldreq	r4, [r5, #12]
 800b2be:	e7ca      	b.n	800b256 <__swbuf_r+0x1a>
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f000 f80c 	bl	800b2e0 <__swsetup_r>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d0cb      	beq.n	800b264 <__swbuf_r+0x28>
 800b2cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b2d0:	e7ea      	b.n	800b2a8 <__swbuf_r+0x6c>
 800b2d2:	bf00      	nop
 800b2d4:	0800d8e4 	.word	0x0800d8e4
 800b2d8:	0800d904 	.word	0x0800d904
 800b2dc:	0800d8c4 	.word	0x0800d8c4

0800b2e0 <__swsetup_r>:
 800b2e0:	4b32      	ldr	r3, [pc, #200]	; (800b3ac <__swsetup_r+0xcc>)
 800b2e2:	b570      	push	{r4, r5, r6, lr}
 800b2e4:	681d      	ldr	r5, [r3, #0]
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	b125      	cbz	r5, 800b2f6 <__swsetup_r+0x16>
 800b2ec:	69ab      	ldr	r3, [r5, #24]
 800b2ee:	b913      	cbnz	r3, 800b2f6 <__swsetup_r+0x16>
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f000 f97d 	bl	800b5f0 <__sinit>
 800b2f6:	4b2e      	ldr	r3, [pc, #184]	; (800b3b0 <__swsetup_r+0xd0>)
 800b2f8:	429c      	cmp	r4, r3
 800b2fa:	d10f      	bne.n	800b31c <__swsetup_r+0x3c>
 800b2fc:	686c      	ldr	r4, [r5, #4]
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b304:	0719      	lsls	r1, r3, #28
 800b306:	d42c      	bmi.n	800b362 <__swsetup_r+0x82>
 800b308:	06dd      	lsls	r5, r3, #27
 800b30a:	d411      	bmi.n	800b330 <__swsetup_r+0x50>
 800b30c:	2309      	movs	r3, #9
 800b30e:	6033      	str	r3, [r6, #0]
 800b310:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b314:	81a3      	strh	r3, [r4, #12]
 800b316:	f04f 30ff 	mov.w	r0, #4294967295
 800b31a:	e03e      	b.n	800b39a <__swsetup_r+0xba>
 800b31c:	4b25      	ldr	r3, [pc, #148]	; (800b3b4 <__swsetup_r+0xd4>)
 800b31e:	429c      	cmp	r4, r3
 800b320:	d101      	bne.n	800b326 <__swsetup_r+0x46>
 800b322:	68ac      	ldr	r4, [r5, #8]
 800b324:	e7eb      	b.n	800b2fe <__swsetup_r+0x1e>
 800b326:	4b24      	ldr	r3, [pc, #144]	; (800b3b8 <__swsetup_r+0xd8>)
 800b328:	429c      	cmp	r4, r3
 800b32a:	bf08      	it	eq
 800b32c:	68ec      	ldreq	r4, [r5, #12]
 800b32e:	e7e6      	b.n	800b2fe <__swsetup_r+0x1e>
 800b330:	0758      	lsls	r0, r3, #29
 800b332:	d512      	bpl.n	800b35a <__swsetup_r+0x7a>
 800b334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b336:	b141      	cbz	r1, 800b34a <__swsetup_r+0x6a>
 800b338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b33c:	4299      	cmp	r1, r3
 800b33e:	d002      	beq.n	800b346 <__swsetup_r+0x66>
 800b340:	4630      	mov	r0, r6
 800b342:	f000 fa59 	bl	800b7f8 <_free_r>
 800b346:	2300      	movs	r3, #0
 800b348:	6363      	str	r3, [r4, #52]	; 0x34
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b350:	81a3      	strh	r3, [r4, #12]
 800b352:	2300      	movs	r3, #0
 800b354:	6063      	str	r3, [r4, #4]
 800b356:	6923      	ldr	r3, [r4, #16]
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	89a3      	ldrh	r3, [r4, #12]
 800b35c:	f043 0308 	orr.w	r3, r3, #8
 800b360:	81a3      	strh	r3, [r4, #12]
 800b362:	6923      	ldr	r3, [r4, #16]
 800b364:	b94b      	cbnz	r3, 800b37a <__swsetup_r+0x9a>
 800b366:	89a3      	ldrh	r3, [r4, #12]
 800b368:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b36c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b370:	d003      	beq.n	800b37a <__swsetup_r+0x9a>
 800b372:	4621      	mov	r1, r4
 800b374:	4630      	mov	r0, r6
 800b376:	f000 f9ff 	bl	800b778 <__smakebuf_r>
 800b37a:	89a0      	ldrh	r0, [r4, #12]
 800b37c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b380:	f010 0301 	ands.w	r3, r0, #1
 800b384:	d00a      	beq.n	800b39c <__swsetup_r+0xbc>
 800b386:	2300      	movs	r3, #0
 800b388:	60a3      	str	r3, [r4, #8]
 800b38a:	6963      	ldr	r3, [r4, #20]
 800b38c:	425b      	negs	r3, r3
 800b38e:	61a3      	str	r3, [r4, #24]
 800b390:	6923      	ldr	r3, [r4, #16]
 800b392:	b943      	cbnz	r3, 800b3a6 <__swsetup_r+0xc6>
 800b394:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b398:	d1ba      	bne.n	800b310 <__swsetup_r+0x30>
 800b39a:	bd70      	pop	{r4, r5, r6, pc}
 800b39c:	0781      	lsls	r1, r0, #30
 800b39e:	bf58      	it	pl
 800b3a0:	6963      	ldrpl	r3, [r4, #20]
 800b3a2:	60a3      	str	r3, [r4, #8]
 800b3a4:	e7f4      	b.n	800b390 <__swsetup_r+0xb0>
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	e7f7      	b.n	800b39a <__swsetup_r+0xba>
 800b3aa:	bf00      	nop
 800b3ac:	20000014 	.word	0x20000014
 800b3b0:	0800d8e4 	.word	0x0800d8e4
 800b3b4:	0800d904 	.word	0x0800d904
 800b3b8:	0800d8c4 	.word	0x0800d8c4

0800b3bc <__sflush_r>:
 800b3bc:	898a      	ldrh	r2, [r1, #12]
 800b3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	0710      	lsls	r0, r2, #28
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	d458      	bmi.n	800b47c <__sflush_r+0xc0>
 800b3ca:	684b      	ldr	r3, [r1, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	dc05      	bgt.n	800b3dc <__sflush_r+0x20>
 800b3d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dc02      	bgt.n	800b3dc <__sflush_r+0x20>
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3de:	2e00      	cmp	r6, #0
 800b3e0:	d0f9      	beq.n	800b3d6 <__sflush_r+0x1a>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3e8:	682f      	ldr	r7, [r5, #0]
 800b3ea:	602b      	str	r3, [r5, #0]
 800b3ec:	d032      	beq.n	800b454 <__sflush_r+0x98>
 800b3ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3f0:	89a3      	ldrh	r3, [r4, #12]
 800b3f2:	075a      	lsls	r2, r3, #29
 800b3f4:	d505      	bpl.n	800b402 <__sflush_r+0x46>
 800b3f6:	6863      	ldr	r3, [r4, #4]
 800b3f8:	1ac0      	subs	r0, r0, r3
 800b3fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3fc:	b10b      	cbz	r3, 800b402 <__sflush_r+0x46>
 800b3fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b400:	1ac0      	subs	r0, r0, r3
 800b402:	2300      	movs	r3, #0
 800b404:	4602      	mov	r2, r0
 800b406:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b408:	6a21      	ldr	r1, [r4, #32]
 800b40a:	4628      	mov	r0, r5
 800b40c:	47b0      	blx	r6
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	d106      	bne.n	800b422 <__sflush_r+0x66>
 800b414:	6829      	ldr	r1, [r5, #0]
 800b416:	291d      	cmp	r1, #29
 800b418:	d82c      	bhi.n	800b474 <__sflush_r+0xb8>
 800b41a:	4a2a      	ldr	r2, [pc, #168]	; (800b4c4 <__sflush_r+0x108>)
 800b41c:	40ca      	lsrs	r2, r1
 800b41e:	07d6      	lsls	r6, r2, #31
 800b420:	d528      	bpl.n	800b474 <__sflush_r+0xb8>
 800b422:	2200      	movs	r2, #0
 800b424:	6062      	str	r2, [r4, #4]
 800b426:	04d9      	lsls	r1, r3, #19
 800b428:	6922      	ldr	r2, [r4, #16]
 800b42a:	6022      	str	r2, [r4, #0]
 800b42c:	d504      	bpl.n	800b438 <__sflush_r+0x7c>
 800b42e:	1c42      	adds	r2, r0, #1
 800b430:	d101      	bne.n	800b436 <__sflush_r+0x7a>
 800b432:	682b      	ldr	r3, [r5, #0]
 800b434:	b903      	cbnz	r3, 800b438 <__sflush_r+0x7c>
 800b436:	6560      	str	r0, [r4, #84]	; 0x54
 800b438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b43a:	602f      	str	r7, [r5, #0]
 800b43c:	2900      	cmp	r1, #0
 800b43e:	d0ca      	beq.n	800b3d6 <__sflush_r+0x1a>
 800b440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b444:	4299      	cmp	r1, r3
 800b446:	d002      	beq.n	800b44e <__sflush_r+0x92>
 800b448:	4628      	mov	r0, r5
 800b44a:	f000 f9d5 	bl	800b7f8 <_free_r>
 800b44e:	2000      	movs	r0, #0
 800b450:	6360      	str	r0, [r4, #52]	; 0x34
 800b452:	e7c1      	b.n	800b3d8 <__sflush_r+0x1c>
 800b454:	6a21      	ldr	r1, [r4, #32]
 800b456:	2301      	movs	r3, #1
 800b458:	4628      	mov	r0, r5
 800b45a:	47b0      	blx	r6
 800b45c:	1c41      	adds	r1, r0, #1
 800b45e:	d1c7      	bne.n	800b3f0 <__sflush_r+0x34>
 800b460:	682b      	ldr	r3, [r5, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d0c4      	beq.n	800b3f0 <__sflush_r+0x34>
 800b466:	2b1d      	cmp	r3, #29
 800b468:	d001      	beq.n	800b46e <__sflush_r+0xb2>
 800b46a:	2b16      	cmp	r3, #22
 800b46c:	d101      	bne.n	800b472 <__sflush_r+0xb6>
 800b46e:	602f      	str	r7, [r5, #0]
 800b470:	e7b1      	b.n	800b3d6 <__sflush_r+0x1a>
 800b472:	89a3      	ldrh	r3, [r4, #12]
 800b474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b478:	81a3      	strh	r3, [r4, #12]
 800b47a:	e7ad      	b.n	800b3d8 <__sflush_r+0x1c>
 800b47c:	690f      	ldr	r7, [r1, #16]
 800b47e:	2f00      	cmp	r7, #0
 800b480:	d0a9      	beq.n	800b3d6 <__sflush_r+0x1a>
 800b482:	0793      	lsls	r3, r2, #30
 800b484:	680e      	ldr	r6, [r1, #0]
 800b486:	bf08      	it	eq
 800b488:	694b      	ldreq	r3, [r1, #20]
 800b48a:	600f      	str	r7, [r1, #0]
 800b48c:	bf18      	it	ne
 800b48e:	2300      	movne	r3, #0
 800b490:	eba6 0807 	sub.w	r8, r6, r7
 800b494:	608b      	str	r3, [r1, #8]
 800b496:	f1b8 0f00 	cmp.w	r8, #0
 800b49a:	dd9c      	ble.n	800b3d6 <__sflush_r+0x1a>
 800b49c:	6a21      	ldr	r1, [r4, #32]
 800b49e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4a0:	4643      	mov	r3, r8
 800b4a2:	463a      	mov	r2, r7
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	47b0      	blx	r6
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	dc06      	bgt.n	800b4ba <__sflush_r+0xfe>
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4b2:	81a3      	strh	r3, [r4, #12]
 800b4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b8:	e78e      	b.n	800b3d8 <__sflush_r+0x1c>
 800b4ba:	4407      	add	r7, r0
 800b4bc:	eba8 0800 	sub.w	r8, r8, r0
 800b4c0:	e7e9      	b.n	800b496 <__sflush_r+0xda>
 800b4c2:	bf00      	nop
 800b4c4:	20400001 	.word	0x20400001

0800b4c8 <_fflush_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	690b      	ldr	r3, [r1, #16]
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	b913      	cbnz	r3, 800b4d8 <_fflush_r+0x10>
 800b4d2:	2500      	movs	r5, #0
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	b118      	cbz	r0, 800b4e2 <_fflush_r+0x1a>
 800b4da:	6983      	ldr	r3, [r0, #24]
 800b4dc:	b90b      	cbnz	r3, 800b4e2 <_fflush_r+0x1a>
 800b4de:	f000 f887 	bl	800b5f0 <__sinit>
 800b4e2:	4b14      	ldr	r3, [pc, #80]	; (800b534 <_fflush_r+0x6c>)
 800b4e4:	429c      	cmp	r4, r3
 800b4e6:	d11b      	bne.n	800b520 <_fflush_r+0x58>
 800b4e8:	686c      	ldr	r4, [r5, #4]
 800b4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d0ef      	beq.n	800b4d2 <_fflush_r+0xa>
 800b4f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4f4:	07d0      	lsls	r0, r2, #31
 800b4f6:	d404      	bmi.n	800b502 <_fflush_r+0x3a>
 800b4f8:	0599      	lsls	r1, r3, #22
 800b4fa:	d402      	bmi.n	800b502 <_fflush_r+0x3a>
 800b4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4fe:	f000 f915 	bl	800b72c <__retarget_lock_acquire_recursive>
 800b502:	4628      	mov	r0, r5
 800b504:	4621      	mov	r1, r4
 800b506:	f7ff ff59 	bl	800b3bc <__sflush_r>
 800b50a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b50c:	07da      	lsls	r2, r3, #31
 800b50e:	4605      	mov	r5, r0
 800b510:	d4e0      	bmi.n	800b4d4 <_fflush_r+0xc>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	059b      	lsls	r3, r3, #22
 800b516:	d4dd      	bmi.n	800b4d4 <_fflush_r+0xc>
 800b518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b51a:	f000 f908 	bl	800b72e <__retarget_lock_release_recursive>
 800b51e:	e7d9      	b.n	800b4d4 <_fflush_r+0xc>
 800b520:	4b05      	ldr	r3, [pc, #20]	; (800b538 <_fflush_r+0x70>)
 800b522:	429c      	cmp	r4, r3
 800b524:	d101      	bne.n	800b52a <_fflush_r+0x62>
 800b526:	68ac      	ldr	r4, [r5, #8]
 800b528:	e7df      	b.n	800b4ea <_fflush_r+0x22>
 800b52a:	4b04      	ldr	r3, [pc, #16]	; (800b53c <_fflush_r+0x74>)
 800b52c:	429c      	cmp	r4, r3
 800b52e:	bf08      	it	eq
 800b530:	68ec      	ldreq	r4, [r5, #12]
 800b532:	e7da      	b.n	800b4ea <_fflush_r+0x22>
 800b534:	0800d8e4 	.word	0x0800d8e4
 800b538:	0800d904 	.word	0x0800d904
 800b53c:	0800d8c4 	.word	0x0800d8c4

0800b540 <std>:
 800b540:	2300      	movs	r3, #0
 800b542:	b510      	push	{r4, lr}
 800b544:	4604      	mov	r4, r0
 800b546:	e9c0 3300 	strd	r3, r3, [r0]
 800b54a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b54e:	6083      	str	r3, [r0, #8]
 800b550:	8181      	strh	r1, [r0, #12]
 800b552:	6643      	str	r3, [r0, #100]	; 0x64
 800b554:	81c2      	strh	r2, [r0, #14]
 800b556:	6183      	str	r3, [r0, #24]
 800b558:	4619      	mov	r1, r3
 800b55a:	2208      	movs	r2, #8
 800b55c:	305c      	adds	r0, #92	; 0x5c
 800b55e:	f7ff fdb7 	bl	800b0d0 <memset>
 800b562:	4b05      	ldr	r3, [pc, #20]	; (800b578 <std+0x38>)
 800b564:	6263      	str	r3, [r4, #36]	; 0x24
 800b566:	4b05      	ldr	r3, [pc, #20]	; (800b57c <std+0x3c>)
 800b568:	62a3      	str	r3, [r4, #40]	; 0x28
 800b56a:	4b05      	ldr	r3, [pc, #20]	; (800b580 <std+0x40>)
 800b56c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b56e:	4b05      	ldr	r3, [pc, #20]	; (800b584 <std+0x44>)
 800b570:	6224      	str	r4, [r4, #32]
 800b572:	6323      	str	r3, [r4, #48]	; 0x30
 800b574:	bd10      	pop	{r4, pc}
 800b576:	bf00      	nop
 800b578:	0800c201 	.word	0x0800c201
 800b57c:	0800c223 	.word	0x0800c223
 800b580:	0800c25b 	.word	0x0800c25b
 800b584:	0800c27f 	.word	0x0800c27f

0800b588 <_cleanup_r>:
 800b588:	4901      	ldr	r1, [pc, #4]	; (800b590 <_cleanup_r+0x8>)
 800b58a:	f000 b8af 	b.w	800b6ec <_fwalk_reent>
 800b58e:	bf00      	nop
 800b590:	0800b4c9 	.word	0x0800b4c9

0800b594 <__sfmoreglue>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	1e4a      	subs	r2, r1, #1
 800b598:	2568      	movs	r5, #104	; 0x68
 800b59a:	4355      	muls	r5, r2
 800b59c:	460e      	mov	r6, r1
 800b59e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5a2:	f000 f979 	bl	800b898 <_malloc_r>
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	b140      	cbz	r0, 800b5bc <__sfmoreglue+0x28>
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	e9c0 1600 	strd	r1, r6, [r0]
 800b5b0:	300c      	adds	r0, #12
 800b5b2:	60a0      	str	r0, [r4, #8]
 800b5b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b5b8:	f7ff fd8a 	bl	800b0d0 <memset>
 800b5bc:	4620      	mov	r0, r4
 800b5be:	bd70      	pop	{r4, r5, r6, pc}

0800b5c0 <__sfp_lock_acquire>:
 800b5c0:	4801      	ldr	r0, [pc, #4]	; (800b5c8 <__sfp_lock_acquire+0x8>)
 800b5c2:	f000 b8b3 	b.w	800b72c <__retarget_lock_acquire_recursive>
 800b5c6:	bf00      	nop
 800b5c8:	20005028 	.word	0x20005028

0800b5cc <__sfp_lock_release>:
 800b5cc:	4801      	ldr	r0, [pc, #4]	; (800b5d4 <__sfp_lock_release+0x8>)
 800b5ce:	f000 b8ae 	b.w	800b72e <__retarget_lock_release_recursive>
 800b5d2:	bf00      	nop
 800b5d4:	20005028 	.word	0x20005028

0800b5d8 <__sinit_lock_acquire>:
 800b5d8:	4801      	ldr	r0, [pc, #4]	; (800b5e0 <__sinit_lock_acquire+0x8>)
 800b5da:	f000 b8a7 	b.w	800b72c <__retarget_lock_acquire_recursive>
 800b5de:	bf00      	nop
 800b5e0:	20005023 	.word	0x20005023

0800b5e4 <__sinit_lock_release>:
 800b5e4:	4801      	ldr	r0, [pc, #4]	; (800b5ec <__sinit_lock_release+0x8>)
 800b5e6:	f000 b8a2 	b.w	800b72e <__retarget_lock_release_recursive>
 800b5ea:	bf00      	nop
 800b5ec:	20005023 	.word	0x20005023

0800b5f0 <__sinit>:
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	f7ff fff0 	bl	800b5d8 <__sinit_lock_acquire>
 800b5f8:	69a3      	ldr	r3, [r4, #24]
 800b5fa:	b11b      	cbz	r3, 800b604 <__sinit+0x14>
 800b5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b600:	f7ff bff0 	b.w	800b5e4 <__sinit_lock_release>
 800b604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b608:	6523      	str	r3, [r4, #80]	; 0x50
 800b60a:	4b13      	ldr	r3, [pc, #76]	; (800b658 <__sinit+0x68>)
 800b60c:	4a13      	ldr	r2, [pc, #76]	; (800b65c <__sinit+0x6c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	62a2      	str	r2, [r4, #40]	; 0x28
 800b612:	42a3      	cmp	r3, r4
 800b614:	bf04      	itt	eq
 800b616:	2301      	moveq	r3, #1
 800b618:	61a3      	streq	r3, [r4, #24]
 800b61a:	4620      	mov	r0, r4
 800b61c:	f000 f820 	bl	800b660 <__sfp>
 800b620:	6060      	str	r0, [r4, #4]
 800b622:	4620      	mov	r0, r4
 800b624:	f000 f81c 	bl	800b660 <__sfp>
 800b628:	60a0      	str	r0, [r4, #8]
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 f818 	bl	800b660 <__sfp>
 800b630:	2200      	movs	r2, #0
 800b632:	60e0      	str	r0, [r4, #12]
 800b634:	2104      	movs	r1, #4
 800b636:	6860      	ldr	r0, [r4, #4]
 800b638:	f7ff ff82 	bl	800b540 <std>
 800b63c:	68a0      	ldr	r0, [r4, #8]
 800b63e:	2201      	movs	r2, #1
 800b640:	2109      	movs	r1, #9
 800b642:	f7ff ff7d 	bl	800b540 <std>
 800b646:	68e0      	ldr	r0, [r4, #12]
 800b648:	2202      	movs	r2, #2
 800b64a:	2112      	movs	r1, #18
 800b64c:	f7ff ff78 	bl	800b540 <std>
 800b650:	2301      	movs	r3, #1
 800b652:	61a3      	str	r3, [r4, #24]
 800b654:	e7d2      	b.n	800b5fc <__sinit+0xc>
 800b656:	bf00      	nop
 800b658:	0800d8c0 	.word	0x0800d8c0
 800b65c:	0800b589 	.word	0x0800b589

0800b660 <__sfp>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	4607      	mov	r7, r0
 800b664:	f7ff ffac 	bl	800b5c0 <__sfp_lock_acquire>
 800b668:	4b1e      	ldr	r3, [pc, #120]	; (800b6e4 <__sfp+0x84>)
 800b66a:	681e      	ldr	r6, [r3, #0]
 800b66c:	69b3      	ldr	r3, [r6, #24]
 800b66e:	b913      	cbnz	r3, 800b676 <__sfp+0x16>
 800b670:	4630      	mov	r0, r6
 800b672:	f7ff ffbd 	bl	800b5f0 <__sinit>
 800b676:	3648      	adds	r6, #72	; 0x48
 800b678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	d503      	bpl.n	800b688 <__sfp+0x28>
 800b680:	6833      	ldr	r3, [r6, #0]
 800b682:	b30b      	cbz	r3, 800b6c8 <__sfp+0x68>
 800b684:	6836      	ldr	r6, [r6, #0]
 800b686:	e7f7      	b.n	800b678 <__sfp+0x18>
 800b688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b68c:	b9d5      	cbnz	r5, 800b6c4 <__sfp+0x64>
 800b68e:	4b16      	ldr	r3, [pc, #88]	; (800b6e8 <__sfp+0x88>)
 800b690:	60e3      	str	r3, [r4, #12]
 800b692:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b696:	6665      	str	r5, [r4, #100]	; 0x64
 800b698:	f000 f847 	bl	800b72a <__retarget_lock_init_recursive>
 800b69c:	f7ff ff96 	bl	800b5cc <__sfp_lock_release>
 800b6a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6a8:	6025      	str	r5, [r4, #0]
 800b6aa:	61a5      	str	r5, [r4, #24]
 800b6ac:	2208      	movs	r2, #8
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6b4:	f7ff fd0c 	bl	800b0d0 <memset>
 800b6b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6c4:	3468      	adds	r4, #104	; 0x68
 800b6c6:	e7d9      	b.n	800b67c <__sfp+0x1c>
 800b6c8:	2104      	movs	r1, #4
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	f7ff ff62 	bl	800b594 <__sfmoreglue>
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	6030      	str	r0, [r6, #0]
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d1d5      	bne.n	800b684 <__sfp+0x24>
 800b6d8:	f7ff ff78 	bl	800b5cc <__sfp_lock_release>
 800b6dc:	230c      	movs	r3, #12
 800b6de:	603b      	str	r3, [r7, #0]
 800b6e0:	e7ee      	b.n	800b6c0 <__sfp+0x60>
 800b6e2:	bf00      	nop
 800b6e4:	0800d8c0 	.word	0x0800d8c0
 800b6e8:	ffff0001 	.word	0xffff0001

0800b6ec <_fwalk_reent>:
 800b6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	4688      	mov	r8, r1
 800b6f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b6f8:	2700      	movs	r7, #0
 800b6fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6fe:	f1b9 0901 	subs.w	r9, r9, #1
 800b702:	d505      	bpl.n	800b710 <_fwalk_reent+0x24>
 800b704:	6824      	ldr	r4, [r4, #0]
 800b706:	2c00      	cmp	r4, #0
 800b708:	d1f7      	bne.n	800b6fa <_fwalk_reent+0xe>
 800b70a:	4638      	mov	r0, r7
 800b70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b710:	89ab      	ldrh	r3, [r5, #12]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d907      	bls.n	800b726 <_fwalk_reent+0x3a>
 800b716:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b71a:	3301      	adds	r3, #1
 800b71c:	d003      	beq.n	800b726 <_fwalk_reent+0x3a>
 800b71e:	4629      	mov	r1, r5
 800b720:	4630      	mov	r0, r6
 800b722:	47c0      	blx	r8
 800b724:	4307      	orrs	r7, r0
 800b726:	3568      	adds	r5, #104	; 0x68
 800b728:	e7e9      	b.n	800b6fe <_fwalk_reent+0x12>

0800b72a <__retarget_lock_init_recursive>:
 800b72a:	4770      	bx	lr

0800b72c <__retarget_lock_acquire_recursive>:
 800b72c:	4770      	bx	lr

0800b72e <__retarget_lock_release_recursive>:
 800b72e:	4770      	bx	lr

0800b730 <__swhatbuf_r>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	460e      	mov	r6, r1
 800b734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b738:	2900      	cmp	r1, #0
 800b73a:	b096      	sub	sp, #88	; 0x58
 800b73c:	4614      	mov	r4, r2
 800b73e:	461d      	mov	r5, r3
 800b740:	da07      	bge.n	800b752 <__swhatbuf_r+0x22>
 800b742:	2300      	movs	r3, #0
 800b744:	602b      	str	r3, [r5, #0]
 800b746:	89b3      	ldrh	r3, [r6, #12]
 800b748:	061a      	lsls	r2, r3, #24
 800b74a:	d410      	bmi.n	800b76e <__swhatbuf_r+0x3e>
 800b74c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b750:	e00e      	b.n	800b770 <__swhatbuf_r+0x40>
 800b752:	466a      	mov	r2, sp
 800b754:	f000 fdba 	bl	800c2cc <_fstat_r>
 800b758:	2800      	cmp	r0, #0
 800b75a:	dbf2      	blt.n	800b742 <__swhatbuf_r+0x12>
 800b75c:	9a01      	ldr	r2, [sp, #4]
 800b75e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b762:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b766:	425a      	negs	r2, r3
 800b768:	415a      	adcs	r2, r3
 800b76a:	602a      	str	r2, [r5, #0]
 800b76c:	e7ee      	b.n	800b74c <__swhatbuf_r+0x1c>
 800b76e:	2340      	movs	r3, #64	; 0x40
 800b770:	2000      	movs	r0, #0
 800b772:	6023      	str	r3, [r4, #0]
 800b774:	b016      	add	sp, #88	; 0x58
 800b776:	bd70      	pop	{r4, r5, r6, pc}

0800b778 <__smakebuf_r>:
 800b778:	898b      	ldrh	r3, [r1, #12]
 800b77a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b77c:	079d      	lsls	r5, r3, #30
 800b77e:	4606      	mov	r6, r0
 800b780:	460c      	mov	r4, r1
 800b782:	d507      	bpl.n	800b794 <__smakebuf_r+0x1c>
 800b784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	6123      	str	r3, [r4, #16]
 800b78c:	2301      	movs	r3, #1
 800b78e:	6163      	str	r3, [r4, #20]
 800b790:	b002      	add	sp, #8
 800b792:	bd70      	pop	{r4, r5, r6, pc}
 800b794:	ab01      	add	r3, sp, #4
 800b796:	466a      	mov	r2, sp
 800b798:	f7ff ffca 	bl	800b730 <__swhatbuf_r>
 800b79c:	9900      	ldr	r1, [sp, #0]
 800b79e:	4605      	mov	r5, r0
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f000 f879 	bl	800b898 <_malloc_r>
 800b7a6:	b948      	cbnz	r0, 800b7bc <__smakebuf_r+0x44>
 800b7a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ac:	059a      	lsls	r2, r3, #22
 800b7ae:	d4ef      	bmi.n	800b790 <__smakebuf_r+0x18>
 800b7b0:	f023 0303 	bic.w	r3, r3, #3
 800b7b4:	f043 0302 	orr.w	r3, r3, #2
 800b7b8:	81a3      	strh	r3, [r4, #12]
 800b7ba:	e7e3      	b.n	800b784 <__smakebuf_r+0xc>
 800b7bc:	4b0d      	ldr	r3, [pc, #52]	; (800b7f4 <__smakebuf_r+0x7c>)
 800b7be:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7c0:	89a3      	ldrh	r3, [r4, #12]
 800b7c2:	6020      	str	r0, [r4, #0]
 800b7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7c8:	81a3      	strh	r3, [r4, #12]
 800b7ca:	9b00      	ldr	r3, [sp, #0]
 800b7cc:	6163      	str	r3, [r4, #20]
 800b7ce:	9b01      	ldr	r3, [sp, #4]
 800b7d0:	6120      	str	r0, [r4, #16]
 800b7d2:	b15b      	cbz	r3, 800b7ec <__smakebuf_r+0x74>
 800b7d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f000 fd89 	bl	800c2f0 <_isatty_r>
 800b7de:	b128      	cbz	r0, 800b7ec <__smakebuf_r+0x74>
 800b7e0:	89a3      	ldrh	r3, [r4, #12]
 800b7e2:	f023 0303 	bic.w	r3, r3, #3
 800b7e6:	f043 0301 	orr.w	r3, r3, #1
 800b7ea:	81a3      	strh	r3, [r4, #12]
 800b7ec:	89a0      	ldrh	r0, [r4, #12]
 800b7ee:	4305      	orrs	r5, r0
 800b7f0:	81a5      	strh	r5, [r4, #12]
 800b7f2:	e7cd      	b.n	800b790 <__smakebuf_r+0x18>
 800b7f4:	0800b589 	.word	0x0800b589

0800b7f8 <_free_r>:
 800b7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7fa:	2900      	cmp	r1, #0
 800b7fc:	d048      	beq.n	800b890 <_free_r+0x98>
 800b7fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b802:	9001      	str	r0, [sp, #4]
 800b804:	2b00      	cmp	r3, #0
 800b806:	f1a1 0404 	sub.w	r4, r1, #4
 800b80a:	bfb8      	it	lt
 800b80c:	18e4      	addlt	r4, r4, r3
 800b80e:	f000 fd91 	bl	800c334 <__malloc_lock>
 800b812:	4a20      	ldr	r2, [pc, #128]	; (800b894 <_free_r+0x9c>)
 800b814:	9801      	ldr	r0, [sp, #4]
 800b816:	6813      	ldr	r3, [r2, #0]
 800b818:	4615      	mov	r5, r2
 800b81a:	b933      	cbnz	r3, 800b82a <_free_r+0x32>
 800b81c:	6063      	str	r3, [r4, #4]
 800b81e:	6014      	str	r4, [r2, #0]
 800b820:	b003      	add	sp, #12
 800b822:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b826:	f000 bd8b 	b.w	800c340 <__malloc_unlock>
 800b82a:	42a3      	cmp	r3, r4
 800b82c:	d90b      	bls.n	800b846 <_free_r+0x4e>
 800b82e:	6821      	ldr	r1, [r4, #0]
 800b830:	1862      	adds	r2, r4, r1
 800b832:	4293      	cmp	r3, r2
 800b834:	bf04      	itt	eq
 800b836:	681a      	ldreq	r2, [r3, #0]
 800b838:	685b      	ldreq	r3, [r3, #4]
 800b83a:	6063      	str	r3, [r4, #4]
 800b83c:	bf04      	itt	eq
 800b83e:	1852      	addeq	r2, r2, r1
 800b840:	6022      	streq	r2, [r4, #0]
 800b842:	602c      	str	r4, [r5, #0]
 800b844:	e7ec      	b.n	800b820 <_free_r+0x28>
 800b846:	461a      	mov	r2, r3
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	b10b      	cbz	r3, 800b850 <_free_r+0x58>
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	d9fa      	bls.n	800b846 <_free_r+0x4e>
 800b850:	6811      	ldr	r1, [r2, #0]
 800b852:	1855      	adds	r5, r2, r1
 800b854:	42a5      	cmp	r5, r4
 800b856:	d10b      	bne.n	800b870 <_free_r+0x78>
 800b858:	6824      	ldr	r4, [r4, #0]
 800b85a:	4421      	add	r1, r4
 800b85c:	1854      	adds	r4, r2, r1
 800b85e:	42a3      	cmp	r3, r4
 800b860:	6011      	str	r1, [r2, #0]
 800b862:	d1dd      	bne.n	800b820 <_free_r+0x28>
 800b864:	681c      	ldr	r4, [r3, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	6053      	str	r3, [r2, #4]
 800b86a:	4421      	add	r1, r4
 800b86c:	6011      	str	r1, [r2, #0]
 800b86e:	e7d7      	b.n	800b820 <_free_r+0x28>
 800b870:	d902      	bls.n	800b878 <_free_r+0x80>
 800b872:	230c      	movs	r3, #12
 800b874:	6003      	str	r3, [r0, #0]
 800b876:	e7d3      	b.n	800b820 <_free_r+0x28>
 800b878:	6825      	ldr	r5, [r4, #0]
 800b87a:	1961      	adds	r1, r4, r5
 800b87c:	428b      	cmp	r3, r1
 800b87e:	bf04      	itt	eq
 800b880:	6819      	ldreq	r1, [r3, #0]
 800b882:	685b      	ldreq	r3, [r3, #4]
 800b884:	6063      	str	r3, [r4, #4]
 800b886:	bf04      	itt	eq
 800b888:	1949      	addeq	r1, r1, r5
 800b88a:	6021      	streq	r1, [r4, #0]
 800b88c:	6054      	str	r4, [r2, #4]
 800b88e:	e7c7      	b.n	800b820 <_free_r+0x28>
 800b890:	b003      	add	sp, #12
 800b892:	bd30      	pop	{r4, r5, pc}
 800b894:	200049b8 	.word	0x200049b8

0800b898 <_malloc_r>:
 800b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89a:	1ccd      	adds	r5, r1, #3
 800b89c:	f025 0503 	bic.w	r5, r5, #3
 800b8a0:	3508      	adds	r5, #8
 800b8a2:	2d0c      	cmp	r5, #12
 800b8a4:	bf38      	it	cc
 800b8a6:	250c      	movcc	r5, #12
 800b8a8:	2d00      	cmp	r5, #0
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	db01      	blt.n	800b8b2 <_malloc_r+0x1a>
 800b8ae:	42a9      	cmp	r1, r5
 800b8b0:	d903      	bls.n	800b8ba <_malloc_r+0x22>
 800b8b2:	230c      	movs	r3, #12
 800b8b4:	6033      	str	r3, [r6, #0]
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ba:	f000 fd3b 	bl	800c334 <__malloc_lock>
 800b8be:	4921      	ldr	r1, [pc, #132]	; (800b944 <_malloc_r+0xac>)
 800b8c0:	680a      	ldr	r2, [r1, #0]
 800b8c2:	4614      	mov	r4, r2
 800b8c4:	b99c      	cbnz	r4, 800b8ee <_malloc_r+0x56>
 800b8c6:	4f20      	ldr	r7, [pc, #128]	; (800b948 <_malloc_r+0xb0>)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	b923      	cbnz	r3, 800b8d6 <_malloc_r+0x3e>
 800b8cc:	4621      	mov	r1, r4
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f000 fc86 	bl	800c1e0 <_sbrk_r>
 800b8d4:	6038      	str	r0, [r7, #0]
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f000 fc81 	bl	800c1e0 <_sbrk_r>
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	d123      	bne.n	800b92a <_malloc_r+0x92>
 800b8e2:	230c      	movs	r3, #12
 800b8e4:	6033      	str	r3, [r6, #0]
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f000 fd2a 	bl	800c340 <__malloc_unlock>
 800b8ec:	e7e3      	b.n	800b8b6 <_malloc_r+0x1e>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	1b5b      	subs	r3, r3, r5
 800b8f2:	d417      	bmi.n	800b924 <_malloc_r+0x8c>
 800b8f4:	2b0b      	cmp	r3, #11
 800b8f6:	d903      	bls.n	800b900 <_malloc_r+0x68>
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	441c      	add	r4, r3
 800b8fc:	6025      	str	r5, [r4, #0]
 800b8fe:	e004      	b.n	800b90a <_malloc_r+0x72>
 800b900:	6863      	ldr	r3, [r4, #4]
 800b902:	42a2      	cmp	r2, r4
 800b904:	bf0c      	ite	eq
 800b906:	600b      	streq	r3, [r1, #0]
 800b908:	6053      	strne	r3, [r2, #4]
 800b90a:	4630      	mov	r0, r6
 800b90c:	f000 fd18 	bl	800c340 <__malloc_unlock>
 800b910:	f104 000b 	add.w	r0, r4, #11
 800b914:	1d23      	adds	r3, r4, #4
 800b916:	f020 0007 	bic.w	r0, r0, #7
 800b91a:	1ac2      	subs	r2, r0, r3
 800b91c:	d0cc      	beq.n	800b8b8 <_malloc_r+0x20>
 800b91e:	1a1b      	subs	r3, r3, r0
 800b920:	50a3      	str	r3, [r4, r2]
 800b922:	e7c9      	b.n	800b8b8 <_malloc_r+0x20>
 800b924:	4622      	mov	r2, r4
 800b926:	6864      	ldr	r4, [r4, #4]
 800b928:	e7cc      	b.n	800b8c4 <_malloc_r+0x2c>
 800b92a:	1cc4      	adds	r4, r0, #3
 800b92c:	f024 0403 	bic.w	r4, r4, #3
 800b930:	42a0      	cmp	r0, r4
 800b932:	d0e3      	beq.n	800b8fc <_malloc_r+0x64>
 800b934:	1a21      	subs	r1, r4, r0
 800b936:	4630      	mov	r0, r6
 800b938:	f000 fc52 	bl	800c1e0 <_sbrk_r>
 800b93c:	3001      	adds	r0, #1
 800b93e:	d1dd      	bne.n	800b8fc <_malloc_r+0x64>
 800b940:	e7cf      	b.n	800b8e2 <_malloc_r+0x4a>
 800b942:	bf00      	nop
 800b944:	200049b8 	.word	0x200049b8
 800b948:	200049bc 	.word	0x200049bc

0800b94c <__ssputs_r>:
 800b94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	688e      	ldr	r6, [r1, #8]
 800b952:	429e      	cmp	r6, r3
 800b954:	4682      	mov	sl, r0
 800b956:	460c      	mov	r4, r1
 800b958:	4690      	mov	r8, r2
 800b95a:	461f      	mov	r7, r3
 800b95c:	d838      	bhi.n	800b9d0 <__ssputs_r+0x84>
 800b95e:	898a      	ldrh	r2, [r1, #12]
 800b960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b964:	d032      	beq.n	800b9cc <__ssputs_r+0x80>
 800b966:	6825      	ldr	r5, [r4, #0]
 800b968:	6909      	ldr	r1, [r1, #16]
 800b96a:	eba5 0901 	sub.w	r9, r5, r1
 800b96e:	6965      	ldr	r5, [r4, #20]
 800b970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b978:	3301      	adds	r3, #1
 800b97a:	444b      	add	r3, r9
 800b97c:	106d      	asrs	r5, r5, #1
 800b97e:	429d      	cmp	r5, r3
 800b980:	bf38      	it	cc
 800b982:	461d      	movcc	r5, r3
 800b984:	0553      	lsls	r3, r2, #21
 800b986:	d531      	bpl.n	800b9ec <__ssputs_r+0xa0>
 800b988:	4629      	mov	r1, r5
 800b98a:	f7ff ff85 	bl	800b898 <_malloc_r>
 800b98e:	4606      	mov	r6, r0
 800b990:	b950      	cbnz	r0, 800b9a8 <__ssputs_r+0x5c>
 800b992:	230c      	movs	r3, #12
 800b994:	f8ca 3000 	str.w	r3, [sl]
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b99e:	81a3      	strh	r3, [r4, #12]
 800b9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a8:	6921      	ldr	r1, [r4, #16]
 800b9aa:	464a      	mov	r2, r9
 800b9ac:	f7ff fb68 	bl	800b080 <memcpy>
 800b9b0:	89a3      	ldrh	r3, [r4, #12]
 800b9b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ba:	81a3      	strh	r3, [r4, #12]
 800b9bc:	6126      	str	r6, [r4, #16]
 800b9be:	6165      	str	r5, [r4, #20]
 800b9c0:	444e      	add	r6, r9
 800b9c2:	eba5 0509 	sub.w	r5, r5, r9
 800b9c6:	6026      	str	r6, [r4, #0]
 800b9c8:	60a5      	str	r5, [r4, #8]
 800b9ca:	463e      	mov	r6, r7
 800b9cc:	42be      	cmp	r6, r7
 800b9ce:	d900      	bls.n	800b9d2 <__ssputs_r+0x86>
 800b9d0:	463e      	mov	r6, r7
 800b9d2:	4632      	mov	r2, r6
 800b9d4:	6820      	ldr	r0, [r4, #0]
 800b9d6:	4641      	mov	r1, r8
 800b9d8:	f7ff fb60 	bl	800b09c <memmove>
 800b9dc:	68a3      	ldr	r3, [r4, #8]
 800b9de:	6822      	ldr	r2, [r4, #0]
 800b9e0:	1b9b      	subs	r3, r3, r6
 800b9e2:	4432      	add	r2, r6
 800b9e4:	60a3      	str	r3, [r4, #8]
 800b9e6:	6022      	str	r2, [r4, #0]
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	e7db      	b.n	800b9a4 <__ssputs_r+0x58>
 800b9ec:	462a      	mov	r2, r5
 800b9ee:	f000 fcad 	bl	800c34c <_realloc_r>
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	d1e1      	bne.n	800b9bc <__ssputs_r+0x70>
 800b9f8:	6921      	ldr	r1, [r4, #16]
 800b9fa:	4650      	mov	r0, sl
 800b9fc:	f7ff fefc 	bl	800b7f8 <_free_r>
 800ba00:	e7c7      	b.n	800b992 <__ssputs_r+0x46>
	...

0800ba04 <_svfiprintf_r>:
 800ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba08:	4698      	mov	r8, r3
 800ba0a:	898b      	ldrh	r3, [r1, #12]
 800ba0c:	061b      	lsls	r3, r3, #24
 800ba0e:	b09d      	sub	sp, #116	; 0x74
 800ba10:	4607      	mov	r7, r0
 800ba12:	460d      	mov	r5, r1
 800ba14:	4614      	mov	r4, r2
 800ba16:	d50e      	bpl.n	800ba36 <_svfiprintf_r+0x32>
 800ba18:	690b      	ldr	r3, [r1, #16]
 800ba1a:	b963      	cbnz	r3, 800ba36 <_svfiprintf_r+0x32>
 800ba1c:	2140      	movs	r1, #64	; 0x40
 800ba1e:	f7ff ff3b 	bl	800b898 <_malloc_r>
 800ba22:	6028      	str	r0, [r5, #0]
 800ba24:	6128      	str	r0, [r5, #16]
 800ba26:	b920      	cbnz	r0, 800ba32 <_svfiprintf_r+0x2e>
 800ba28:	230c      	movs	r3, #12
 800ba2a:	603b      	str	r3, [r7, #0]
 800ba2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba30:	e0d1      	b.n	800bbd6 <_svfiprintf_r+0x1d2>
 800ba32:	2340      	movs	r3, #64	; 0x40
 800ba34:	616b      	str	r3, [r5, #20]
 800ba36:	2300      	movs	r3, #0
 800ba38:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3a:	2320      	movs	r3, #32
 800ba3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba44:	2330      	movs	r3, #48	; 0x30
 800ba46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bbf0 <_svfiprintf_r+0x1ec>
 800ba4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba4e:	f04f 0901 	mov.w	r9, #1
 800ba52:	4623      	mov	r3, r4
 800ba54:	469a      	mov	sl, r3
 800ba56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba5a:	b10a      	cbz	r2, 800ba60 <_svfiprintf_r+0x5c>
 800ba5c:	2a25      	cmp	r2, #37	; 0x25
 800ba5e:	d1f9      	bne.n	800ba54 <_svfiprintf_r+0x50>
 800ba60:	ebba 0b04 	subs.w	fp, sl, r4
 800ba64:	d00b      	beq.n	800ba7e <_svfiprintf_r+0x7a>
 800ba66:	465b      	mov	r3, fp
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	f7ff ff6d 	bl	800b94c <__ssputs_r>
 800ba72:	3001      	adds	r0, #1
 800ba74:	f000 80aa 	beq.w	800bbcc <_svfiprintf_r+0x1c8>
 800ba78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba7a:	445a      	add	r2, fp
 800ba7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 80a2 	beq.w	800bbcc <_svfiprintf_r+0x1c8>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba92:	f10a 0a01 	add.w	sl, sl, #1
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	9307      	str	r3, [sp, #28]
 800ba9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba9e:	931a      	str	r3, [sp, #104]	; 0x68
 800baa0:	4654      	mov	r4, sl
 800baa2:	2205      	movs	r2, #5
 800baa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa8:	4851      	ldr	r0, [pc, #324]	; (800bbf0 <_svfiprintf_r+0x1ec>)
 800baaa:	f7f4 fb91 	bl	80001d0 <memchr>
 800baae:	9a04      	ldr	r2, [sp, #16]
 800bab0:	b9d8      	cbnz	r0, 800baea <_svfiprintf_r+0xe6>
 800bab2:	06d0      	lsls	r0, r2, #27
 800bab4:	bf44      	itt	mi
 800bab6:	2320      	movmi	r3, #32
 800bab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800babc:	0711      	lsls	r1, r2, #28
 800babe:	bf44      	itt	mi
 800bac0:	232b      	movmi	r3, #43	; 0x2b
 800bac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac6:	f89a 3000 	ldrb.w	r3, [sl]
 800baca:	2b2a      	cmp	r3, #42	; 0x2a
 800bacc:	d015      	beq.n	800bafa <_svfiprintf_r+0xf6>
 800bace:	9a07      	ldr	r2, [sp, #28]
 800bad0:	4654      	mov	r4, sl
 800bad2:	2000      	movs	r0, #0
 800bad4:	f04f 0c0a 	mov.w	ip, #10
 800bad8:	4621      	mov	r1, r4
 800bada:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bade:	3b30      	subs	r3, #48	; 0x30
 800bae0:	2b09      	cmp	r3, #9
 800bae2:	d94e      	bls.n	800bb82 <_svfiprintf_r+0x17e>
 800bae4:	b1b0      	cbz	r0, 800bb14 <_svfiprintf_r+0x110>
 800bae6:	9207      	str	r2, [sp, #28]
 800bae8:	e014      	b.n	800bb14 <_svfiprintf_r+0x110>
 800baea:	eba0 0308 	sub.w	r3, r0, r8
 800baee:	fa09 f303 	lsl.w	r3, r9, r3
 800baf2:	4313      	orrs	r3, r2
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	46a2      	mov	sl, r4
 800baf8:	e7d2      	b.n	800baa0 <_svfiprintf_r+0x9c>
 800bafa:	9b03      	ldr	r3, [sp, #12]
 800bafc:	1d19      	adds	r1, r3, #4
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	9103      	str	r1, [sp, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	bfbb      	ittet	lt
 800bb06:	425b      	neglt	r3, r3
 800bb08:	f042 0202 	orrlt.w	r2, r2, #2
 800bb0c:	9307      	strge	r3, [sp, #28]
 800bb0e:	9307      	strlt	r3, [sp, #28]
 800bb10:	bfb8      	it	lt
 800bb12:	9204      	strlt	r2, [sp, #16]
 800bb14:	7823      	ldrb	r3, [r4, #0]
 800bb16:	2b2e      	cmp	r3, #46	; 0x2e
 800bb18:	d10c      	bne.n	800bb34 <_svfiprintf_r+0x130>
 800bb1a:	7863      	ldrb	r3, [r4, #1]
 800bb1c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1e:	d135      	bne.n	800bb8c <_svfiprintf_r+0x188>
 800bb20:	9b03      	ldr	r3, [sp, #12]
 800bb22:	1d1a      	adds	r2, r3, #4
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	9203      	str	r2, [sp, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bfb8      	it	lt
 800bb2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb30:	3402      	adds	r4, #2
 800bb32:	9305      	str	r3, [sp, #20]
 800bb34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc00 <_svfiprintf_r+0x1fc>
 800bb38:	7821      	ldrb	r1, [r4, #0]
 800bb3a:	2203      	movs	r2, #3
 800bb3c:	4650      	mov	r0, sl
 800bb3e:	f7f4 fb47 	bl	80001d0 <memchr>
 800bb42:	b140      	cbz	r0, 800bb56 <_svfiprintf_r+0x152>
 800bb44:	2340      	movs	r3, #64	; 0x40
 800bb46:	eba0 000a 	sub.w	r0, r0, sl
 800bb4a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb4e:	9b04      	ldr	r3, [sp, #16]
 800bb50:	4303      	orrs	r3, r0
 800bb52:	3401      	adds	r4, #1
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb5a:	4826      	ldr	r0, [pc, #152]	; (800bbf4 <_svfiprintf_r+0x1f0>)
 800bb5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb60:	2206      	movs	r2, #6
 800bb62:	f7f4 fb35 	bl	80001d0 <memchr>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d038      	beq.n	800bbdc <_svfiprintf_r+0x1d8>
 800bb6a:	4b23      	ldr	r3, [pc, #140]	; (800bbf8 <_svfiprintf_r+0x1f4>)
 800bb6c:	bb1b      	cbnz	r3, 800bbb6 <_svfiprintf_r+0x1b2>
 800bb6e:	9b03      	ldr	r3, [sp, #12]
 800bb70:	3307      	adds	r3, #7
 800bb72:	f023 0307 	bic.w	r3, r3, #7
 800bb76:	3308      	adds	r3, #8
 800bb78:	9303      	str	r3, [sp, #12]
 800bb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb7c:	4433      	add	r3, r6
 800bb7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb80:	e767      	b.n	800ba52 <_svfiprintf_r+0x4e>
 800bb82:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb86:	460c      	mov	r4, r1
 800bb88:	2001      	movs	r0, #1
 800bb8a:	e7a5      	b.n	800bad8 <_svfiprintf_r+0xd4>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	3401      	adds	r4, #1
 800bb90:	9305      	str	r3, [sp, #20]
 800bb92:	4619      	mov	r1, r3
 800bb94:	f04f 0c0a 	mov.w	ip, #10
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb9e:	3a30      	subs	r2, #48	; 0x30
 800bba0:	2a09      	cmp	r2, #9
 800bba2:	d903      	bls.n	800bbac <_svfiprintf_r+0x1a8>
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d0c5      	beq.n	800bb34 <_svfiprintf_r+0x130>
 800bba8:	9105      	str	r1, [sp, #20]
 800bbaa:	e7c3      	b.n	800bb34 <_svfiprintf_r+0x130>
 800bbac:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e7f0      	b.n	800bb98 <_svfiprintf_r+0x194>
 800bbb6:	ab03      	add	r3, sp, #12
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	462a      	mov	r2, r5
 800bbbc:	4b0f      	ldr	r3, [pc, #60]	; (800bbfc <_svfiprintf_r+0x1f8>)
 800bbbe:	a904      	add	r1, sp, #16
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f3af 8000 	nop.w
 800bbc6:	1c42      	adds	r2, r0, #1
 800bbc8:	4606      	mov	r6, r0
 800bbca:	d1d6      	bne.n	800bb7a <_svfiprintf_r+0x176>
 800bbcc:	89ab      	ldrh	r3, [r5, #12]
 800bbce:	065b      	lsls	r3, r3, #25
 800bbd0:	f53f af2c 	bmi.w	800ba2c <_svfiprintf_r+0x28>
 800bbd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbd6:	b01d      	add	sp, #116	; 0x74
 800bbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbdc:	ab03      	add	r3, sp, #12
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	4b06      	ldr	r3, [pc, #24]	; (800bbfc <_svfiprintf_r+0x1f8>)
 800bbe4:	a904      	add	r1, sp, #16
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	f000 f9d4 	bl	800bf94 <_printf_i>
 800bbec:	e7eb      	b.n	800bbc6 <_svfiprintf_r+0x1c2>
 800bbee:	bf00      	nop
 800bbf0:	0800d924 	.word	0x0800d924
 800bbf4:	0800d92e 	.word	0x0800d92e
 800bbf8:	00000000 	.word	0x00000000
 800bbfc:	0800b94d 	.word	0x0800b94d
 800bc00:	0800d92a 	.word	0x0800d92a

0800bc04 <__sfputc_r>:
 800bc04:	6893      	ldr	r3, [r2, #8]
 800bc06:	3b01      	subs	r3, #1
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	b410      	push	{r4}
 800bc0c:	6093      	str	r3, [r2, #8]
 800bc0e:	da08      	bge.n	800bc22 <__sfputc_r+0x1e>
 800bc10:	6994      	ldr	r4, [r2, #24]
 800bc12:	42a3      	cmp	r3, r4
 800bc14:	db01      	blt.n	800bc1a <__sfputc_r+0x16>
 800bc16:	290a      	cmp	r1, #10
 800bc18:	d103      	bne.n	800bc22 <__sfputc_r+0x1e>
 800bc1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc1e:	f7ff bb0d 	b.w	800b23c <__swbuf_r>
 800bc22:	6813      	ldr	r3, [r2, #0]
 800bc24:	1c58      	adds	r0, r3, #1
 800bc26:	6010      	str	r0, [r2, #0]
 800bc28:	7019      	strb	r1, [r3, #0]
 800bc2a:	4608      	mov	r0, r1
 800bc2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc30:	4770      	bx	lr

0800bc32 <__sfputs_r>:
 800bc32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc34:	4606      	mov	r6, r0
 800bc36:	460f      	mov	r7, r1
 800bc38:	4614      	mov	r4, r2
 800bc3a:	18d5      	adds	r5, r2, r3
 800bc3c:	42ac      	cmp	r4, r5
 800bc3e:	d101      	bne.n	800bc44 <__sfputs_r+0x12>
 800bc40:	2000      	movs	r0, #0
 800bc42:	e007      	b.n	800bc54 <__sfputs_r+0x22>
 800bc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc48:	463a      	mov	r2, r7
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7ff ffda 	bl	800bc04 <__sfputc_r>
 800bc50:	1c43      	adds	r3, r0, #1
 800bc52:	d1f3      	bne.n	800bc3c <__sfputs_r+0xa>
 800bc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc58 <_vfiprintf_r>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	460d      	mov	r5, r1
 800bc5e:	b09d      	sub	sp, #116	; 0x74
 800bc60:	4614      	mov	r4, r2
 800bc62:	4698      	mov	r8, r3
 800bc64:	4606      	mov	r6, r0
 800bc66:	b118      	cbz	r0, 800bc70 <_vfiprintf_r+0x18>
 800bc68:	6983      	ldr	r3, [r0, #24]
 800bc6a:	b90b      	cbnz	r3, 800bc70 <_vfiprintf_r+0x18>
 800bc6c:	f7ff fcc0 	bl	800b5f0 <__sinit>
 800bc70:	4b89      	ldr	r3, [pc, #548]	; (800be98 <_vfiprintf_r+0x240>)
 800bc72:	429d      	cmp	r5, r3
 800bc74:	d11b      	bne.n	800bcae <_vfiprintf_r+0x56>
 800bc76:	6875      	ldr	r5, [r6, #4]
 800bc78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc7a:	07d9      	lsls	r1, r3, #31
 800bc7c:	d405      	bmi.n	800bc8a <_vfiprintf_r+0x32>
 800bc7e:	89ab      	ldrh	r3, [r5, #12]
 800bc80:	059a      	lsls	r2, r3, #22
 800bc82:	d402      	bmi.n	800bc8a <_vfiprintf_r+0x32>
 800bc84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc86:	f7ff fd51 	bl	800b72c <__retarget_lock_acquire_recursive>
 800bc8a:	89ab      	ldrh	r3, [r5, #12]
 800bc8c:	071b      	lsls	r3, r3, #28
 800bc8e:	d501      	bpl.n	800bc94 <_vfiprintf_r+0x3c>
 800bc90:	692b      	ldr	r3, [r5, #16]
 800bc92:	b9eb      	cbnz	r3, 800bcd0 <_vfiprintf_r+0x78>
 800bc94:	4629      	mov	r1, r5
 800bc96:	4630      	mov	r0, r6
 800bc98:	f7ff fb22 	bl	800b2e0 <__swsetup_r>
 800bc9c:	b1c0      	cbz	r0, 800bcd0 <_vfiprintf_r+0x78>
 800bc9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bca0:	07dc      	lsls	r4, r3, #31
 800bca2:	d50e      	bpl.n	800bcc2 <_vfiprintf_r+0x6a>
 800bca4:	f04f 30ff 	mov.w	r0, #4294967295
 800bca8:	b01d      	add	sp, #116	; 0x74
 800bcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcae:	4b7b      	ldr	r3, [pc, #492]	; (800be9c <_vfiprintf_r+0x244>)
 800bcb0:	429d      	cmp	r5, r3
 800bcb2:	d101      	bne.n	800bcb8 <_vfiprintf_r+0x60>
 800bcb4:	68b5      	ldr	r5, [r6, #8]
 800bcb6:	e7df      	b.n	800bc78 <_vfiprintf_r+0x20>
 800bcb8:	4b79      	ldr	r3, [pc, #484]	; (800bea0 <_vfiprintf_r+0x248>)
 800bcba:	429d      	cmp	r5, r3
 800bcbc:	bf08      	it	eq
 800bcbe:	68f5      	ldreq	r5, [r6, #12]
 800bcc0:	e7da      	b.n	800bc78 <_vfiprintf_r+0x20>
 800bcc2:	89ab      	ldrh	r3, [r5, #12]
 800bcc4:	0598      	lsls	r0, r3, #22
 800bcc6:	d4ed      	bmi.n	800bca4 <_vfiprintf_r+0x4c>
 800bcc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcca:	f7ff fd30 	bl	800b72e <__retarget_lock_release_recursive>
 800bcce:	e7e9      	b.n	800bca4 <_vfiprintf_r+0x4c>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd4:	2320      	movs	r3, #32
 800bcd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcda:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcde:	2330      	movs	r3, #48	; 0x30
 800bce0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bea4 <_vfiprintf_r+0x24c>
 800bce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bce8:	f04f 0901 	mov.w	r9, #1
 800bcec:	4623      	mov	r3, r4
 800bcee:	469a      	mov	sl, r3
 800bcf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcf4:	b10a      	cbz	r2, 800bcfa <_vfiprintf_r+0xa2>
 800bcf6:	2a25      	cmp	r2, #37	; 0x25
 800bcf8:	d1f9      	bne.n	800bcee <_vfiprintf_r+0x96>
 800bcfa:	ebba 0b04 	subs.w	fp, sl, r4
 800bcfe:	d00b      	beq.n	800bd18 <_vfiprintf_r+0xc0>
 800bd00:	465b      	mov	r3, fp
 800bd02:	4622      	mov	r2, r4
 800bd04:	4629      	mov	r1, r5
 800bd06:	4630      	mov	r0, r6
 800bd08:	f7ff ff93 	bl	800bc32 <__sfputs_r>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	f000 80aa 	beq.w	800be66 <_vfiprintf_r+0x20e>
 800bd12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd14:	445a      	add	r2, fp
 800bd16:	9209      	str	r2, [sp, #36]	; 0x24
 800bd18:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f000 80a2 	beq.w	800be66 <_vfiprintf_r+0x20e>
 800bd22:	2300      	movs	r3, #0
 800bd24:	f04f 32ff 	mov.w	r2, #4294967295
 800bd28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd2c:	f10a 0a01 	add.w	sl, sl, #1
 800bd30:	9304      	str	r3, [sp, #16]
 800bd32:	9307      	str	r3, [sp, #28]
 800bd34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd38:	931a      	str	r3, [sp, #104]	; 0x68
 800bd3a:	4654      	mov	r4, sl
 800bd3c:	2205      	movs	r2, #5
 800bd3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd42:	4858      	ldr	r0, [pc, #352]	; (800bea4 <_vfiprintf_r+0x24c>)
 800bd44:	f7f4 fa44 	bl	80001d0 <memchr>
 800bd48:	9a04      	ldr	r2, [sp, #16]
 800bd4a:	b9d8      	cbnz	r0, 800bd84 <_vfiprintf_r+0x12c>
 800bd4c:	06d1      	lsls	r1, r2, #27
 800bd4e:	bf44      	itt	mi
 800bd50:	2320      	movmi	r3, #32
 800bd52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd56:	0713      	lsls	r3, r2, #28
 800bd58:	bf44      	itt	mi
 800bd5a:	232b      	movmi	r3, #43	; 0x2b
 800bd5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd60:	f89a 3000 	ldrb.w	r3, [sl]
 800bd64:	2b2a      	cmp	r3, #42	; 0x2a
 800bd66:	d015      	beq.n	800bd94 <_vfiprintf_r+0x13c>
 800bd68:	9a07      	ldr	r2, [sp, #28]
 800bd6a:	4654      	mov	r4, sl
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	f04f 0c0a 	mov.w	ip, #10
 800bd72:	4621      	mov	r1, r4
 800bd74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd78:	3b30      	subs	r3, #48	; 0x30
 800bd7a:	2b09      	cmp	r3, #9
 800bd7c:	d94e      	bls.n	800be1c <_vfiprintf_r+0x1c4>
 800bd7e:	b1b0      	cbz	r0, 800bdae <_vfiprintf_r+0x156>
 800bd80:	9207      	str	r2, [sp, #28]
 800bd82:	e014      	b.n	800bdae <_vfiprintf_r+0x156>
 800bd84:	eba0 0308 	sub.w	r3, r0, r8
 800bd88:	fa09 f303 	lsl.w	r3, r9, r3
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	9304      	str	r3, [sp, #16]
 800bd90:	46a2      	mov	sl, r4
 800bd92:	e7d2      	b.n	800bd3a <_vfiprintf_r+0xe2>
 800bd94:	9b03      	ldr	r3, [sp, #12]
 800bd96:	1d19      	adds	r1, r3, #4
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	9103      	str	r1, [sp, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	bfbb      	ittet	lt
 800bda0:	425b      	neglt	r3, r3
 800bda2:	f042 0202 	orrlt.w	r2, r2, #2
 800bda6:	9307      	strge	r3, [sp, #28]
 800bda8:	9307      	strlt	r3, [sp, #28]
 800bdaa:	bfb8      	it	lt
 800bdac:	9204      	strlt	r2, [sp, #16]
 800bdae:	7823      	ldrb	r3, [r4, #0]
 800bdb0:	2b2e      	cmp	r3, #46	; 0x2e
 800bdb2:	d10c      	bne.n	800bdce <_vfiprintf_r+0x176>
 800bdb4:	7863      	ldrb	r3, [r4, #1]
 800bdb6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdb8:	d135      	bne.n	800be26 <_vfiprintf_r+0x1ce>
 800bdba:	9b03      	ldr	r3, [sp, #12]
 800bdbc:	1d1a      	adds	r2, r3, #4
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	9203      	str	r2, [sp, #12]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	bfb8      	it	lt
 800bdc6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdca:	3402      	adds	r4, #2
 800bdcc:	9305      	str	r3, [sp, #20]
 800bdce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800beb4 <_vfiprintf_r+0x25c>
 800bdd2:	7821      	ldrb	r1, [r4, #0]
 800bdd4:	2203      	movs	r2, #3
 800bdd6:	4650      	mov	r0, sl
 800bdd8:	f7f4 f9fa 	bl	80001d0 <memchr>
 800bddc:	b140      	cbz	r0, 800bdf0 <_vfiprintf_r+0x198>
 800bdde:	2340      	movs	r3, #64	; 0x40
 800bde0:	eba0 000a 	sub.w	r0, r0, sl
 800bde4:	fa03 f000 	lsl.w	r0, r3, r0
 800bde8:	9b04      	ldr	r3, [sp, #16]
 800bdea:	4303      	orrs	r3, r0
 800bdec:	3401      	adds	r4, #1
 800bdee:	9304      	str	r3, [sp, #16]
 800bdf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdf4:	482c      	ldr	r0, [pc, #176]	; (800bea8 <_vfiprintf_r+0x250>)
 800bdf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdfa:	2206      	movs	r2, #6
 800bdfc:	f7f4 f9e8 	bl	80001d0 <memchr>
 800be00:	2800      	cmp	r0, #0
 800be02:	d03f      	beq.n	800be84 <_vfiprintf_r+0x22c>
 800be04:	4b29      	ldr	r3, [pc, #164]	; (800beac <_vfiprintf_r+0x254>)
 800be06:	bb1b      	cbnz	r3, 800be50 <_vfiprintf_r+0x1f8>
 800be08:	9b03      	ldr	r3, [sp, #12]
 800be0a:	3307      	adds	r3, #7
 800be0c:	f023 0307 	bic.w	r3, r3, #7
 800be10:	3308      	adds	r3, #8
 800be12:	9303      	str	r3, [sp, #12]
 800be14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be16:	443b      	add	r3, r7
 800be18:	9309      	str	r3, [sp, #36]	; 0x24
 800be1a:	e767      	b.n	800bcec <_vfiprintf_r+0x94>
 800be1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be20:	460c      	mov	r4, r1
 800be22:	2001      	movs	r0, #1
 800be24:	e7a5      	b.n	800bd72 <_vfiprintf_r+0x11a>
 800be26:	2300      	movs	r3, #0
 800be28:	3401      	adds	r4, #1
 800be2a:	9305      	str	r3, [sp, #20]
 800be2c:	4619      	mov	r1, r3
 800be2e:	f04f 0c0a 	mov.w	ip, #10
 800be32:	4620      	mov	r0, r4
 800be34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be38:	3a30      	subs	r2, #48	; 0x30
 800be3a:	2a09      	cmp	r2, #9
 800be3c:	d903      	bls.n	800be46 <_vfiprintf_r+0x1ee>
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d0c5      	beq.n	800bdce <_vfiprintf_r+0x176>
 800be42:	9105      	str	r1, [sp, #20]
 800be44:	e7c3      	b.n	800bdce <_vfiprintf_r+0x176>
 800be46:	fb0c 2101 	mla	r1, ip, r1, r2
 800be4a:	4604      	mov	r4, r0
 800be4c:	2301      	movs	r3, #1
 800be4e:	e7f0      	b.n	800be32 <_vfiprintf_r+0x1da>
 800be50:	ab03      	add	r3, sp, #12
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	462a      	mov	r2, r5
 800be56:	4b16      	ldr	r3, [pc, #88]	; (800beb0 <_vfiprintf_r+0x258>)
 800be58:	a904      	add	r1, sp, #16
 800be5a:	4630      	mov	r0, r6
 800be5c:	f3af 8000 	nop.w
 800be60:	4607      	mov	r7, r0
 800be62:	1c78      	adds	r0, r7, #1
 800be64:	d1d6      	bne.n	800be14 <_vfiprintf_r+0x1bc>
 800be66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be68:	07d9      	lsls	r1, r3, #31
 800be6a:	d405      	bmi.n	800be78 <_vfiprintf_r+0x220>
 800be6c:	89ab      	ldrh	r3, [r5, #12]
 800be6e:	059a      	lsls	r2, r3, #22
 800be70:	d402      	bmi.n	800be78 <_vfiprintf_r+0x220>
 800be72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be74:	f7ff fc5b 	bl	800b72e <__retarget_lock_release_recursive>
 800be78:	89ab      	ldrh	r3, [r5, #12]
 800be7a:	065b      	lsls	r3, r3, #25
 800be7c:	f53f af12 	bmi.w	800bca4 <_vfiprintf_r+0x4c>
 800be80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be82:	e711      	b.n	800bca8 <_vfiprintf_r+0x50>
 800be84:	ab03      	add	r3, sp, #12
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	462a      	mov	r2, r5
 800be8a:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <_vfiprintf_r+0x258>)
 800be8c:	a904      	add	r1, sp, #16
 800be8e:	4630      	mov	r0, r6
 800be90:	f000 f880 	bl	800bf94 <_printf_i>
 800be94:	e7e4      	b.n	800be60 <_vfiprintf_r+0x208>
 800be96:	bf00      	nop
 800be98:	0800d8e4 	.word	0x0800d8e4
 800be9c:	0800d904 	.word	0x0800d904
 800bea0:	0800d8c4 	.word	0x0800d8c4
 800bea4:	0800d924 	.word	0x0800d924
 800bea8:	0800d92e 	.word	0x0800d92e
 800beac:	00000000 	.word	0x00000000
 800beb0:	0800bc33 	.word	0x0800bc33
 800beb4:	0800d92a 	.word	0x0800d92a

0800beb8 <_printf_common>:
 800beb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bebc:	4616      	mov	r6, r2
 800bebe:	4699      	mov	r9, r3
 800bec0:	688a      	ldr	r2, [r1, #8]
 800bec2:	690b      	ldr	r3, [r1, #16]
 800bec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bec8:	4293      	cmp	r3, r2
 800beca:	bfb8      	it	lt
 800becc:	4613      	movlt	r3, r2
 800bece:	6033      	str	r3, [r6, #0]
 800bed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bed4:	4607      	mov	r7, r0
 800bed6:	460c      	mov	r4, r1
 800bed8:	b10a      	cbz	r2, 800bede <_printf_common+0x26>
 800beda:	3301      	adds	r3, #1
 800bedc:	6033      	str	r3, [r6, #0]
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	0699      	lsls	r1, r3, #26
 800bee2:	bf42      	ittt	mi
 800bee4:	6833      	ldrmi	r3, [r6, #0]
 800bee6:	3302      	addmi	r3, #2
 800bee8:	6033      	strmi	r3, [r6, #0]
 800beea:	6825      	ldr	r5, [r4, #0]
 800beec:	f015 0506 	ands.w	r5, r5, #6
 800bef0:	d106      	bne.n	800bf00 <_printf_common+0x48>
 800bef2:	f104 0a19 	add.w	sl, r4, #25
 800bef6:	68e3      	ldr	r3, [r4, #12]
 800bef8:	6832      	ldr	r2, [r6, #0]
 800befa:	1a9b      	subs	r3, r3, r2
 800befc:	42ab      	cmp	r3, r5
 800befe:	dc26      	bgt.n	800bf4e <_printf_common+0x96>
 800bf00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf04:	1e13      	subs	r3, r2, #0
 800bf06:	6822      	ldr	r2, [r4, #0]
 800bf08:	bf18      	it	ne
 800bf0a:	2301      	movne	r3, #1
 800bf0c:	0692      	lsls	r2, r2, #26
 800bf0e:	d42b      	bmi.n	800bf68 <_printf_common+0xb0>
 800bf10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf14:	4649      	mov	r1, r9
 800bf16:	4638      	mov	r0, r7
 800bf18:	47c0      	blx	r8
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	d01e      	beq.n	800bf5c <_printf_common+0xa4>
 800bf1e:	6823      	ldr	r3, [r4, #0]
 800bf20:	68e5      	ldr	r5, [r4, #12]
 800bf22:	6832      	ldr	r2, [r6, #0]
 800bf24:	f003 0306 	and.w	r3, r3, #6
 800bf28:	2b04      	cmp	r3, #4
 800bf2a:	bf08      	it	eq
 800bf2c:	1aad      	subeq	r5, r5, r2
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	6922      	ldr	r2, [r4, #16]
 800bf32:	bf0c      	ite	eq
 800bf34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf38:	2500      	movne	r5, #0
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	bfc4      	itt	gt
 800bf3e:	1a9b      	subgt	r3, r3, r2
 800bf40:	18ed      	addgt	r5, r5, r3
 800bf42:	2600      	movs	r6, #0
 800bf44:	341a      	adds	r4, #26
 800bf46:	42b5      	cmp	r5, r6
 800bf48:	d11a      	bne.n	800bf80 <_printf_common+0xc8>
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	e008      	b.n	800bf60 <_printf_common+0xa8>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	4652      	mov	r2, sl
 800bf52:	4649      	mov	r1, r9
 800bf54:	4638      	mov	r0, r7
 800bf56:	47c0      	blx	r8
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d103      	bne.n	800bf64 <_printf_common+0xac>
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf64:	3501      	adds	r5, #1
 800bf66:	e7c6      	b.n	800bef6 <_printf_common+0x3e>
 800bf68:	18e1      	adds	r1, r4, r3
 800bf6a:	1c5a      	adds	r2, r3, #1
 800bf6c:	2030      	movs	r0, #48	; 0x30
 800bf6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf72:	4422      	add	r2, r4
 800bf74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf7c:	3302      	adds	r3, #2
 800bf7e:	e7c7      	b.n	800bf10 <_printf_common+0x58>
 800bf80:	2301      	movs	r3, #1
 800bf82:	4622      	mov	r2, r4
 800bf84:	4649      	mov	r1, r9
 800bf86:	4638      	mov	r0, r7
 800bf88:	47c0      	blx	r8
 800bf8a:	3001      	adds	r0, #1
 800bf8c:	d0e6      	beq.n	800bf5c <_printf_common+0xa4>
 800bf8e:	3601      	adds	r6, #1
 800bf90:	e7d9      	b.n	800bf46 <_printf_common+0x8e>
	...

0800bf94 <_printf_i>:
 800bf94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf98:	460c      	mov	r4, r1
 800bf9a:	4691      	mov	r9, r2
 800bf9c:	7e27      	ldrb	r7, [r4, #24]
 800bf9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bfa0:	2f78      	cmp	r7, #120	; 0x78
 800bfa2:	4680      	mov	r8, r0
 800bfa4:	469a      	mov	sl, r3
 800bfa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfaa:	d807      	bhi.n	800bfbc <_printf_i+0x28>
 800bfac:	2f62      	cmp	r7, #98	; 0x62
 800bfae:	d80a      	bhi.n	800bfc6 <_printf_i+0x32>
 800bfb0:	2f00      	cmp	r7, #0
 800bfb2:	f000 80d8 	beq.w	800c166 <_printf_i+0x1d2>
 800bfb6:	2f58      	cmp	r7, #88	; 0x58
 800bfb8:	f000 80a3 	beq.w	800c102 <_printf_i+0x16e>
 800bfbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bfc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfc4:	e03a      	b.n	800c03c <_printf_i+0xa8>
 800bfc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfca:	2b15      	cmp	r3, #21
 800bfcc:	d8f6      	bhi.n	800bfbc <_printf_i+0x28>
 800bfce:	a001      	add	r0, pc, #4	; (adr r0, 800bfd4 <_printf_i+0x40>)
 800bfd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bfd4:	0800c02d 	.word	0x0800c02d
 800bfd8:	0800c041 	.word	0x0800c041
 800bfdc:	0800bfbd 	.word	0x0800bfbd
 800bfe0:	0800bfbd 	.word	0x0800bfbd
 800bfe4:	0800bfbd 	.word	0x0800bfbd
 800bfe8:	0800bfbd 	.word	0x0800bfbd
 800bfec:	0800c041 	.word	0x0800c041
 800bff0:	0800bfbd 	.word	0x0800bfbd
 800bff4:	0800bfbd 	.word	0x0800bfbd
 800bff8:	0800bfbd 	.word	0x0800bfbd
 800bffc:	0800bfbd 	.word	0x0800bfbd
 800c000:	0800c14d 	.word	0x0800c14d
 800c004:	0800c071 	.word	0x0800c071
 800c008:	0800c12f 	.word	0x0800c12f
 800c00c:	0800bfbd 	.word	0x0800bfbd
 800c010:	0800bfbd 	.word	0x0800bfbd
 800c014:	0800c16f 	.word	0x0800c16f
 800c018:	0800bfbd 	.word	0x0800bfbd
 800c01c:	0800c071 	.word	0x0800c071
 800c020:	0800bfbd 	.word	0x0800bfbd
 800c024:	0800bfbd 	.word	0x0800bfbd
 800c028:	0800c137 	.word	0x0800c137
 800c02c:	680b      	ldr	r3, [r1, #0]
 800c02e:	1d1a      	adds	r2, r3, #4
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	600a      	str	r2, [r1, #0]
 800c034:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c03c:	2301      	movs	r3, #1
 800c03e:	e0a3      	b.n	800c188 <_printf_i+0x1f4>
 800c040:	6825      	ldr	r5, [r4, #0]
 800c042:	6808      	ldr	r0, [r1, #0]
 800c044:	062e      	lsls	r6, r5, #24
 800c046:	f100 0304 	add.w	r3, r0, #4
 800c04a:	d50a      	bpl.n	800c062 <_printf_i+0xce>
 800c04c:	6805      	ldr	r5, [r0, #0]
 800c04e:	600b      	str	r3, [r1, #0]
 800c050:	2d00      	cmp	r5, #0
 800c052:	da03      	bge.n	800c05c <_printf_i+0xc8>
 800c054:	232d      	movs	r3, #45	; 0x2d
 800c056:	426d      	negs	r5, r5
 800c058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c05c:	485e      	ldr	r0, [pc, #376]	; (800c1d8 <_printf_i+0x244>)
 800c05e:	230a      	movs	r3, #10
 800c060:	e019      	b.n	800c096 <_printf_i+0x102>
 800c062:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c066:	6805      	ldr	r5, [r0, #0]
 800c068:	600b      	str	r3, [r1, #0]
 800c06a:	bf18      	it	ne
 800c06c:	b22d      	sxthne	r5, r5
 800c06e:	e7ef      	b.n	800c050 <_printf_i+0xbc>
 800c070:	680b      	ldr	r3, [r1, #0]
 800c072:	6825      	ldr	r5, [r4, #0]
 800c074:	1d18      	adds	r0, r3, #4
 800c076:	6008      	str	r0, [r1, #0]
 800c078:	0628      	lsls	r0, r5, #24
 800c07a:	d501      	bpl.n	800c080 <_printf_i+0xec>
 800c07c:	681d      	ldr	r5, [r3, #0]
 800c07e:	e002      	b.n	800c086 <_printf_i+0xf2>
 800c080:	0669      	lsls	r1, r5, #25
 800c082:	d5fb      	bpl.n	800c07c <_printf_i+0xe8>
 800c084:	881d      	ldrh	r5, [r3, #0]
 800c086:	4854      	ldr	r0, [pc, #336]	; (800c1d8 <_printf_i+0x244>)
 800c088:	2f6f      	cmp	r7, #111	; 0x6f
 800c08a:	bf0c      	ite	eq
 800c08c:	2308      	moveq	r3, #8
 800c08e:	230a      	movne	r3, #10
 800c090:	2100      	movs	r1, #0
 800c092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c096:	6866      	ldr	r6, [r4, #4]
 800c098:	60a6      	str	r6, [r4, #8]
 800c09a:	2e00      	cmp	r6, #0
 800c09c:	bfa2      	ittt	ge
 800c09e:	6821      	ldrge	r1, [r4, #0]
 800c0a0:	f021 0104 	bicge.w	r1, r1, #4
 800c0a4:	6021      	strge	r1, [r4, #0]
 800c0a6:	b90d      	cbnz	r5, 800c0ac <_printf_i+0x118>
 800c0a8:	2e00      	cmp	r6, #0
 800c0aa:	d04d      	beq.n	800c148 <_printf_i+0x1b4>
 800c0ac:	4616      	mov	r6, r2
 800c0ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0b2:	fb03 5711 	mls	r7, r3, r1, r5
 800c0b6:	5dc7      	ldrb	r7, [r0, r7]
 800c0b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0bc:	462f      	mov	r7, r5
 800c0be:	42bb      	cmp	r3, r7
 800c0c0:	460d      	mov	r5, r1
 800c0c2:	d9f4      	bls.n	800c0ae <_printf_i+0x11a>
 800c0c4:	2b08      	cmp	r3, #8
 800c0c6:	d10b      	bne.n	800c0e0 <_printf_i+0x14c>
 800c0c8:	6823      	ldr	r3, [r4, #0]
 800c0ca:	07df      	lsls	r7, r3, #31
 800c0cc:	d508      	bpl.n	800c0e0 <_printf_i+0x14c>
 800c0ce:	6923      	ldr	r3, [r4, #16]
 800c0d0:	6861      	ldr	r1, [r4, #4]
 800c0d2:	4299      	cmp	r1, r3
 800c0d4:	bfde      	ittt	le
 800c0d6:	2330      	movle	r3, #48	; 0x30
 800c0d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0e0:	1b92      	subs	r2, r2, r6
 800c0e2:	6122      	str	r2, [r4, #16]
 800c0e4:	f8cd a000 	str.w	sl, [sp]
 800c0e8:	464b      	mov	r3, r9
 800c0ea:	aa03      	add	r2, sp, #12
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	f7ff fee2 	bl	800beb8 <_printf_common>
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	d14c      	bne.n	800c192 <_printf_i+0x1fe>
 800c0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fc:	b004      	add	sp, #16
 800c0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c102:	4835      	ldr	r0, [pc, #212]	; (800c1d8 <_printf_i+0x244>)
 800c104:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	680e      	ldr	r6, [r1, #0]
 800c10c:	061f      	lsls	r7, r3, #24
 800c10e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c112:	600e      	str	r6, [r1, #0]
 800c114:	d514      	bpl.n	800c140 <_printf_i+0x1ac>
 800c116:	07d9      	lsls	r1, r3, #31
 800c118:	bf44      	itt	mi
 800c11a:	f043 0320 	orrmi.w	r3, r3, #32
 800c11e:	6023      	strmi	r3, [r4, #0]
 800c120:	b91d      	cbnz	r5, 800c12a <_printf_i+0x196>
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	f023 0320 	bic.w	r3, r3, #32
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	2310      	movs	r3, #16
 800c12c:	e7b0      	b.n	800c090 <_printf_i+0xfc>
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	f043 0320 	orr.w	r3, r3, #32
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	2378      	movs	r3, #120	; 0x78
 800c138:	4828      	ldr	r0, [pc, #160]	; (800c1dc <_printf_i+0x248>)
 800c13a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c13e:	e7e3      	b.n	800c108 <_printf_i+0x174>
 800c140:	065e      	lsls	r6, r3, #25
 800c142:	bf48      	it	mi
 800c144:	b2ad      	uxthmi	r5, r5
 800c146:	e7e6      	b.n	800c116 <_printf_i+0x182>
 800c148:	4616      	mov	r6, r2
 800c14a:	e7bb      	b.n	800c0c4 <_printf_i+0x130>
 800c14c:	680b      	ldr	r3, [r1, #0]
 800c14e:	6826      	ldr	r6, [r4, #0]
 800c150:	6960      	ldr	r0, [r4, #20]
 800c152:	1d1d      	adds	r5, r3, #4
 800c154:	600d      	str	r5, [r1, #0]
 800c156:	0635      	lsls	r5, r6, #24
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	d501      	bpl.n	800c160 <_printf_i+0x1cc>
 800c15c:	6018      	str	r0, [r3, #0]
 800c15e:	e002      	b.n	800c166 <_printf_i+0x1d2>
 800c160:	0671      	lsls	r1, r6, #25
 800c162:	d5fb      	bpl.n	800c15c <_printf_i+0x1c8>
 800c164:	8018      	strh	r0, [r3, #0]
 800c166:	2300      	movs	r3, #0
 800c168:	6123      	str	r3, [r4, #16]
 800c16a:	4616      	mov	r6, r2
 800c16c:	e7ba      	b.n	800c0e4 <_printf_i+0x150>
 800c16e:	680b      	ldr	r3, [r1, #0]
 800c170:	1d1a      	adds	r2, r3, #4
 800c172:	600a      	str	r2, [r1, #0]
 800c174:	681e      	ldr	r6, [r3, #0]
 800c176:	6862      	ldr	r2, [r4, #4]
 800c178:	2100      	movs	r1, #0
 800c17a:	4630      	mov	r0, r6
 800c17c:	f7f4 f828 	bl	80001d0 <memchr>
 800c180:	b108      	cbz	r0, 800c186 <_printf_i+0x1f2>
 800c182:	1b80      	subs	r0, r0, r6
 800c184:	6060      	str	r0, [r4, #4]
 800c186:	6863      	ldr	r3, [r4, #4]
 800c188:	6123      	str	r3, [r4, #16]
 800c18a:	2300      	movs	r3, #0
 800c18c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c190:	e7a8      	b.n	800c0e4 <_printf_i+0x150>
 800c192:	6923      	ldr	r3, [r4, #16]
 800c194:	4632      	mov	r2, r6
 800c196:	4649      	mov	r1, r9
 800c198:	4640      	mov	r0, r8
 800c19a:	47d0      	blx	sl
 800c19c:	3001      	adds	r0, #1
 800c19e:	d0ab      	beq.n	800c0f8 <_printf_i+0x164>
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	079b      	lsls	r3, r3, #30
 800c1a4:	d413      	bmi.n	800c1ce <_printf_i+0x23a>
 800c1a6:	68e0      	ldr	r0, [r4, #12]
 800c1a8:	9b03      	ldr	r3, [sp, #12]
 800c1aa:	4298      	cmp	r0, r3
 800c1ac:	bfb8      	it	lt
 800c1ae:	4618      	movlt	r0, r3
 800c1b0:	e7a4      	b.n	800c0fc <_printf_i+0x168>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	4632      	mov	r2, r6
 800c1b6:	4649      	mov	r1, r9
 800c1b8:	4640      	mov	r0, r8
 800c1ba:	47d0      	blx	sl
 800c1bc:	3001      	adds	r0, #1
 800c1be:	d09b      	beq.n	800c0f8 <_printf_i+0x164>
 800c1c0:	3501      	adds	r5, #1
 800c1c2:	68e3      	ldr	r3, [r4, #12]
 800c1c4:	9903      	ldr	r1, [sp, #12]
 800c1c6:	1a5b      	subs	r3, r3, r1
 800c1c8:	42ab      	cmp	r3, r5
 800c1ca:	dcf2      	bgt.n	800c1b2 <_printf_i+0x21e>
 800c1cc:	e7eb      	b.n	800c1a6 <_printf_i+0x212>
 800c1ce:	2500      	movs	r5, #0
 800c1d0:	f104 0619 	add.w	r6, r4, #25
 800c1d4:	e7f5      	b.n	800c1c2 <_printf_i+0x22e>
 800c1d6:	bf00      	nop
 800c1d8:	0800d935 	.word	0x0800d935
 800c1dc:	0800d946 	.word	0x0800d946

0800c1e0 <_sbrk_r>:
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	4d06      	ldr	r5, [pc, #24]	; (800c1fc <_sbrk_r+0x1c>)
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	4608      	mov	r0, r1
 800c1ea:	602b      	str	r3, [r5, #0]
 800c1ec:	f7f7 fe98 	bl	8003f20 <_sbrk>
 800c1f0:	1c43      	adds	r3, r0, #1
 800c1f2:	d102      	bne.n	800c1fa <_sbrk_r+0x1a>
 800c1f4:	682b      	ldr	r3, [r5, #0]
 800c1f6:	b103      	cbz	r3, 800c1fa <_sbrk_r+0x1a>
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	bd38      	pop	{r3, r4, r5, pc}
 800c1fc:	2000502c 	.word	0x2000502c

0800c200 <__sread>:
 800c200:	b510      	push	{r4, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c208:	f000 f8c6 	bl	800c398 <_read_r>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	bfab      	itete	ge
 800c210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c212:	89a3      	ldrhlt	r3, [r4, #12]
 800c214:	181b      	addge	r3, r3, r0
 800c216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c21a:	bfac      	ite	ge
 800c21c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c21e:	81a3      	strhlt	r3, [r4, #12]
 800c220:	bd10      	pop	{r4, pc}

0800c222 <__swrite>:
 800c222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c226:	461f      	mov	r7, r3
 800c228:	898b      	ldrh	r3, [r1, #12]
 800c22a:	05db      	lsls	r3, r3, #23
 800c22c:	4605      	mov	r5, r0
 800c22e:	460c      	mov	r4, r1
 800c230:	4616      	mov	r6, r2
 800c232:	d505      	bpl.n	800c240 <__swrite+0x1e>
 800c234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c238:	2302      	movs	r3, #2
 800c23a:	2200      	movs	r2, #0
 800c23c:	f000 f868 	bl	800c310 <_lseek_r>
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c24a:	81a3      	strh	r3, [r4, #12]
 800c24c:	4632      	mov	r2, r6
 800c24e:	463b      	mov	r3, r7
 800c250:	4628      	mov	r0, r5
 800c252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c256:	f000 b817 	b.w	800c288 <_write_r>

0800c25a <__sseek>:
 800c25a:	b510      	push	{r4, lr}
 800c25c:	460c      	mov	r4, r1
 800c25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c262:	f000 f855 	bl	800c310 <_lseek_r>
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	bf15      	itete	ne
 800c26c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c26e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c276:	81a3      	strheq	r3, [r4, #12]
 800c278:	bf18      	it	ne
 800c27a:	81a3      	strhne	r3, [r4, #12]
 800c27c:	bd10      	pop	{r4, pc}

0800c27e <__sclose>:
 800c27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c282:	f000 b813 	b.w	800c2ac <_close_r>
	...

0800c288 <_write_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d07      	ldr	r5, [pc, #28]	; (800c2a8 <_write_r+0x20>)
 800c28c:	4604      	mov	r4, r0
 800c28e:	4608      	mov	r0, r1
 800c290:	4611      	mov	r1, r2
 800c292:	2200      	movs	r2, #0
 800c294:	602a      	str	r2, [r5, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	f7f7 fdf1 	bl	8003e7e <_write>
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	d102      	bne.n	800c2a6 <_write_r+0x1e>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	b103      	cbz	r3, 800c2a6 <_write_r+0x1e>
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	2000502c 	.word	0x2000502c

0800c2ac <_close_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	4d06      	ldr	r5, [pc, #24]	; (800c2c8 <_close_r+0x1c>)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	4608      	mov	r0, r1
 800c2b6:	602b      	str	r3, [r5, #0]
 800c2b8:	f7f7 fdfd 	bl	8003eb6 <_close>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_close_r+0x1a>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_close_r+0x1a>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	2000502c 	.word	0x2000502c

0800c2cc <_fstat_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d07      	ldr	r5, [pc, #28]	; (800c2ec <_fstat_r+0x20>)
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4608      	mov	r0, r1
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	602b      	str	r3, [r5, #0]
 800c2da:	f7f7 fdf8 	bl	8003ece <_fstat>
 800c2de:	1c43      	adds	r3, r0, #1
 800c2e0:	d102      	bne.n	800c2e8 <_fstat_r+0x1c>
 800c2e2:	682b      	ldr	r3, [r5, #0]
 800c2e4:	b103      	cbz	r3, 800c2e8 <_fstat_r+0x1c>
 800c2e6:	6023      	str	r3, [r4, #0]
 800c2e8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ea:	bf00      	nop
 800c2ec:	2000502c 	.word	0x2000502c

0800c2f0 <_isatty_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d06      	ldr	r5, [pc, #24]	; (800c30c <_isatty_r+0x1c>)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	602b      	str	r3, [r5, #0]
 800c2fc:	f7f7 fdf7 	bl	8003eee <_isatty>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_isatty_r+0x1a>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_isatty_r+0x1a>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	2000502c 	.word	0x2000502c

0800c310 <_lseek_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d07      	ldr	r5, [pc, #28]	; (800c330 <_lseek_r+0x20>)
 800c314:	4604      	mov	r4, r0
 800c316:	4608      	mov	r0, r1
 800c318:	4611      	mov	r1, r2
 800c31a:	2200      	movs	r2, #0
 800c31c:	602a      	str	r2, [r5, #0]
 800c31e:	461a      	mov	r2, r3
 800c320:	f7f7 fdf0 	bl	8003f04 <_lseek>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d102      	bne.n	800c32e <_lseek_r+0x1e>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b103      	cbz	r3, 800c32e <_lseek_r+0x1e>
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	2000502c 	.word	0x2000502c

0800c334 <__malloc_lock>:
 800c334:	4801      	ldr	r0, [pc, #4]	; (800c33c <__malloc_lock+0x8>)
 800c336:	f7ff b9f9 	b.w	800b72c <__retarget_lock_acquire_recursive>
 800c33a:	bf00      	nop
 800c33c:	20005024 	.word	0x20005024

0800c340 <__malloc_unlock>:
 800c340:	4801      	ldr	r0, [pc, #4]	; (800c348 <__malloc_unlock+0x8>)
 800c342:	f7ff b9f4 	b.w	800b72e <__retarget_lock_release_recursive>
 800c346:	bf00      	nop
 800c348:	20005024 	.word	0x20005024

0800c34c <_realloc_r>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	4607      	mov	r7, r0
 800c350:	4614      	mov	r4, r2
 800c352:	460e      	mov	r6, r1
 800c354:	b921      	cbnz	r1, 800c360 <_realloc_r+0x14>
 800c356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c35a:	4611      	mov	r1, r2
 800c35c:	f7ff ba9c 	b.w	800b898 <_malloc_r>
 800c360:	b922      	cbnz	r2, 800c36c <_realloc_r+0x20>
 800c362:	f7ff fa49 	bl	800b7f8 <_free_r>
 800c366:	4625      	mov	r5, r4
 800c368:	4628      	mov	r0, r5
 800c36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c36c:	f000 f826 	bl	800c3bc <_malloc_usable_size_r>
 800c370:	42a0      	cmp	r0, r4
 800c372:	d20f      	bcs.n	800c394 <_realloc_r+0x48>
 800c374:	4621      	mov	r1, r4
 800c376:	4638      	mov	r0, r7
 800c378:	f7ff fa8e 	bl	800b898 <_malloc_r>
 800c37c:	4605      	mov	r5, r0
 800c37e:	2800      	cmp	r0, #0
 800c380:	d0f2      	beq.n	800c368 <_realloc_r+0x1c>
 800c382:	4631      	mov	r1, r6
 800c384:	4622      	mov	r2, r4
 800c386:	f7fe fe7b 	bl	800b080 <memcpy>
 800c38a:	4631      	mov	r1, r6
 800c38c:	4638      	mov	r0, r7
 800c38e:	f7ff fa33 	bl	800b7f8 <_free_r>
 800c392:	e7e9      	b.n	800c368 <_realloc_r+0x1c>
 800c394:	4635      	mov	r5, r6
 800c396:	e7e7      	b.n	800c368 <_realloc_r+0x1c>

0800c398 <_read_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4d07      	ldr	r5, [pc, #28]	; (800c3b8 <_read_r+0x20>)
 800c39c:	4604      	mov	r4, r0
 800c39e:	4608      	mov	r0, r1
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	602a      	str	r2, [r5, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f7f7 fd4c 	bl	8003e44 <_read>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	d102      	bne.n	800c3b6 <_read_r+0x1e>
 800c3b0:	682b      	ldr	r3, [r5, #0]
 800c3b2:	b103      	cbz	r3, 800c3b6 <_read_r+0x1e>
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	2000502c 	.word	0x2000502c

0800c3bc <_malloc_usable_size_r>:
 800c3bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3c0:	1f18      	subs	r0, r3, #4
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	bfbc      	itt	lt
 800c3c6:	580b      	ldrlt	r3, [r1, r0]
 800c3c8:	18c0      	addlt	r0, r0, r3
 800c3ca:	4770      	bx	lr

0800c3cc <asin>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	ed2d 8b02 	vpush	{d8}
 800c3d2:	ec55 4b10 	vmov	r4, r5, d0
 800c3d6:	f000 f8bf 	bl	800c558 <__ieee754_asin>
 800c3da:	4b16      	ldr	r3, [pc, #88]	; (800c434 <asin+0x68>)
 800c3dc:	eeb0 8a40 	vmov.f32	s16, s0
 800c3e0:	eef0 8a60 	vmov.f32	s17, s1
 800c3e4:	f993 3000 	ldrsb.w	r3, [r3]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	d01c      	beq.n	800c426 <asin+0x5a>
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	462b      	mov	r3, r5
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	f7f4 fb92 	bl	8000b1c <__aeabi_dcmpun>
 800c3f8:	b9a8      	cbnz	r0, 800c426 <asin+0x5a>
 800c3fa:	ec45 4b10 	vmov	d0, r4, r5
 800c3fe:	f000 fc5c 	bl	800ccba <fabs>
 800c402:	4b0d      	ldr	r3, [pc, #52]	; (800c438 <asin+0x6c>)
 800c404:	ec51 0b10 	vmov	r0, r1, d0
 800c408:	2200      	movs	r2, #0
 800c40a:	f7f4 fb7d 	bl	8000b08 <__aeabi_dcmpgt>
 800c40e:	b150      	cbz	r0, 800c426 <asin+0x5a>
 800c410:	f7fe fe0c 	bl	800b02c <__errno>
 800c414:	ecbd 8b02 	vpop	{d8}
 800c418:	2321      	movs	r3, #33	; 0x21
 800c41a:	6003      	str	r3, [r0, #0]
 800c41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c420:	4806      	ldr	r0, [pc, #24]	; (800c43c <asin+0x70>)
 800c422:	f000 bc55 	b.w	800ccd0 <nan>
 800c426:	eeb0 0a48 	vmov.f32	s0, s16
 800c42a:	eef0 0a68 	vmov.f32	s1, s17
 800c42e:	ecbd 8b02 	vpop	{d8}
 800c432:	bd38      	pop	{r3, r4, r5, pc}
 800c434:	20000078 	.word	0x20000078
 800c438:	3ff00000 	.word	0x3ff00000
 800c43c:	0800d929 	.word	0x0800d929

0800c440 <sqrt>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	ed2d 8b02 	vpush	{d8}
 800c446:	ec55 4b10 	vmov	r4, r5, d0
 800c44a:	f000 fa99 	bl	800c980 <__ieee754_sqrt>
 800c44e:	4b15      	ldr	r3, [pc, #84]	; (800c4a4 <sqrt+0x64>)
 800c450:	eeb0 8a40 	vmov.f32	s16, s0
 800c454:	eef0 8a60 	vmov.f32	s17, s1
 800c458:	f993 3000 	ldrsb.w	r3, [r3]
 800c45c:	3301      	adds	r3, #1
 800c45e:	d019      	beq.n	800c494 <sqrt+0x54>
 800c460:	4622      	mov	r2, r4
 800c462:	462b      	mov	r3, r5
 800c464:	4620      	mov	r0, r4
 800c466:	4629      	mov	r1, r5
 800c468:	f7f4 fb58 	bl	8000b1c <__aeabi_dcmpun>
 800c46c:	b990      	cbnz	r0, 800c494 <sqrt+0x54>
 800c46e:	2200      	movs	r2, #0
 800c470:	2300      	movs	r3, #0
 800c472:	4620      	mov	r0, r4
 800c474:	4629      	mov	r1, r5
 800c476:	f7f4 fb29 	bl	8000acc <__aeabi_dcmplt>
 800c47a:	b158      	cbz	r0, 800c494 <sqrt+0x54>
 800c47c:	f7fe fdd6 	bl	800b02c <__errno>
 800c480:	2321      	movs	r3, #33	; 0x21
 800c482:	6003      	str	r3, [r0, #0]
 800c484:	2200      	movs	r2, #0
 800c486:	2300      	movs	r3, #0
 800c488:	4610      	mov	r0, r2
 800c48a:	4619      	mov	r1, r3
 800c48c:	f7f4 f9d6 	bl	800083c <__aeabi_ddiv>
 800c490:	ec41 0b18 	vmov	d8, r0, r1
 800c494:	eeb0 0a48 	vmov.f32	s0, s16
 800c498:	eef0 0a68 	vmov.f32	s1, s17
 800c49c:	ecbd 8b02 	vpop	{d8}
 800c4a0:	bd38      	pop	{r3, r4, r5, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20000078 	.word	0x20000078

0800c4a8 <asinf>:
 800c4a8:	b508      	push	{r3, lr}
 800c4aa:	ed2d 8b02 	vpush	{d8}
 800c4ae:	eeb0 8a40 	vmov.f32	s16, s0
 800c4b2:	f000 fb19 	bl	800cae8 <__ieee754_asinf>
 800c4b6:	4b13      	ldr	r3, [pc, #76]	; (800c504 <asinf+0x5c>)
 800c4b8:	f993 3000 	ldrsb.w	r3, [r3]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	eef0 8a40 	vmov.f32	s17, s0
 800c4c2:	d01a      	beq.n	800c4fa <asinf+0x52>
 800c4c4:	eeb4 8a48 	vcmp.f32	s16, s16
 800c4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4cc:	d615      	bvs.n	800c4fa <asinf+0x52>
 800c4ce:	eeb0 0a48 	vmov.f32	s0, s16
 800c4d2:	f000 fc05 	bl	800cce0 <fabsf>
 800c4d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c4da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4e2:	dd0a      	ble.n	800c4fa <asinf+0x52>
 800c4e4:	f7fe fda2 	bl	800b02c <__errno>
 800c4e8:	ecbd 8b02 	vpop	{d8}
 800c4ec:	2321      	movs	r3, #33	; 0x21
 800c4ee:	6003      	str	r3, [r0, #0]
 800c4f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c4f4:	4804      	ldr	r0, [pc, #16]	; (800c508 <asinf+0x60>)
 800c4f6:	f000 bbfb 	b.w	800ccf0 <nanf>
 800c4fa:	eeb0 0a68 	vmov.f32	s0, s17
 800c4fe:	ecbd 8b02 	vpop	{d8}
 800c502:	bd08      	pop	{r3, pc}
 800c504:	20000078 	.word	0x20000078
 800c508:	0800d929 	.word	0x0800d929

0800c50c <sqrtf>:
 800c50c:	b508      	push	{r3, lr}
 800c50e:	ed2d 8b02 	vpush	{d8}
 800c512:	eeb0 8a40 	vmov.f32	s16, s0
 800c516:	f000 fbcd 	bl	800ccb4 <__ieee754_sqrtf>
 800c51a:	4b0d      	ldr	r3, [pc, #52]	; (800c550 <sqrtf+0x44>)
 800c51c:	f993 3000 	ldrsb.w	r3, [r3]
 800c520:	3301      	adds	r3, #1
 800c522:	d011      	beq.n	800c548 <sqrtf+0x3c>
 800c524:	eeb4 8a48 	vcmp.f32	s16, s16
 800c528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c52c:	d60c      	bvs.n	800c548 <sqrtf+0x3c>
 800c52e:	eddf 8a09 	vldr	s17, [pc, #36]	; 800c554 <sqrtf+0x48>
 800c532:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c53a:	d505      	bpl.n	800c548 <sqrtf+0x3c>
 800c53c:	f7fe fd76 	bl	800b02c <__errno>
 800c540:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c544:	2321      	movs	r3, #33	; 0x21
 800c546:	6003      	str	r3, [r0, #0]
 800c548:	ecbd 8b02 	vpop	{d8}
 800c54c:	bd08      	pop	{r3, pc}
 800c54e:	bf00      	nop
 800c550:	20000078 	.word	0x20000078
 800c554:	00000000 	.word	0x00000000

0800c558 <__ieee754_asin>:
 800c558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	ed2d 8b04 	vpush	{d8-d9}
 800c560:	ec55 4b10 	vmov	r4, r5, d0
 800c564:	4bcc      	ldr	r3, [pc, #816]	; (800c898 <__ieee754_asin+0x340>)
 800c566:	b083      	sub	sp, #12
 800c568:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c56c:	4598      	cmp	r8, r3
 800c56e:	9501      	str	r5, [sp, #4]
 800c570:	dd35      	ble.n	800c5de <__ieee754_asin+0x86>
 800c572:	ee10 3a10 	vmov	r3, s0
 800c576:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800c57a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800c57e:	ea58 0303 	orrs.w	r3, r8, r3
 800c582:	d117      	bne.n	800c5b4 <__ieee754_asin+0x5c>
 800c584:	a3aa      	add	r3, pc, #680	; (adr r3, 800c830 <__ieee754_asin+0x2d8>)
 800c586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58a:	ee10 0a10 	vmov	r0, s0
 800c58e:	4629      	mov	r1, r5
 800c590:	f7f4 f82a 	bl	80005e8 <__aeabi_dmul>
 800c594:	a3a8      	add	r3, pc, #672	; (adr r3, 800c838 <__ieee754_asin+0x2e0>)
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	4606      	mov	r6, r0
 800c59c:	460f      	mov	r7, r1
 800c59e:	4620      	mov	r0, r4
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	f7f4 f821 	bl	80005e8 <__aeabi_dmul>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	4639      	mov	r1, r7
 800c5ae:	f7f3 fe65 	bl	800027c <__adddf3>
 800c5b2:	e00b      	b.n	800c5cc <__ieee754_asin+0x74>
 800c5b4:	ee10 2a10 	vmov	r2, s0
 800c5b8:	462b      	mov	r3, r5
 800c5ba:	ee10 0a10 	vmov	r0, s0
 800c5be:	4629      	mov	r1, r5
 800c5c0:	f7f3 fe5a 	bl	8000278 <__aeabi_dsub>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	f7f4 f938 	bl	800083c <__aeabi_ddiv>
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	460d      	mov	r5, r1
 800c5d0:	ec45 4b10 	vmov	d0, r4, r5
 800c5d4:	b003      	add	sp, #12
 800c5d6:	ecbd 8b04 	vpop	{d8-d9}
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5de:	4baf      	ldr	r3, [pc, #700]	; (800c89c <__ieee754_asin+0x344>)
 800c5e0:	4598      	cmp	r8, r3
 800c5e2:	dc11      	bgt.n	800c608 <__ieee754_asin+0xb0>
 800c5e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c5e8:	f280 80ae 	bge.w	800c748 <__ieee754_asin+0x1f0>
 800c5ec:	a394      	add	r3, pc, #592	; (adr r3, 800c840 <__ieee754_asin+0x2e8>)
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	ee10 0a10 	vmov	r0, s0
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	f7f3 fe40 	bl	800027c <__adddf3>
 800c5fc:	4ba8      	ldr	r3, [pc, #672]	; (800c8a0 <__ieee754_asin+0x348>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	f7f4 fa82 	bl	8000b08 <__aeabi_dcmpgt>
 800c604:	2800      	cmp	r0, #0
 800c606:	d1e3      	bne.n	800c5d0 <__ieee754_asin+0x78>
 800c608:	ec45 4b10 	vmov	d0, r4, r5
 800c60c:	f000 fb55 	bl	800ccba <fabs>
 800c610:	49a3      	ldr	r1, [pc, #652]	; (800c8a0 <__ieee754_asin+0x348>)
 800c612:	ec53 2b10 	vmov	r2, r3, d0
 800c616:	2000      	movs	r0, #0
 800c618:	f7f3 fe2e 	bl	8000278 <__aeabi_dsub>
 800c61c:	4ba1      	ldr	r3, [pc, #644]	; (800c8a4 <__ieee754_asin+0x34c>)
 800c61e:	2200      	movs	r2, #0
 800c620:	f7f3 ffe2 	bl	80005e8 <__aeabi_dmul>
 800c624:	a388      	add	r3, pc, #544	; (adr r3, 800c848 <__ieee754_asin+0x2f0>)
 800c626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62a:	4604      	mov	r4, r0
 800c62c:	460d      	mov	r5, r1
 800c62e:	f7f3 ffdb 	bl	80005e8 <__aeabi_dmul>
 800c632:	a387      	add	r3, pc, #540	; (adr r3, 800c850 <__ieee754_asin+0x2f8>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	f7f3 fe20 	bl	800027c <__adddf3>
 800c63c:	4622      	mov	r2, r4
 800c63e:	462b      	mov	r3, r5
 800c640:	f7f3 ffd2 	bl	80005e8 <__aeabi_dmul>
 800c644:	a384      	add	r3, pc, #528	; (adr r3, 800c858 <__ieee754_asin+0x300>)
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	f7f3 fe15 	bl	8000278 <__aeabi_dsub>
 800c64e:	4622      	mov	r2, r4
 800c650:	462b      	mov	r3, r5
 800c652:	f7f3 ffc9 	bl	80005e8 <__aeabi_dmul>
 800c656:	a382      	add	r3, pc, #520	; (adr r3, 800c860 <__ieee754_asin+0x308>)
 800c658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65c:	f7f3 fe0e 	bl	800027c <__adddf3>
 800c660:	4622      	mov	r2, r4
 800c662:	462b      	mov	r3, r5
 800c664:	f7f3 ffc0 	bl	80005e8 <__aeabi_dmul>
 800c668:	a37f      	add	r3, pc, #508	; (adr r3, 800c868 <__ieee754_asin+0x310>)
 800c66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66e:	f7f3 fe03 	bl	8000278 <__aeabi_dsub>
 800c672:	4622      	mov	r2, r4
 800c674:	462b      	mov	r3, r5
 800c676:	f7f3 ffb7 	bl	80005e8 <__aeabi_dmul>
 800c67a:	a37d      	add	r3, pc, #500	; (adr r3, 800c870 <__ieee754_asin+0x318>)
 800c67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c680:	f7f3 fdfc 	bl	800027c <__adddf3>
 800c684:	4622      	mov	r2, r4
 800c686:	462b      	mov	r3, r5
 800c688:	f7f3 ffae 	bl	80005e8 <__aeabi_dmul>
 800c68c:	a37a      	add	r3, pc, #488	; (adr r3, 800c878 <__ieee754_asin+0x320>)
 800c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c692:	ec41 0b18 	vmov	d8, r0, r1
 800c696:	4620      	mov	r0, r4
 800c698:	4629      	mov	r1, r5
 800c69a:	f7f3 ffa5 	bl	80005e8 <__aeabi_dmul>
 800c69e:	a378      	add	r3, pc, #480	; (adr r3, 800c880 <__ieee754_asin+0x328>)
 800c6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a4:	f7f3 fde8 	bl	8000278 <__aeabi_dsub>
 800c6a8:	4622      	mov	r2, r4
 800c6aa:	462b      	mov	r3, r5
 800c6ac:	f7f3 ff9c 	bl	80005e8 <__aeabi_dmul>
 800c6b0:	a375      	add	r3, pc, #468	; (adr r3, 800c888 <__ieee754_asin+0x330>)
 800c6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b6:	f7f3 fde1 	bl	800027c <__adddf3>
 800c6ba:	4622      	mov	r2, r4
 800c6bc:	462b      	mov	r3, r5
 800c6be:	f7f3 ff93 	bl	80005e8 <__aeabi_dmul>
 800c6c2:	a373      	add	r3, pc, #460	; (adr r3, 800c890 <__ieee754_asin+0x338>)
 800c6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c8:	f7f3 fdd6 	bl	8000278 <__aeabi_dsub>
 800c6cc:	4622      	mov	r2, r4
 800c6ce:	462b      	mov	r3, r5
 800c6d0:	f7f3 ff8a 	bl	80005e8 <__aeabi_dmul>
 800c6d4:	4b72      	ldr	r3, [pc, #456]	; (800c8a0 <__ieee754_asin+0x348>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f7f3 fdd0 	bl	800027c <__adddf3>
 800c6dc:	ec45 4b10 	vmov	d0, r4, r5
 800c6e0:	4606      	mov	r6, r0
 800c6e2:	460f      	mov	r7, r1
 800c6e4:	f000 f94c 	bl	800c980 <__ieee754_sqrt>
 800c6e8:	4b6f      	ldr	r3, [pc, #444]	; (800c8a8 <__ieee754_asin+0x350>)
 800c6ea:	4598      	cmp	r8, r3
 800c6ec:	ec5b ab10 	vmov	sl, fp, d0
 800c6f0:	f340 80dc 	ble.w	800c8ac <__ieee754_asin+0x354>
 800c6f4:	4632      	mov	r2, r6
 800c6f6:	463b      	mov	r3, r7
 800c6f8:	ec51 0b18 	vmov	r0, r1, d8
 800c6fc:	f7f4 f89e 	bl	800083c <__aeabi_ddiv>
 800c700:	4652      	mov	r2, sl
 800c702:	465b      	mov	r3, fp
 800c704:	f7f3 ff70 	bl	80005e8 <__aeabi_dmul>
 800c708:	4652      	mov	r2, sl
 800c70a:	465b      	mov	r3, fp
 800c70c:	f7f3 fdb6 	bl	800027c <__adddf3>
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	f7f3 fdb2 	bl	800027c <__adddf3>
 800c718:	a347      	add	r3, pc, #284	; (adr r3, 800c838 <__ieee754_asin+0x2e0>)
 800c71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71e:	f7f3 fdab 	bl	8000278 <__aeabi_dsub>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	a142      	add	r1, pc, #264	; (adr r1, 800c830 <__ieee754_asin+0x2d8>)
 800c728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c72c:	f7f3 fda4 	bl	8000278 <__aeabi_dsub>
 800c730:	9b01      	ldr	r3, [sp, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	bfdc      	itt	le
 800c736:	4602      	movle	r2, r0
 800c738:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800c73c:	4604      	mov	r4, r0
 800c73e:	460d      	mov	r5, r1
 800c740:	bfdc      	itt	le
 800c742:	4614      	movle	r4, r2
 800c744:	461d      	movle	r5, r3
 800c746:	e743      	b.n	800c5d0 <__ieee754_asin+0x78>
 800c748:	ee10 2a10 	vmov	r2, s0
 800c74c:	ee10 0a10 	vmov	r0, s0
 800c750:	462b      	mov	r3, r5
 800c752:	4629      	mov	r1, r5
 800c754:	f7f3 ff48 	bl	80005e8 <__aeabi_dmul>
 800c758:	a33b      	add	r3, pc, #236	; (adr r3, 800c848 <__ieee754_asin+0x2f0>)
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	4606      	mov	r6, r0
 800c760:	460f      	mov	r7, r1
 800c762:	f7f3 ff41 	bl	80005e8 <__aeabi_dmul>
 800c766:	a33a      	add	r3, pc, #232	; (adr r3, 800c850 <__ieee754_asin+0x2f8>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f3 fd86 	bl	800027c <__adddf3>
 800c770:	4632      	mov	r2, r6
 800c772:	463b      	mov	r3, r7
 800c774:	f7f3 ff38 	bl	80005e8 <__aeabi_dmul>
 800c778:	a337      	add	r3, pc, #220	; (adr r3, 800c858 <__ieee754_asin+0x300>)
 800c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77e:	f7f3 fd7b 	bl	8000278 <__aeabi_dsub>
 800c782:	4632      	mov	r2, r6
 800c784:	463b      	mov	r3, r7
 800c786:	f7f3 ff2f 	bl	80005e8 <__aeabi_dmul>
 800c78a:	a335      	add	r3, pc, #212	; (adr r3, 800c860 <__ieee754_asin+0x308>)
 800c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c790:	f7f3 fd74 	bl	800027c <__adddf3>
 800c794:	4632      	mov	r2, r6
 800c796:	463b      	mov	r3, r7
 800c798:	f7f3 ff26 	bl	80005e8 <__aeabi_dmul>
 800c79c:	a332      	add	r3, pc, #200	; (adr r3, 800c868 <__ieee754_asin+0x310>)
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	f7f3 fd69 	bl	8000278 <__aeabi_dsub>
 800c7a6:	4632      	mov	r2, r6
 800c7a8:	463b      	mov	r3, r7
 800c7aa:	f7f3 ff1d 	bl	80005e8 <__aeabi_dmul>
 800c7ae:	a330      	add	r3, pc, #192	; (adr r3, 800c870 <__ieee754_asin+0x318>)
 800c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b4:	f7f3 fd62 	bl	800027c <__adddf3>
 800c7b8:	4632      	mov	r2, r6
 800c7ba:	463b      	mov	r3, r7
 800c7bc:	f7f3 ff14 	bl	80005e8 <__aeabi_dmul>
 800c7c0:	a32d      	add	r3, pc, #180	; (adr r3, 800c878 <__ieee754_asin+0x320>)
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	4680      	mov	r8, r0
 800c7c8:	4689      	mov	r9, r1
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	4639      	mov	r1, r7
 800c7ce:	f7f3 ff0b 	bl	80005e8 <__aeabi_dmul>
 800c7d2:	a32b      	add	r3, pc, #172	; (adr r3, 800c880 <__ieee754_asin+0x328>)
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	f7f3 fd4e 	bl	8000278 <__aeabi_dsub>
 800c7dc:	4632      	mov	r2, r6
 800c7de:	463b      	mov	r3, r7
 800c7e0:	f7f3 ff02 	bl	80005e8 <__aeabi_dmul>
 800c7e4:	a328      	add	r3, pc, #160	; (adr r3, 800c888 <__ieee754_asin+0x330>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	f7f3 fd47 	bl	800027c <__adddf3>
 800c7ee:	4632      	mov	r2, r6
 800c7f0:	463b      	mov	r3, r7
 800c7f2:	f7f3 fef9 	bl	80005e8 <__aeabi_dmul>
 800c7f6:	a326      	add	r3, pc, #152	; (adr r3, 800c890 <__ieee754_asin+0x338>)
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f7f3 fd3c 	bl	8000278 <__aeabi_dsub>
 800c800:	4632      	mov	r2, r6
 800c802:	463b      	mov	r3, r7
 800c804:	f7f3 fef0 	bl	80005e8 <__aeabi_dmul>
 800c808:	4b25      	ldr	r3, [pc, #148]	; (800c8a0 <__ieee754_asin+0x348>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	f7f3 fd36 	bl	800027c <__adddf3>
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	4640      	mov	r0, r8
 800c816:	4649      	mov	r1, r9
 800c818:	f7f4 f810 	bl	800083c <__aeabi_ddiv>
 800c81c:	4622      	mov	r2, r4
 800c81e:	462b      	mov	r3, r5
 800c820:	f7f3 fee2 	bl	80005e8 <__aeabi_dmul>
 800c824:	4602      	mov	r2, r0
 800c826:	460b      	mov	r3, r1
 800c828:	4620      	mov	r0, r4
 800c82a:	4629      	mov	r1, r5
 800c82c:	e6bf      	b.n	800c5ae <__ieee754_asin+0x56>
 800c82e:	bf00      	nop
 800c830:	54442d18 	.word	0x54442d18
 800c834:	3ff921fb 	.word	0x3ff921fb
 800c838:	33145c07 	.word	0x33145c07
 800c83c:	3c91a626 	.word	0x3c91a626
 800c840:	8800759c 	.word	0x8800759c
 800c844:	7e37e43c 	.word	0x7e37e43c
 800c848:	0dfdf709 	.word	0x0dfdf709
 800c84c:	3f023de1 	.word	0x3f023de1
 800c850:	7501b288 	.word	0x7501b288
 800c854:	3f49efe0 	.word	0x3f49efe0
 800c858:	b5688f3b 	.word	0xb5688f3b
 800c85c:	3fa48228 	.word	0x3fa48228
 800c860:	0e884455 	.word	0x0e884455
 800c864:	3fc9c155 	.word	0x3fc9c155
 800c868:	03eb6f7d 	.word	0x03eb6f7d
 800c86c:	3fd4d612 	.word	0x3fd4d612
 800c870:	55555555 	.word	0x55555555
 800c874:	3fc55555 	.word	0x3fc55555
 800c878:	b12e9282 	.word	0xb12e9282
 800c87c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c880:	1b8d0159 	.word	0x1b8d0159
 800c884:	3fe6066c 	.word	0x3fe6066c
 800c888:	9c598ac8 	.word	0x9c598ac8
 800c88c:	40002ae5 	.word	0x40002ae5
 800c890:	1c8a2d4b 	.word	0x1c8a2d4b
 800c894:	40033a27 	.word	0x40033a27
 800c898:	3fefffff 	.word	0x3fefffff
 800c89c:	3fdfffff 	.word	0x3fdfffff
 800c8a0:	3ff00000 	.word	0x3ff00000
 800c8a4:	3fe00000 	.word	0x3fe00000
 800c8a8:	3fef3332 	.word	0x3fef3332
 800c8ac:	ee10 2a10 	vmov	r2, s0
 800c8b0:	ee10 0a10 	vmov	r0, s0
 800c8b4:	465b      	mov	r3, fp
 800c8b6:	4659      	mov	r1, fp
 800c8b8:	f7f3 fce0 	bl	800027c <__adddf3>
 800c8bc:	4632      	mov	r2, r6
 800c8be:	463b      	mov	r3, r7
 800c8c0:	ec41 0b19 	vmov	d9, r0, r1
 800c8c4:	ec51 0b18 	vmov	r0, r1, d8
 800c8c8:	f7f3 ffb8 	bl	800083c <__aeabi_ddiv>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	ec51 0b19 	vmov	r0, r1, d9
 800c8d4:	f7f3 fe88 	bl	80005e8 <__aeabi_dmul>
 800c8d8:	f04f 0800 	mov.w	r8, #0
 800c8dc:	4606      	mov	r6, r0
 800c8de:	460f      	mov	r7, r1
 800c8e0:	4642      	mov	r2, r8
 800c8e2:	465b      	mov	r3, fp
 800c8e4:	4640      	mov	r0, r8
 800c8e6:	4659      	mov	r1, fp
 800c8e8:	f7f3 fe7e 	bl	80005e8 <__aeabi_dmul>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	f7f3 fcc0 	bl	8000278 <__aeabi_dsub>
 800c8f8:	4642      	mov	r2, r8
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	460d      	mov	r5, r1
 800c8fe:	465b      	mov	r3, fp
 800c900:	4650      	mov	r0, sl
 800c902:	4659      	mov	r1, fp
 800c904:	f7f3 fcba 	bl	800027c <__adddf3>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	4620      	mov	r0, r4
 800c90e:	4629      	mov	r1, r5
 800c910:	f7f3 ff94 	bl	800083c <__aeabi_ddiv>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	f7f3 fcb0 	bl	800027c <__adddf3>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	a113      	add	r1, pc, #76	; (adr r1, 800c970 <__ieee754_asin+0x418>)
 800c922:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c926:	f7f3 fca7 	bl	8000278 <__aeabi_dsub>
 800c92a:	4602      	mov	r2, r0
 800c92c:	460b      	mov	r3, r1
 800c92e:	4630      	mov	r0, r6
 800c930:	4639      	mov	r1, r7
 800c932:	f7f3 fca1 	bl	8000278 <__aeabi_dsub>
 800c936:	4642      	mov	r2, r8
 800c938:	4604      	mov	r4, r0
 800c93a:	460d      	mov	r5, r1
 800c93c:	465b      	mov	r3, fp
 800c93e:	4640      	mov	r0, r8
 800c940:	4659      	mov	r1, fp
 800c942:	f7f3 fc9b 	bl	800027c <__adddf3>
 800c946:	4602      	mov	r2, r0
 800c948:	460b      	mov	r3, r1
 800c94a:	a10b      	add	r1, pc, #44	; (adr r1, 800c978 <__ieee754_asin+0x420>)
 800c94c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c950:	f7f3 fc92 	bl	8000278 <__aeabi_dsub>
 800c954:	4602      	mov	r2, r0
 800c956:	460b      	mov	r3, r1
 800c958:	4620      	mov	r0, r4
 800c95a:	4629      	mov	r1, r5
 800c95c:	f7f3 fc8c 	bl	8000278 <__aeabi_dsub>
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	a104      	add	r1, pc, #16	; (adr r1, 800c978 <__ieee754_asin+0x420>)
 800c966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c96a:	e6df      	b.n	800c72c <__ieee754_asin+0x1d4>
 800c96c:	f3af 8000 	nop.w
 800c970:	33145c07 	.word	0x33145c07
 800c974:	3c91a626 	.word	0x3c91a626
 800c978:	54442d18 	.word	0x54442d18
 800c97c:	3fe921fb 	.word	0x3fe921fb

0800c980 <__ieee754_sqrt>:
 800c980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c984:	ec55 4b10 	vmov	r4, r5, d0
 800c988:	4e56      	ldr	r6, [pc, #344]	; (800cae4 <__ieee754_sqrt+0x164>)
 800c98a:	43ae      	bics	r6, r5
 800c98c:	ee10 0a10 	vmov	r0, s0
 800c990:	ee10 3a10 	vmov	r3, s0
 800c994:	4629      	mov	r1, r5
 800c996:	462a      	mov	r2, r5
 800c998:	d110      	bne.n	800c9bc <__ieee754_sqrt+0x3c>
 800c99a:	ee10 2a10 	vmov	r2, s0
 800c99e:	462b      	mov	r3, r5
 800c9a0:	f7f3 fe22 	bl	80005e8 <__aeabi_dmul>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	f7f3 fc66 	bl	800027c <__adddf3>
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	460d      	mov	r5, r1
 800c9b4:	ec45 4b10 	vmov	d0, r4, r5
 800c9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9bc:	2d00      	cmp	r5, #0
 800c9be:	dc10      	bgt.n	800c9e2 <__ieee754_sqrt+0x62>
 800c9c0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c9c4:	4330      	orrs	r0, r6
 800c9c6:	d0f5      	beq.n	800c9b4 <__ieee754_sqrt+0x34>
 800c9c8:	b15d      	cbz	r5, 800c9e2 <__ieee754_sqrt+0x62>
 800c9ca:	ee10 2a10 	vmov	r2, s0
 800c9ce:	462b      	mov	r3, r5
 800c9d0:	ee10 0a10 	vmov	r0, s0
 800c9d4:	f7f3 fc50 	bl	8000278 <__aeabi_dsub>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	f7f3 ff2e 	bl	800083c <__aeabi_ddiv>
 800c9e0:	e7e6      	b.n	800c9b0 <__ieee754_sqrt+0x30>
 800c9e2:	1509      	asrs	r1, r1, #20
 800c9e4:	d076      	beq.n	800cad4 <__ieee754_sqrt+0x154>
 800c9e6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c9ea:	07ce      	lsls	r6, r1, #31
 800c9ec:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c9f0:	bf5e      	ittt	pl
 800c9f2:	0fda      	lsrpl	r2, r3, #31
 800c9f4:	005b      	lslpl	r3, r3, #1
 800c9f6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c9fa:	0fda      	lsrs	r2, r3, #31
 800c9fc:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ca00:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ca04:	2000      	movs	r0, #0
 800ca06:	106d      	asrs	r5, r5, #1
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	f04f 0e16 	mov.w	lr, #22
 800ca0e:	4684      	mov	ip, r0
 800ca10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca14:	eb0c 0401 	add.w	r4, ip, r1
 800ca18:	4294      	cmp	r4, r2
 800ca1a:	bfde      	ittt	le
 800ca1c:	1b12      	suble	r2, r2, r4
 800ca1e:	eb04 0c01 	addle.w	ip, r4, r1
 800ca22:	1840      	addle	r0, r0, r1
 800ca24:	0052      	lsls	r2, r2, #1
 800ca26:	f1be 0e01 	subs.w	lr, lr, #1
 800ca2a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ca2e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ca32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca36:	d1ed      	bne.n	800ca14 <__ieee754_sqrt+0x94>
 800ca38:	4671      	mov	r1, lr
 800ca3a:	2720      	movs	r7, #32
 800ca3c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ca40:	4562      	cmp	r2, ip
 800ca42:	eb04 060e 	add.w	r6, r4, lr
 800ca46:	dc02      	bgt.n	800ca4e <__ieee754_sqrt+0xce>
 800ca48:	d113      	bne.n	800ca72 <__ieee754_sqrt+0xf2>
 800ca4a:	429e      	cmp	r6, r3
 800ca4c:	d811      	bhi.n	800ca72 <__ieee754_sqrt+0xf2>
 800ca4e:	2e00      	cmp	r6, #0
 800ca50:	eb06 0e04 	add.w	lr, r6, r4
 800ca54:	da43      	bge.n	800cade <__ieee754_sqrt+0x15e>
 800ca56:	f1be 0f00 	cmp.w	lr, #0
 800ca5a:	db40      	blt.n	800cade <__ieee754_sqrt+0x15e>
 800ca5c:	f10c 0801 	add.w	r8, ip, #1
 800ca60:	eba2 020c 	sub.w	r2, r2, ip
 800ca64:	429e      	cmp	r6, r3
 800ca66:	bf88      	it	hi
 800ca68:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ca6c:	1b9b      	subs	r3, r3, r6
 800ca6e:	4421      	add	r1, r4
 800ca70:	46c4      	mov	ip, r8
 800ca72:	0052      	lsls	r2, r2, #1
 800ca74:	3f01      	subs	r7, #1
 800ca76:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ca7a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ca7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca82:	d1dd      	bne.n	800ca40 <__ieee754_sqrt+0xc0>
 800ca84:	4313      	orrs	r3, r2
 800ca86:	d006      	beq.n	800ca96 <__ieee754_sqrt+0x116>
 800ca88:	1c4c      	adds	r4, r1, #1
 800ca8a:	bf13      	iteet	ne
 800ca8c:	3101      	addne	r1, #1
 800ca8e:	3001      	addeq	r0, #1
 800ca90:	4639      	moveq	r1, r7
 800ca92:	f021 0101 	bicne.w	r1, r1, #1
 800ca96:	1043      	asrs	r3, r0, #1
 800ca98:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ca9c:	0849      	lsrs	r1, r1, #1
 800ca9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800caa2:	07c2      	lsls	r2, r0, #31
 800caa4:	bf48      	it	mi
 800caa6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800caaa:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800caae:	460c      	mov	r4, r1
 800cab0:	463d      	mov	r5, r7
 800cab2:	e77f      	b.n	800c9b4 <__ieee754_sqrt+0x34>
 800cab4:	0ada      	lsrs	r2, r3, #11
 800cab6:	3815      	subs	r0, #21
 800cab8:	055b      	lsls	r3, r3, #21
 800caba:	2a00      	cmp	r2, #0
 800cabc:	d0fa      	beq.n	800cab4 <__ieee754_sqrt+0x134>
 800cabe:	02d7      	lsls	r7, r2, #11
 800cac0:	d50a      	bpl.n	800cad8 <__ieee754_sqrt+0x158>
 800cac2:	f1c1 0420 	rsb	r4, r1, #32
 800cac6:	fa23 f404 	lsr.w	r4, r3, r4
 800caca:	1e4d      	subs	r5, r1, #1
 800cacc:	408b      	lsls	r3, r1
 800cace:	4322      	orrs	r2, r4
 800cad0:	1b41      	subs	r1, r0, r5
 800cad2:	e788      	b.n	800c9e6 <__ieee754_sqrt+0x66>
 800cad4:	4608      	mov	r0, r1
 800cad6:	e7f0      	b.n	800caba <__ieee754_sqrt+0x13a>
 800cad8:	0052      	lsls	r2, r2, #1
 800cada:	3101      	adds	r1, #1
 800cadc:	e7ef      	b.n	800cabe <__ieee754_sqrt+0x13e>
 800cade:	46e0      	mov	r8, ip
 800cae0:	e7be      	b.n	800ca60 <__ieee754_sqrt+0xe0>
 800cae2:	bf00      	nop
 800cae4:	7ff00000 	.word	0x7ff00000

0800cae8 <__ieee754_asinf>:
 800cae8:	b538      	push	{r3, r4, r5, lr}
 800caea:	ee10 5a10 	vmov	r5, s0
 800caee:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800caf2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800caf6:	ed2d 8b04 	vpush	{d8-d9}
 800cafa:	d10c      	bne.n	800cb16 <__ieee754_asinf+0x2e>
 800cafc:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800cc74 <__ieee754_asinf+0x18c>
 800cb00:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800cc78 <__ieee754_asinf+0x190>
 800cb04:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cb08:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cb0c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb10:	ecbd 8b04 	vpop	{d8-d9}
 800cb14:	bd38      	pop	{r3, r4, r5, pc}
 800cb16:	dd04      	ble.n	800cb22 <__ieee754_asinf+0x3a>
 800cb18:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cb1c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cb20:	e7f6      	b.n	800cb10 <__ieee754_asinf+0x28>
 800cb22:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800cb26:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800cb2a:	da0b      	bge.n	800cb44 <__ieee754_asinf+0x5c>
 800cb2c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800cb30:	da52      	bge.n	800cbd8 <__ieee754_asinf+0xf0>
 800cb32:	eddf 7a52 	vldr	s15, [pc, #328]	; 800cc7c <__ieee754_asinf+0x194>
 800cb36:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cb3a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800cb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb42:	dce5      	bgt.n	800cb10 <__ieee754_asinf+0x28>
 800cb44:	f000 f8cc 	bl	800cce0 <fabsf>
 800cb48:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800cb4c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800cb50:	ee20 8a08 	vmul.f32	s16, s0, s16
 800cb54:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800cc80 <__ieee754_asinf+0x198>
 800cb58:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800cc84 <__ieee754_asinf+0x19c>
 800cb5c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800cc88 <__ieee754_asinf+0x1a0>
 800cb60:	eea8 7a27 	vfma.f32	s14, s16, s15
 800cb64:	eddf 7a49 	vldr	s15, [pc, #292]	; 800cc8c <__ieee754_asinf+0x1a4>
 800cb68:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cb6c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800cc90 <__ieee754_asinf+0x1a8>
 800cb70:	eea7 7a88 	vfma.f32	s14, s15, s16
 800cb74:	eddf 7a47 	vldr	s15, [pc, #284]	; 800cc94 <__ieee754_asinf+0x1ac>
 800cb78:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cb7c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800cc98 <__ieee754_asinf+0x1b0>
 800cb80:	eea7 9a88 	vfma.f32	s18, s15, s16
 800cb84:	eddf 7a45 	vldr	s15, [pc, #276]	; 800cc9c <__ieee754_asinf+0x1b4>
 800cb88:	eee8 7a07 	vfma.f32	s15, s16, s14
 800cb8c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800cca0 <__ieee754_asinf+0x1b8>
 800cb90:	eea7 7a88 	vfma.f32	s14, s15, s16
 800cb94:	eddf 7a43 	vldr	s15, [pc, #268]	; 800cca4 <__ieee754_asinf+0x1bc>
 800cb98:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cb9c:	eeb0 0a48 	vmov.f32	s0, s16
 800cba0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800cba4:	f000 f886 	bl	800ccb4 <__ieee754_sqrtf>
 800cba8:	4b3f      	ldr	r3, [pc, #252]	; (800cca8 <__ieee754_asinf+0x1c0>)
 800cbaa:	ee29 9a08 	vmul.f32	s18, s18, s16
 800cbae:	429c      	cmp	r4, r3
 800cbb0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800cbb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cbb8:	dd3d      	ble.n	800cc36 <__ieee754_asinf+0x14e>
 800cbba:	eea0 0a06 	vfma.f32	s0, s0, s12
 800cbbe:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800ccac <__ieee754_asinf+0x1c4>
 800cbc2:	eee0 7a26 	vfma.f32	s15, s0, s13
 800cbc6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800cc78 <__ieee754_asinf+0x190>
 800cbca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cbce:	2d00      	cmp	r5, #0
 800cbd0:	bfd8      	it	le
 800cbd2:	eeb1 0a40 	vnegle.f32	s0, s0
 800cbd6:	e79b      	b.n	800cb10 <__ieee754_asinf+0x28>
 800cbd8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800cbdc:	eddf 6a28 	vldr	s13, [pc, #160]	; 800cc80 <__ieee754_asinf+0x198>
 800cbe0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800cc84 <__ieee754_asinf+0x19c>
 800cbe4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800cc98 <__ieee754_asinf+0x1b0>
 800cbe8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800cbec:	eddf 6a27 	vldr	s13, [pc, #156]	; 800cc8c <__ieee754_asinf+0x1a4>
 800cbf0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cbf4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800cc90 <__ieee754_asinf+0x1a8>
 800cbf8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cbfc:	eddf 6a25 	vldr	s13, [pc, #148]	; 800cc94 <__ieee754_asinf+0x1ac>
 800cc00:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cc04:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800cc88 <__ieee754_asinf+0x1a0>
 800cc08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cc0c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800cc9c <__ieee754_asinf+0x1b4>
 800cc10:	eee7 6a86 	vfma.f32	s13, s15, s12
 800cc14:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800cca0 <__ieee754_asinf+0x1b8>
 800cc18:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800cc1c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800cca4 <__ieee754_asinf+0x1bc>
 800cc20:	eee6 6a27 	vfma.f32	s13, s12, s15
 800cc24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc28:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800cc2c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800cc30:	eea0 0a27 	vfma.f32	s0, s0, s15
 800cc34:	e76c      	b.n	800cb10 <__ieee754_asinf+0x28>
 800cc36:	ee10 3a10 	vmov	r3, s0
 800cc3a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cc3e:	f023 030f 	bic.w	r3, r3, #15
 800cc42:	ee07 3a10 	vmov	s14, r3
 800cc46:	eea7 8a47 	vfms.f32	s16, s14, s14
 800cc4a:	ee70 7a07 	vadd.f32	s15, s0, s14
 800cc4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cc52:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800cc56:	eddf 7a07 	vldr	s15, [pc, #28]	; 800cc74 <__ieee754_asinf+0x18c>
 800cc5a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800cc5e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800cc62:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800ccb0 <__ieee754_asinf+0x1c8>
 800cc66:	eeb0 6a40 	vmov.f32	s12, s0
 800cc6a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800cc6e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cc72:	e7aa      	b.n	800cbca <__ieee754_asinf+0xe2>
 800cc74:	b33bbd2e 	.word	0xb33bbd2e
 800cc78:	3fc90fdb 	.word	0x3fc90fdb
 800cc7c:	7149f2ca 	.word	0x7149f2ca
 800cc80:	3811ef08 	.word	0x3811ef08
 800cc84:	3a4f7f04 	.word	0x3a4f7f04
 800cc88:	3e2aaaab 	.word	0x3e2aaaab
 800cc8c:	bd241146 	.word	0xbd241146
 800cc90:	3e4e0aa8 	.word	0x3e4e0aa8
 800cc94:	bea6b090 	.word	0xbea6b090
 800cc98:	3d9dc62e 	.word	0x3d9dc62e
 800cc9c:	bf303361 	.word	0xbf303361
 800cca0:	4001572d 	.word	0x4001572d
 800cca4:	c019d139 	.word	0xc019d139
 800cca8:	3f799999 	.word	0x3f799999
 800ccac:	333bbd2e 	.word	0x333bbd2e
 800ccb0:	3f490fdb 	.word	0x3f490fdb

0800ccb4 <__ieee754_sqrtf>:
 800ccb4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ccb8:	4770      	bx	lr

0800ccba <fabs>:
 800ccba:	ec51 0b10 	vmov	r0, r1, d0
 800ccbe:	ee10 2a10 	vmov	r2, s0
 800ccc2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccc6:	ec43 2b10 	vmov	d0, r2, r3
 800ccca:	4770      	bx	lr
 800cccc:	0000      	movs	r0, r0
	...

0800ccd0 <nan>:
 800ccd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ccd8 <nan+0x8>
 800ccd4:	4770      	bx	lr
 800ccd6:	bf00      	nop
 800ccd8:	00000000 	.word	0x00000000
 800ccdc:	7ff80000 	.word	0x7ff80000

0800cce0 <fabsf>:
 800cce0:	ee10 3a10 	vmov	r3, s0
 800cce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cce8:	ee00 3a10 	vmov	s0, r3
 800ccec:	4770      	bx	lr
	...

0800ccf0 <nanf>:
 800ccf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ccf8 <nanf+0x8>
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	7fc00000 	.word	0x7fc00000

0800ccfc <_init>:
 800ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfe:	bf00      	nop
 800cd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd02:	bc08      	pop	{r3}
 800cd04:	469e      	mov	lr, r3
 800cd06:	4770      	bx	lr

0800cd08 <_fini>:
 800cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0a:	bf00      	nop
 800cd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd0e:	bc08      	pop	{r3}
 800cd10:	469e      	mov	lr, r3
 800cd12:	4770      	bx	lr
